var documenterSearchIndex = {"docs":
[{"location":"Guides/Developer Guide/1_introduction/#Developer-Guides","page":"Developer Guides","title":"Developer Guides","text":"","category":"section"},{"location":"Guides/Developer Guide/1_introduction/","page":"Developer Guides","title":"Developer Guides","text":"This section provides an overview of the package’s internal structure, development workflow, and best practices for contributing. Whether you’re fixing a bug, adding a new feature, or improving documentation, this guide will help you navigate the codebase efficiently.","category":"page"},{"location":"Guides/Developer Guide/1_introduction/","page":"Developer Guides","title":"Developer Guides","text":"","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/#modeler_create_asset","page":"Creating a New Asset","title":"Creating a New Asset","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The main design principle of Macro is to allow modelers to easily extend the model with new assets. Indeed, thanks to the graph-based representation, assets can be quickly assembled by connecting Transformations, Edges, Storages components and/or other assets. ","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"tip: Macro Asset Library\nBefore creating a new asset, we recommend reviewing existing assets in the src/model/assets folder and the Macro Asset Library. All asset files follow a consistent structure to facilitate the creation of new assets.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/#Overview","page":"Creating a New Asset","title":"Overview","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"MacroEnergy.jl is designed to be a flexible and modular energy system modeling framework that allows users to easily extend the model with new assets. Assets in Macro are built using a graph-based representation consisting of three fundamental components:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Transformations - Represent conversion processes between commodities\nEdges - Represent commodity flows between components  \nStorage - Represent energy storage capabilities","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/#Prerequisites","page":"Creating a New Asset","title":"Prerequisites","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Before creating a new asset, we recommend:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Reviewing existing assets in the src/model/assets folder\nReading the Macro Asset Library documentation\nFamiliarizing yourself with the graph-based representation concept\nUnderstand the commodity types available in your system","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/#Quick-Start","page":"Creating a New Asset","title":"Quick Start","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"To create a new asset (e.g. MyNewAsset), follow these steps:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Design the asset: Design the asset by defining its commodity inflows and outflows, conversion processes, and storage components.\n(Recommended) Draw a diagram of the asset: Create a diagram of the asset to visualize its components and their connections. Each component will be implemented as a Macro Transformation (conversion process), Edge (commodity flow), or Storage (storage unit).\nDetermine which components (Edges and Storages) will have capacity variables for expansion and retirement during optimization: This is important for the optimization process.\nCreate a new Julia file: Create a new Julia file named mynewasset.jl in the src/model/assets folder. This file will contain the asset definition and the make function to construct the asset from input data. The following sections will guide you through the file creation process.\nInclude the new asset file: Add the following line to the src/MacroEnergy.jl file to include your new asset:\ninclude(\"model/assets/mynewasset.jl\")\nsimilar to how other asset files are included.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The following sections will expand on each of the steps above.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/#Step-1:-Design-the-new-asset","page":"Creating a New Asset","title":"Step 1: Design the new asset","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The first step in creating a new asset is to design its internal components, including transformations, edges, and storage units, and define how they connect to each other.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"For this step, it is useful to draw a diagram of the asset to visualize the components and their connections, similar to the ones shown in the Macro Asset Library.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"note: Macro Components\nMacro components (Transformation, Edge, and Storage) are abstract representations of the asset's functionality in the graph-based system, as described in the previous section, and do not represent real-world components.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Example: Below is the diagram of the Electrolyzer asset:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"<img width=\"300\" src=\"../../images/electrolyzer.png\" />","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"which, as you can see, it's made of the following \"primary\" components:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"1 Transformation\n2 Edge components:\n1 incoming Electricity Edge\n1 outgoing Hydrogen Edge","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/#Step-2:-Create-the-new-asset-file","page":"Creating a New Asset","title":"Step 2: Create the new asset file","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"note: File Structure\nRemember to place the new asset file in the src/model/assets folder.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The new asset file should include the following:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"A struct definition for the asset, inheriting from AbstractAsset.\ndefault_data, full_default_data, and simple_default_data functions to define the default data for the asset.\nA make function to construct the asset from input data.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/#2.1-Define-the-asset-type","page":"Creating a New Asset","title":"2.1 Define the asset type","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Defining a new asset type in Macro is straightforward. You simply need to define a new struct at the top of the file as a subtype of AbstractAsset.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"struct MyNewAsset <: AbstractAsset\n    # ... asset structure will go here ...\nend","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Following the diagram of the new asset drawn in the previous step, fill in the fields of the struct with the appropriate components:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"struct MyNewAsset <: AbstractAsset\n    id::AssetId\n    transform::Transformation\n    edge1::Edge{CommodityType1}\n    edge2::Edge{CommodityType2}\n    # ... additional asset structure components ...\nend","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"For example, here is the struct definition of the Electrolyzer asset:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"src/model/assets/electrolyzer.jl","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"struct Electrolyzer <: AbstractAsset\n    id::AssetId\n    electrolyzer_transform::Transformation\n    h2_edge::Edge{Hydrogen}\n    elec_edge::Edge{Electricity}\nend","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"You can find more examples by examining the struct definitions in the .jl files within the src/model/assets folder.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/#2.2-Define-the-default-data-functions","page":"Creating a New Asset","title":"2.2 Define the default data functions","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The default_data, full_default_data, and simple_default_data functions are used to define the default data for the new asset. This is particularly important for having the correct data setup when creating the asset. ","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"1. default_data","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The default_data is a helper function that returns a dictionary (an OrderedDict to be precise) with the data in the \"full\" or \"simple\" format. When creating a new asset, simply add the following lines to the file (replace MyNewAsset with the name of the asset being created):","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"function default_data(t::Type{MyNewAsset}, id=missing, style=\"full\")\n    if style == \"full\"\n        return full_default_data(t, id)\n    else\n        return simple_default_data(t, id)\n    end\nend","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"2. full_default_data","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Here's a detailed breakdown of how to construct the full_default_data function:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Function Signature:\nfunction full_default_data(::Type{MyNewAsset}, id=missing)\nTakes the asset type as a type parameter\nTakes an optional id parameter that defaults to missing\nReturn Structure","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The function returns an OrderedDict{Symbol,Any} with the following main sections:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"return OrderedDict{Symbol,Any}(\n    :id => id,\n    # sections depending on the asset structure\n    :transforms => @transform_data(...),    # If asset has transformations\n    :edges => Dict{Symbol,Any}(             # If asset has edges\n        :edge_name_1 => @edge_data(...),\n        :edge_name_2 => @edge_data(...),\n        # ... additional edges ...\n    ),\n    :storage => @storage_data(...)          # If asset has storage\n)","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"note: Default Data\nThe @transform_data, @edge_data, and @storage_data macros are used to define the data for the transformation, edge, and storage unit respectively and to merge the data with the default values for each component. For the list of all default data, see the default data file.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Copy and paste the relevant sections of the above code and modify them to fit the asset structure:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Transform Section","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The :transforms section uses the @transform_data macro to define transformation properties:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"    :transforms => @transform_data(\n        :timedata => \"CommodityType\",  # The commodity type to use for time resolution\n        :constraints => Dict{Symbol, Bool}(  # Default/required constraints\n            :BalanceConstraint => true,\n            # Add other constraints as needed\n        ),\n        # Add transformation-specific parameters\n        :parameter_name => default_value,\n    )","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Edges Section","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The :edges section defines all edges in the asset using the @edge_data macro:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"    :edges => Dict{Symbol,Any}(\n        :edge_name => @edge_data(\n            :commodity => \"CommodityType\",  # The commodity type flowing through this edge\n            :has_capacity => true,    # `edge_name` will have capacity variables by default\n            :can_expand => true,      # `edge_name` can expand\n            :can_retire => true,      # `edge_name` can retire\n            :constraints => Dict{Symbol, Bool}(  # Edge-specific constraints\n                :CapacityConstraint => true,\n                # Add other constraints as needed\n            ),\n            # Add edge-specific parameters\n            :parameter_name => default_value,\n        ),\n        # Add more edges as needed\n    )","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Storage Section (if applicable)","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"If the asset includes storage, add a storage section:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"    :storage => @storage_data(\n        :commodity => \"CommodityType\",\n        :constraints => Dict{Symbol, Bool}(\n            :StorageCapacityConstraint => true,\n            # Add other storage constraints\n        ),\n        # Add storage-specific parameters\n        :parameter_name => default_value,\n    )","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"As seen above, some common parameters you might need to include are:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"For transformations:\n:timedata - Time resolution of the time series data. Common choice is \"Electricity\"\n:constraints - Required constraints\nstoichiometric_coefficients - Stoichiometric coefficients for the transformation (e.g. :fuel_consumption, :emission_rate, etc.)\nFor edges:\n:commodity - The commodity type flowing through the edge\n:has_capacity - To specify that a particular edge has capacity variables\n:can_expand - To specify that a particular edge can expand\n:can_retire - To specify that a particular edge can retire\n:constraints - Edge-specific constraints","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Example Implementation","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Here's an example implementation based on the Electrolyzer asset:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"function full_default_data(::Type{Electrolyzer}, id=missing)\n    return OrderedDict{Symbol,Any}(\n        :id => id,\n        :transforms => @transform_data(\n            :timedata => \"Electricity\",\n            :constraints => Dict{Symbol, Bool}(\n                :BalanceConstraint => true,\n            ),\n            :efficiency_rate => 0.0\n        ),\n        :edges => Dict{Symbol,Any}(\n            :h2_edge => @edge_data(\n                :commodity => \"Hydrogen\",\n                :has_capacity => true,\n                :can_retire => true,\n                :can_expand => true,\n                :can_retire => true,\n                :constraints => Dict{Symbol, Bool}(\n                    :CapacityConstraint => true,\n                ),\n            ),\n            :elec_edge => @edge_data(\n                :commodity => \"Electricity\",\n            ),\n        ),\n    )\nend","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"As can be seen above, the default data for the Electrolyzer asset includes:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"A Transformation component with the :timedata set to \"Electricity\", :constraints set to :BalanceConstraint and an :efficiency_rate set to 0.0.\nA Hydrogen Edge with capacity variables and the ability to expand and retire by default.\nAn Electricity Edge with no capacity variables.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"3. simple_default_data","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"As mentioned above, the simple_default_data function returns a compact version of the default data dictionary. The main difference with the full_default_data function is that the dictionary that is returned doesn't include sub-dictionaries for the :transforms, :edges, and :storage sections, and all the data is included in the top-level dictionary.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The function signature is the same as the full_default_data function, but the return structure is different:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"function simple_default_data(::Type{MyNewAsset}, id=missing)\n    return OrderedDict{Symbol,Any}(\n        :id => id,\n        :parameter_name => default_value,\n        # ... additional parameters ...\n    )\nend","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"As an example, here's the simple_default_data function for the Electrolyzer asset:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"function simple_default_data(::Type{Electrolyzer}, id=missing)\n    return OrderedDict{Symbol,Any}(\n        :id => id,\n        :location => missing,\n        :can_expand => true,\n        :can_retire => true,\n        :existing_capacity => 0.0,\n        :capacity_size => 1.0,\n        :efficiency_rate => 0.0,\n        :investment_cost => 0.0,\n        :fixed_om_cost => 0.0,\n        :variable_om_cost => 0.0,\n    )\nend","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/#2.3-Define-the-make-function","page":"Creating a New Asset","title":"2.3 Define the make function","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The make function is used to tell Macro how to create an instance of the new asset. It is a crucial step for the following tasks:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Reading the relevant sections of the input file and constructing each component of the asset (e.g. Transformation, Edge, Storage)\nIncorporating modeling choices or default behaviors (e.g. linking edges to the correct nodes)\nCreating the stoichiometric equations for the conversion processes happening in the asset (see the balance_data attribute of the Transformation and Storage components described in the Stoichiometric Coefficients section below)","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"1. Function Signature","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Let's start by looking at the function signature:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"function make(asset_type::Type{MyNewAsset}, data::AbstractDict{Symbol,Any}, system::System)\n    # ... implementation details ...\nend","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The make function takes three arguments:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"asset_type::Type{MyNewAsset}: The type of the asset to be created (i.e. MyNewAsset)\ndata::AbstractDict{Symbol,Any}: A dictionary containing the input data for the asset.\nsystem::System: The system in which the asset is being added.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"2. Return Structure","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The function should return an instance of the asset:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"function make(asset_type::Type{MyNewAsset}, data::AbstractDict{Symbol,Any}, system::System)\n    # ... implementation details ...\n    return MyNewAsset(id, transform, edge1, edge2, # ... additional components ...)\nend","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"3. Implementation","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The body of the make function can be broken down into five main blocks:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"ID Setup – Assigning a unique identifier to the asset\nData Setup – Loading and organizing default input data\nComponent Creation – Building each component (e.g., transformations, edges, etc.)\nStoichiometric Coefficients Setup – Defining the stoichiometric equations for the asset's balance equations\nAsset creation – Constructing the asset","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Let's break down each block separately and see how to implement them.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/#2.3.1-ID-Setup","page":"Creating a New Asset","title":"2.3.1 ID Setup","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The first block of the make function is the ID setup. It reads the :id key from the input data and creates a unique identifier for the asset (of type AssetId).","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"id = AssetId(data[:id])","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/#2.3.2-Data-Setup","page":"Creating a New Asset","title":"2.3.2 Data Setup","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The second block of the make function is the data setup. It prepares the input data for the rest of the function and loads all default data for the asset.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"@setup_data(asset_type, data, id)","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/#2.3.3-Component-Creation","page":"Creating a New Asset","title":"2.3.3 Component Creation","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The third block of the make function is the component creation. It builds each component of the asset separately, and prepares the Edges, Transformation, and Storage to be used in final asset creation.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"tip: Modeling Choices\nIn this step, modelers can make modeling choices, setting default values for missing data and constraints, linking edges to the correct nodes, and more. See the asset files in the src/model/assets folder for examples.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Each component creation is made of the following steps (we will use the Electrolyzer asset as an example):","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Key assignment","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Add a line to assign the key for the component to a new variable of type Symbol. This key is used to load the correct portion of the data corresponding to the component being created.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"warning: Key Assignment\nMake sure to match the key used in the both the full_default_data function and the JSON input file to group the data for the corresponding component.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"For instance, in the Electrolyzer asset, the key for the transformation used in the full_default_data function and the JSON input file is :transforms. So, the following line is added to the make function:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"electrolyzer_key = :transforms","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The keys for the other components of the Electrolyzer asset are assigned in a similar way:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"elec_edge_key = :elec_edge\n# ...\nh2_edge_key = :h2_edge","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Input data loading","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"This step invokes the @process_data macro to load the input data for each component from the JSON input file. The macro takes three arguments:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The variable to store the processed data.\nThe section of the input data to process (e.g, data[component_key]).\nA list of tuples containing the data and the key to search for in the input data.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Here is an example of how the @process_data macro works for the Electrolyzer asset:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"@process_data(\n    transform_data,          # The variable to store the processed data\n    data[electrolyzer_key],  # The section of the input data to process\n    [\n        (data[electrolyzer_key], key),\n        (data[electrolyzer_key], Symbol(\"transform_\", key)),\n        (data, Symbol(\"transform_\", key)),\n        (data, key),\n    ]\n)","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"In particular, for each key in the default data, the macro will look for a match in the input data in the following order:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Check if the transforms section of the JSON input file (i.e., data[\"transforms\"]) contains the key.\nCheck if the transforms section of the JSON input file (i.e., data[\"transforms\"]) contains the key with the prefix transform_ (e.g. transform_constraints).\nCheck if the data section of the input data (i.e., the top-level of the JSON input file) contains the key with the prefix transform_ (e.g. transform_constraints). Note: This is very important for the reduced data format, where all the data is at the top-level.\nCheck if the data section of the input data contains the key.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The macro will look for data in each source in sequence, using the first value it finds. This allows for flexible data specification with fallback options.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"This is another example of a component creation for the hydrogen edge of the Electrolyzer asset:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"h2_edge_key = :h2_edge  # The key for the hydrogen edge in the input data\n@process_data(\n    h2_edge_data, \n    data[:edges][h2_edge_key],  # The section of the input data to process\n    [\n        (data[:edges][h2_edge_key], key),\n        (data[:edges][h2_edge_key], Symbol(\"h2_\", key)),\n        (data, Symbol(\"h2_\", key)),\n        (data, key),\n    ]\n)","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Vertex assignment (for edges)","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"This step assigns the correct nodes, transformation, or storage unit to each edge (in Macro, these three components are also called Vertices, see Macro Internal Components for more details).","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"When assigning vertices to edges, two cases can happen:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The edge is connected to an asset component defined earlier in the make function (e.g. a transformation or a storage unit).\nThe edge is connected to an external Node, which is defined outside of the asset in the nodes JSON file.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"In the first case, simply create a new variable with the name of the component and assign it to the component.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"# The vertex is the transformation itself (look at the diagram above)\nelec_end_node = electrolyzer_transform\n# ...\nh2_start_node = electrolyzer_transform  ","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"elec_end_node and h2_start_node will now contain the transformation that must be connected to the electricity and hydrogen edges respectively.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"In the second case, the vertex is an external Node. The id of the node must be listed in the edge data of the JSON input file using the :locations key or start_vertex/end_vertex keys. Macro provides two macros, @start_vertex and @end_vertex, to find the correct node in the system and store it in a variable.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The @start_vertex and @end_vertex macros take four arguments:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The variable to store the node.\nThe edge data.\nThe commodity type of the edge.\nA list of tuples containing the edge data and the key to search for in the JSON input file.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Here is an example for the electricity edge of the Electrolyzer asset:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"@start_vertex(\n    elec_start_node,\n    elec_edge_data,\n    Electricity,\n    [(elec_edge_data, :start_vertex), (data, :location)],\n)","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The elec_start_node variable will now contain the node that must be connected to the electricity edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"This is the example for the hydrogen edge of the Electrolyzer asset:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"@end_vertex(\n    h2_end_node,\n    h2_edge_data,\n    Hydrogen,\n    [(h2_edge_data, :end_vertex), (data, :location)],\n)","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The h2_end_node variable will now contain the node that must be connected to the hydrogen edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Instance creation","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The final step creates an instance of the edge, transformation, or storage unit and stores it in a variable. Use the Edge, Transformation, or Storage functions to create the corresponding instance.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"For example, here is how to create the transformation component for the Electrolyzer asset:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"electrolyzer_transform = Transformation(;\n    id = Symbol(id, \"_\", electrolyzer_key),  # The id of the transformation is the id of the asset plus the key of the transformation\n    timedata = system.time_data[Symbol(transform_data[:timedata])],\n    constraints = transform_data[:constraints],\n)","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"electrolyzer_transform is now an instance of the Transformation type and can, for example, be used in the Edge creation step as start_node and end_node (see below).","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Here is an example for the electricity edge of the Electrolyzer asset:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"elec_edge = Edge(\n    Symbol(id, \"_\", elec_edge_key),\n    elec_edge_data,\n    system.time_data[:Electricity],\n    Electricity,\n    elec_start_node,\n    elec_end_node,\n)","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Note the last two arguments of the Edge function:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"elec_start_node is a Node instance of type Electricity created using the @start_vertex macro.\nelec_end_node is the Transformation part of the asset created in the previous step.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Similarly, here is an example for the hydrogen edge of the Electrolyzer asset:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"h2_edge = Edge(\n    Symbol(id, \"_\", h2_edge_key),\n    h2_edge_data,\n    system.time_data[:Hydrogen],\n    Hydrogen,\n    h2_start_node,\n    h2_end_node,\n)","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"To summarize, this is the complete component creation step for the Transformation and Edge components of the Electrolyzer asset:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"# Transformation creation\nelectrolyzer_key = :transforms\n@process_data(\n    transform_data, \n    data[electrolyzer_key], \n    [\n        (data[electrolyzer_key], key),\n        (data[electrolyzer_key], Symbol(\"transform_\", key)),\n        (data, Symbol(\"transform_\", key)),\n        (data, key),\n    ]\n)\nelectrolyzer = Transformation(;\n    id = Symbol(id, \"_\", electrolyzer_key),\n    timedata = system.time_data[Symbol(transform_data[:timedata])],\n    constraints = transform_data[:constraints],\n)\n\n# Electricity edge creation\nelec_edge_key = :elec_edge\n@process_data(\n    elec_edge_data, \n    data[:edges][elec_edge_key], \n    [\n        (data[:edges][elec_edge_key], key),\n        (data[:edges][elec_edge_key], Symbol(\"elec_\", key)),\n        (data, Symbol(\"elec_\", key)),\n    ]\n)\n@start_vertex(\n    elec_start_node,\n    elec_edge_data,\n    Electricity,\n    [(elec_edge_data, :start_vertex), (data, :location)],\n)\nelec_end_node = electrolyzer\nelec_edge = Edge(\n    Symbol(id, \"_\", elec_edge_key),\n    elec_edge_data,\n    system.time_data[:Electricity],\n    Electricity,\n    elec_start_node,\n    elec_end_node,\n)\n\n# Hydrogen edge creation\nh2_edge_key = :h2_edge\n@process_data(\n    h2_edge_data, \n    data[:edges][h2_edge_key], \n    [\n        (data[:edges][h2_edge_key], key),\n        (data[:edges][h2_edge_key], Symbol(\"h2_\", key)),\n        (data, Symbol(\"h2_\", key)),\n        (data, key),\n    ]\n)\nh2_start_node = electrolyzer\n@end_vertex(\n    h2_end_node,\n    h2_edge_data,\n    Hydrogen,\n    [(h2_edge_data, :end_vertex), (data, :location)],\n)\nh2_edge = Edge(\n    Symbol(id, \"_\", h2_edge_key),\n    h2_edge_data,\n    system.time_data[:Hydrogen],\n    Hydrogen,\n    h2_start_node,\n    h2_end_node,\n)","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/#2.3.4-Balance-Data","page":"Creating a New Asset","title":"2.3.4 Balance Data","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"This step defines the stoichiometric equations for the balance equations of the transformations and defines the efficiency in charge and discharge of the storage units.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Transformations","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The stoichiometric equations are defined in the balance_data dictionary of the Transformation instance.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Here is an example for the Electrolyzer asset:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"electrolyzer_transform.balance_data = Dict(\n    :energy => Dict(\n        h2_edge.id => 1.0,\n        elec_edge.id => get(transform_data, :efficiency_rate, 1.0),\n    ),\n)","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"and the stoichiometric equation is:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"beginaligned\nphi_h2 = phi_elec cdot epsilon_efficiency \nendaligned","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"where phi_h2 is the flow of hydrogen, phi_elec is the flow of electricity, and epsilon_efficiency is the efficiency rate of the electrolyzer.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"warning: Balance Data Keys\nYou can define as many balance equations as needed. The only requirement is that the keys in the balance_data dictionaries (e.g. :energy, :emissions, etc.) must be unique. See the src/model/assets folder for more examples of balance data definitions.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Storage units","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The efficiency in charge and discharge of the storage units are defined in the balance_data dictionary of the Storage instance.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Example taken from the Battery asset:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"battery_storage.balance_data = Dict(\n    :storage => Dict(\n        battery_discharge.id => 1 / discharge_efficiency,\n        battery_charge.id => charge_efficiency,\n    ),\n)","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/#2.3.5-Asset-creation","page":"Creating a New Asset","title":"2.3.5 Asset creation","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"This is the final step of the make function. It integrates all components to construct and return the final asset. ","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"return MyNewAsset(id, transform, edge1, edge2, # ... all components ...)","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"warning: Positional arguments\nThe positional arguments of the asset constructor must match the order of the components in the asset struct definition. For example, if the asset struct is defined as struct ExampleAsset <: AbstractAsset\n    id::AssetId\n    transform::Transformation\n    edge1::Edge\n    edge2::Edge\nendthen the asset must be created as:return ExampleAsset(id, transform, edge1, edge2)","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"For example, here is how to create the Electrolyzer asset:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"return Electrolyzer(id, electrolyzer_transform, h2_edge, elec_edge)","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/#Key-Components-and-Concepts","page":"Creating a New Asset","title":"Key Components and Concepts","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/#[Transformations](@ref)","page":"Creating a New Asset","title":"Transformations","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Represent conversion processes between commodities\nHave stoichiometric equations defined in balance_data","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/#[Edges](@ref)","page":"Creating a New Asset","title":"Edges","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Represent commodity flows\nCan have capacity variables for optimization\nConnect to nodes, transformations, or storage units\nCan be configured for expansion/retirement","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/#[Storage](@ref)","page":"Creating a New Asset","title":"Storage","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Track energy levels over time\nCan have charge/discharge edges\nSupport various storage constraints","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/#[Constraints](@ref-macro_constraint_library)","page":"Creating a New Asset","title":"Constraints","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Common constraints include:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"BalanceConstraint - Ensures mass/energy balance\nCapacityConstraint - Limits capacity\nStorageCapacityConstraint - Limits storage capacity\nRampingLimitConstraint - Limits rate of change\nMinFlowConstraint - Sets minimum flow requirements","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/#Best-Practices","page":"Creating a New Asset","title":"Best Practices","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Follow existing patterns: Study similar assets in the codebase\nUse meaningful names: Choose descriptive names for components\nDocument constraints: Clearly specify which constraints apply\nTest thoroughly: Create example cases to validate your asset\nConsider efficiency: Define appropriate stoichiometric coefficients\nHandle edge cases: Consider what happens with missing data\nUse consistent naming: Follow the naming conventions used in existing assets\nValidate input data: Ensure your asset handles missing or invalid data gracefully","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/#Complete-Example:-MyNewAsset","page":"Creating a New Asset","title":"Complete Example: MyNewAsset","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Here's a simplified example of a complete asset implementation with two edges and a transformation (Electricity to Hydrogen):","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"# mynewasset.jl\nstruct MyNewAsset <: AbstractAsset\n    id::AssetId\n    transform::Transformation\n    input_edge::Edge{Electricity}\n    output_edge::Edge{Hydrogen}\nend\n\nfunction default_data(t::Type{MyNewAsset}, id=missing, style=\"full\")\n    if style == \"full\"\n        return full_default_data(t, id)\n    else\n        return simple_default_data(t, id)\n    end\nend\n\nfunction full_default_data(::Type{MyNewAsset}, id=missing)\n    return OrderedDict{Symbol,Any}(\n        :id => id,\n        :transforms => @transform_data(\n            :timedata => \"Electricity\",\n            :constraints => Dict{Symbol, Bool}(:BalanceConstraint => true),\n            :efficiency => 0.8,\n        ),\n        :edges => Dict{Symbol,Any}(\n            :input_edge => @edge_data(\n                :commodity => \"Electricity\",\n            ),\n            :output_edge => @edge_data(\n                :commodity => \"Hydrogen\",\n                :has_capacity => true,\n                :can_expand => true,\n                :can_retire => true,\n                :constraints => Dict{Symbol, Bool}(:CapacityConstraint => true),\n            ),\n        ),\n    )\nend\n\nfunction simple_default_data(::Type{MyNewAsset}, id=missing)\n    return OrderedDict{Symbol,Any}(\n        :id => id,\n        :location => missing,\n        :efficiency => 0.8,\n        :investment_cost => 0.0,\n        :fixed_om_cost => 0.0,\n        :variable_om_cost => 0.0,\n    )\nend\n\nfunction make(asset_type::Type{MyNewAsset}, data::AbstractDict{Symbol,Any}, system::System)\n    id = AssetId(data[:id])\n    @setup_data(asset_type, data, id)\n    \n    # Create transformation\n    transform_key = :transforms\n    @process_data(transform_data, data[transform_key], [\n        (data[transform_key], key),\n        (data[transform_key], Symbol(\"transform_\", key)),\n        (data, Symbol(\"transform_\", key)),\n        (data, key),\n    ])\n    transform = Transformation(;\n        id = Symbol(id, \"_\", transform_key),\n        timedata = system.time_data[Symbol(transform_data[:timedata])],\n        constraints = transform_data[:constraints],\n    )\n    \n    # Create input edge\n    input_key = :input_edge\n    @process_data(input_data, data[:edges][input_key], [\n        (data[:edges][input_key], key),\n        (data[:edges][input_key], Symbol(\"input_\", key)),\n        (data, Symbol(\"input_\", key)),\n    ])\n    @start_vertex(input_start_node, input_data, Electricity, [\n        (input_data, :start_vertex), (data, :location)\n    ])\n    input_end_node = transform\n    input_edge = Edge(\n        Symbol(id, \"_\", input_key),\n        input_data,\n        system.time_data[:Electricity],\n        Electricity,\n        input_start_node,\n        input_end_node,\n    )\n    \n    # Create output edge\n    output_key = :output_edge\n    @process_data(output_data, data[:edges][output_key], [\n        (data[:edges][output_key], key),\n        (data[:edges][output_key], Symbol(\"output_\", key)),\n        (data, Symbol(\"output_\", key)),\n    ])\n    output_start_node = transform\n    @end_vertex(output_end_node, output_data, Hydrogen, [\n        (output_data, :end_vertex), (data, :location)\n    ])\n    output_edge = Edge(\n        Symbol(id, \"_\", output_key),\n        output_data,\n        system.time_data[:Hydrogen],\n        Hydrogen,\n        output_start_node,\n        output_end_node,\n    )\n    \n    # Set up stoichiometric equations\n    efficiency = get(transform_data, :efficiency, 1.0)\n    transform.balance_data = Dict(\n        :energy => Dict(\n            output_edge.id => 1.0,\n            input_edge.id => efficiency,\n        ),\n    )\n    \n    return MyNewAsset(id, transform, input_edge, output_edge)\nend","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/#Testing-Your-Asset","page":"Creating a New Asset","title":"Testing Your Asset","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Create a test case based on the existing example cases.\nAdd realistic parameters to your input files\nRun the model to ensure it works correctly\nCheck results to verify the asset behaves as expected\nAdd constraints as needed for realistic operation","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/#Documentation","page":"Creating a New Asset","title":"Documentation","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Don't forget to:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Document your asset following the pattern in docs/src/Manual/assets/\nInclude a mermaid diagram showing the asset structure\nList all parameters and their units\nProvide examples of different configurations\nUpdate the asset library documentation","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"All these steps are covered in the Documenting an Asset guide.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/#Next-Steps","page":"Creating a New Asset","title":"Next Steps","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"We recommend reviewing the following sections in the Modeler Guide for additional guidance on how to efficiently develop and test new assets:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Documenting an Asset: A guide to documenting the new asset.\nCreating a New Example Case: A step-by-step guide to creating a new example case for testing and validation of the new asset.\nSuggested Development Workflow: A recommended workflow for developing new assets.\nDebugging and Testing Tips: Tips and best practices for debugging and testing new assets.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"","category":"page"},{"location":"Guides/User Guide/user_using_asset_libary/","page":"Exploring the Asset library","title":"Exploring the Asset library","text":"","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#modeler_add_docs_to_asset","page":"Documenting an Asset","title":"Adding Documentation for a New Asset","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"After creating a new asset implementation, it's important to document it properly so that other users can understand how to use it. This guide will walk you through creating a documentation page for your new asset that follows the same structure and format as existing assets in the Macro Asset Library.","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#Overview","page":"Documenting an Asset","title":"Overview","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Each asset in MacroEnergy.jl has a dedicated documentation page located in docs/src/Manual/assets/ that provides comprehensive information about the asset's functionality, configuration, and usage. The documentation follows a consistent template structure to ensure clarity and ease of use.","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#Prerequisites","page":"Documenting an Asset","title":"Prerequisites","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Before creating documentation for your asset, ensure you have:","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Successfully implemented your asset following the Creating a New Asset guide\nTested your asset to ensure it works correctly\nCreated a visual diagram of your asset's structure (recommended)","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#Documentation-Structure","page":"Documenting an Asset","title":"Documentation Structure","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Each asset documentation page follows a consistent structure with the following sections:","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Overview - Brief description of what the asset represents\nAsset Structure - Graphical representation showing components\nFlow Equations (where applicable) - Mathematical relationships between commodities\nInput File (Standard Format) - How to configure the asset\nTypes - Asset Structure - Julia type definition\nConstructors - Julia constructors for the asset\nExamples - Practical examples and use cases\nBest Practices - Guidelines for effective usage\nInput File (Advanced Format) - Advanced configuration options (optional)","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#Step-by-Step-Process","page":"Documenting an Asset","title":"Step-by-Step Process","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"warning: Code Examples\nThe following examples show how to document a new asset called MyNewAsset. This example asset contains a Transformation component and two Edge components (one for Electricity and one for Hydrogen). Make sure to adapt these examples to match your specific asset's structure and components.","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#Step-1:-Create-the-Documentation-File","page":"Documenting an Asset","title":"Step 1: Create the Documentation File","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Create a new markdown file in the docs/src/Manual/assets/ directory with a descriptive name following the pattern of existing assets:","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"# Example file names:\ndocs/src/Manual/assets/mynewasset.md\ndocs/src/Manual/assets/thermalpower.md\ndocs/src/Manual/assets/battery.md","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#Step-2:-Set-Up-the-Basic-Structure","page":"Documenting an Asset","title":"Step 2: Set Up the Basic Structure","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Start your documentation file with the following basic structure. Replace MyNewAsset and mynewasset with your actual asset name:","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"# My New Asset\n\n## Contents\n\n[Overview](@ref mynewasset_overview) | [Asset Structure](@ref mynewasset_asset_structure) | [Flow Equations](@ref mynewasset_flow_equations) | [Input File (Standard Format)](@ref mynewasset_input_file) | [Types - Asset Structure](@ref mynewasset_type_definition) | [Constructors](@ref mynewasset_constructors) | [Examples](@ref mynewasset_examples) | [Best Practices](@ref mynewasset_best_practices) | [Input File (Advanced Format)](@ref mynewasset_advanced_json_csv_input_format)\n\n## [Overview](@id mynewasset_overview)\n\nMy New Asset assets in Macro represent [specific technology or process] that [describe main function]. These assets are defined using either JSON or CSV input files placed in the `assets` directory, typically named with descriptive identifiers like `mynewasset.json` or `mynewasset.csv`.","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#Step-3:-Create-the-Asset-Structure-Section","page":"Documenting an Asset","title":"Step 3: Create the Asset Structure Section","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"This section should include a mermaid diagram showing your asset's components and their connections:","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"## [Asset Structure](@id mynewasset_asset_structure)\n\nA My New Asset asset consists of [X] main components:\n\n1. **Component 1**: Description of component\n2. **Component 2**: Description of component\n3. **Component 3**: Description of component\n\nHere is a graphical representation of the My New Asset asset:\n\n```mermaid\n%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph MyNewAsset\n  direction BT\n    A((Commodity1)) e1@-->B{{..}}\n    B e2@-->C((Commodity2))\n    e1@{ animate: true }\n    e2@{ animate: true }\n end\n    style A font-size:19px,r:55px,fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n    style B fill:black,stroke:black,color:black;\n    style C font-size:19px,r:55px,fill:lightblue,stroke:black,color:black,stroke-dasharray: 3,5;\n    linkStyle 0,1 stroke:#FFD700, stroke-width: 2px;\n```","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Mermaid Diagram Guidelines:","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Use consistent styling for different commodity types:\nElectricity: #FFD700 (gold)\nHydrogen: lightblue\nNatural Gas: #005F6A (dark blue-green)\nCO₂: lightgray\nBiomass: palegreen\nUse {{..}} for transformations\nUse [Storage] for storage components\nUse ((Commodity)) for external commodity nodes\nInclude animation with @{ animate: true }\nAdjust font and circle size to make the diagram more readable.","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Remember to update the mermaid diagram to match your asset's structure and components.","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#Step-4:-Add-Flow-Equations-(if-applicable)","page":"Documenting an Asset","title":"Step 4: Add Flow Equations (if applicable)","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"If your asset has mathematical relationships between flows, document them here:","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"## [Flow Equations](@id mynewasset_flow_equations)\n\nThe My New Asset asset follows these stoichiometric relationships:\n\n```math\n\\begin{aligned}\n\\phi_{input} &= \\phi_{output} \\cdot \\epsilon_{efficiency} \\\\\n\\phi_{emissions} &= \\phi_{input} \\cdot \\epsilon_{emission\\_rate} \\\\\n\\end{aligned}\n```\n\nWhere:\n- ``\\phi`` represents the flow of each commodity\n- ``\\epsilon`` represents the stoichiometric coefficients defined in the [Conversion Process Parameters](@ref mynewasset_conversion_process_parameters) section.","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Flow Equations Guidelines:","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Ensure the coefficient names in your equations (e.g., epsilon_efficiency) match the parameter names in your Conversion Process Parameters table (see Step 6: Document Parameters)\nUse phi_commodity_name for commodity flows\nUse epsilon_parameter_name for stoichiometric coefficients\nList all variables used in the equations with clear descriptions\nEnsure the equations are dimensionally consistent with the units specified in your parameter tables\nReference the parameter table where coefficients are defined","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Example: If your parameter table includes efficiency and emission_rate, your equations should use epsilon_efficiency and epsilon_emission_rate respectively.","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#Step-5:-Document-Input-File-Format","page":"Documenting an Asset","title":"Step 5: Document Input File Format","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"This is one of the most important sections. Document how users can configure your asset:","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"## [Input File (Standard Format)](@id mynewasset_input_file)\n\nThe easiest way to include a My New Asset asset in a model is to create a new file (either JSON or CSV) and place it in the `assets` directory together with the other assets. \n\n```\nyour_case/\n├── assets/\n│   ├── mynewasset.json    # or mynewasset.csv\n│   ├── other_assets.json\n│   └── ...\n├── system/\n├── settings/\n└── ...\n```\n\nThis file can either be created manually, or using the `template_asset` function, as shown in the [Adding an Asset to a System](@ref) section of the User Guide. The file will be automatically loaded when you run your Macro model. \n\nThe following is an example of a My New Asset asset input file:\n\n```json\n{\n    \"MyNewAsset\": [\n        {\n            \"type\": \"MyNewAsset\",\n            \"instance_data\": [\n                {\n                    \"id\": \"mynewasset_1_SE\",\n                    \"location\": \"SE\",\n                    \"efficiency\": 0.8,\n                    \"investment_cost\": 1000,\n                    \"fixed_om_cost\": 50,\n                    \"variable_om_cost\": 1\n                }\n            ]\n        }\n    ]\n}\n```\n\n!!! tip \"Global Data vs Instance Data\"\n    When working with JSON input files, the `global_data` field can be used to group data that is common to all instances of the same asset type. This is useful for setting constraints that are common to all instances of the same asset type and avoid repeating the same data for each instance. See the [Examples](@ref \"mynewasset_examples\") section below for an example.","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Remember to update the example to match your asset's structure and components. The example above is only for illustrative purposes.","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#mynewasset_parameters","page":"Documenting an Asset","title":"Step 6: Document Parameters","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Create comprehensive tables documenting all the parameters your asset accepts:","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"The following tables outline the attributes that can be set for a My New Asset asset.\n\n#### Essential Attributes\n| Field | Type | Description |\n|--------------|---------|------------|\n| `Type` | String | Asset type identifier: \"MyNewAsset\" |\n| `id` | String | Unique identifier for the asset instance |\n| `location` | String | Geographic location/node identifier |\n\n#### [Conversion Process Parameters](@id mynewasset_conversion_process_parameters)\n| Field | Type | Description | Units | Default |\n|--------------|---------|------------|----------------|----------|\n| `efficiency` | Float64 | Conversion efficiency | fraction | 1.0 |\n| `parameter_name` | Float64 | Description of parameter | units | default-value |\n\n#### Investment Parameters\n| Field | Type | Description | Units | Default |\n|--------------|---------|------------|----------------|----------|\n| `can_retire` | Boolean | Whether capacity can be retired | - | true |\n| `can_expand` | Boolean | Whether capacity can be expanded | - | true |\n| `existing_capacity` | Float64 | Initial installed capacity | MW | 0.0 |\n| `capacity_size` | Float64 | Unit size for capacity decisions | - | 1.0 |\n\n#### Economic Parameters\n| Field | Type | Description | Units | Default |\n|--------------|---------|------------|----------------|----------|\n| `investment_cost` | Float64 | CAPEX per unit capacity | \\$/MW | 0.0 |\n| `fixed_om_cost` | Float64 | Fixed O&M costs | \\$/MW/yr | 0.0 |\n| `variable_om_cost` | Float64 | Variable O&M costs | \\$/MWh | 0.0 |","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#Step-7:-Document-Constraints","page":"Documenting an Asset","title":"Step 7: Document Constraints","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Explain how constraints can be applied to your asset, and how to configure them. If some constraints are applied by default, explain them here.","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"#### [Constraints Configuration](@id \"mynewasset_constraints\")\nMy New Asset assets can have different constraints applied to them, and the user can configure them using the following fields:\n\n| Field | Type | Description |\n|--------------|---------|------------|\n| `transform_constraints` | Dict{String,Bool} | List of constraints applied to the transformation component. |\n| `input_constraints` | Dict{String,Bool} | List of constraints applied to the input edge component. |\n| `output_constraints` | Dict{String,Bool} | List of constraints applied to the output edge component. |\n\nFor example, if the user wants to apply the [`BalanceConstraint`](@ref balance_constraint_ref) to the transformation component and the [`CapacityConstraint`](@ref capacity_constraint_ref) to the input edge, the constraints fields should be set as follows:\n\n```json\n{\n    \"transform_constraints\": {\n        \"BalanceConstraint\": true\n    },\n    \"input_constraints\": {\n        \"CapacityConstraint\": true\n    }\n}\n```\n\nUsers can refer to the [Adding Asset Constraints to a System](@ref) section of the User Guide for a list of all the constraints that can be applied to the different components of a My New Asset asset.\n\n#### Default constraints\nTo simplify the input file and the asset configuration, the following constraints are applied to the My New Asset asset by default:\n\n- [Balance constraint](@ref balance_constraint_ref) (applied to the transformation component)\n- [Capacity constraint](@ref capacity_constraint_ref) (applied to the input edge)","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#Step-8:-Document-Type-Definition-and-Constructors","page":"Documenting an Asset","title":"Step 8: Document Type Definition and Constructors","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"## [Types - Asset Structure](@id mynewasset_type_definition)\n\nThe `MyNewAsset` asset is defined as follows:\n\n```julia\nstruct MyNewAsset <: AbstractAsset\n    id::AssetId\n    transform::Transformation\n    input_edge::Edge{Electricity}\n    output_edge::Edge{Hydrogen}\nend\n```\n\n## [Constructors](@id mynewasset_constructors)\n\n### Default constructor\n\n```julia\nMyNewAsset(id::AssetId, transform::Transformation, input_edge::Edge{Electricity}, output_edge::Edge{Hydrogen})\n```\n\n### Factory constructor\n```julia\nmake(asset_type::Type{MyNewAsset}, data::AbstractDict{Symbol,Any}, system::System)\n```\n\n| Field | Type | Description |\n|--------------|---------|------------|\n| `asset_type` | `Type{MyNewAsset}` | Macro type of the asset |\n| `data` | `AbstractDict{Symbol,Any}` | Dictionary containing the input data for the asset |\n| `system` | `System` | System to which the asset belongs |","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Again, make sure to update the code blocks to match your asset's structure and components.","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#Step-9:-Provide-Examples","page":"Documenting an Asset","title":"Step 9: Provide Examples","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Include practical examples showing different configurations:","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"## [Examples](@id mynewasset_examples)\n\nThis section contains examples of how to use the My New Asset asset in a Macro model.\n\n### Basic Configuration\n\nThis example shows a basic My New Asset configuration with standard parameters.\n\n**JSON Format:**\n```json\n{\n    \"MyNewAsset\": [\n        {\n            \"type\": \"MyNewAsset\",\n            \"instance_data\": [\n                {\n                    \"id\": \"mynewasset_1_SE\",\n                    \"location\": \"SE\",\n                    \"efficiency\": 0.8,\n                    \"investment_cost\": 1000,\n                    \"fixed_om_cost\": 50,\n                    \"variable_om_cost\": 1\n                }\n            ]\n        }\n    ]\n}\n```\n\n**CSV Format:**\n\n| Type | id | location | efficiency | investment_cost | fixed_om_cost | variable_om_cost |\n|------|----|----------|------------|------------------|-----------------|-------------------|\n| MyNewAsset | mynewasset_SE | SE | 0.8 | 1000 | 50 | 1 |\n\n### Advanced Configuration with Global Data\n\nThis example shows how to use global data to share common parameters across multiple instances.\n\n**JSON Format:**\n\n```json\n{\n    \"MyNewAsset\": [\n        {\n            \"type\": \"MyNewAsset\",\n            \"global_data\": {\n                \"investment_cost\": 1000,\n                \"fixed_om_cost\": 50,\n                \"variable_om_cost\": 1\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"mynewasset_1_SE\",\n                    \"location\": \"SE\",\n                    \"efficiency\": 0.8\n                },\n                {\n                    \"id\": \"mynewasset_2_SE\",\n                    \"location\": \"SE\",\n                    \"efficiency\": 0.85\n                }\n            ]\n        }\n    ]\n}\n```","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"note: Handling Special Characters\nWhen creating input files, especially in CSV format, pay attention to special characters like underscores (_). These characters might need to be escaped to prevent parsing errors. For example, the fixed_om_cost field should be written as fixed\\_om\\_cost to avoid being misinterpreted as italicized text.","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#Step-10:-Add-Best-Practices","page":"Documenting an Asset","title":"Step 10: Add Best Practices","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Include a section on best practices for using your asset. This helps users avoid common mistakes and use the asset effectively:","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"## [Best Practices](@id mynewasset_best_practices)\n\nWhen using My New Asset assets, consider the following best practices:\n\n1. **Efficiency Values**: Set realistic efficiency values based on technology specifications\n2. **Cost Parameters**: Use up-to-date cost data from reliable sources\n3. **Location Assignment**: Ensure locations correspond to existing nodes in your system\n4. **Capacity Planning**: Consider both existing and new capacity when setting parameters\n5. **Constraint Selection**: Choose constraints that reflect realistic operational limitations\n\n### Common Pitfalls to Avoid\n\n- **Missing Location**: Always specify a valid location for your asset\n- **Unrealistic Efficiency**: Avoid efficiency values above 1.0 or below 0.0\n- **Negative Costs**: Ensure all cost parameters are non-negative\n- **Missing Constraints**: Consider which constraints are necessary for realistic operation","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#Step-11:-Document-Advanced-Format-(optional)","page":"Documenting an Asset","title":"Step 11: Document Advanced Format (optional)","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"This section is optional but recommended as it provides examples of advanced asset configuration using detailed JSON and CSV data formats. It's particularly useful for advanced users who need full control over asset configuration.","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"## [Input File (Advanced Format)](@id mynewasset_advanced_json_csv_input_format)\n\nFor advanced users, the My New Asset asset supports additional configuration options:\n\n### Advanced JSON Configuration\n\n```json\n{\n    \"MyNewAsset\": [\n        {\n            \"type\": \"MyNewAsset\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"constraints\": {\n                    \"BalanceConstraint\": true,\n                    \"CustomConstraint\": true\n                },\n                \"edges\": {\n                    \"output_edge\": {\n                        \"commodity\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_retire\": true,\n                        \"can_expand\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true,\n                            \"MinFlowConstraint\": true\n                        }\n                    },\n                    \"input_edge\": {\n                        \"commodity\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"advanced_mynewasset_SE\",\n                    \"transforms\": {\n                        \"efficiency\": 0.8\n                    },\n                    \"edges\": {\n                        \"output_edge\": {\n                            \"end_vertex\": \"h2_SE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 1000,\n                            \"fixed_om_cost\": 50,\n                            \"variable_om_cost\": 1,\n                            \"capacity_size\": 1,\n                            \"ramp_up_fraction\": 0.5,\n                            \"ramp_down_fraction\": 0.5\n                        },\n                        \"input_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}\n```\n","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#Documentation-Best-Practices","page":"Documenting an Asset","title":"Documentation Best Practices","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#1.-**Be-Comprehensive**","page":"Documenting an Asset","title":"1. Be Comprehensive","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Document all parameters, even if they have default values\nInclude units for all parameters\nExplain what each parameter controls","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#2.-**Provide-Examples**","page":"Documenting an Asset","title":"2. Provide Examples","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Include both simple and complex examples\nShow both JSON and CSV formats\nDemonstrate common use cases","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#3.-**Use-Consistent-Formatting**","page":"Documenting an Asset","title":"3. Use Consistent Formatting","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Follow the existing documentation style\nUse consistent table formatting\nMaintain proper markdown syntax","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#4.-**Include-Visual-Elements**","page":"Documenting an Asset","title":"4. Include Visual Elements","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Create clear mermaid diagrams\nUse consistent color coding for commodities\nShow the asset structure clearly","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#5.-**Cross-Reference-Appropriately**","page":"Documenting an Asset","title":"5. Cross-Reference Appropriately","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Link to related documentation sections\nReference constraint definitions\nPoint to user guides where relevant","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#Updating-the-Asset-Library","page":"Documenting an Asset","title":"Updating the Asset Library","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"After creating your documentation, you should update the Asset Library so that your new asset appears in the main asset list and the new page is accessible to other users.","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Add your asset to the main Assets.md file in docs/src/Manual/Assets.md\nInclude a mermaid diagram in the asset list\nEnsure the asset name is correctly hyperlinked in the Assets.md file\nUpdate the table of contents if necessary\nTest the documentation by building the docs locally","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#Example-Addition-to-Assets.md","page":"Documenting an Asset","title":"Example Addition to Assets.md","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"- [My New Asset](@ref)\n\n```mermaid\n%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph MyNewAsset\n  direction BT\n    A((Electricity)) e1@-->|Input| B{{Transformation}}\n    B e2@-->|Output| C((Hydrogen))\n    e1@{ animate: true }\n    e2@{ animate: true }\n end\n    style A font-size:19px,r:55px,fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n    style B fill:black,stroke:black,color:black;\n    style C font-size:19px,r:55px,fill:lightblue,stroke:black,color:black,stroke-dasharray: 3,5;\n    linkStyle 0,1 stroke:#FFD700, stroke-width: 2px;\n```","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#Testing-Your-Documentation","page":"Documenting an Asset","title":"Testing Your Documentation","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Build the documentation locally to check for formatting errors:\njulia --project=docs -e 'using Pkg; Pkg.develop(path=\".\"); Pkg.instantiate(); include(\"docs/make.jl\")'\nOpen the docs/build/index.html file in your browser to view the documentation\nVerify all links work correctly\nHave others review the documentation for clarity and consistency\nUpdate as needed based on feedback and usage","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/#Next-Steps","page":"Documenting an Asset","title":"Next Steps","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"After creating your asset documentation:","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"Submit a pull request with your documentation: Opening a PR\nRequest review from other contributors: How to contribute guide\nUpdate related documentation if your asset affects other parts of the system\nMaintain the documentation as your asset evolves","category":"page"},{"location":"Guides/Modeler Guide/modeler_add_docs_to_asset/","page":"Documenting an Asset","title":"Documenting an Asset","text":"","category":"page"},{"location":"Manual/Commodities/#Commodities","page":"Commodities","title":"Commodities","text":"","category":"section"},{"location":"Manual/Commodities/#Sub-Commodities","page":"Commodities","title":"Sub-Commodities","text":"","category":"section"},{"location":"Manual/Commodities/","page":"Commodities","title":"Commodities","text":"","category":"page"},{"location":"Manual/Nodes/#Nodes","page":"Nodes","title":"Nodes","text":"","category":"section"},{"location":"Manual/Nodes/#Contents","page":"Nodes","title":"Contents","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Overview | Fields | Types | Constructors | Methods | Examples","category":"page"},{"location":"Manual/Nodes/#manual-nodes-overview","page":"Nodes","title":"Overview","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Nodes are balance points for flows of a single Commodity. They are one of the four primary components in Macro, alongside Edges, Storage, and Transformations. They are sub-types of the Vertex type.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Each Node can only balance flows of one Commodity so they are usually described with reference to that Commodity, e.g. as Node{Electricity}, Node{Hydrogen}, or Node{CO2}. The general description is a Node{T}, where T can be any Commodity or sub-Commodity.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Balances are an important and complicated topic in Macro. They are described in more detail in the Balances section and specific balance constraints can be found in the Constraints Library.","category":"page"},{"location":"Manual/Nodes/#Nodes-for-System-Boundaries","page":"Nodes","title":"Nodes for System Boundaries","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Nodes allow for the import and export of Commodities outside a model, making them essential for modeling system boundaries. This capability can be used to represent:","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Fuel Supplies: Import of natural gas, coal, or other fuels from external sources\nElectricity Export: Export of electricity to neighboring grids or markets\nEmissions: Upstream emissions or downstream carbon capture and storage","category":"page"},{"location":"Manual/Nodes/#Electricity-Node-in-a-regional-grid-model","page":"Nodes","title":"Electricity Node in a regional grid model","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"An Node{Electricity} in a regional electricity model can represent the connection to neighboring grids. The Node can have both demand (representing local electricity consumption) and supply capabilities (representing imports from external grids), with associated costs and limits for each.","category":"page"},{"location":"Manual/Nodes/#Natural-Gas-Node-in-an-integrated-energy-system","page":"Nodes","title":"Natural Gas Node in an integrated energy system","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"A Node{NaturalGas} can represent a natural gas supply point where the system can purchase fuel from external suppliers. The supply can have different cost segments, availability constraints, and time-varying prices to represent realistic fuel market conditions.","category":"page"},{"location":"Manual/Nodes/#Nodes-in-Locations","page":"Nodes","title":"Nodes in Locations","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Several Nodes of different Commodities can be gathered into a Location, allowing other components to be connected to them as a group rather than individually. This organizational structure:","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Simplifies Inputs: Reduces the complexity of input files by allowing Assets to connect to a Location rather than specifying individual Nodes\nIntuitive Modelling of Regions: Represents geographic regions with multiple commodity flows\nAutomative Creation of Nodes: Macro can automatically create Nodes for each Commodity in a Location when a corresponding Edge is connected, simplifying the model setup","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"For example, a city Location might contain Node{Electricity}, Node{NaturalGas}, and Node{Hydrogen} representing the local infrastructure for each commodity. A power plant Asset can then be connected to this Location, automatically gaining access to all relevant commodity flows.","category":"page"},{"location":"Manual/Nodes/#Nodes-within-Assets","page":"Nodes","title":"Nodes within Assets","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Nodes can also be used within Assets to merge or split flows of a Commodity or several sub-Commodities. This allows for:","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Flow Aggregation: Combining multiple sub-commodity flows into a single commodity flow. For example, a System may track CleanElectricity and FossilElectricity as sub-commodities of a broader Electricity commodity. If part of the System is not concerned with the distinction, a Node{Electricity} can aggregate these flows into a single Electricity commodity\nFlow Distribution: Splitting a single commodity flow into multiple streams which can be used by different Components or other Assets. For example, a Node{Electricity} in a power plant Asset might be used to split the generated electricity flow for grid export and station power.","category":"page"},{"location":"Manual/Nodes/#Key-Concepts","page":"Nodes","title":"Key Concepts","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Single Commodity Balance: Each Node balances flows of exactly one Commodity type.\nSystem Boundaries: Nodes enable import/export of commodities to/from external systems\nDemand and Supply: Nodes can have both demand requirements and supply capabilities\nLocation Grouping: Multiple Nodes can be organized into Locations for simplified connectivity\nFlexible Segmentation: Demand and supply can be segmented with different costs and limits\nTime Dependence: Support time-varying demand, supply, and pricing parameters","category":"page"},{"location":"Manual/Nodes/#Node-Fields","page":"Nodes","title":"Node Fields","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Nodes have the following fields. When running a model, the fields are set by the input files. When creating an Asset, the defaults below can be altered using the @node_data macro. The internal fields are used by Macro and are not intended to be set by users in most circumstances.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"note: Units in Macro\nWe have assumed that your System is using units of MWh for energy, tonnes for mass, and hour-long time steps. You can use any set of units as long as they are consistent across your operations and investment inputs.","category":"page"},{"location":"Manual/Nodes/#Network-Structure","page":"Nodes","title":"Network Structure","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Field Type Description Default\nid Symbol Unique identifier -\nlocation Union{Missing,Symbol} Location where node is placed missing","category":"page"},{"location":"Manual/Nodes/#Demand-Parameters","page":"Nodes","title":"Demand Parameters","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Field Type Description Units Default\ndemand Vector{Float64} Time-varying demand requirements MWh/hr Float64[]\nmax_nsd Vector{Float64} Maximum non-served demand by segment MWh/hr [0.0]\nmin_nsd Vector{Float64} Minimum non-served demand by segment MWh/hr [0.0]\nprice_nsd Vector{Float64} Penalty cost for non-served demand $/MWh [0.0]","category":"page"},{"location":"Manual/Nodes/#Supply-Parameters","page":"Nodes","title":"Supply Parameters","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Field Type Description Units Default\nmax_supply Vector{Float64} Maximum supply by segment MWh/hr [0.0]\nprice_supply Vector{Float64} Cost of supply by segment $/MWh [0.0]\nprice Vector{Float64} Time-varying commodity prices $/MWh Float64[]","category":"page"},{"location":"Manual/Nodes/#Policy-Parameters","page":"Nodes","title":"Policy Parameters","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Field Type Description Units Default\nprice_unmet_policy Dict{Symbol,Any} Penalty costs for unmet policy constraints varies Dict{Symbol,Any}()\nrhs_policy Dict{Symbol,Any} Right-hand side values for policy constraints varies Dict{Symbol,Any}()","category":"page"},{"location":"Manual/Nodes/#Balance-and-Constraint-Tracking-(Internal)","page":"Nodes","title":"Balance and Constraint Tracking (Internal)","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Field Type Description Units Default\nbalance_data Dict{Symbol,Dict{Symbol,Float64}} Balance equation coefficients - Dict{Symbol,Dict{Symbol,Float64}}()\nconstraints Vector{AbstractTypeConstraint} Additional constraints - Vector{AbstractTypeConstraint}()\noperation_expr Dict Operational JuMP expressions - Dict()","category":"page"},{"location":"Manual/Nodes/#Operational-Variables-(Internal)","page":"Nodes","title":"Operational Variables (Internal)","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Field Type Description Units Default\nnon_served_demand JuMPVariable Non-served demand variables MWh/hr Matrix{VariableRef}(undef, 0, 0)\nsupply_flow JuMPVariable Supply flow variables MWh/hr Matrix{VariableRef}(undef, 0, 0)\npolicy_budgeting_vars Dict Policy constraint budgeting variables varies Dict()\npolicy_slack_vars Dict Policy constraint slack variables varies Dict()","category":"page"},{"location":"Manual/Nodes/#manual-nodes-types","page":"Nodes","title":"Types","text":"","category":"section"},{"location":"Manual/Nodes/#Type-Hierarchy","page":"Nodes","title":"Type Hierarchy","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Node types follow a hierarchical structure rooted in the abstract AbstractVertex type:","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"AbstractVertex\n├── Node{T}\n├── AbstractStorage{T}\n│   ├── Storage{T}\n│   └── LongDurationStorage{T}\n└── Transformation{T}","category":"page"},{"location":"Manual/Nodes/#Node{T}","page":"Nodes","title":"Node{T}","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Concrete implementation of a network node parameterized by commodity type T.","category":"page"},{"location":"Manual/Nodes/#manual-nodes-constructors","page":"Nodes","title":"Constructors","text":"","category":"section"},{"location":"Manual/Nodes/#Keyword-Constructors","page":"Nodes","title":"Keyword Constructors","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Node{T}(; id::Symbol, timedata::TimeData, [additional_fields...])","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Direct constructor using keyword arguments for all fields, where T is the type of commodity flowing through the Node, e.g. Electricity, NaturalGas, etc.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Parameter Type Description Required\nid Symbol Unique identifier Yes\ntimedata TimeData Time-related data structure Yes\nlocation Union{Missing, Symbol} Location identifier No\ndemand Vector{Float64} Time-varying demand No\nmax_supply Vector{Float64} Maximum supply by segment No\nprice Vector{Float64} Time-varying prices No\nmax_nsd Vector{Float64} Maximum non-served demand segments No\nprice_nsd Vector{Float64} Penalty prices for non-served demand No\n... Various Additional node-specific fields No","category":"page"},{"location":"Manual/Nodes/#Primary-Constructors","page":"Nodes","title":"Primary Constructors","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Node(data::AbstractDict{Symbol,Any}, time_data::TimeData, commodity::DataType)","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Creates a Node from input data dictionary, time data, and commodity type.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Parameter Type Description\ndata AbstractDict{Symbol,Any} Dictionary of node configuration data\ntime_data TimeData Time-related data structure\ncommodity DataType Commodity type for the node","category":"page"},{"location":"Manual/Nodes/#Factory-Constructors","page":"Nodes","title":"Factory Constructors","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"make_node(data::AbstractDict{Symbol,Any}, time_data::TimeData, commodity::DataType)\n\nmake(commodity::Type{<:Commodity}, input_data::AbstractDict{Symbol,Any}, system)","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Factory methods for creating Nodes. The make_node() function is the internal constructor, while make() is the high-level factory method used when creating nodes from commodity types.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Parameter Type Description\ndata/input_data AbstractDict{Symbol,Any} Configuration data for the node\ntime_data TimeData Time-related data structure\ncommodity Type{<:Commodity} Commodity type to create node for\nsystem System Parent system object (for make())","category":"page"},{"location":"Manual/Nodes/#manual-nodes-methods","page":"Nodes","title":"Methods","text":"","category":"section"},{"location":"Manual/Nodes/#Accessor-Methods","page":"Nodes","title":"Accessor Methods","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Methods for accessing node data and properties.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Method Description Return Type\nid(n::Node) Get node identifier Symbol\ncommodity_type(n::Node{T}) Get commodity type parameter DataType\ndemand(n::Node) Get full demand vector Vector{Float64}\ndemand(n::Node, t::Int64) Get demand at time period t Float64\nprice(n::Node) Get full price vector Vector{Float64}\nprice(n::Node, t::Int64) Get price at time period t Float64","category":"page"},{"location":"Manual/Nodes/#Demand-and-Non-Served-Demand-Methods","page":"Nodes","title":"Demand and Non-Served Demand Methods","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Methods for managing demand requirements and non-served demand.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Method Description Return Type\nmax_non_served_demand(n::Node) Get maximum non-served demand by segment Vector{Float64}\nmax_non_served_demand(n::Node, s::Int64) Get maximum non-served demand for segment s Float64\nnon_served_demand(n::Node) Get non-served demand variables JuMPVariable\nnon_served_demand(n::Node, s::Int64, t::Int64) Get non-served demand for segment s at time t VariableRef\nprice_non_served_demand(n::Node) Get penalty prices for non-served demand Vector{Float64}\nprice_non_served_demand(n::Node, s::Int64) Get penalty price for non-served demand segment s Float64\nsegments_non_served_demand(n::Node) Get range of non-served demand segments UnitRange{Int64}","category":"page"},{"location":"Manual/Nodes/#Supply-Methods","page":"Nodes","title":"Supply Methods","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Methods for managing supply capabilities and flows.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Method Description Return Type\nmax_supply(n::Node) Get maximum supply by segment Vector{Float64}\nmax_supply(n::Node, s::Int64) Get maximum supply for segment s Float64\nsupply_flow(n::Node) Get supply flow variables JuMPVariable\nsupply_flow(n::Node, s::Int64, t::Int64) Get supply flow for segment s at time t VariableRef\nprice_supply(n::Node, s::Int64) Get supply price for segment s Float64\nsupply_segments(n::Node) Get range of supply segments Base.OneTo{Int64}","category":"page"},{"location":"Manual/Nodes/#Policy-Methods","page":"Nodes","title":"Policy Methods","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Methods for managing policy constraints and variables.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Method Description Return Type\npolicy_budgeting_vars(n::Node) Get policy budgeting variables Dict\npolicy_slack_vars(n::Node) Get policy slack variables Dict\nprice_unmet_policy(n::Node) Get penalty prices for unmet policy constraints Dict{DataType,Float64}\nprice_unmet_policy(n::Node, c::DataType) Get penalty price for unmet policy constraint of type c Float64\nrhs_policy(n::Node) Get right-hand side values for policy constraints Dict{DataType,Float64}\nrhs_policy(n::Node, c::DataType) Get right-hand side value for policy constraint of type c Float64","category":"page"},{"location":"Manual/Nodes/#Balance-and-Constraint-Methods-(Inherited-from-AbstractVertex)","page":"Nodes","title":"Balance and Constraint Methods (Inherited from AbstractVertex)","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Methods for managing balance equations and constraints.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Method Description Return Type\nbalance_ids(n::Node) Get IDs of all balance equations Vector{Symbol}\nbalance_data(n::Node, i::Symbol) Get input data for balance equation i Dict{Symbol,Float64}\nget_balance(n::Node, i::Symbol) Get balance equation expression for i JuMP.Expression\nget_balance(n::Node, i::Symbol, t::Int64) Get balance equation expression for i at time t JuMP.Expression\nall_constraints(n::Node) Get all constraints applied to the node Vector{AbstractTypeConstraint}\nall_constraints_types(n::Node) Get types of all constraints Vector{DataType}\nget_constraint_by_type(n::Node, constraint_type) Get constraint of specified type AbstractTypeConstraint","category":"page"},{"location":"Manual/Nodes/#Model-Building-Methods","page":"Nodes","title":"Model Building Methods","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Methods used internally during model construction.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Method Description Return Type\nadd_linking_variables!(n::Node, model::Model) Add linking variables to JuMP model Nothing\ndefine_available_capacity!(n::Node, model::Model) Define available capacity constraints Nothing\nplanning_model!(n::Node, model::Model) Add planning model constraints Nothing\noperation_model!(n::Node, model::Model) Add operational model constraints Nothing","category":"page"},{"location":"Manual/Nodes/#Utility-Methods","page":"Nodes","title":"Utility Methods","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Additional utility methods for working with Nodes.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Method Description Return Type\nget_nodes_sametype(nodes::Vector{Node}, commodity::DataType) Filter nodes by commodity type Vector{Node}\nmake(commodity::Type{<:Commodity}, input_data, system) Factory method for creating nodes Node{T}","category":"page"},{"location":"Manual/Nodes/#manual-nodes-examples","page":"Nodes","title":"Examples","text":"","category":"section"},{"location":"Manual/Nodes/#Nodes-in-Node-list","page":"Nodes","title":"Nodes in Node list","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"The most common way to use Nodes is to add them to the list of Nodes in your Macro System. The Node list is most commonly stored in the system/nodes.json file. The Commodity of each Node is defined by the type field, then further parameters can be given in the instance_data field or global_data field if defining several Nodes of the same type. Each Node must have a unique id which is used to identify the Node in the System and Model.","category":"page"},{"location":"Manual/Nodes/#Electricity-Nodes-with-non-served-demand","page":"Nodes","title":"Electricity Nodes with non-served demand","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"In this example, we'll define two Electricity Nodes with non-served demand (NSD) limits. NSD limits are defined by:","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Providing a vector of demand segments in the max_nsd field. Each segment is the fraction of this Nodes's demand that can be met by NSD each time step. A value of [1.0] indicated that the entire demand can be non-served.  \nProviding a vector of prices in the price_nsd field, of the same length as the max_nsd field. Each segment is the price per MWh of non-served demand for the corresponding segment. Here, we have defined a NSD price of $5000/MWh.\nWe have to add a MaxNonServedDemandConstraint constraint to the constraints field to enfore the NSD limit. If we wish to use multiple segments, we also need to add a MaxNonServedDemandPerSegmentConstraint constraint.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"We want both Nodes to have the same NSD limits, so we can define these in the global_data field. To define different limits or prices, we could move the max_nsd and / or price_nsd fields to the instance_data field of each Node.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Both Nodes have exogenous Electricity demand, which is defined in the demand field. You could simply provide the data as an array of Float64 values but here we have used the timeseries feature to instead load the demand from a different file, in this case system/demand.csv. The header field specifies the column in the CSV file to use for each Node's demand.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Lastly, we have added location fields to both Nodes. This is not required but will allow other components to connect to these Nodes by Location rather than by Node ID. This can simplify model inputs and connectivity. Each Location can only have one Node of each Commodity or Sub-Commodity and Macro will throw an error if you try to add a second Node of the same Commodity to a Location.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"{\n    \"nodes\": [\n        {\n            \"type\": \"Electricity\",\n            \"global_data\": {\n                \"global_data\": {\n                    \"time_interval\": \"Electricity\",\n                    \"max_nsd\": [1.0],\n                    \"price_nsd\": [5000.0],\n                    \"constraints\": {\n                        \"BalanceConstraint\": true,\n                        \"MaxNonServedDemandConstraint\": true,\n                        \"MaxNonServedDemandPerSegmentConstraint\": true\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"boston_electricity\",\n                    \"location\": \"boston\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\",\n                            \"header\": \"Demand_Boston\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"princeton_electricity\",\n                    \"location\": \"princeton\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\",\n                            \"header\": \"Demand_Princeton\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/Nodes/#Biomass-Node-with-Supply-Segments","page":"Nodes","title":"Biomass Node with Supply Segments","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Nodes can also be used to supply Commodities from outside your System. Here, we define two Biomass Nodes which are used to supply biomass to the System for use as fuel. As in the previous example, we have used a mixture of global_data and instance_data to define the Nodes. We have also added both to Locations so that other components can connect to them by Location rather than by Node ID.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Adding external supply is similar to adding demand, but we use the max_supply and price_supply fields and there is no need to add constraints beyong the basic BalanceConstraint. The max_supply field is a vector of the maximum number of units which can be supplied each time step for each segment. These are individual segments of supply, not cumulative supply. The price_supply field is a vector of prices per unit for each segment. We recommend listing the segments in order of increasing price. This is not necessary for Macro to handle them correctly but will make the results easier to interpret.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"{\n    \"type\": \"Biomass\",\n    \"global_data\": {\n        \"time_interval\": \"Biomass\",\n        \"constraints\": {\n            \"BalanceConstraint\": true\n        }\n    },\n    \"instance_data\": [\n        {\n            \"id\": \"boston_bioherb\",\n            \"location\": \"boston\",\n            \"max_supply\": [\n                3000.0,\n                1000.0,\n                2000.0\n            ],\n            \"price_supply\": [\n                80.0,\n                100.0,\n                150.0\n            ]\n        },\n        {\n            \"id\": \"princeton_bioherb\",\n            \"location\": \"princeton\",\n            \"max_supply\": [\n                500.0,\n                3000.0,\n                1000.0\n            ],\n            \"price_supply\": [\n                80.0,\n                100.0,\n                150.0\n            ]\n        }\n    ]\n}           ","category":"page"},{"location":"Manual/Nodes/#Emissions-Nodes","page":"Nodes","title":"Emissions Nodes","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Tracking and constraining emissions is an important part of many energy system models. In Macro, you can create Commodity flows of the emissions you wish to track. It is common to have these flows meet at one or more Nodes to track total emissions and apply constraints to them.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Here we define a co2_sink Node which we will use to track all CO2 emissions in our System. We have added a CO2CapConstraint and set its right-hand side (RHS) value to 0, meaning the CO2 flows at this Node must net to zero over the period of operations.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Becasue this is a common way to formulate emissions tracking, we have made the co2_sink ID a special case in Macro. Most emitting Assets have the ability to automatically connect their Edge{CO2} emissions flows to a co2_sink Node if it exists in the System.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"In this example we have also added to Nodes to allow for captured CO2 to be sequestered. These Node{CO2Captured} Nodes have CO2StorageConstraint constraints which allow and limit the tonnes of CO2 that can be injected into each Node annually. The rhs_policy field sets the annual limit for each Node, in this case 4,753,600 tonnes for Boston and 5,145,400 tonnes for Princeton.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Sequestration could be modelled using a Storage{CO2} component but Storage components are required to have zero net stored flow over the period of operations. This means that the Storage component would not allow for a net injection of CO2 into the Node, which is what we want to model here.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"{\n    \"nodes\": [\n        {\n            \"type\": \"CO2\",\n            \"global_data\": {\n                \"time_interval\": \"CO2\"\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"co2_sink\",\n                    \"constraints\": {\n                        \"CO2CapConstraint\": true\n                    },\n                    \"rhs_policy\": {\n                        \"CO2CapConstraint\": 0\n                    }\n                }\n            ]\n        },\n        {\n            \"type\": \"CO2Captured\",\n            \"global_data\": {\n                \"time_interval\": \"CO2Captured\"\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"boston_co2_storage\",\n                    \"location\": \"boston\",\n                    \"constraints\": {\n                        \"CO2StorageConstraint\": true\n                    },\n                    \"rhs_policy\": {\n                        \"CO2StorageConstraint\": 4753600\n                    }\n                },\n                {\n                    \"id\": \"princeton_co2_storage\",\n                    \"location\": \"princeton\",\n                    \"constraints\": {\n                        \"CO2StorageConstraint\": true\n                    },\n                    \"rhs_policy\": {\n                        \"CO2StorageConstraint\": 5145400\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/Nodes/#Nodes-in-Assets","page":"Nodes","title":"Nodes in Assets","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Nodes can be added to Assets to allow for the merging or splitting of Commodity flows. This is useful when you want to aggregate multiple sub-commodities into a single commodity flow or distribute a single commodity flow into multiple streams. Nodes are not as commonly used in Assets as the other components. In many instances you will prefer to merge or split flows between Assets.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"The Modellers guide on creating Assets provides a detailed overview of how to create Assets and add Nodes to them. Below is a brief example of how to use Nodes within an Asset.","category":"page"},{"location":"Manual/Nodes/#Natual-Gas-Power-Plant-with-Station-Power","page":"Nodes","title":"Natual Gas Power Plant with Station Power","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"In this example, we create a StationPowerExample Asset representing a natural gas power plant with station power requirements. Station power is usually accounted for by the Transformation component. The stochiometric balance between the fuel and exported electricity flows will include the station power required to run the pumps, compressors, and other equipment at the plant.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"In this case, we will explicitly track the station power using an Edge{Electricity} connected to a Node{Electricity}. We will add the station power edge as an incoming Edge to the Transformation. The stochiometric balance will be used to control the station power required. In the future, we could use the Node to add a fixed station power demand on top of the output-dependent station power.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"flowchart TD\n    A((Natural Gas Supply))\n    subgraph Power Plant\n        direction TB\n        T{{Transformation}}\n        N((Electricity Node))\n    end\n    A -->|Fuel Intake| T\n    T -->|Generated Electricity| N\n    N -->|Station Power| T\n    N -->|Exported Electricity| C\n    T -->|CO2 Emissions| F\n    C((Electricity Demand))\n    F((CO2 Emissions))","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"struct StationPowerExample <: AbstractAsset\n    id::AssetId\n    thermal_transform::Transformation\n    elec_node::Node{<:Electricity}\n    generated_elec_edge::Union{Edge{<:Electricity},EdgeWithUC{<:Electricity}}\n    station_elec_edge::Edge{<:Electricity}\n    exported_elec_edge::Edge{<:Electricity}\n    fuel_edge::Edge{<:T}\n    co2_edge::Edge{<:CO2}\nend>\n\n# You will need to define additional constructors and the default inputs here\n\nfunction make(asset_type::Type{StationPowerExample}, data::AbstractDict{Symbol,Any}, system::System)\n    id = AssetId(data[:id])\n    @setup_data(asset_type, data, id)\n\n    thermal_key = :transforms\n    # ... setup and create the Transformation\n\n    elec_node_key = :elec_node\n    @process_data(\n        elec_node_data, \n        data[:nodes][elec_node_key], \n        [\n            (data[:nodes][elec_node_key], key),\n            (data[:nodes][elec_node_key], Symbol(\"elec_node_\", key)),\n            (data, Symbol(\"elec_node_\", key)),\n        ]\n    )\n    elec_node_data[:id] = Symbol(id, \"_\", elec_node_key)\n    elec_node = Node(\n        elec_node_data,\n        system.timedata[:Electricity],\n        Electricity\n    )\n\n    generated_elec_key = :generated_elec_edge\n    # ... create an Edge{Electricity} between the Transformation and the Electricity Node\n\n    station_elec_key = :station_elec_edge\n    # ... create an Edge{Electricity} for the station power, connecting the Node to the Transformation\n\n    exported_elec_key = :exported_elec_edge\n    # ... create an Edge{Electricity} for the electricity export, connecting the Node to the external demand\n\n    fuel_key = :fuel_edge\n    # ... create an Edge{NaturalGas} for the fuel supply, connecting the fuel Node to the Transformation\n\n    co2_key = :co2_edge\n    # ... create an Edge{CO2} for the CO2 emissions, connecting the Transformation to the CO2 sink Node\n\n    # ... set up the stochiometric balance between the fuel, station power, and generated electricity flows\n\n    return StationPowerExample(\n        id,\n        thermal_transform,\n        elec_node,\n        generated_elec_edge,\n        station_elec_edge,\n        exported_elec_edge,\n        fuel_edge,\n        co2_edge\n    )\nend","category":"page"},{"location":"Manual/Nodes/#Natual-Gas-Power-Plant-with-Station-Power,-Standard-JSON-Input-Format","page":"Nodes","title":"Natual Gas Power Plant with Station Power, Standard JSON Input Format","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Using the default JSON input format and carefully chosen defaults, our new Asset will only require one additional field specifying the station power required per unit of fuel or MWh of electricity generated. The creation and connection of the Node will be handled by the make() function. Here, we've used the latter by creating a station_power_per_MWh field. This must be accessed and added to the stochiometric balance in the make() function.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"{\n    \"type\": \"StationPowerExample\",\n    \"global_data\": {},\n    \"instance_data\": {\n        \"id\": \"example_natural_gas_power_plant\",\n        \"location\": \"boston\",\n        \"timedata\": \"NaturalGas\",\n        \"fuel_commodity\": \"NaturalGas\",\n        \"co2_sink\": \"co2_sink\",\n        \"uc\": true,\n        \"elec_constraints\": {\n            \"CapacityConstraint\": true,\n            \"RampingLimitConstraint\": true,\n            \"MinFlowConstraint\": true,\n            \"MinUpTimeConstraint\": true,\n            \"MinDownTimeConstraint\": true,\n        },\n        \"emission_rate\": 0.181048235160161,\n        \"fuel_consumption\": 2.249613533,\n        \"station_power_per_MWh\": 0.05,\n        \"can_expand\": false,\n        \"existing_capacity\": 4026.4,\n        \"investment_cost\": 0.0,\n        \"fixed_om_cost\": 16001,\n        \"variable_om_cost\": 4.415,\n        \"capacity_size\": 125.825,\n        \"startup_cost\": 89.34,\n        \"startup_fuel_consumption\": 0.58614214,\n        \"min_up_time\": 6,\n        \"min_down_time\": 6,\n        \"ramp_up_fraction\": 0.64,\n        \"ramp_down_fraction\": 0.64,\n        \"min_flow_fraction\": 0.444\n    }\n}","category":"page"},{"location":"Manual/Nodes/#Natual-Gas-Power-Plant-with-Station-Power,-Advanced-JSON-Input-Format","page":"Nodes","title":"Natual Gas Power Plant with Station Power, Advanced JSON Input Format","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"The advanced JSON inputs will require additional fields to specify the Node and additional Edges. The make() function will handle the internal connections. These inputs could be significantly simplified by improving the default values for the fields using the full_default_data() function.","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"{\n    \"type\": \"ThermalPower\",\n    \"global_data\": {},\n    \"instance_data\": {\n        \"id\": \"example_natural_gas_power_plant\",\n        \"transforms\": {\n            \"emission_rate\": 0.181048235160161,\n            \"fuel_consumption\": 2.249613533,\n            \"station_power_per_MWh\": 0.05,\n        },\n        \"nodes\": {\n            \"elec_node\": {\n                \"commodity\": \"Electricity\",\n                \"timedata\": \"Electricity\",\n                \"constraints\": {\n                    \"BalanceConstraint\": true\n                },\n            }\n        },\n        \"edges\": {\n            \"exported_elec\": {\n                \"commodity\": \"Electricity\",\n                \"unidirectional\": true,\n                \"has_capacity\": true,\n                \"uc\": true,\n                \"integer_decisions\": false,\n                \"constraints\": {\n                    \"CapacityConstraint\": true,\n                    \"RampingLimitConstraint\": true,\n                    \"MinFlowConstraint\": true,\n                    \"MinUpTimeConstraint\": true,\n                    \"MinDownTimeConstraint\": true\n                },\n               \"end_vertex\": \"boston_elec\",\n                \"can_retire\": true,\n                \"can_expand\": false,\n                \"existing_capacity\": 4026.4,\n                \"investment_cost\": 0.0,\n                \"fixed_om_cost\": 16001,\n                \"variable_om_cost\": 4.415,\n                \"capacity_size\": 125.825,\n                \"startup_cost\": 89.34,\n                \"startup_fuel_consumption\": 0.58614214,\n                \"min_up_time\": 6,\n                \"min_down_time\": 6,\n                \"ramp_up_fraction\": 0.64,\n                \"ramp_down_fraction\": 0.64,\n                \"min_flow_fraction\": 0.444\n            },\n            \"generated_elec_edge\": {\n                \"commodity\": \"Electricity\",\n                \"unidirectional\": true,\n                \"has_capacity\": false\n            },\n            \"station_elec_edge\": {\n                \"commodity\": \"Electricity\",\n                \"unidirectional\": true,\n                \"has_capacity\": false\n            },\n            \"fuel_edge\": {\n                \"commodity\": \"NaturalGas\",\n                \"unidirectional\": true,\n                \"has_capacity\": false,\n                \"start_vertex\": \"boston_natgas\"\n            },\n            \"co2_edge\": {\n                \"commodity\": \"CO2\",\n                \"unidirectional\": true,\n                \"has_capacity\": false,\n                \"end_vertex\": \"co2_sink\"\n            }\n        }\n    }\n}","category":"page"},{"location":"Manual/Nodes/#See-Also","page":"Nodes","title":"See Also","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Edges - Components that connect Vertices and carry flows\nTransformations - Processes that transform flows between edges\nStorage - Energy storage components that can be connected to edges\nVertices - Network nodes that edges connect\nAssets - Higher-level components made from edges, nodes,\nCommodities - Types of resources flowing through edges  \nTime Data - Temporal modeling framework\nConstraints - Additional constraints for edges","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"","category":"page"},{"location":"Guides/User Guide/user_settings/#Configuring-Settings","page":"Configuring Settings","title":"Configuring Settings","text":"","category":"section"},{"location":"Guides/User Guide/user_settings/","page":"Configuring Settings","title":"Configuring Settings","text":"Macro provides various settings that allow the user to customize model runs and control specific features.","category":"page"},{"location":"Guides/User Guide/user_settings/","page":"Configuring Settings","title":"Configuring Settings","text":"These are the steps to configure settings:","category":"page"},{"location":"Guides/User Guide/user_settings/","page":"Configuring Settings","title":"Configuring Settings","text":"Create a new settings JSON file (e.g., macro_settings.json) in the preferred location (we recommend creating a settings folder in the case directory).\nCustomize the JSON file to enable or disable features as needed.\nAdd the path to the settings JSON file in the system_data.json file. The user can use either a relative path (from the system_data.json location) or an absolute path.","category":"page"},{"location":"Guides/User Guide/user_settings/","page":"Configuring Settings","title":"Configuring Settings","text":"note: system_data.json\nFor more information about the system_data.json file, please see the Inputs section.","category":"page"},{"location":"Guides/User Guide/user_settings/","page":"Configuring Settings","title":"Configuring Settings","text":"Here's an example of a macro_settings.json file:","category":"page"},{"location":"Guides/User Guide/user_settings/","page":"Configuring Settings","title":"Configuring Settings","text":"{\n    \"ConstraintScaling\": true,\n    \"OverwriteResults\": true,\n    \"AutoCreateNodes\": true,\n    \"OutputLayout\": {\n        \"Capacity\": \"wide\",\n        \"Costs\": \"long\",\n        \"Flow\": \"long\"\n  }\n}","category":"page"},{"location":"Guides/User Guide/user_settings/","page":"Configuring Settings","title":"Configuring Settings","text":"If the user created the macro_settings.json file in a settings folder, the system_data.json file should include this entry:","category":"page"},{"location":"Guides/User Guide/user_settings/","page":"Configuring Settings","title":"Configuring Settings","text":"{\n    \"settings\": {\n        \"path\": \"settings/macro_settings.json\"\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_settings/","page":"Configuring Settings","title":"Configuring Settings","text":"In this example, the user has enabled:","category":"page"},{"location":"Guides/User Guide/user_settings/","page":"Configuring Settings","title":"Configuring Settings","text":"scaling the constraints in the model during the optimization.\noverwriting the results folder if it already exists.\ncreating nodes automatically from locations.\nsetting the layout for the results files to \"wide\" for the capacity variables, and to \"long\" for costs and flow variables.","category":"page"},{"location":"Guides/User Guide/user_settings/","page":"Configuring Settings","title":"Configuring Settings","text":"For a complete list of available settings, their default values, and detailed descriptions, please refer to the Inputs section.","category":"page"},{"location":"Guides/User Guide/user_settings/","page":"Configuring Settings","title":"Configuring Settings","text":"","category":"page"},{"location":"Manual/Multi_period_accounting/#General-assumptions-made-by-Macro","page":"Multi-Period Accounting","title":"General assumptions made by Macro","text":"","category":"section"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"Planning periods (also referred to as \"periods\") can include multiple years. The number of years can vary between planning periods. (This has implications for how to aggregate variable and O&M costs within a period, see below.)","category":"page"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"Timing of capacity deployment: New capacity comes online instantaneously at the beginning of a period. ","category":"page"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"Representativeness of modeled year: Each period is modeled using one year; i.e., the modeled energy production occurs over the course of a single year. In cases where a period covers multiple years, period-wide costs are based on a scaling of the modeled annual costs. The current assumption in Macro is that the year modeled is representative. Thus, variable costs over a period represent annual costs multiplied by the number of years (subject to discounting, see below). This assumption can have important implications for the accuracy of the period-wide costs if conditions within the system are expected to be changing within a given period. For example, if demand grows over the period and the demand inputted by the user represents the final year of the modeled period, the current approach can overestimate variable costs incurred in the beginning of the period. The recommended practice would be to define periods such that conditions within a period do not change meaningfully between the years of the period. ","category":"page"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"Age-based retirement: A unit of capacity reaching end-of-life within period i will retire at the beginning of period i+1, and so will be available for the entirety of period i.  If the user intends to capture retirements within a period, the recommended approach would be to define different periods for this purpose.","category":"page"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"Economic retirement: A unit of capacity that is retired for economic reasons in a given period i is assumed to be retired as of the beginning of the first year of period i. This means that retired capacity incurs no O&M costs in that period.","category":"page"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"Timing of cost incidence: All annual costs (investment, variable, and O&M costs) are assumed to be incurred at the end of the respective year. (This has implications for how costs are discounted.)","category":"page"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"Time value of money: The objective function is expressed in present value terms from the standpoint of the beginning of the modeling horizon; i.e., all costs are discounted to that point (see discounting below). ","category":"page"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"Inflation: The objective function is expressed in real dollars. The choice of dollar year is up to the user, but all cost inputs should be expressed in the same dollar-year terms. ","category":"page"},{"location":"Manual/Multi_period_accounting/#Discounting","page":"Multi-Period Accounting","title":"Discounting","text":"","category":"section"},{"location":"Manual/Multi_period_accounting/#Perfect-foresight","page":"Multi-Period Accounting","title":"Perfect foresight","text":"","category":"section"},{"location":"Manual/Multi_period_accounting/#Investment-cost","page":"Multi-Period Accounting","title":"Investment cost","text":"","category":"section"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"The total investment cost in the objective function is expressed as:","category":"page"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"textInvestment cost = sum_y sum_z sum_i sum_j=1^P_i frac1(1+DR)^j+N_i textAnnualized investment cost_yzi","category":"page"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"where: ","category":"page"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"textAnnualized investment cost_yzi\nrepresents the product of annualized cost per unit of capacity and the amount of capacity deployed.\ny\nindexes technologies, z indexes zones, and i indexes periods.\nDR represents the general discount rate (which can equivalently be referred to as the social discount rate)\nN_i\nis the number of years from the beginning of the modeling horizon to the first year of period i.","category":"page"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"N_i = sum_i=1^i-1L_i","category":"page"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"L_i\nis the number of years in period i\nP_i\nis the minimum of the economic lifetime or the total number of years across all remaining periods.","category":"page"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"P_i = min(EL_y sum_i^IL_i)","category":"page"},{"location":"Manual/Multi_period_accounting/#Fixed-O-and-M-cost","page":"Multi-Period Accounting","title":"Fixed O&M cost","text":"","category":"section"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"textFixed OM cost = sum_i^I sum_j=1^L_i frac1(1+DR)^j+N_i textAnnual Fixed OM cost_i","category":"page"},{"location":"Manual/Multi_period_accounting/#Variable-cost","page":"Multi-Period Accounting","title":"Variable cost","text":"","category":"section"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"Annual costs must be summed over periods i, based on the number of years within each period L_i, and discounted:","category":"page"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"textVariable cost = sum_i^I sum_j=1^L_i frac1(1+DR)^j+N_i textAnnual variable cost_i","category":"page"},{"location":"Manual/Multi_period_accounting/#Myopic","page":"Multi-Period Accounting","title":"Myopic","text":"","category":"section"},{"location":"Manual/Multi_period_accounting/#Investment-cost-2","page":"Multi-Period Accounting","title":"Investment cost","text":"","category":"section"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"textInvestment cost_i = sum_y^G sum_z^Z sum_j=1^P_i frac1(1+DR)^j+N_i textAnnualized investment cost","category":"page"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"where:","category":"page"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"P_i","category":"page"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"is the minimum of the economic lifetime or the total number of years in the period (a period will typically be shorter in duration than the economic lifetime). ","category":"page"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"P_i = min(EL_y L_i)","category":"page"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"Note that the costs reported out of the model add back annuities not considered by the myopic foresight, to enable comparisons with the perfect foresight case. In other words, the reported investment cost is calculated using P_i = min(EL_y sum_i^IL_i).","category":"page"},{"location":"Manual/Multi_period_accounting/#Fixed-O-and-M-costs","page":"Multi-Period Accounting","title":"Fixed O&M costs","text":"","category":"section"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"textFixed OM cost_i = sum_j=1^L_i frac1(1+DR)^j+N_i textAnnual Fixed OM cost_i","category":"page"},{"location":"Manual/Multi_period_accounting/#Variable-cost-2","page":"Multi-Period Accounting","title":"Variable cost","text":"","category":"section"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"textVariable cost_i = sum_j=1^L_i frac1(1+DR)^j+N_i textAnnual variable cost_i","category":"page"},{"location":"Manual/Multi_period_accounting/#Cost-outputs","page":"Multi-Period Accounting","title":"Cost outputs","text":"","category":"section"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"Reported in two forms:","category":"page"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"Discounted costs are reported in \"costs.csv\". These expressed in present value terms from the perspective of the beginning of the modeling horizon (this corresponds to the values considered in the objective function)\nUndiscounted: expressed in present value terms from the perspective of the point in time when the costs incurred.","category":"page"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"All reported cost components for a given period represent costs for the whole period; i..e, costs are not in annual terms. Users can multiply these outputs by the appropriate coefficients (based no number of years in each period) to estimate annual costs from the reported data.","category":"page"},{"location":"Manual/Multi_period_accounting/","page":"Multi-Period Accounting","title":"Multi-Period Accounting","text":"","category":"page"},{"location":"Manual/assets/fuelcell/#Fuel-Cell","page":"Fuel Cell","title":"Fuel Cell","text":"","category":"section"},{"location":"Manual/assets/fuelcell/#Contents","page":"Fuel Cell","title":"Contents","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Overview | Asset Structure | Flow Equations | Input File (Standard Format) | Types - Asset Structure | Constructors | Examples | Best Practices | Input File (Advanced Format)","category":"page"},{"location":"Manual/assets/fuelcell/#fuelcell_overview","page":"Fuel Cell","title":"Overview","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Fuel cell assets in Macro represent electricity generation technologies that convert hydrogen into electricity through electrochemical processes. These assets are defined using either JSON or CSV input files placed in the assets directory, typically named with descriptive identifiers like fuelcell.json or fuelcell.csv.","category":"page"},{"location":"Manual/assets/fuelcell/#fuelcell_asset_structure","page":"Fuel Cell","title":"Asset Structure","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"A fuel cell asset consists of three main components:","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Transformation Component: Balances the hydrogen and electricity flows\nHydrogen Edge: Represents the hydrogen consumption from the supply\nElectricity Edge: Represents the electricity production flow","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Here is a graphical representation of the fuel cell asset:","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph FuelCell\n  direction LR\n  A((Hydrogen)) e1@--> B{{..}}\n  B e2@--> C((Electricity))\n  e1@{ animate: true }\n  e2@{ animate: true }\n end\n    style A r:48px,fill:lightblue,stroke:black,color:black,stroke-dasharray: 3,5;\n    style B fill:black,stroke:black,color:black;\n    style C r:48px,fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n    linkStyle 0 stroke:lightblue, stroke-width: 2px, stroke-dasharray: 5 5;\n    linkStyle 1 stroke:#FFD700, stroke-width: 2px, stroke-dasharray: 5 5;","category":"page"},{"location":"Manual/assets/fuelcell/#fuelcell_flow_equations","page":"Fuel Cell","title":"Flow Equations","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"The fuelcell asset follows these stoichiometric relationships:","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"beginaligned\nphi_elec = phi_h2 cdot epsilon_efficiency_rate \nendaligned","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Where:","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"phi represents the flow of each commodity\nepsilon represents the efficiency rate defined in the table below (see Conversion Process Parameters)","category":"page"},{"location":"Manual/assets/fuelcell/#fuelcell_input_file","page":"Fuel Cell","title":"Input File (Standard Format)","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"The easiest way to include a fuel cell asset in a model is to create a new file (either JSON or CSV) and place it in the assets directory together with the other assets. ","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"your_case/\n├── assets/\n│   ├── fuelcell.json    # or fuelcell.csv\n│   ├── other_assets.json\n│   └── ...\n├── system/\n├── settings/\n└── ...","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"This file can either be created manually, or using the template_asset function, as shown in the Adding an Asset to a System section of the User Guide. The file will be automatically loaded when you run your Macro model. ","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"The following is an example of a fuel cell asset input file:","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"{\n    \"fuelcell\": [\n        {\n            \"type\": \"FuelCell\",\n            \"instance_data\": [\n                {\n                    \"id\": \"fuelcell_SE\",\n                    \"location\": \"SE\",\n                    \"efficiency_rate\": 0.875,\n                    \"investment_cost\": 41112,\n                    \"fixed_om_cost\": 1052,\n                    \"variable_om_cost\": 0.0\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"tip: Global Data vs Instance Data\nWhen working with JSON input files, the global_data field can be used to group data that is common to all instances of the same asset type. This is useful for setting constraints that are common to all instances of the same asset type and avoid repeating the same data for each instance. See the Examples section below for an example.","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"The following tables outline the attributes that can be set for a fuel cell asset.","category":"page"},{"location":"Manual/assets/fuelcell/#Essential-Attributes","page":"Fuel Cell","title":"Essential Attributes","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Field Type Description\nType String Asset type identifier: \"FuelCell\"\nid String Unique identifier for the fuel cell instance\nlocation String Geographic location/node identifier","category":"page"},{"location":"Manual/assets/fuelcell/#fuelcell_conversion_process_parameters","page":"Fuel Cell","title":"Conversion Process Parameters","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"The following set of parameters control the conversion process and stoichiometry of the fuelcell asset (see Flow Equations for more details).","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Field Type Description Units Default\nefficiency_rate Float64 Fuel cell efficiency MWh_elecMWh_h2 1.0","category":"page"},{"location":"Manual/assets/fuelcell/#\"fuelcell_constraints\"","page":"Fuel Cell","title":"Constraints configuration","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Fuel cell assets can have different constraints applied to them, and the user can configure them using the following fields:","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Field Type Description\ntransform_constraints Dict{String,Bool} List of constraints applied to the transformation component.\nelec_constraints Dict{String,Bool} List of constraints applied to the electricity edge.\nh2_constraints Dict{String,Bool} List of constraints applied to the hydrogen edge.","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Users can refer to the Adding Asset Constraints to a System section of the User Guide for a list of all the constraints that can be applied to a fuel cell asset.","category":"page"},{"location":"Manual/assets/fuelcell/#Default-constraints","page":"Fuel Cell","title":"Default constraints","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"To simplify the input file and the asset configuration, the following constraints are applied to the fuel cell asset by default:","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Balance constraint (applied to the transformation component)\nCapacity constraint (applied to the electricity edge)","category":"page"},{"location":"Manual/assets/fuelcell/#Investment-Parameters","page":"Fuel Cell","title":"Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Field Type Description Units Default\ncan_retire Boolean Whether fuel cell capacity can be retired - true\ncan_expand Boolean Whether fuel cell capacity can be expanded - true\nexisting_capacity Float64 Initial installed fuel cell capacity MW 0.0\ncapacity_size Float64 Unit size for capacity decisions - 1.0","category":"page"},{"location":"Manual/assets/fuelcell/#Additional-Investment-Parameters","page":"Fuel Cell","title":"Additional Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Maximum and minimum capacity constraints","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"If MaxCapacityConstraint or MinCapacityConstraint are added to the constraints dictionary for the electricity edge, the following parameters are used by Macro:","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Field Type Description Units Default\nmax_capacity Float64 Maximum allowed fuel cell capacity MW Inf\nmin_capacity Float64 Minimum allowed fuel cell capacity MW 0.0","category":"page"},{"location":"Manual/assets/fuelcell/#Economic-Parameters","page":"Fuel Cell","title":"Economic Parameters","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Field Type Description Units Default\ninvestment_cost Float64 CAPEX per unit fuel cell capacity $/MW 0.0\nannualized_investment_cost Union{Nothing,Float64} Annualized CAPEX $/MW/yr calculated\nfixed_om_cost Float64 Fixed O&M costs $/MW/yr 0.0\nvariable_om_cost Float64 Variable O&M costs $/MWh 0.0\nwacc Float64 Weighted average cost of capital fraction 0.0\nlifetime Int Asset lifetime in years years 1\ncapital_recovery_period Int Investment recovery period years 1\nretirement_period Int Retirement period years 0","category":"page"},{"location":"Manual/assets/fuelcell/#Operational-Parameters","page":"Fuel Cell","title":"Operational Parameters","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Field Type Description Units Default\navailability Dict Availability file path and header - Empty","category":"page"},{"location":"Manual/assets/fuelcell/#Additional-Operational-Parameters","page":"Fuel Cell","title":"Additional Operational Parameters","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Minimum flow constraint","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"If MinFlowConstraint is added to the constraints dictionary for the electricity edge, the following parameter is used:","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Field Type Description Units Default\nmin_flow_fraction Float64 Minimum flow as fraction of capacity fraction 0.0","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Ramping limit constraint","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"If RampingLimitConstraint is added to the constraints dictionary for the electricity edge, the following parameters are used:","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Field Type Description Units Default\nramp_up_fraction Float64 Maximum increase in flow between timesteps fraction 1.0\nramp_down_fraction Float64 Maximum decrease in flow between timesteps fraction 1.0","category":"page"},{"location":"Manual/assets/fuelcell/#fuelcell_type_definition","page":"Fuel Cell","title":"Types - Asset Structure","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"The FuelCell asset is defined as follows:","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"struct FuelCell <: AbstractAsset\n    id::AssetId\n    fuelcell_transform::Transformation\n    h2_edge::Edge{<:Hydrogen}\n    elec_edge::Edge{<:Electricity}\nend","category":"page"},{"location":"Manual/assets/fuelcell/#fuelcell_constructors","page":"Fuel Cell","title":"Constructors","text":"","category":"section"},{"location":"Manual/assets/fuelcell/#Default-constructor","page":"Fuel Cell","title":"Default constructor","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"FuelCell(id::AssetId, fuelcell_transform::Transformation, h2_edge::Edge{<:Hydrogen}, elec_edge::Edge{<:Electricity})","category":"page"},{"location":"Manual/assets/fuelcell/#Factory-constructor","page":"Fuel Cell","title":"Factory constructor","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"make(asset_type::Type{FuelCell}, data::AbstractDict{Symbol,Any}, system::System)","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Field Type Description\nasset_type Type{FuelCell} Macro type of the asset\ndata AbstractDict{Symbol,Any} Dictionary containing the input data for the asset\nsystem System System to which the asset belongs","category":"page"},{"location":"Manual/assets/fuelcell/#fuelcell_examples","page":"Fuel Cell","title":"Examples","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"This section contains examples of how to use the fuel cell asset in a Macro model.","category":"page"},{"location":"Manual/assets/fuelcell/#Multiple-fuel-cells-in-different-zones","page":"Fuel Cell","title":"Multiple fuel cells in different zones","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"This example shows how to create a set of fuel cells in different zones (SE, MIDAT, and NE), with different costs, capacities, and efficiency rates. Ramp rates and minimum flow fractions are set to 1.0 and 0.1, respectively for all fuel cells.","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"JSON Format:","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Note that the global_data field is used to set the fields and constraints that are common to all instances of the same asset type.","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"{\n    \"fuelcell\": [\n        {\n            \"type\": \"FuelCell\",\n            \"global_data\": {\n                \"elec_constraints\": {\n                    \"RampingLimitConstraint\": true,\n                    \"MinFlowConstraint\": true\n                },\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_FuelCell\",\n                    \"location\": \"SE\",\n                    \"efficiency_rate\": 0.875111139,\n                    \"investment_cost\": 41412.53426,\n                    \"fixed_om_cost\": 1052.480877,\n                    \"variable_om_cost\": 0.0,\n                    \"capacity_size\": 1.5,\n                    \"ramp_up_fraction\": 1,\n                    \"ramp_down_fraction\": 1,\n                    \"min_flow_fraction\": 0.1\n                },\n                {\n                    \"id\": \"MIDAT_FuelCell\",\n                    \"location\": \"MIDAT\",\n                    \"efficiency_rate\": 0.875111139,\n                    \"investment_cost\": 41123.53426,\n                    \"fixed_om_cost\": 1052.480877,\n                    \"variable_om_cost\": 0.0,\n                    \"capacity_size\": 1.7,\n                    \"ramp_up_fraction\": 1,\n                    \"ramp_down_fraction\": 1,\n                    \"min_flow_fraction\": 0.1\n                },\n                {\n                    \"id\": \"NE_FuelCell\",\n                    \"location\": \"NE\",\n                    \"efficiency_rate\": 0.875111139,\n                    \"investment_cost\": 41123.53426,\n                    \"fixed_om_cost\": 1052.480877,\n                    \"variable_om_cost\": 0.0,\n                    \"capacity_size\": 1.9,\n                    \"ramp_up_fraction\": 1,\n                    \"ramp_down_fraction\": 1,\n                    \"min_flow_fraction\": 0.1\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"CSV Format:","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Type id location efficiency_rate investment_cost fixed_om_cost variable_om_cost capacity_size ramp_up_fraction ramp_down_fraction min_flow_fraction elec_constraints–RampingLimitConstraint elec_constraints–MinFlowConstraint\nFuelCell SE_FuelCell SE 0.875111139 41112.53426 1052.480877 0.0 1.5 1 1 0.1 true true\nFuelCell MIDAT_FuelCell MIDAT 0.875111139 41123.53426 1052.480877 0.0 1.7 1 1 0.1 true true\nFuelCell NE_FuelCell NE 0.875111139 41123.53426 1052.480877 0.0 1.9 1 1 0.1 true true","category":"page"},{"location":"Manual/assets/fuelcell/#fuelcell_best_practices","page":"Fuel Cell","title":"Best Practices","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Use global data for common constraints: Use the global_data field to set the fields and constraints that are common to all instances of the same asset type.\nSet realistic efficiency rates: Ensure the fuel cell efficiency is accurate for the technology being modeled\nUse meaningful IDs: Choose descriptive identifiers that indicate location and technology type\nConsider operational constraints: Set appropriate ramp rates and minimum flow fractions based on technology characteristics\nUse constraints selectively: Only enable constraints that are necessary for your modeling needs\nValidate costs: Ensure investment and O&M costs are in appropriate units\nTest configurations: Start with simple configurations and gradually add complexity\nConsider hydrogen availability: Ensure hydrogen supply is available at the specified locations","category":"page"},{"location":"Manual/assets/fuelcell/#fuelcell_advanced_json_csv_input_format","page":"Fuel Cell","title":"Input File (Advanced Format)","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Macro provides an advanced format for defining fuel cell assets, offering users and modelers detailed control over asset specifications. This format builds upon the standard format and is ideal for those who need more comprehensive customization.","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"To understand the advanced format, consider the graph representation and the type definition of a fuel cell asset. The input file mirrors this hierarchical structure.","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"A fuel cell asset in Macro is composed of a transformation component, represented by a Transformation object, and two edges (hydrogen and electricity), each represented by an Edge object. The input file for a fuel cell asset is therefore organized as follows:","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"h2_edge\": {\n            // ... h2_edge-specific attributes ...\n        },\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Each top-level key (e.g., \"transforms\" or \"edges\") denotes a component type. The second-level keys either specify the attributes of the component (when there is a single instance) or identify the instances of the component (e.g., \"elec_edge\", \"h2_edge\", etc.) when there are multiple instances. For multiple instances, a third-level key details the attributes for each instance.","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Below is an example of an input file for a fuel cell asset that sets up multiple fuel cells across different regions:","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"{\n    \"fuelcell\": [\n        {\n            \"type\": \"FuelCell\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"commodity\": \"Electricity\",\n                    \"timedata\": \"Electricity\"\n                },\n                \"edges\": {\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true\n                        }\n                    },\n                    \"h2_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"fuelcell_SE\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.875\n                    },\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"start_vertex\": \"h2_SE\"\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"capacity_size\": 1.0,\n                            \"existing_capacity\": 0.0,\n                            \"fixed_om_cost\": 1052,\n                            \"investment_cost\": 41112,\n                            \"variable_om_cost\": 0.0\n                        }\n                    }\n                },\n                {\n                    \"id\": \"fuelcell_NE\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.875\n                    },\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"start_vertex\": \"h2_NE\"\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_NE\",\n                            \"capacity_size\": 1.0,\n                            \"existing_capacity\": 0.0,\n                            \"fixed_om_cost\": 1052,\n                            \"investment_cost\": 41112,\n                            \"variable_om_cost\": 0.0\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/fuelcell/#Key-points","page":"Fuel Cell","title":"Key points","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"The global_data field is utilized to define attributes and constraints that apply universally to all instances of a particular asset type.\nThe start_vertex and end_vertex fields indicate the nodes to which the edges are connected. These nodes must be defined in the nodes.json file.\nBy default, the electricity edge has capacity variables and can be expanded or retired (see note below).\nFor a comprehensive list of attributes that can be configured for the transformation and edge components, refer to the transformation and edges pages of the Macro manual.","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"note: The `has_capacity` Edge Attribute\nThe has_capacity attribute is a flag that indicates whether a specific edge of an asset has a capacity variable, allowing it to be expanded or retired. Typically, users do not need to manually adjust this flag, as the asset creators in Macro have already configured it correctly for each edge. However, advanced users can use this flag to override the default settings for each edge if needed.","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/#modeler_create_sector","page":"Creating a New Sector","title":"Creating a New Sector","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"Creating new sectors in Macro involves two main steps:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"Choose a unique name for the new sector.\nAdd the new sector to the MacroEnergy.jl file.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/#The-Commodity-Type","page":"Creating a New Sector","title":"The Commodity Type","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"tip: Types in Julia\nIf you're not familiar with Julia's type system, we recommend this section of the Julia documentation. In particular, for more information on abstract types, see the Abstract Types section.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"In Macro, the Commodity type is an abstract type which defines a generic type used to represent all commodities in the package. Each specific commodity (e.g., electricity, hydrogen) is then defined as a subtype of Commodity:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"MacroEnergy.jl","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"## Commodity types\nabstract type Commodity end\nabstract type Electricity <: Commodity end\nabstract type Hydrogen <: Commodity end\nabstract type NaturalGas <: Commodity end","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"Here, the operator <: means is-a-subtype-of. In this example, both Electricity and Hydrogen are subtypes of the abstract Commodity type.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"flowchart LR\n  %%{init: {'theme': 'base'}}%%\n  subgraph Macro commodity types\n    A[Commodity]\n    A --> B[Electricity]\n    A --> C[Hydrogen]\n    A --> D[NaturalGas]\n    end","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"This diagram shows the type hierarchy in Macro where:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"Commodity is the base (abstract) type\nElectricity, Hydrogen, and NaturalGas are all subtypes of Commodity\nThe arrows show the \"is-a-subtype-of\" relationship using the <: operator","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/#Adding-a-new-sector-to-Macro","page":"Creating a New Sector","title":"Adding a new sector to Macro","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"To define a new sector in Macro, simply add a new line in the MacroEnergy.jl file:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"MacroEnergy.jl","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"# ... existing code ...\nabstract type MyNewSector <: Commodity end\n# ... existing code ...","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"This line defines MyNewSector as a new subtype of Commodity. Once added, you can create nodes and edges in the energy system graph that correspond to this new sector.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/#Next-Steps","page":"Creating a New Sector","title":"Next Steps","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"After defining the new commodity type, you can proceed to build new assets and transformation processes using nodes and edges associated with any Commodity type defined in Macro.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"Creating a New Asset: Step-by-step instructions for developing a new asset.\nAdding Documentation for a New Asset: Instructions for adding documentation to a new asset.\nCreating a New Example Case: A guide to developing a new example case.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"","category":"page"},{"location":"Manual/Case/#Case","page":"Case","title":"Case","text":"","category":"section"},{"location":"Manual/Case/","page":"Case","title":"Case","text":"","category":"page"},{"location":"Manual/assets/gasstorage/#Gas-Storage","page":"Gas Storage","title":"Gas Storage","text":"","category":"section"},{"location":"Manual/assets/gasstorage/#Contents","page":"Gas Storage","title":"Contents","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Overview | Asset Structure | Flow Equations | Input File (Standard Format) | Types - Asset Structure | Constructors | Examples | Best Practices | Input File (Advanced Format)","category":"page"},{"location":"Manual/assets/gasstorage/#gasstorage_overview","page":"Gas Storage","title":"Overview","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Gas Storage assets in Macro represent storage systems for gas commodities (such as hydrogen, natural gas, etc.) that can store and release gas using compression technology. These assets are defined using either JSON or CSV input files placed in the assets directory, typically named gas_storage.json or gas_storage.csv.","category":"page"},{"location":"Manual/assets/gasstorage/#gasstorage_asset_structure","page":"Gas Storage","title":"Asset Structure","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"A gas storage asset consists of one storage component, one transformation component, and six edge components:","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Compressor Charge Electricity Edge: Incoming edge representing electricity consumption for compression\nCompressor Charge Gas Edge: Incoming edge representing gas flow into the compressor\nTransformation Component: Represents the gas compressor that balances flows\nCharge Edge: Internal edge representing gas flow from the compressor to the storage\nStorage Component: Tracks the energy level in the storage over time\nDischarge Edge: Internal edge representing gas flow from the storage to the compressor\nCompressor Discharge Electricity Edge: Outgoing edge representing electricity consumption for gas discharge\nCompressor Discharge Gas Edge: Outgoing edge representing gas flow from the storage to the system","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Here is a graphical representation of the gas storage asset:","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph GasStorage\n  direction LR\n    A((Electricity)) e1@--> C{{..}} e2@--> A((Electricity))\n    B((Gas Type)) e3@--> C{{..}} e4@--> B((Gas Type))\n    C e5@--> D[Storage] e6@--> C\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n    e6@{ animate: true }\n end\n    style A font-size:19px,r:55px,fill:#FFD700,stroke:black,color:black, stroke-dasharray: 3,5;\n    style B r:44px,fill:lightblue,stroke:black,color:black, stroke-dasharray: 3,5;\n    style C fill:black,stroke:black,color:black;\n    style D fill:lightblue,stroke:black,color:black;\n\n    linkStyle 0,1 stroke:#FFD700, stroke-width: 3px;\n    linkStyle 2,3 stroke:lightblue, stroke-width: 3px;\n    linkStyle 4,5 stroke:lightblue, stroke-width: 3px;","category":"page"},{"location":"Manual/assets/gasstorage/#gasstorage_flow_equations","page":"Gas Storage","title":"Flow Equations","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"The gas storage asset follows these flow relationships:","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Compressor transformation:","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"beginaligned\nphi_elec = phi_gas cdot epsilon_charge_elec_consumption quad text(charging) \nphi_elec = phi_gas cdot epsilon_discharge_elec_consumption quad text(discharging) \nendaligned","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Where:","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"phi represents the flow of each commodity\nepsilon represents the stoichiometric coefficients defined in the table below (see table Conversion Process Parameters)","category":"page"},{"location":"Manual/assets/gasstorage/#gasstorage_input_file","page":"Gas Storage","title":"Input File (Standard Format)","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"The easiest way to include a gas storage asset in a model is to create a new file (either JSON or CSV) and place it in the assets directory together with the other assets.","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"your_case/\n├── assets/\n│   ├── gas_storage.json    # or gas_storage.csv\n│   ├── other_assets.json\n│   └── ...\n├── system/\n├── settings/\n└── ...","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"This file can either be created manually, or using the template_asset function, as shown in the Adding an Asset to a System section of the User Guide. The file will be automatically loaded when you run your Macro model.","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"The following is an example of a gas storage asset input file:","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"{\n    \"h2stor\": [\n        {\n            \"type\": \"GasStorage\",\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Above_ground_storage\",\n                    \"location\": \"SE\",\n                    \"timedata\": \"Hydrogen\",\n                    \"storage_commodity\": \"Hydrogen\",\n                    \"storage_long_duration\": true,\n                    \"storage_can_retire\": false,\n                    \"storage_investment_cost\": 873.01,\n                    \"storage_fixed_om_cost\": 28.76,\n                    \"storage_loss_fraction\": 0.0,\n                    \"storage_min_storage_level\": 0.3,\n                    \"storage_constraints\": {\n                        \"BalanceConstraint\": true,\n                        \"MinStorageLevelConstraint\": true\n                    },\n                    \"discharge_can_retire\": false,\n                    \"charge_can_retire\": false,\n                    \"discharge_existing_capacity\": 0,\n                    \"charge_existing_capacity\": 0,\n                    \"discharge_investment_cost\": 0.0,\n                    \"charge_investment_cost\": 3219.24,\n                    \"discharge_electricity_consumption\": 0.02,\n                    \"charge_electricity_consumption\": 0.01,\n                    \"discharge_efficiency\": 1.0,\n                    \"charge_efficiency\": 1.0\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"tip: Global Data vs Instance Data\nWhen working with JSON input files, the global_data field can be used to set the fields and constraints that are common to all instances of the same asset type. This is useful for setting constraints that are common to all instances of the same asset type and avoid repeating the same data for each instance. See the Examples section below for an example.","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"The following tables outline the attributes that can be set for a gas storage asset.","category":"page"},{"location":"Manual/assets/gasstorage/#Essential-Attributes","page":"Gas Storage","title":"Essential Attributes","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Field Type Description\nType String Asset type identifier: \"GasStorage\"\nid String Unique identifier for the gas storage instance\nlocation String Geographic location/node identifier\nstorage_commodity String Commodity identifier for the gas being stored\ntimedata String Commodity identifier for the time resolution being used\nstorage_long_duration Boolean Whether the storage is long-duration","category":"page"},{"location":"Manual/assets/gasstorage/#gasstorage_conversion_process_parameters","page":"Gas Storage","title":"Conversion Process Parameters","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"The following set of parameters control the conversion process and stoichiometry of the gas storage asset (see Flow Equations for more details).","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Field Type Description Units Default\ncharge_electricity_consumption Float64 Electricity consumption per unit gas MWh_elecMWh_gas 0.0\ndischarge_electricity_consumption Float64 Electricity consumption per unit gas MWh_elecMWh_gas 0.0\ncharge_efficiency Float64 Efficiency of the charging of the storage component fraction 1.0\ndischarge_efficiency Float64 Efficiency of the discharging of the storage component fraction 1.0","category":"page"},{"location":"Manual/assets/gasstorage/#\"gasstorage_constraints\"","page":"Gas Storage","title":"Constraints Configuration","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Gas storage assets can have different constraints applied to them, and the user can configure them using the following fields:","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Field Type Description\ntransform_constraints Dict{String,Bool} List of constraints applied to the transformation component.\ncharge_constraints Dict{String,Bool} List of constraints applied to the charge edge.\ndischarge_constraints Dict{String,Bool} List of constraints applied to the discharge edge.\nstorage_constraints Dict{String,Bool} List of constraints applied to the storage component.\ncharge_elec_constraints Dict{String,Bool} List of constraints applied to the charge electricity edge.\ndischarge_elec_constraints Dict{String,Bool} List of constraints applied to the discharge electricity edge.\nexternal_charge_constraints Dict{String,Bool} List of constraints applied to the charge gas edge.\nexternal_discharge_constraints Dict{String,Bool} List of constraints applied to the discharge gas edge.","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"For example, if the user wants to apply the StorageCapacityConstraint, BalanceConstraint and MinStorageLevelConstraint to the storage component, and the RampingLimitConstraint to the discharge edge, the constraints fields should be set as follows:","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"{\n    \"storage_constraints\": {\n        \"BalanceConstraint\": true,\n        \"StorageCapacityConstraint\": true,\n        \"MinStorageLevelConstraint\": true\n    },\n    \"discharge_constraints\": {\n        \"RampingLimitConstraint\": true\n    }\n}","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Users can refer to the Adding Asset Constraints to a System section of the User Guide for a list of all the constraints that can be applied to a gas storage asset.","category":"page"},{"location":"Manual/assets/gasstorage/#Default-constraints","page":"Gas Storage","title":"Default constraints","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"To simplify the input file and the asset configuration, the following constraints are applied to the gas storage asset by default:","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Balance constraint (applied to the transformation component)\nCapacity constraint (applied to both charge and discharge edges)\nStorage capacity constraint (applied to the storage component)","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"If the storage is a long-duration storage (i.e., \"storage_long_duration\": true is set in the input file), the following additional constraints are applied by default:","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Long-duration storage constraints (applied to the storage component)","category":"page"},{"location":"Manual/assets/gasstorage/#Investment-Parameters","page":"Gas Storage","title":"Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Field Type Description Units Default\nstorage_can_retire Boolean Whether storage capacity can be retired - false\nstorage_can_expand Boolean Whether storage capacity can be expanded - false\nstorage_existing_capacity Float64 Initial installed storage capacity MWh 0.0\nstorage_capacity_size Float64 Unit size for capacity decisions - 1.0\ncharge_can_retire Boolean Whether charge edge capacity can be retired - true\ncharge_can_expand Boolean Whether charge edge capacity can be expanded - true\ncharge_existing_capacity Float64 Initial installed charge edge capacity MW 0.0\ncharge_capacity_size Float64 Unit size for capacity decisions - 1.0\ndischarge_can_retire Boolean Whether discharge edge capacity can be retired - true\ndischarge_can_expand Boolean Whether discharge edge capacity can be expanded - true\ndischarge_existing_capacity Float64 Initial installed discharge edge capacity MW 0.0\ndischarge_capacity_size Float64 Unit size for capacity decisions - 1.0","category":"page"},{"location":"Manual/assets/gasstorage/#Additional-Investment-Parameters","page":"Gas Storage","title":"Additional Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Maximum and minimum capacity constraints","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"If MaxCapacityConstraint or MinCapacityConstraint are added to the constraints dictionary for the storage or edges, the following parameters are used by Macro:","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Field Type Description Units Default\nstorage_max_capacity Float64 Maximum allowed storage capacity MWh Inf\nstorage_min_capacity Float64 Minimum allowed storage capacity MWh 0.0\ncharge_max_capacity Float64 Maximum allowed charge edge capacity MW Inf\ncharge_min_capacity Float64 Minimum allowed charge edge capacity MW 0.0\ndischarge_max_capacity Float64 Maximum allowed discharge edge capacity MW Inf\ndischarge_min_capacity Float64 Minimum allowed discharge edge capacity MW 0.0","category":"page"},{"location":"Manual/assets/gasstorage/#Economic-Parameters","page":"Gas Storage","title":"Economic Parameters","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Field Type Description Units Default\nstorage_investment_cost Float64 CAPEX per unit storage capacity $/MWh/yr 0.0\nstorage_fixed_om_cost Float64 Fixed O&M costs of the storage component $/MWh/yr 0.0\nstorage_variable_om_cost Float64 Variable O&M costs of the storage component $/MWh 0.0\ndischarge_investment_cost Float64 CAPEX per unit discharge edge capacity $/MW/yr 0.0\ndischarge_fixed_om_cost Float64 Fixed O&M costs of the discharge edge $/MW/yr 0.0\ndischarge_variable_om_cost Float64 Variable O&M costs of the discharge edge $/MWh 0.0\ncharge_investment_cost Float64 CAPEX per unit charge edge capacity $/MW/yr 0.0\ncharge_fixed_om_cost Float64 Fixed O&M costs of the charge edge $/MW/yr 0.0\ncharge_variable_om_cost Float64 Variable O&M costs of the charge edge $/MWh 0.0","category":"page"},{"location":"Manual/assets/gasstorage/#Charge-and-Discharge-Efficiency","page":"Gas Storage","title":"Charge and Discharge Efficiency","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Field Type Description Default\ncharge_efficiency Float64 Efficiency of the charging process 1.0\ndischarge_efficiency Float64 Efficiency of the discharging process 1.0","category":"page"},{"location":"Manual/assets/gasstorage/#Operational-Parameters","page":"Gas Storage","title":"Operational Parameters","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Field Type Description Units Default\nstorage_loss_fraction Float64 Fraction of stored energy lost per timestep fraction 0.0","category":"page"},{"location":"Manual/assets/gasstorage/#Additional-Operational-Parameters","page":"Gas Storage","title":"Additional Operational Parameters","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Storage duration constraints","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"If StorageMaxDurationConstraint or StorageMinDurationConstraint are added to the constraints dictionary for the storage component, the following parameters are used:","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Field Type Description Units Default\nstorage_max_duration Float64 Maximum ratio of installed energy to discharged capacity hours 0.0\nstorage_min_duration Float64 Minimum ratio of installed energy to discharged capacity hours 0.0","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Storage level constraints","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"If MaxStorageLevelConstraint or MinStorageLevelConstraint are added to the constraints dictionary for the storage component, the following parameters are used:","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Field Type Description Units Default\nstorage_max_storage_level Float64 Maximum storage level as fraction of capacity fraction 1.0\nstorage_min_storage_level Float64 Minimum storage level as fraction of capacity fraction 0.0","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Minimum flow constraint","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"If MinFlowConstraint is added to the constraints dictionary for the discharge edge, the following parameter is used:","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Field Type Description Units Default\ndischarge_min_flow_fraction Float64 Minimum discharge as fraction of capacity fraction 0.0\ncharge_min_flow_fraction Float64 Minimum charge as fraction of capacity fraction 0.0","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Ramping limit constraint","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"If RampingLimitConstraint is added to the constraints dictionary for the charge or discharge edges, the following parameters are used:","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Field Type Description Units Default\ncharge_ramp_up_fraction Float64 Maximum increase in flow between timesteps fraction 1.0\ncharge_ramp_down_fraction Float64 Maximum decrease in flow between timesteps fraction 1.0\ndischarge_ramp_up_fraction Float64 Maximum increase in flow between timesteps fraction 1.0\ndischarge_ramp_down_fraction Float64 Maximum decrease in flow between timesteps fraction 1.0","category":"page"},{"location":"Manual/assets/gasstorage/#gasstorage_type_definition","page":"Gas Storage","title":"Types - Asset Structure","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"The GasStorage asset is defined as follows:","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"struct GasStorage{T} <: AbstractAsset\n    id::AssetId\n    pump_transform::Transformation\n    gas_storage::AbstractStorage{<:T}\n    charge_edge::Edge{<:T}\n    discharge_edge::Edge{<:T}\n    external_charge_edge::Edge{<:T}\n    external_discharge_edge::Edge{<:T}\n    charge_elec_edge::Edge{<:Electricity}\n    discharge_elec_edge::Edge{<:Electricity}\nend","category":"page"},{"location":"Manual/assets/gasstorage/#gasstorage_constructors","page":"Gas Storage","title":"Constructors","text":"","category":"section"},{"location":"Manual/assets/gasstorage/#Default-constructor","page":"Gas Storage","title":"Default constructor","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"GasStorage(id::AssetId, pump_transform::Transformation, gas_storage::AbstractStorage{T}, charge_edge::Edge{T}, discharge_edge::Edge{T}, external_charge_edge::Edge{T}, external_discharge_edge::Edge{T}, charge_elec_edge::Edge{<:Electricity}, discharge_elec_edge::Edge{<:Electricity}) where {T<:Commodity}","category":"page"},{"location":"Manual/assets/gasstorage/#Factory-constructor","page":"Gas Storage","title":"Factory constructor","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"make(asset_type::Type{GasStorage}, data::AbstractDict{Symbol,Any}, system::System)","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Field Type Description\nasset_type Type{GasStorage} Macro type of the asset\ndata AbstractDict{Symbol,Any} Dictionary containing the input data for the asset\nsystem System System to which the asset belongs","category":"page"},{"location":"Manual/assets/gasstorage/#gasstorage_examples","page":"Gas Storage","title":"Examples","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"This section contains examples of how to use the gas storage asset in a Macro model.","category":"page"},{"location":"Manual/assets/gasstorage/#Simple-Gas-Storage-Asset","page":"Gas Storage","title":"Simple Gas Storage Asset","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"This example shows a new single asymmetric long-duration hydrogen storage asset located in the SE region with capacity that can only be expanded and not retired. The charge and discharge efficiency are set to 1.0, and the charge and discharge electricity consumption are set to 0.01 and 0.02, respectively. A MinStorageLevelConstraint constraint is applied to the storage component to ensure that the storage level is at least 30% of the capacity. A RampingLimitConstraint constraint is applied to the discharge edge with a ramping limit of 1.0. The storage component doesn't have losses.","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"JSON Format:","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"{\n    \"h2stor\": [\n        {\n            \"type\": \"GasStorage\",\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Above_ground_storage\",\n                    \"location\": \"SE\",\n                    \"timedata\": \"Hydrogen\",\n                    \"charge_electricity_consumption\": 0.01,\n                    \"discharge_electricity_consumption\": 0.02,\n                    \"storage_commodity\": \"Hydrogen\",\n                    \"storage_long_duration\": true,\n                    \"discharge_can_retire\": false,\n                    \"discharge_existing_capacity\": 0,\n                    \"discharge_investment_cost\": 0.0,\n                    \"discharge_efficiency\": 1.0,\n                    \"discharge_ramp_up_fraction\": 1,\n                    \"discharge_ramp_down_fraction\": 1,\n                    \"charge_can_retire\": false,\n                    \"charge_existing_capacity\": 0,\n                    \"charge_investment_cost\": 3219.24,\n                    \"charge_efficiency\": 1.0,\n                    \"storage_can_retire\": false,\n                    \"storage_investment_cost\": 873.01,\n                    \"storage_fixed_om_cost\": 28.76,\n                    \"storage_loss_fraction\": 0.0,\n                    \"storage_min_storage_level\": 0.3,\n                    \"storage_constraints\": {\n                        \"BalanceConstraint\": true,\n                        \"StorageCapacityConstraint\": true,\n                        \"MinStorageLevelConstraint\": true\n                    },\n                    \"discharge_constraints\": {\n                        \"RampingLimitConstraint\": true\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"CSV Format:","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"type id location timedata charge_electricity_consumption discharge_electricity_consumption storage_commodity storage_long_duration discharge_can_retire discharge_existing_capacity discharge_investment_cost discharge_efficiency discharge_ramp_up_fraction discharge_ramp_down_fraction charge_can_retire charge_existing_capacity charge_investment_cost charge_efficiency storage_can_retire storage_investment_cost storage_fixed_om_cost storage_loss_fraction storage_min_storage_level storage_constraints–BalanceConstraint storage_constraints–StorageCapacityConstraint storage_constraints–MinStorageLevelConstraint discharge_constraints–RampingLimitConstraint\nGasStorage SE_Above_ground_storage SE Hydrogen 0.01 0.02 Hydrogen true false 0 0.0 1.0 1 1 false 0 3219.236569 1.0 false 873.013307 28.75810056 0.0 0.3 true true true true","category":"page"},{"location":"Manual/assets/gasstorage/#Multiple-Hydrogen-Storage-Assets-in-Different-Zones","page":"Gas Storage","title":"Multiple Hydrogen Storage Assets in Different Zones","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"This example shows how to create a set of new asymmetric long-duration hydrogen storage assets in different zones (SE, MIDAT, and NE), with different costs, capacities, and efficiency rates. Ramp rates and minimum storage levels are set to 1.0 and 0.3, respectively for all storage assets.","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"JSON Format:","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Note that the global_data field is used to set the fields and constraints that are common to all instances of the same asset type.","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"{\n    \"h2stor\": [\n        {\n            \"type\": \"GasStorage\",\n            \"global_data\": {\n                \"timedata\": \"Hydrogen\",\n                \"charge_electricity_consumption\": 0.01,\n                \"discharge_electricity_consumption\": 0.02,\n                \"storage_commodity\": \"Hydrogen\",\n                \"storage_long_duration\": true,\n                \"discharge_can_retire\": false,\n                \"discharge_existing_capacity\": 0,\n                \"discharge_investment_cost\": 0.0,\n                \"discharge_efficiency\": 1.0,\n                \"discharge_ramp_up_fraction\": 1,\n                \"discharge_ramp_down_fraction\": 1,\n                \"charge_can_retire\": false,\n                \"charge_existing_capacity\": 0,\n                \"charge_investment_cost\": 3219.24,\n                \"charge_efficiency\": 1.0,\n                \"storage_can_retire\": false,\n                \"storage_investment_cost\": 873.01,\n                \"storage_fixed_om_cost\": 28.76,\n                \"storage_loss_fraction\": 0.0,\n                \"storage_min_storage_level\": 0.3,\n                \"storage_constraints\": {\n                    \"BalanceConstraint\": true,\n                    \"StorageCapacityConstraint\": true,\n                    \"MinStorageLevelConstraint\": true\n                },\n                \"discharge_constraints\": {\n                    \"RampingLimitConstraint\": true\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Above_ground_storage\",\n                    \"location\": \"SE\"\n                },\n                {\n                    \"id\": \"MIDAT_Above_ground_storage\",\n                    \"location\": \"MIDAT\"\n                },\n                {\n                    \"id\": \"NE_Above_ground_storage\",\n                    \"location\": \"NE\"\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"CSV Format:","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"type id location timedata chargeelectricityconsumption dischargeelectricityconsumption storage_commodity storagelongduration dischargecanretire dischargeexistingcapacity dischargeinvestmentcost discharge_efficiency dischargerampup_fraction dischargerampdown_fraction chargecanretire chargeexistingcapacity chargeinvestmentcost charge_efficiency storagecanretire storageinvestmentcost storagefixedom_cost storagelossfraction storageminstorage_level storage_constraints–BalanceConstraint storage_constraints–StorageCapacityConstraint storage_constraints–MinStorageLevelConstraint discharge_constraints–RampingLimitConstraint\nGasStorage SE_Above_ground_storage SE Hydrogen 0.01 0.02 Hydrogen true true true false true true Hydrogen true true true false true Hydrogen true false true true true 0 0.0\nGasStorage MIDAT_Above_ground_storage MIDAT Hydrogen 0.01 0.02 Hydrogen true true true false true true Hydrogen true true true false true Hydrogen true false true true true 0 0.0\nGasStorage NE_Above_ground_storage NE Hydrogen 0.01 0.02 Hydrogen true true true false true true Hydrogen true true true false true Hydrogen true false true true true 0 0.0","category":"page"},{"location":"Manual/assets/gasstorage/#gasstorage_best_practices","page":"Gas Storage","title":"Best Practices","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Use global data for common fields and constraints: Use the global_data field to set the fields and constraints that are common to all instances of the same asset type.\nSet realistic efficiency values: Ensure charge and discharge efficiencies reflect actual technology performance\nUse meaningful IDs: Choose descriptive identifiers that indicate location and storage type\nConsider electricity consumption: Set appropriate electricity consumption for the compressor\nValidate costs: Ensure investment and O&M costs are in appropriate units and time periods\nTest configurations: Start with simple configurations and gradually add complexity\nSet appropriate storage levels: Consider minimum storage levels for operational requirements","category":"page"},{"location":"Manual/assets/gasstorage/#gasstorage_advanced_json_csv_input_format","page":"Gas Storage","title":"Input File (Advanced Format)","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Macro provides an advanced format for defining gas storage assets, offering users and modelers detailed control over asset specifications. This format builds upon the standard format and is ideal for those who need more comprehensive customization.","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"To understand the advanced format, consider the graph representation and the type definition of a gas storage asset. The input file mirrors this hierarchical structure.","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"A gas storage asset in Macro is composed of a storage component, represented by a Storage object, a transformation component, represented by a Transformation object, and six edges, each represented by an Edge object. The input file for a gas storage asset is therefore organized as follows:","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"{\n    \"storage\":{\n        // ... storage-specific attributes ...\n    },\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"charge_elec_edge\": {\n            // ... charge_elec_edge-specific attributes ...\n        },\n        \"discharge_elec_edge\": {\n            // ... compressor_gas_edge-specific attributes ...\n        },\n        \"charge_edge\": {\n            // ... charge_edge-specific attributes ...\n        },\n        \"discharge_edge\": {\n            // ... discharge_edge-specific attributes ...\n        },\n        \"external_charge_edge\": {\n            // ... external_charge_edge-specific attributes ...\n        },\n        \"external_discharge_edge\": {\n            // ... external_discharge_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Each top-level key (e.g., \"storage\", \"transforms\", or \"edges\") denotes a component type. The second-level keys either specify the attributes of the component (when there is a single instance) or identify the instances of the component (e.g., \"discharge_elec_edge\", \"charge_edge\", etc.) when there are multiple instances. For multiple instances, a third-level key details the attributes for each instance.","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Below is an example of an input file for a gas storage asset that sets a single instance of the asset in each of the three zones, SE, MIDAT, and NE.","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"{\n    \"h2stor\": [\n        {\n            \"type\": \"GasStorage\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"Hydrogen\",\n                    \"charge_electricity_consumption\": 0.01,\n                    \"discharge_electricity_consumption\": 0.02\n                },\n                \"storage\": {\n                    \"commodity\": \"Hydrogen\",\n                    \"can_expand\": true,\n                    \"can_retire\": false,\n                    \"long_duration\": true,\n                    \"investment_cost\": 873.01,\n                    \"fixed_om_cost\": 28.76,\n                    \"loss_fraction\": 0.0,\n                    \"min_storage_level\": 0.3,\n                    \"constraints\": {\n                        \"StorageCapacityConstraint\": true,\n                        \"BalanceConstraint\": true,\n                        \"MinStorageLevelConstraint\": true,\n                        \"LongDurationStorageImplicitMinMaxConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"discharge_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"has_capacity\": true,\n                        \"efficiency\": 1.0,\n                        \"ramp_up_fraction\": 1,\n                        \"ramp_down_fraction\": 1,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true\n                        }\n                    },\n                    \"charge_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"investment_cost\": 3219.24,\n                        \"efficiency\": 1.0,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true\n                        }\n                    },\n                    \"charge_elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"discharge_elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"external_charge_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"external_discharge_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Above_ground_storage\",\n                    \"edges\": {\n                        \"external_discharge_edge\": {\n                            \"end_vertex\": \"h2_SE\"\n                        },\n                        \"external_charge_edge\": {\n                            \"start_vertex\": \"h2_SE\"\n                        },\n                        \"discharge_elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        },\n                        \"charge_elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_Above_ground_storage\",\n                    \"edges\": {\n                        \"external_discharge_edge\": {\n                            \"end_vertex\": \"h2_MIDAT\"\n                        },\n                        \"external_charge_edge\": {\n                            \"start_vertex\": \"h2_MIDAT\"\n                        },\n                        \"discharge_elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\"\n                        },\n                        \"charge_elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_Above_ground_storage\",\n                    \"edges\": {\n                        \"external_discharge_edge\": {\n                            \"end_vertex\": \"h2_NE\"\n                        },\n                        \"external_charge_edge\": {\n                            \"start_vertex\": \"h2_NE\"\n                        },\n                        \"discharge_elec_edge\": {\n                            \"start_vertex\": \"elec_NE\"\n                        },\n                        \"charge_elec_edge\": {\n                            \"start_vertex\": \"elec_NE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/gasstorage/#Key-Points","page":"Gas Storage","title":"Key Points","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"The global_data field is utilized to define attributes and constraints that apply universally to all instances of a particular asset type.\nThe start_vertex and end_vertex fields indicate the nodes to which the edges are connected. These nodes must be defined in the nodes.json file.\nBy default, both charge and discharge edges can have capacity variables and constraints, representing the power capacity of the storage system (see note below).\nThe storage component represents the energy capacity of the storage facility.\nFor a comprehensive list of attributes that can be configured for the storage, transformation, and edge components, refer to the storage, transformation, and edges pages of the Macro manual.","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"note: The `has_capacity` Edge Attribute\nThe has_capacity attribute is a flag that indicates whether a specific edge of an asset has a capacity variable, allowing it to be expanded or retired. Typically, users do not need to manually adjust this flag, as the asset creators in Macro have already configured it correctly for each edge. However, advanced users can use this flag to override the default settings for each edge if needed.","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"tip: Prefixes\nUsers can apply prefixes to adjust parameters for the components of a gas storage asset, even when using the standard format. For instance, discharge_can_retire will adjust the can_retire parameter for the discharge edge, and discharge_existing_capacity will adjust the existing_capacity parameter for the discharge edge. Below are the prefixes available for modifying parameters for the components of a gas storage asset:transform_ for the transformation component\nstorage_ for the storage component\ndischarge_ for the discharge edge\ncharge_ for the charge edge\ndischarge_elec_ for the discharge electricity edge\ncharge_elec_ for the charge electricity edge\nexternal_discharge_ for the external discharge edge\nexternal_charge_ for the external charge edge","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"","category":"page"},{"location":"Manual/related_packages/#Related-Packages","page":"Related Packages","title":"Related Packages","text":"","category":"section"},{"location":"Manual/related_packages/","page":"Related Packages","title":"Related Packages","text":"","category":"page"},{"location":"Manual/Balances/#Balances","page":"Balances","title":"Balances","text":"","category":"section"},{"location":"Manual/Balances/#Node-Balances","page":"Balances","title":"Node Balances","text":"","category":"section"},{"location":"Manual/Balances/#Transformation-Balances","page":"Balances","title":"Transformation Balances","text":"","category":"section"},{"location":"Manual/Balances/","page":"Balances","title":"Balances","text":"","category":"page"},{"location":"Manual/Transformations/#Transformations","page":"Transformations","title":"Transformations","text":"","category":"section"},{"location":"Manual/Transformations/#Contents","page":"Transformations","title":"Contents","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Overview | Fields | Types | Constructors | Methods | Examples","category":"page"},{"location":"Manual/Transformations/#manual-transformations-overview","page":"Transformations","title":"Overview","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Transformations balance flows of several Commodities, handling the conversion of one or more Commodities into one or more others. They are one of the four primary components in Macro, alongside Nodes, Edges, and Storage. They are sub-types of the Vertex type.","category":"page"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Unlike Nodes, which balance flows of a single Commodity, Transformations manage multi-commodity conversion processes. They rely on user-defined stoichiometric balances to govern these multi-flow relationships. They are essential for modeling energy conversion technologies, chemical processes, and other systems that transform one form of energy or material into another.","category":"page"},{"location":"Manual/Transformations/#Transformations-in-Assets","page":"Transformations","title":"Transformations in Assets","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Transformation components are typically incorporated into Assets, representing the ability of those Assets to convert between different Commodities. This could be used to model:","category":"page"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Power Plants: Converting fuel (natural gas, coal, uranium) into electricity and emissions\nChemical Plants: Converting raw materials and fuel into chemical products\nGas Pipelines: Electricty is required to run compressors and pumps, facilitating the flow of gases. This can be modeled as a Transformation that converts Electricity and NaturalGas into a second flow of NaturalGas.","category":"page"},{"location":"Manual/Transformations/#Natural-Gas-Power-Plant-Asset","page":"Transformations","title":"Natural Gas Power Plant Asset","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"A natural gas power plant Asset can be modeled using a Transformation component that converts NaturalGas into Electricity, CO2. Other formulations may account for oxidizer and waste heat. The Transformation component uses stoichiometric balances to define the conversion ratios, such as the heat rate (fuel consumption per unit electricity) and emission factor (CO2 per unit fuel). The Edges connected to the Transformation handle the actual flows, including flow / capacity limits, while the Transformation enforces the conversion relationships.","category":"page"},{"location":"Manual/Transformations/#Multi-Product-Refineries","page":"Transformations","title":"Multi-Product Refineries","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Complex industrial processes like refineries can use multiple Transformation components to model different conversion units. Each Transformation handles a specific conversion process (e.g., distillation, cracking, reforming) with its own stoichiometric relationships, allowing for detailed modeling of multi-product facilities.","category":"page"},{"location":"Manual/Transformations/#Transformations-Outside-of-Assets","page":"Transformations","title":"Transformations Outside of Assets","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Transformation components can be used outside of Assets, but there is no standard input file format to do so currently. Most Users will be better served by using Transformation components within Assets, as this allows for more complex interactions and standardized input formats. However, it is possible to define Transformations directly in the Julia script you use to build and solve your model. Please feel free to reach out to the development team via a GitHub issue if you have a use case for this.","category":"page"},{"location":"Manual/Transformations/#Key-Concepts","page":"Transformations","title":"Key Concepts","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Multi-Commodity Conversion: Transformations handle conversion between flows of several Commodity using multi-commodity balance constraints\nStoichiometric Balances: User-defined relationships govern the conversion ratios between input and output flows\nAsset Integration: Transformations are typically used within Assets to model conversion technologies","category":"page"},{"location":"Manual/Transformations/#manual-transformation-fields","page":"Transformations","title":"Transformation Fields","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Transformations have the following fields. When running a model, the fields are set by the input files. When creating an Asset, the defaults below can be altered using the @transform_data macro. The internal fields are used by Macro and are not intended to be set by users in most circumstances.","category":"page"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Moreso than other components, Transformations rely heavily on additional inputs defined as part of the Asset they are a part of. These additional inputs are used to define the stoichiometric balances of the Transformation. These are not shown in the following tables as they are not part of the Transformation itself, but rather part of the Asset that contains the Transformation.","category":"page"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"note: Units in Macro\nWe have assumed that your System is using units of MWh for energy, tonnes for mass, and hour-long time steps. You can use any set of units as long as they are consistent across your operations and investment inputs.","category":"page"},{"location":"Manual/Transformations/#Network-Structure","page":"Transformations","title":"Network Structure","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Field Type Description Default\nid Symbol Unique identifier -\nlocation Union{Missing,Symbol} Location where transformation is placed missing","category":"page"},{"location":"Manual/Transformations/#Stoichiometric-Balance-Data-(Internal)","page":"Transformations","title":"Stoichiometric Balance Data (Internal)","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Field Type Description Units Default\nbalance_data Dict{Symbol,Dict{Symbol,Float64}} Stoichiometric equation coefficients varies Dict{Symbol,Dict{Symbol,Float64}}()\nconstraints Vector{AbstractTypeConstraint} Additional constraints - Vector{AbstractTypeConstraint}()\noperation_expr Dict Operational JuMP expressions - Dict()","category":"page"},{"location":"Manual/Transformations/#Time-Related-Data-(Internal)","page":"Transformations","title":"Time-Related Data (Internal)","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Field Type Description Units Default\ntimedata TimeData Time-related modeling data - -","category":"page"},{"location":"Manual/Transformations/#manual-transformations-types","page":"Transformations","title":"Types","text":"","category":"section"},{"location":"Manual/Transformations/#Type-Hierarchy","page":"Transformations","title":"Type Hierarchy","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Transformation types follow a hierarchical structure rooted in the abstract AbstractVertex type:","category":"page"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"AbstractVertex\n├── Node{T}\n├── AbstractStorage{T}\n│   ├── Storage{T}\n│   └── LongDurationStorage{T}\n└── Transformation","category":"page"},{"location":"Manual/Transformations/#Transformation","page":"Transformations","title":"Transformation","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"The Transformation type represents conversion processes between different commodities. Unlike other vertex types that are parameterized by commodity type, Transformations handle multiple commodities simultaneously through stoichiometric balance equations.","category":"page"},{"location":"Manual/Transformations/#manual-transformations-constructors","page":"Transformations","title":"Constructors","text":"","category":"section"},{"location":"Manual/Transformations/#Keyword-Constructors","page":"Transformations","title":"Keyword Constructors","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Transformation(; id::Symbol, timedata::TimeData, [additional_fields...])","category":"page"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Direct constructors using keyword arguments for all fields.","category":"page"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Parameter Type Description Required\nid Symbol Unique identifier Yes\ntimedata TimeData Time-related data structure Yes\nlocation Union{Missing,Symbol} Location where transformation is placed No\nbalance_data Dict{Symbol,Dict{Symbol,Float64}} Stoichiometric equation coefficients No\nconstraints Vector{AbstractTypeConstraint} Additional constraints No\noperation_expr Dict Operational JuMP expressions No","category":"page"},{"location":"Manual/Transformations/#Primary-Constructors","page":"Transformations","title":"Primary Constructors","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Transformation(id::Symbol, data::Dict{Symbol,Any}, time_data::TimeData)","category":"page"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Creates Transformation components from input data dictionary and time data.","category":"page"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Parameter Type Description\nid Symbol Unique identifier for the transformation\ndata Dict{Symbol,Any} Dictionary of transformation configuration data\ntime_data TimeData Time-related data structure","category":"page"},{"location":"Manual/Transformations/#Factory-Constructors","page":"Transformations","title":"Factory Constructors","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"make_transformation(id::Symbol, data::Dict{Symbol,Any}, time_data::TimeData)","category":"page"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Internal factory methods for creating Transformation components with data processing.","category":"page"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Parameter Type Description\nid Symbol Unique identifier for the transformation\ndata Dict{Symbol,Any} Configuration data for the transformation\ntime_data TimeData Time-related data structure","category":"page"},{"location":"Manual/Transformations/#manual-transformations-methods","page":"Transformations","title":"Methods","text":"","category":"section"},{"location":"Manual/Transformations/#Accessor-Methods","page":"Transformations","title":"Accessor Methods","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Methods for accessing transformation data and properties.","category":"page"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Method Description Return Type\nid(transformation) Get transformation identifier Symbol\nbalance_ids(transformation) Get IDs of all balance equations Vector{Symbol}\nbalance_data(transformation, i) Get input data for balance equation i Dict{Symbol,Float64}\nget_balance(transformation, i) Get balance equation expression for i JuMP.Expression\nget_balance(transformation, i, t) Get balance equation expression for i at time t JuMP.Expression","category":"page"},{"location":"Manual/Transformations/#Balance-and-Constraint-Methods-(Inherited-from-AbstractVertex)","page":"Transformations","title":"Balance and Constraint Methods (Inherited from AbstractVertex)","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Methods for managing balance equations and constraints.","category":"page"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Method Description Return Type\nall_constraints(transformation) Get all constraints applied to the transformation Vector{AbstractTypeConstraint}\nall_constraints_types(transformation) Get types of all constraints Vector{DataType}\nget_constraint_by_type(transformation, constraint_type) Get constraint of specified type Union{AbstractTypeConstraint,Vector{AbstractTypeConstraint},Nothing}","category":"page"},{"location":"Manual/Transformations/#Model-Building-Methods","page":"Transformations","title":"Model Building Methods","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Methods used internally during model construction.","category":"page"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Method Description Return Type\nadd_linking_variables!(transformation, model) Add linking variables to JuMP model Nothing\ndefine_available_capacity!(transformation, model) Define available capacity constraints Nothing\nplanning_model!(transformation, model) Add planning model constraints Nothing\noperation_model!(transformation, model) Add operational model constraints Nothing","category":"page"},{"location":"Manual/Transformations/#Factory-Methods","page":"Transformations","title":"Factory Methods","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Methods for creating transformation components.","category":"page"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Method Description Return Type\nmake_transformation(id, data, time_data) Create transformation component Transformation","category":"page"},{"location":"Manual/Transformations/#Utility-Methods","page":"Transformations","title":"Utility Methods","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Additional utility methods for working with Transformations.","category":"page"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Method Description Return Type\n@transform_data(new_defaults) Macro to set new default fields for an Asset Dict{Symbol,Any}","category":"page"},{"location":"Manual/Transformations/#manual-transformations-examples","page":"Transformations","title":"Examples","text":"","category":"section"},{"location":"Manual/Transformations/#Natural-Gas-Power-Plant-Asset-2","page":"Transformations","title":"Natural Gas Power Plant Asset","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"The ThermalPower Asset is an example of how to use Transformation components to model a natural gas power plant. It converts NaturalGas into Electricity and CO2.","category":"page"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"The stochiometric balances of the Transformation are defined by the fuel_consumption and emission_rate fields, which represent the heat rate (fuel consumption per unit electricity) and emission factor (CO2 per unit fuel), respectively.","category":"page"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"The following code snippets show how the Transformation is defined as part of the ThermalPower Asset and how the stochiometric balances are set. Further information about how to create new Assets can be found in the Assets manual page.","category":"page"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"The Transformation is one of the components which make up the ThermalPower Asset.","category":"page"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"struct ThermalPower{T} <: AbstractAsset\n    id::AssetId\n    thermal_transform::Transformation\n    elec_edge::Union{Edge{<:Electricity},EdgeWithUC{<:Electricity}}\n    fuel_edge::Edge{<:T}\n    co2_edge::Edge{<:CO2}\nend","category":"page"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"The make() function of the ThermalPower Asset is responsible for creating the Transformation and connecting it to the appropriate Nodes via Edges. The make() function processes the input data and sets up the Transformation with the necessary stoichiometric balances.","category":"page"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"function make(asset_type::Type{ThermalPower}, data::AbstractDict{Symbol,Any}, system::System)\n    # Assign a unique ID and set up the default data\n    id = AssetId(data[:id])\n    @setup_data(asset_type, data, id)\n\n    # Parse the Transformation data and create the Transformation component\n    thermal_key = :transforms\n    @process_data(\n        transform_data, \n        data[thermal_key], \n        [\n            (data[thermal_key], key),\n            (data[thermal_key], Symbol(\"transform_\", key)),\n            (data, Symbol(\"transform_\", key)),\n            (data, key),\n        ]\n    )\n    thermal_transform = Transformation(;\n        id = Symbol(id, \"_\", thermal_key),\n        timedata = system.time_data[Symbol(transform_data[:timedata])],\n        constraints = get(transform_data, :constraints, [BalanceConstraint()]),\n    )\n\n    elec_edge_key = :elec_edge\n    # ... Process the electricity edge data\n    elec_start_node = thermal_transform\n    @end_vertex(\n        elec_end_node,\n        elec_edge_data,\n        Electricity,\n        [(elec_edge_data, :end_vertex), (data, :location)],\n    )\n    # Check if the edge has unit commitment constraints\n    has_uc = get(elec_edge_data, :uc, false)\n    EdgeType = has_uc ? EdgeWithUC : Edge\n    # Create the elec edge with the appropriate type\n    elec_edge = EdgeType(\n        Symbol(id, \"_\", elec_edge_key),\n        elec_edge_data,\n        system.time_data[:Electricity],\n        Electricity,\n        elec_start_node,\n        elec_end_node,\n    )\n    if has_uc\n        uc_constraints = [MinUpTimeConstraint(), MinDownTimeConstraint()]\n        for c in uc_constraints\n            if !(c in elec_edge.constraints)\n                push!(elec_edge.constraints, c)\n            end\n        end\n        elec_edge.startup_fuel_balance_id = :energy\n    end\n    \n    fuel_edge_key = :fuel_edge\n    # ... Process the fuel edge data\n    fuel_end_node = thermal_transform\n    fuel_edge = Edge(\n        Symbol(id, \"_\", fuel_edge_key),\n        fuel_edge_data,\n        system.time_data[commodity_symbol],\n        commodity,\n        fuel_start_node,\n        fuel_end_node,\n    )\n\n    co2_edge_key = :co2_edge\n    # ... Process the CO2 edge data\n    co2_edge = Edge(\n        Symbol(id, \"_\", co2_edge_key),\n        co2_edge_data,\n        system.time_data[:CO2],\n        CO2,\n        co2_start_node,\n        co2_end_node,\n    )\n\n    # Set the Transformation's stochiometric balance constraints. \n    \n    # The first constraint sets the fuel -> electricity conversion ratio, which is the heat rate of the power plant.\n\n    # The second constraint sets the fuel -> CO2 conversion ratio, which is the emission factor of the power plant.\n    thermal_transform.balance_data = Dict(\n        :energy => Dict(\n            elec_edge.id => get(transform_data, :fuel_consumption, 1.0),\n            fuel_edge.id => 1.0,\n            co2_edge.id => 0.0,\n        ),\n        :emissions => Dict(\n            fuel_edge.id => get(transform_data, :emission_rate, 0.0),\n            co2_edge.id => 1.0,\n            elec_edge.id => 0.0,\n        ),\n    )\n\n    # Finally, we create and return the ThermalPower Asset\n    return ThermalPower(id, thermal_transform, elec_edge, fuel_edge, co2_edge)\nend","category":"page"},{"location":"Manual/Transformations/#Nat-Gas,-Standard-JSON-Input-Format","page":"Transformations","title":"Nat Gas, Standard JSON Input Format","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"{\n    \"type\": \"ThermalPower\",\n    \"global_data\": {},\n    \"instance_data\": {\n        \"id\": \"example_natural_gas_power_plant\",\n        \"location\": \"boston\",\n        \"timedata\": \"NaturalGas\",\n        \"fuel_commodity\": \"NaturalGas\",\n        \"co2_sink\": \"co2_sink\",\n        \"uc\": true,\n        \"elec_constraints\": {\n            \"CapacityConstraint\": true,\n            \"RampingLimitConstraint\": true,\n            \"MinFlowConstraint\": true,\n            \"MinUpTimeConstraint\": true,\n            \"MinDownTimeConstraint\": true,\n        },\n        \"emission_rate\": 0.181048235160161,\n        \"fuel_consumption\": 2.249613533,\n        \"can_expand\": false,\n        \"existing_capacity\": 4026.4,\n        \"investment_cost\": 0.0,\n        \"fixed_om_cost\": 16001,\n        \"variable_om_cost\": 4.415,\n        \"capacity_size\": 125.825,\n        \"startup_cost\": 89.34,\n        \"startup_fuel_consumption\": 0.58614214,\n        \"min_up_time\": 6,\n        \"min_down_time\": 6,\n        \"ramp_up_fraction\": 0.64,\n        \"ramp_down_fraction\": 0.64,\n        \"min_flow_fraction\": 0.444\n    }\n}","category":"page"},{"location":"Manual/Transformations/#Nat-Gas,-Advanced-JSON-Input-Format","page":"Transformations","title":"Nat Gas, Advanced JSON Input Format","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"{\n    \"type\": \"ThermalPower\",\n    \"global_data\": {},\n    \"instance_data\": {\n        \"id\": \"example_natural_gas_power_plant\",\n        \"transforms\": {\n            \"emission_rate\": 0.181048235160161,\n            \"fuel_consumption\": 2.249613533\n        },\n        \"edges\": {\n            \"elec_edge\": {\n                \"commodity\": \"Electricity\",\n                \"unidirectional\": true,\n                \"has_capacity\": true,\n                \"uc\": true,\n                \"integer_decisions\": false,\n                \"constraints\": {\n                    \"CapacityConstraint\": true,\n                    \"RampingLimitConstraint\": true,\n                    \"MinFlowConstraint\": true,\n                    \"MinUpTimeConstraint\": true,\n                    \"MinDownTimeConstraint\": true\n                },\n               \"end_vertex\": \"boston_elec\",\n                \"can_retire\": true,\n                \"can_expand\": false,\n                \"existing_capacity\": 4026.4,\n                \"investment_cost\": 0.0,\n                \"fixed_om_cost\": 16001,\n                \"variable_om_cost\": 4.415,\n                \"capacity_size\": 125.825,\n                \"startup_cost\": 89.34,\n                \"startup_fuel_consumption\": 0.58614214,\n                \"min_up_time\": 6,\n                \"min_down_time\": 6,\n                \"ramp_up_fraction\": 0.64,\n                \"ramp_down_fraction\": 0.64,\n                \"min_flow_fraction\": 0.444\n            },\n            \"fuel_edge\": {\n                \"commodity\": \"NaturalGas\",\n                \"unidirectional\": true,\n                \"has_capacity\": false,\n                \"start_vertex\": \"boston_natgas\"\n            },\n            \"co2_edge\": {\n                \"commodity\": \"CO2\",\n                \"unidirectional\": true,\n                \"has_capacity\": false,\n                \"end_vertex\": \"co2_sink\"\n            }\n        }\n    }\n}","category":"page"},{"location":"Manual/Transformations/#Gas-Storage-Asset","page":"Transformations","title":"Gas Storage Asset","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"GasStorage Assets are an interesting example of how Transformations can be used to model Electricity flows used to energize another flow, instead of converting between Commodities. The Edges manual page includes an explanation of the make() function and inputs of this Asset.","category":"page"},{"location":"Manual/Transformations/#See-Also","page":"Transformations","title":"See Also","text":"","category":"section"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"Edges - Components that connect Vertices and carry flows\nNodes - Network nodes that allow for import and export of commodities\nStorage - Components that store commodities for later use\nVertices - Network nodes that edges connect\nAssets - Higher-level components made from edges, nodes, storage, and transformations\nCommodities - Types of resources stored by Commodities\nTime Data - Temporal modeling framework\nConstraints - Additional constraints for Storage and other components","category":"page"},{"location":"Manual/Transformations/","page":"Transformations","title":"Transformations","text":"","category":"page"},{"location":"Tutorials/2_multisector_modelling/#Multisector-modelling-with-Macro","page":"Multisector Modelling","title":"Multisector modelling with Macro","text":"","category":"section"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"note: Interactive Notebook\nThe interactive version of this tutorial can be found here.","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"In this tutorial, we extend the electricity-only model considered in Tutorial 2 to build a multisector model for joint capacity expansion in electricity and hydrogen sectors. ","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"To do this, we incorporate hydrogen and electricity demand from Tutorial 2, and endogenously model hydrogen production and storage in Macro.","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"using Pkg; Pkg.add([\"VegaLite\", \"Plots\"])","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"using Macro\nusing HiGHS\nusing CSV\nusing DataFrames\nusing JSON3\nusing Plots\nusing VegaLite","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Create a new case folder named \"one_zone_multisector\"","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"if !isdir(\"one_zone_multisector\")\n    mkdir(\"one_zone_multisector\")\n    cp(\"one_zone_electricity_only/assets\",\"one_zone_multisector/assets\", force=true)\n    cp(\"one_zone_electricity_only/settings\",\"one_zone_multisector/settings\", force=true)\n    cp(\"one_zone_electricity_only/system\",\"one_zone_multisector/system\", force=true)\n    cp(\"one_zone_electricity_only/system_data.json\",\"one_zone_multisector/system_data.json\", force=true)\nend","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Note: If you have previously run Tutorial 2, make sure that file one_zone_multisector/system/nodes.json is restored to the original version with a textCO_2 price. The definition of the textCO_2 node should look like this:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"{\n    \"type\": \"CO2\",\n    \"global_data\": {\n        \"time_interval\": \"CO2\"\n    },\n    \"instance_data\": [\n        {\n            \"id\": \"co2_sink\",\n            \"constraints\": {\n                \"CO2CapConstraint\": true\n            },\n            \"rhs_policy\": {\n                \"CO2CapConstraint\": 0\n            },\n            \"price_unmet_policy\":{\n                \"CO2CapConstraint\": 200\n            }    \n        }\n    ]\n}","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Add Hydrogen to the list of modeled commodities, modifying file one_zone_multisector/system/commodities.json:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"new_macro_commodities = Dict(\"commodities\"=> [\"Electricity\", \"NaturalGas\", \"CO2\", \"Hydrogen\"])\n\nopen(\"one_zone_multisector/system/commodities.json\", \"w\") do io\n    JSON3.pretty(io, new_macro_commodities)\nend","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Update file one_zone_multisector/system/time_data.json accordingly:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"new_time_data = Dict(\n    \"PeriodLength\"=>8760,\n    \"HoursPerTimeStep\" => Dict(\n        \"Electricity\" => 1, \n        \"NaturalGas\" => 1, \n        \"CO2\" => 1, \n        \"Hydrogen\" => 1),\n    \"HoursPerSubperiod\" => Dict(\n        \"Electricity\" => 8760, \n        \"NaturalGas\" => 8760, \n        \"CO2\" => 8760, \n        \"Hydrogen\"=>8760)\n)\n\nopen(\"one_zone_multisector/system/time_data.json\", \"w\") do io\n    JSON3.pretty(io, new_time_data)\nend","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Move separate electricity and hydrogen demand timeseries into the system folder","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"cp(\"demand_timeseries/electricity_demand.csv\",\"one_zone_multisector/system/demand.csv\"; force=true)","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"cp(\"demand_timeseries/hydrogen_demand.csv\",\"one_zone_multisector/system/hydrogen_demand.csv\"; force=true)","category":"page"},{"location":"Tutorials/2_multisector_modelling/#Exercise-1","page":"Multisector Modelling","title":"Exercise 1","text":"","category":"section"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Using the existing electricity nodes in one_zone_multisector/system/nodes.json as template, add an Hydrogen demand node, linking it to the hydrogen_demand.csv timeseries.","category":"page"},{"location":"Tutorials/2_multisector_modelling/#Solution","page":"Multisector Modelling","title":"Solution","text":"","category":"section"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"The definition of the new Hydrogen node in one_zone_multisector/system/nodes.json should look like this:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"    {\n        \"type\": \"Hydrogen\",\n        \"global_data\": {\n            \"time_interval\": \"Hydrogen\",\n            \"constraints\": {\n                \"BalanceConstraint\": true\n            }\n        },\n        \"instance_data\": [\n            {\n                \"id\": \"h2_SE\",\n                \"demand\": {\n                    \"timeseries\": {\n                        \"path\": \"system/hydrogen_demand.csv\",\n                        \"header\": \"Demand_H2_z1\"\n                    }\n                }\n            }\n        ]\n    },","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Next, add an electrolyzer asset represented in Macro as a transformation connecting electricity and hydrogen nodes:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"<a href=\"electrolyzer.html\"><img width=\"400\" src=\"../images/electrolyzer.png\" /></a>","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"To include the electrolyzer, create a file one_zone_multisector/assets/electrolyzer.json based on the asset definition in src/model/assets/electrolyzer.jl:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"{\n   \"electrolyzer\": [\n        {   \n            \"type\": \"Electrolyzer\",\n            \"global_data\":{\n                \"transforms\": {\n                    \"timedata\": \"Electricity\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"h2_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_retire\": true,\n                        \"can_expand\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true,\n                            \"MinFlowConstraint\": true\n                        }\n                    },\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\":[\n                {\n                    \"id\": \"SE_Electrolyzer\",\n                    \"transforms\":{\n                        \"efficiency_rate\": 0.875111139 // units: # MWh of H2 / MWh of electricity\n                    },\n                    \"edges\":{\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_SE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 41112.53426,\n                            \"fixed_om_cost\": 1052.480877,\n                            \"variable_om_cost\": 0.0,\n                            \"capacity_size\": 1.5752,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\":0.1\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Include an hydrogen storage resource cluster, represented in Macro as combination of a compressor transformation (consuming electricity to compress the gas) and a storage node:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"<a href=\"gas_storage.html\"><img width=\"400\" src=\"../images/gas_storage.png\" /></a>","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Add a file one_zone_multisector/assets/h2_storage.json based on the asset definition in  src/model/assets/gasstorage.jlthat should look like this:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"{\n    \"h2stor\": [\n        {\n            \"type\": \"GasStorage\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"Hydrogen\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"discharge_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"has_capacity\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true\n                        }\n                    },\n                    \"charge_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true\n                        }\n                    },\n                    \"compressor_elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"compressor_gas_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                },\n                \"storage\": {\n                    \"commodity\": \"Hydrogen\",\n                    \"can_expand\": true,\n                    \"can_retire\": false,\n                    \"constraints\": {\n                        \"StorageCapacityConstraint\": true,\n                        \"BalanceConstraint\": true,\n                        \"MinStorageLevelConstraint\": true\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Above_ground_storage\",\n                    \"transforms\": {\n                        \"electricity_consumption\": 0.018029457\n                    },\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"h2_SE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 0.0,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1\n                        },\n                        \"charge_edge\":{\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 3219.236569,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0\n                        },\n                        \"compressor_gas_edge\": {\n                            \"start_vertex\": \"h2_SE\"\n                        },\n                        \"compressor_elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        }\n                    },\n                    \"storage\":{\n                        \"investment_cost\": 873.013307,\n                        \"fixed_om_cost\":28.75810056,\n                        \"loss_fraction\": 0.0,\n                        \"min_storage_level\": 0.3\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Tutorials/2_multisector_modelling/#Exercise-2","page":"Multisector Modelling","title":"Exercise 2","text":"","category":"section"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Following the same steps taken in Tutorial 2, load the input files, generate Macro model, and solve it using the open-source solver HiGHS.","category":"page"},{"location":"Tutorials/2_multisector_modelling/#Solution-2","page":"Multisector Modelling","title":"Solution","text":"","category":"section"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"First, load the inputs:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"system = MacroEnergy.load_system(\"one_zone_multisector\");","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Then, generate the model:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"model = MacroEnergy.generate_model(system)","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Finally, solve it using the HiGHS solver:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"MacroEnergy.set_optimizer(model, HiGHS.Optimizer);\nMacroEnergy.optimize!(model)","category":"page"},{"location":"Tutorials/2_multisector_modelling/#Exercise-3","page":"Multisector Modelling","title":"Exercise 3","text":"","category":"section"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"As in Tutorial 2, print optimized capacity for each asset, the system total cost, and the total emissions. ","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"What do you observe?","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"To explain the results, plot both the electricity generation and hydrogen supply results as done in Tutorial 2 using VegaLite.jl.","category":"page"},{"location":"Tutorials/2_multisector_modelling/#Solution-3","page":"Multisector Modelling","title":"Solution","text":"","category":"section"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Optimized capacities are retrieved as follows:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"capacity_results = get_optimal_capacity(system)\nnew_capacity_results = get_optimal_new_capacity(system)\nretired_capacity_results = get_optimal_retired_capacity(system)","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Total system cost is:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"MacroEnergy.objective_value(model)","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Total textCO_2 emissions are:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"co2_node = MacroEnergy.get_nodes_sametype(system.locations, CO2)[1]\nMacroEnergy.value(sum(co2_node.operation_expr[:emissions]))","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Note that we have achieved lower costs and emissions when able to co-optimize capacity and operation of electricity and hydrogen sectors. In the following, we further investigate these","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"plot_time_interval = 3600:3624","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Here is the electricity generation profile:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"natgas_power =  MacroEnergy.value.(MacroEnergy.flow(system.assets[4].elec_edge)).data[plot_time_interval]/1e3;\nsolar_power = MacroEnergy.value.(MacroEnergy.flow(system.assets[5].edge)).data[plot_time_interval]/1e3;\nwind_power = MacroEnergy.value.(MacroEnergy.flow(system.assets[6].edge)).data[plot_time_interval]/1e3;\n\nelec_gen =  DataFrame( hours = plot_time_interval, \n                solar_photovoltaic = solar_power,\n                wind_turbine = wind_power,\n                natural_gas_fired_combined_cycle = natgas_power,\n                )\n\nstack_elec_gen = stack(elec_gen, [:natural_gas_fired_combined_cycle,:wind_turbine,:solar_photovoltaic], variable_name=:resource, value_name=:generation);\n\nelc_plot = stack_elec_gen |> \n@vlplot(\n    :area,\n    x={:hours, title=\"Hours\"},\n    y={:generation, title=\"Electricity generation (GWh)\",stack=:zero},\n    color={\"resource:n\", scale={scheme=:category10}},\n    width=400,\n    height=300\n)","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"(Image: elec_generation)","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"During the day, when solar photovoltaic is available, almost all of the electricity generation comes from VREs.","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Because hydrogen storage is cheaper than batteries, we expect the system to use the electricity generated during the day to operate the electrolyzers to meet the hydrogen demand, storing the excess hydrogen to be used when solar photovoltaics can not generate electricity.","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"We verify our assumption by making a stacked area plot of the hydrogen supply (hydrogen generation net of the hydrogen stored):","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"electrolyzer_idx = findfirst(isa.(system.assets,Electrolyzer).==1)\nh2stor_idx = findfirst(isa.(system.assets,GasStorage{Hydrogen}).==1)\n\nelectrolyzer_gen =  MacroEnergy.value.(MacroEnergy.flow(system.assets[electrolyzer_idx].h2_edge)).data[plot_time_interval]/1e3;\nh2stor_charge =  MacroEnergy.value.(MacroEnergy.flow(system.assets[h2stor_idx].charge_edge)).data[plot_time_interval]/1e3;\nh2stor_discharge = MacroEnergy.value.(MacroEnergy.flow(system.assets[h2stor_idx].discharge_edge)).data[plot_time_interval]/1e3;\n\nh2_gen = DataFrame( hours = plot_time_interval, \n                    electrolyzer = electrolyzer_gen - h2stor_charge,\n                    storage =  h2stor_discharge)\n\nstack_h2_gen = stack(h2_gen, [:electrolyzer, :storage], variable_name=:resource, value_name=:supply);\n\nh2plot = stack_h2_gen |> \n    @vlplot(\n        :area,\n        x={:hours, title=\"Hours\"},\n        y={:supply, title=\"Hydrogen supply (GWh)\",stack=:zero},\n        color={\"resource:n\", scale={scheme=:category20}},\n        width=400,\n        height=300\n    )","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"(Image: h2_generation)","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"","category":"page"},{"location":"Assets/assets_guide/#Asset-Guide","page":"Assets","title":"Asset Guide","text":"","category":"section"},{"location":"Assets/assets_guide/#Overview","page":"Assets","title":"Overview","text":"","category":"section"},{"location":"Assets/assets_guide/","page":"Assets","title":"Assets","text":"MacroEnergy.jl provides a library of pre-built assets for energy system modeling. Each asset represents a specific technology with defined transformations, edges, and storage components.","category":"page"},{"location":"Assets/assets_guide/","page":"Assets","title":"Assets","text":"Browse assets: Macro Asset Library.","category":"page"},{"location":"Assets/assets_guide/#Creating-New-Assets","page":"Assets","title":"Creating New Assets","text":"","category":"section"},{"location":"Assets/assets_guide/","page":"Assets","title":"Assets","text":"To create a new asset, you can review the following guides:","category":"page"},{"location":"Assets/assets_guide/","page":"Assets","title":"Assets","text":"Learn: Macro Asset Library\nDevelop: Creating a New Asset\nDocument: Documenting an Asset\nSubmit: Opening a PR to the MacroEnergy.jl repository","category":"page"},{"location":"Assets/assets_guide/#Contributing","page":"Assets","title":"Contributing","text":"","category":"section"},{"location":"Assets/assets_guide/","page":"Assets","title":"Assets","text":"When submitting an asset:","category":"page"},{"location":"Assets/assets_guide/","page":"Assets","title":"Assets","text":"Follow the MacroEnergy.jl asset template during implementation\nInclude complete documentation with examples in the docs/src/Manual/assets folder\nTest your asset thoroughly\nUse descriptive names and clear comments\nSubmit a pull request to the MacroEnergy.jl repository","category":"page"},{"location":"Assets/assets_guide/#Need-Help?","page":"Assets","title":"Need Help?","text":"","category":"section"},{"location":"Assets/assets_guide/","page":"Assets","title":"Assets","text":"Thank you for contributing to MacroEnergy.jl! If you have questions, reach out to the team - we're here to help!","category":"page"},{"location":"Assets/assets_guide/","page":"Assets","title":"Assets","text":"","category":"page"},{"location":"Guides/User Guide/1_sectors/#User-Guide","page":"User Guide","title":"User Guide","text":"","category":"section"},{"location":"Guides/User Guide/1_sectors/","page":"User Guide","title":"User Guide","text":"Macro version 0.1.0","category":"page"},{"location":"Guides/User Guide/1_sectors/#Introduction:-Energy-System-in-Macro","page":"User Guide","title":"Introduction: Energy System in Macro","text":"","category":"section"},{"location":"Guides/User Guide/1_sectors/","page":"User Guide","title":"User Guide","text":"The Macro model is designed to represent the energy system in a detailed manner, with various sectors and technologies interacting. Each sector is characterized by a commodity, a type of energy carrier. The current model includes the following sectors:","category":"page"},{"location":"Guides/User Guide/1_sectors/","page":"User Guide","title":"User Guide","text":"Electricity\nNatural Gas\nCO2 and CO2 Capture\nHydrogen\nCoal\nBiomass\nUranium","category":"page"},{"location":"Guides/User Guide/1_sectors/","page":"User Guide","title":"User Guide","text":"As seen in the High-level Macro Design, the energy system is modeled as a multi-plex network — a multi-layered network that connects different sectors, and the key components that this network are:","category":"page"},{"location":"Guides/User Guide/1_sectors/","page":"User Guide","title":"User Guide","text":"Locations: Represent geographical locations, each associated with a commodity type.\nDemand and supply nodes: Represent the demand or supply of a commodity at a specific location.\nAssets: Defined as a collection of edges and vertices. See Macro Asset Library for a list of all the assets available in Macro.","category":"page"},{"location":"Guides/User Guide/1_sectors/","page":"User Guide","title":"User Guide","text":"In the following sections, we will see how to define the energy system in Macro using the different input files, then we will see what are the different assets and constraints available in Macro, and finally we will see how to run the model and analyze the results.","category":"page"},{"location":"Guides/User Guide/1_sectors/","page":"User Guide","title":"User Guide","text":"","category":"page"},{"location":"Guides/User Guide/2_input_data/#Macro-Input-Data","page":"Macro Input Data","title":"Macro Input Data","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Macro version 0.1.0","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Macro input files are organized into three main directories:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Settings folder: Contains all the settings for the run and the solver.\nSystem folder: Contains all files related to the system, such as sectors, time resolution, nodes, demand, etc.\nAssets folder: Contains all the files that define the assets, such as transmission lines, power plants, storage units, etc.","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"In addition to these folders, the user should provide a system_data.json file that contains the paths to the input folders and files.","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"As a result, the folder structure for a Macro case should be as follows:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"MacroCase\n│ \n├── 📁 settings\n│   └── macro_settings.yml      \n│ \n├── 📁 system\n│   ├── commodities.json \n│   ├── time_data.json\n│   ├── nodes.json\n│   ├── demand.csv\n│   └── fuel_prices.csv\n│ \n├── 📁 assets\n│   ├──battery.json\n│   ├──electrolyzers.json\n│   ├──fuel_prices.csv\n│   ├──fuelcell.json\n│   ├──h2storage.json\n│   ├──power_lines.json\n│   ├──thermal_h2.json\n│   ├──thermal_power.json\n│   ├──vre.json\n| [...other asset types...]\n│   └──availability.csv\n│ \n└── system_data.json","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"note: Units in Macro\nMacro is agnostic to the units of the input data. Special attention should be paid to the units of the transformation parameters (e.g., conversion efficiency, fuel-to-energy production, etc.). It is the user's responsibility to ensure that the units are consistent across the system input data.The following table shows the default units of the input data that are used, for instance, in the example system provided with the package:Sector/Quantity Units\nElectricity MWh\nHydrogen MWh\nNaturalGas MWh\nUranium MWh\nCoal MWh\nCO2 ton\nCO2Captured ton\nBiomass ton\nTime hours\nPrice USDCommodities that require only an energy representation (e.g., Hydrogen) have units of MWh. Commodities that require a physical representation (e.g., Biomass, where regional supply curve is important) have units of metric tonnes. The recommended convention is MWh on a higher heating value basis for transformations where hydrogen is involved, and tonnes on a dry basis for transformations where biomass is involved.","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"warning: Comments in JSON files\nThe comments (e.g. //) in the JSON file examples are for illustrative purposes only. They should be removed before using these lines as input, as JSON does not support comments.","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"In the following section, we will go through each folder and file in detail.","category":"page"},{"location":"Guides/User Guide/2_input_data/#Settings-folder","page":"Macro Input Data","title":"Settings folder","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"The settings folder currently contains only one file, macro_settings.yml, which contains the settings for the run.","category":"page"},{"location":"Guides/User Guide/2_input_data/#macro_settings.json","page":"Macro Input Data","title":"macro_settings.json","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Format: JSON","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Attribute Values Default Description\nConstraintScaling True, False False If true, the model will scale the optimization model constraints to make it more numerically stable.\nWriteSubcommodities True, False False If true, the model will write the subcommodities created by the user in the results.\nOverwriteResults True, False False If true, the model will overwrite the results file if it already exists.\nOutputDir String \"results\" The directory where the results will be saved.","category":"page"},{"location":"Guides/User Guide/2_input_data/#System-folder","page":"Macro Input Data","title":"System folder","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"The system folder currently contains five main files:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"commodities.json: Defines the sectors/commodities used in the system.\ntime_data.json: Defines the time resolution data for each sector.\nnodes.json: Defines the nodes in the system.\ndemand.csv: Contains the demand data.\nfuel_prices.csv: Contains the prices of fuels.","category":"page"},{"location":"Guides/User Guide/2_input_data/#commodities.json","page":"Macro Input Data","title":"commodities.json","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Format: JSON","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"This file contains a list of sectors/commodities used in the system. The file is a list of string for each sector/commodity:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"{\n    \"commodities\": [\n        \"Sector_1\",\n        \"Sector_2\",\n        ...\n    ]\n}","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Example: Energy system with electricity, hydrogen, natural gas, CO2, uranium, and coal sectors:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"{\n    \"commodities\": [\n        \"Electricity\",\n        \"Hydrogen\",\n        \"NaturalGas\",\n        \"CO2\", \n        \"Uranium\",\n        \"Coal\"\n    ]\n}","category":"page"},{"location":"Guides/User Guide/2_input_data/#time_data.json","page":"Macro Input Data","title":"time_data.json","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Format: JSON","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"This file contains the data related to the time resolution for each sector. The file is structured as follows:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"{\n    \"PeriodLength\": <Integer>,  // units: hours\n    \"HoursPerTimeStep\": {\n        \"Sector_1\": <Integer>,  // units: hours\n        \"Sector_2\": <Integer>,  // units: hours\n        ...\n    },\n    \"HoursPerSubperiod\": {\n        \"Sector_1\": <Integer>,\n        \"Sector_2\": <Integer>,\n        ...\n    },\n    \"SubPeriodMap\": {\n        \"path\": <String>, // relative path to the period map file\n    },\n    \"TotalHoursModeled\": <Integer> // units: hours\n}","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Attribute Values Description\nPeriodLength Integer Total number of hours in the simulation.\nHoursPerTimeStep Integer Number of hours in each time step for each sector.\nHoursPerSubperiod Integer Number of hours in each subperiod for each sector.\nSubPeriodMap String Relative path to the period map file. For an example of the period map file, see Period_map.csv.\nTotalHoursModeled Integer Total number of hours modeled. Note: When using representative periods, this parameter is used to compute the weight of each subperiod.","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"note: Subperiods\nSubperiods represent the time slices of the simulation used to perform time wrapping for time-coupling constraints (see, for example, MacroEnergy.timestepbefore).","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Example: Energy system modeled for three weeks, with one hour per time step, and one week per subperiod:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"{\n    \"PeriodLength\": 504,  // 3 weeks\n    \"HoursPerTimeStep\": {\n        \"Electricity\": 1,\n        \"Hydrogen\": 1,\n        \"NaturalGas\": 1,\n        \"CO2\": 1,\n        \"Uranium\": 1,\n        \"Coal\": 1\n    },\n    \"HoursPerSubperiod\": {\n        \"Electricity\": 168,  // 1 week\n        \"Hydrogen\": 168,\n        \"NaturalGas\": 168,\n        \"CO2\": 168,\n        \"Uranium\": 168,\n        \"Coal\": 168\n    },\n    \"SubPeriodMap\": {\n        \"path\": \"three_weeks/Period_map.csv\"\n    },\n    \"TotalHoursModeled\": 8760\n}","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Period_map.csv:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"| Period_Index | Rep_Period | Rep_Period_Index |\n|--------------|------------|------------------|\n| 1            | 6          | 1                |\n| 2            | 6          | 1                |\n| 3            | 6          | 1                |\n| 4            | 6          | 1                |\n| 5            | 6          | 1                |\n| 6            | 6          | 1                |\n| 7            | 6          | 1                |\n| 8            | 6          | 1                |\n| 9            | 6          | 1                |\n| 10           | 17         | 2                |\n| ...          | ...        | ...              |","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"In this example, Macro uses the above input files to create the following parameters:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Total time interval: [1:PeriodLength] = [1:504]\nHoursPerTimeStep: 1 for all sectors\nSubperiods:\n[1:168]: first week\n[169:336]: second week\n[337:504]: third week\nPeriod map:   This file assigns each week of the TotalHoursModeled to one of the representative periods.    For instance:\nweek 1 -> 6th representative period\nweek 2 -> 6th representative period\nweek 3 -> 6th representative period\nweek 10 -> 17th representative period\netc.\nWeight of each subperiod:\n[1:168] -> 18.0495\n[169:336] -> 21.0577\n[337:504] -> 13.0357\nThis value is used to 'weight' each hour of the subperiods in the operational model.","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"The formula used to compute the weight of each subperiod is:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"w_i = alpha * n_i","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"where alpha is a scaling factor defined as:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"alpha = fracTotalHoursModeledsum_i=1^N HoursPerSubperiod * n_i","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"and n_i is the number of times the i-th representative period is used in the period map to model periods, and N is the total number of representative periods.","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"note: Weights without period map\nIf the period map is not provided, the weights are set to 1 for each representative period.","category":"page"},{"location":"Guides/User Guide/2_input_data/#nodes.json","page":"Macro Input Data","title":"nodes.json","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Format: JSON","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"This file defines the regions/nodes for each sector. It is structured as a list of dictionaries, where each dictionary defines a network for a given sector.","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Each dictionary has three main attributes:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"type: The type of the network (e.g. \"NaturalGas\", \"Electricity\", etc.).\nglobal_data: attributes that are the same for all the nodes in the network.\ninstance_data: attributes that are different for each node in the network.","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"This structure for the network has the advantage of grouping the common attributes for all the nodes in a single place, avoiding to repeat the same attribute for all the nodes.","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"This is the structure of the nodes.json file:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"{\n    \"nodes\": [\n        {\n            \"type\": \"NaturalGas\", // NaturalGas network\n            \"global_data\": {},    // attributes that are the same for all the nodes in the network\n            \"instance_data\": [\n                // NaturalGas node 1 ...\n                // NaturalGas node 2 ...\n                // ...\n            ]\n        },\n        {\n            \"type\": \"Electricity\", // Electricity network\n            \"global_data\": {},     // attributes that are the same for all the nodes in the network\n            \"instance_data\": [\n                // Electricity node 1 ...\n                // Electricity node 2 ...\n                // ...\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"The attributes that can be set for each node (either in global_data or instance_data) are the following:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Attribute Type Values Default Description\nid String String Required Unique identifier for the node. E.g. \"elec_node_1\".\ntype String Any Macro commodity type Required Commodity type. E.g. \"Electricity\".\ntime_interval String Any Macro commodity type Required Time resolution for the time series data linked to the node. E.g. \"Electricity\".\nconstraints Dict{String,Bool} Any Macro constraint type Empty List of constraints applied to the node. E.g. {\"BalanceConstraint\": true, \"MaxNonServedDemandConstraint\": true}.\ndemand Dict Demand file path and header Empty Path to the demand file and column name for the demand time series to link to the node. E.g. {\"timeseries\": {\"path\": \"system/demand.csv\", \"header\": \"Demand_MW_z1\"}}.\nmax_nsd Vector{Float64} Vector of numbers in [0,1] [0.0] Maximum allowed non-served demand for each demand segment as a fraction of the total demand. E.g. [1.0] for a single segment.\nmax_supply Vector{Float64} Vector of numbers [0.0] Maximum allowed supply for each supply segment. E.g. [1000.0] for a single segment.\nprice Dict Price file path and header Empty Path to the price file and column name for the price time series to link to the node. E.g. {\"timeseries\": {\"path\": \"system/fuel_prices.csv\", \"header\": \"natgas_SE\"}}.\nprice_nsd Vector{Float64} Vector of numbers [0.0] Price/penalty for non-served demand by segment. E.g. [5000.0] for a single segment.\nprice_supply Vector{Float64} Vector of numbers [0.0] Piecewise linear price for supply curves. E.g. [0.0, 100.0, 200.0].\nprice_unmet_policy Dict{DataType,Float64} Dict of Macro policy types and numbers Empty Price/penalty for unmet policy constraints.\nrhs_policy Dict{DataType,Float64} Dict of Macro constraint types and numbers Empty Right hand side of the policy constraints. E.g. {\"CO2CapConstraint\": 200}, carbon price of 200 USD/ton.","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"tip: Constraints\nOne of the main features of Macro is the ability to include constraints on the system from a pre-defined library of constraints (see Macro Constraint Library for more details). To include a constraint to a node, the user needs to add the constraint name to the constraints attribute of the node. The example below will show how to include constraints to node instances. ","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Example: the following is an example of a nodes.json file with both electricity, natural gas, CO2 and biomass sectors covering most of the attributes present above. The (multiplex)-network in the system is made of the following sub-networks:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"NaturalGas (three nodes)\nnatgas_SE\nnatgas_MIDAT\nnatgas_NE\nElectricity (three nodes)\nelec_SE\nelec_MIDAT\nelec_NE\nCO2 (one node)\nco2_sink\nBiomass (one node)\nbioherb_SE","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Therefore, the system has 4 networks and 8 nodes in total.","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"{\n    \"nodes\": [\n        {\n            \"type\": \"NaturalGas\",\n            \"global_data\": {\n                \"time_interval\": \"NaturalGas\" // time resolution as defined in the time_data.json file\n            },\n            \"instance_data\": [\n                {   // NaturalGas node 1\n                    \"id\": \"natgas_SE\",\n                    \"price\": {\n                        \"timeseries\": {\n                            \"path\": \"system/fuel_prices.csv\", // path to the price file\n                            \"header\": \"natgas_SE\" // column name in the price file for the price time series\n                        }\n                    }\n                },  // End of NaturalGas node 1\n                {   // NaturalGas node 2\n                    \"id\": \"natgas_MIDAT\",\n                    \"price\": {\n                        \"timeseries\": {\n                            \"path\": \"system/fuel_prices.csv\",\n                            \"header\": \"natgas_MIDAT\"\n                        }\n                    }\n                },  // End of NaturalGas node 2\n                {   // NaturalGas node 3\n                    \"id\": \"natgas_NE\",\n                    \"price\": {\n                        \"timeseries\": {\n                            \"path\": \"system/fuel_prices.csv\",\n                            \"header\": \"natgas_NE\"\n                        }\n                    }\n                },  // End of NaturalGas node 3\n            ]\n        },\n        {\n            \"type\": \"Electricity\",\n            \"global_data\": {\n                \"time_interval\": \"Electricity\",\n                \"max_nsd\": [  // maximum allowed non-served demand for each demand segment as a fraction of the total demand\n                    1\n                ],\n                \"price_nsd\": [  // price/penalty for non-served demand by segment\n                    5000.0\n                ],\n                \"constraints\": {    // constraints applied to the nodes\n                    \"BalanceConstraint\": true,\n                    \"MaxNonServedDemandConstraint\": true,\n                    \"MaxNonServedDemandPerSegmentConstraint\": true\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"elec_SE\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\", // path to the demand file\n                            \"header\": \"Demand_MW_z1\" // column name in the demand file for the demand time series\n                        }\n                    }\n                },\n                {\n                    \"id\": \"elec_MIDAT\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\",\n                            \"header\": \"Demand_MW_z2\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"elec_NE\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\",\n                            \"header\": \"Demand_MW_z3\"\n                        }\n                    }\n                }\n            ]\n        },\n        {\n            \"type\": \"CO2\",\n            \"global_data\": {\n                \"time_interval\": \"CO2\"\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"co2_sink\",\n                    \"constraints\": {\n                        \"CO2CapConstraint\": true\n                    },\n                    \"rhs_policy\": {  // right hand side of the policy constraints\n                        \"CO2CapConstraint\": 0\n                    },\n                    \"price_unmet_policy\": {  // price/penalty for unmet policy constraints\n                        \"CO2CapConstraint\": 250.0\n                    }\n                }\n            ]\n        },\n        {\n            \"type\": \"Biomass\",\n            \"global_data\": {\n                \"time_interval\": \"Biomass\",\n                \"constraints\": {\n                    \"BalanceConstraint\": true\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"bioherb_SE\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\",\n                            \"header\": \"Demand_Zero\"\n                        }\n                    },\n                    \"max_supply\": [  // maximum allowed supply for each supply segment\n                        10000,\n                        20000,\n                        30000\n                    ],\n                    \"price_supply\": [  // piecewise linear price for supply curves\n                        40,\n                        60,\n                        80\n                    ]\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"In this example, BalanceConstraint, MaxNonServedDemandConstraint, and MaxNonServedDemandPerSegmentConstraint are applied to all the nodes in the electricity network. In particular, the MaxNonServedDemandConstraint limits the maximum amount of demand that can be unmet in a given time step, and the MaxNonServedDemandPerSegmentConstraint limits the maximum amount of demand that can be unmet in each demand segment. In addition, the CO2CapConstraint is applied to the textCO_2 node to model a greenfield scenario with a carbon price of 250 USD/ton.","category":"page"},{"location":"Guides/User Guide/2_input_data/#demand.csv","page":"Macro Input Data","title":"demand.csv","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Format: CSV","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"This file contains the demand data for each region/node. ","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"First column: Time step.\nRemaining columns: Demand for each region/node (units: MWh).","category":"page"},{"location":"Guides/User Guide/2_input_data/#Example:","page":"Macro Input Data","title":"Example:","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"TimeStep DemandMWz1 DemandMWz2 DemandMWz3\n1 100 200 300\n2 110 210 310\n... ... ... ...","category":"page"},{"location":"Guides/User Guide/2_input_data/#fuel_prices.csv","page":"Macro Input Data","title":"fuel_prices.csv","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Format: CSV","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"This file contains the prices for each fuel for each region/node.","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"First column: Time step.\nRemaining columns: Prices for each region/node (units: USD/MWh).","category":"page"},{"location":"Guides/User Guide/2_input_data/#Example:-2","page":"Macro Input Data","title":"Example:","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"TimeStep natgas_SE natgas_MIDAT natgas_NE\n1 100 110 120\n2 110 120 130\n... ... ... ...","category":"page"},{"location":"Guides/User Guide/2_input_data/#Assets-folder","page":"Macro Input Data","title":"Assets folder","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"The assets folder contains all the files that define the resources and technologies that are included in the system. As a general rule, each asset type has its own file, where each file is structured in a similar way to the nodes.json file. ","category":"page"},{"location":"Guides/User Guide/2_input_data/#Asset-files","page":"Macro Input Data","title":"Asset files","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Format: JSON","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Similar to the nodes.json file, each asset file has the following three main parameters:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"type: The type of the asset (e.g. \"Battery\", \"FuelCell\", \"TransmissionLink\", etc.).\nglobal_data: attributes that are the same for all the assets of the same type (e.g., unit commitment constraints applied to all the power plants).\ninstance_data: attributes that are different for each asset of the same type (e.g., investment costs, lifetime, etc.).","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Depending on the graph structure of the asset, both global_data and instance_data can have different attributes, one for each transformation, edge, and storage present in the asset. ","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"tip: Example: natural gas power plant\nFor example, a natural gas combined cycle power plant is represented by an asset made of: 1 transformation (combustion and electricity generation)\n3 edges \nnatural gas flow\nelectricity flow\nCO2 flowThen, both global_data and instance_data will have the following structure:{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"fuel_edge\": {\n            // ... fuel_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"In the following sections, we will go through each asset type and show the attributes that can be set for each of them. Each section will contain the following three parts:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Graph structure: a graphical representation of the asset, showing the transformations, edges, and storages present in the asset.\nAttributes: a table with the attributes that can be set for each asset type.\nExample: an example of the asset type file (.json).","category":"page"},{"location":"Guides/User Guide/2_input_data/#system_data.json","page":"Macro Input Data","title":"system_data.json","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Format: JSON","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"This file contains the paths to the input folders and files, and is structured as follows:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"{\n    \"commodities\": {\n        \"path\": \"system/commodities.json\"\n    },\n    \"locations\": {\n        \"path\": \"locations\"\n    },\n    \"settings\": {\n        \"path\": \"settings/macro_settings.json\"\n    },\n    \"assets\": {\n        \"path\": \"assets\"\n    },\n    \"time_data\": {\n        \"path\": \"system/time_data.json\"\n    },\n    \"nodes\": {\n        \"path\": \"system/nodes.json\"\n    }\n}","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"","category":"page"},{"location":"References/ref_download_examples/#Exampling-Loading-Functions","page":"Downloading examples","title":"Exampling Loading Functions","text":"","category":"section"},{"location":"References/ref_download_examples/","page":"Downloading examples","title":"Downloading examples","text":"Pages = [\"ref_example_loading.md\"]","category":"page"},{"location":"References/ref_download_examples/#list_examples","page":"Downloading examples","title":"list_examples","text":"","category":"section"},{"location":"References/ref_download_examples/#MacroEnergy.list_examples","page":"Downloading examples","title":"MacroEnergy.list_examples","text":"list_examples(; auth::Any)::Vector{String}\n\nList all available examples in the MacroEnergyExamples repository. This function will print the names of all examples and return a vector of their names. These names can be used with download_example and other methods to download or get information about specific examples.\n\nThe auth parameter can be used to authenticate your requests to the GitHub API.  It should be a valid GitHub.OAuth2 object created using the authenticate_github method,  or a GitHub.UsernamePassAuth or GitHub.JWTAuth object created using the GitHub.jl package.\n\n\n\n\n\n","category":"function"},{"location":"References/ref_download_examples/#download_example","page":"Downloading examples","title":"download_example","text":"","category":"section"},{"location":"References/ref_download_examples/#MacroEnergy.download_example","page":"Downloading examples","title":"MacroEnergy.download_example","text":"download_example(example_name::String, target_dir::String = pwd(); auth::Any)::Nothing\n\nDownload an example from the MacroEnergyExamples repository to a specified target directory. The example_name should match one of the names listed by list_examples(). The target_dir is the directory where the example will be downloaded, defaulting to the current working directory.\n\nThe auth parameter can be used to authenticate your requests to the GitHub API.  It should be a valid GitHub.OAuth2 object created using the authenticate_github method,  or a GitHub.UsernamePassAuth or GitHub.JWTAuth object created using the GitHub.jl package.\n\n\n\n\n\n","category":"function"},{"location":"References/ref_download_examples/#download_examples","page":"Downloading examples","title":"download_examples","text":"","category":"section"},{"location":"References/ref_download_examples/#MacroEnergy.download_examples","page":"Downloading examples","title":"MacroEnergy.download_examples","text":"download_examples(target_dir::String = pwd(), pause_seconds::Float64 = 1.0; auth::Any)::Nothing\n\nDownload all examples from the MacroEnergyExamples repository to a specified target directory.\n\nThe target_dir is the directory where all examples will be downloaded, defaulting to the current working directory. pause_seconds is the time to pause between downloads to avoid hitting GitHub API rate limits.\n\nThe auth parameter can be used to authenticate your requests to the GitHub API.  It should be a valid GitHub.OAuth2 object created using the authenticate_github method,  or a GitHub.UsernamePassAuth or GitHub.JWTAuth object created using the GitHub.jl package.\n\n\n\n\n\n","category":"function"},{"location":"References/ref_download_examples/#example_readme","page":"Downloading examples","title":"example_readme","text":"","category":"section"},{"location":"References/ref_download_examples/#MacroEnergy.example_readme","page":"Downloading examples","title":"MacroEnergy.example_readme","text":"example_readme(example_name::String; auth::Any)::Nothing\n\nDisplay the README.md file for a specific example from the MacroEnergyExamples repository. The example_name should match one of the names listed by list_examples().\n\nThe auth parameter can be used to authenticate your requests to the GitHub API.  It should be a valid GitHub.OAuth2 object created using the authenticate_github method,  or a GitHub.UsernamePassAuth or GitHub.JWTAuth object created using the GitHub.jl package.\n\n\n\n\n\n","category":"function"},{"location":"References/ref_download_examples/#example_contents","page":"Downloading examples","title":"example_contents","text":"","category":"section"},{"location":"References/ref_download_examples/#MacroEnergy.example_contents","page":"Downloading examples","title":"MacroEnergy.example_contents","text":"example_contents(example_name::String; auth::Any)::Nothing\n\nDisplay the contents of a specific example from the MacroEnergyExamples repository. The example_name should match one of the names listed by list_examples(). This function will print the names of all files in the example directory.\n\nThe auth parameter can be used to authenticate your requests to the GitHub API.  It should be a valid GitHub.OAuth2 object created using the authenticate_github method,  or a GitHub.UsernamePassAuth or GitHub.JWTAuth object created using the GitHub.jl package.\n\n\n\n\n\n","category":"function"},{"location":"References/ref_download_examples/#find_example","page":"Downloading examples","title":"find_example","text":"","category":"section"},{"location":"References/ref_download_examples/#MacroEnergy.find_example","page":"Downloading examples","title":"MacroEnergy.find_example","text":"find_example(example_name::String; auth::Any)::Tuple{GitHub.Content, GitHub.Repo}\n\nFind an example by its name in the MacroEnergyExamples repository. These names can be obtained from list_examples(). find_example returns a tuple containing the GitHub.Content object for the requested examples GitHub directory and the GitHub.Repo object for the MacroEnergyExamples repository.\n\nThe auth parameter can be used to authenticate your requests to the GitHub API.  It should be a valid GitHub.OAuth2 object created using the authenticate_github method,  or a GitHub.UsernamePassAuth or GitHub.JWTAuth object created using the GitHub.jl package.\n\n\n\n\n\n","category":"function"},{"location":"References/ref_download_examples/#authenticate_github","page":"Downloading examples","title":"authenticate_github","text":"","category":"section"},{"location":"References/ref_download_examples/#MacroEnergy.authenticate_github","page":"Downloading examples","title":"MacroEnergy.authenticate_github","text":"authenticate_github(token::String)::GitHub.OAuth2\n\nAuthenticate your downloads from GitHub using a personal access token. This function returns a GitHub.OAuth2 object that can be used for authenticated requests to the GitHub API.\n\nYou should create a personal access token in the GitHub settings under Developer settings -> Personal access tokens.\n\nYou can use the created OAuth2 token to authenticate your other function calls, for example: \n\nauth = authenticate_github(\"your_personal_access_token\")\nlist_examples(; auth=auth)\ndownload_example(\"example_name\"; auth=auth)\n\n\n\n\n\n","category":"function"},{"location":"References/ref_download_examples/#check_auth","page":"Downloading examples","title":"check_auth","text":"","category":"section"},{"location":"References/ref_download_examples/#MacroEnergy.check_auth","page":"Downloading examples","title":"MacroEnergy.check_auth","text":"check_auth(auth::Any)::NamedTuple\n\nCheck if the provided authentication object is valid for GitHub API requests. This function returns a NamedTuple containing the auth object if it is a valid type, or an empty NamedTuple otherwise.\n\nThe auth parameter can be a GitHub.OAuth2, GitHub.UsernamePassAuth, or GitHub.JWTAuth object.\n\n\n\n\n\n","category":"function"},{"location":"References/ref_download_examples/#download_gh","page":"Downloading examples","title":"download_gh","text":"","category":"section"},{"location":"References/ref_download_examples/#MacroEnergy.download_gh","page":"Downloading examples","title":"MacroEnergy.download_gh","text":"download_gh(dir_path::String, repo::GitHub.Repo, target_dir::String; auth::Any)::Nothing\n\nDownload a directory from a GitHub repository to a specified target directory.\n\nThe dir_path is the path to the directory in the repository, repo is the GitHub.Repo object, and target_dir is the local directory where the contents will be downloaded.\n\n\n\n\n\ndownload_gh(elem::GitHub.Content, repo::GitHub.Repo, target_dir::String; auth::Any)::Nothing\n\nAttempt to download a single element (file or directory) from a GitHub repository to a specified target directory. If the element is a file, it will be downloaded directly. If it is a directory, the function will recursively download all contents within that directory.\n\nThe elem is a GitHub.Content object representing the file or directory, repo is the GitHub.Repo object, and target_dir is the local directory where the contents will be downloaded.\n\n\n\n\n\n","category":"function"},{"location":"References/ref_download_examples/","page":"Downloading examples","title":"Downloading examples","text":"","category":"page"},{"location":"Getting Started/3_first_run/#Running-Macro","page":"First Run","title":"Running Macro","text":"","category":"section"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"Once Macro is installed, the simplest way to get started is to run the example system provided with Macro. We will use the multisector_three_zones example in the MacroEnergyExamples.jl repository. It is a system with 3 zones, modelled loosely on the Eastern USA, with the following sectors:","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"Electricity\nNatural Gas\nCO2\nHydrogen\nBiomass\nUranium\nCarbon Capture","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"tip: Macro Input Data Description\nThe section Macro Input Data in the User Guide provides a detailed description of all the input files present in the example folder.","category":"page"},{"location":"Getting Started/3_first_run/#Running-a-predefined-example-using-Macro","page":"First Run","title":"Running a predefined example using Macro","text":"","category":"section"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"To run the example, navigate to the MacroEnergy.jl folder. You can then download the example by either downloading the files from the MacroEnergyExamples.jl repository or using the example-download functions provided by Macro.","category":"page"},{"location":"Getting Started/3_first_run/#Downloading-the-example-directly","page":"First Run","title":"Downloading the example directly","text":"","category":"section"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"If you prefer to download the example directly from the repository, navigate to the link above and download the multisector_three_zones folder. Once downloaded, create an examples folder in your MacroEnergy.jl repository (we will call folder this ExampleSystems in our examples).","category":"page"},{"location":"Getting Started/3_first_run/#Downloading-the-example-using-Macro","page":"First Run","title":"Downloading the example using Macro","text":"","category":"section"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"To download the example using Macro, you can use the download_example function. You can first list all available examples using the list_examples function:","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"julia --project=. -e 'using MacroEnergy; list_examples()'","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"Next, download the multisector_three_zones example using the download_example function:","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"julia --project=. -e 'using MacroEnergy; download_example(\"multisector_three_zones\", \"ExampleSystems\")'","category":"page"},{"location":"Getting Started/3_first_run/#Running-the-example","page":"First Run","title":"Running the example","text":"","category":"section"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"Finally, execute the run.jl file present in the example folder. On a Unix-based machine, this will look like:","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"julia --project=. ExampleSystems/multisector_three_zones/run.jl","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"On Windows, it will be:","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"julia --project=. ExampleSystems\\multisector_three_zones\\run.jl","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"This will use Macro to solve the example system and save the results in the results directory. By default, Macro writes three files:","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"capacity.csv: a csv file containing the capacity results for each asset (final, newly installed, and retired capacity for each technology).\ncosts.csv: a csv file containing fixed, variable and total costs for the energy system.\nflow.csv: a csv file containing the flow results for each commodity through each edge.","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"Congratulations, you just ran your first Macro model! 🎉","category":"page"},{"location":"Getting Started/3_first_run/#Running-a-user-defined-case-with-Macro","page":"First Run","title":"Running a user-defined case with Macro","text":"","category":"section"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"To run Macro with a user-defined case, you need to create a folder MyCase with a minimum of the following structure (customized cases can have additional files and folders (refer to the example cases, for specific details)):","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"MyCase\n├── assets/\n├── settings/\n├── system/\n├── run.jl\n├── run_HiGHS.jl\n├── run_with_env.jl\n└── system_data.json","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"where the assets folder consists of the details of the configurations of the different resources modeled as assets within Macro (e.g. the location of the nodes, edges, types of resources, such as BECCS, electrolyzers, hydrostorage units etc.). The settings folder contains the configuration files for the constraint scaling and writing subcommodities, the system folder contains the .csv and .json input files related to timeseries data and the system under study.","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"For instance, one case could have the following structure:","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"MyCase\n│ \n├── settings\n│   └── macro_settings.yml           # Macro settings\n│ \n├── system\n│   ├── Period_map.csv\n│   ├──availability.csv\n│   ├──commodities.json\n│   ├──demand fuel.csv\n│   ├──demand nofuel.csv\n│   ├──demand.csv\n│   ├──fuel_prices.csv\n│   ├──nodes.csv\n│   ├──nodes.json\n│   └──time_data.json\n│ \n├── assets\n│   ├──beccs_electricity.json\n│   ├──beccs_gasoline.json\n│   ├──beccs_hydrogen.json\n│   ├──beccs_liquid_fuels.json\n│   ├──beccs_naturalgas.json\n│   ├──co2_injection.json\n│   ├──electricdac.json\n│   ├──electricity_stor.json\n│   ├──electrolyzer.json\n│   ├──h2gas_power_ccgt.json\n│   ├──h2gas_power_ocgt.json\n│   ├──h2pipelines.json\n│   ├──h2storage.json\n│   ├──hydropower.json\n│   ├──liquid_fuels_end_use.json\n│   ├──liquid_fuels_fossil_upstream.json\n│   ├──mustrun.json\n│   ├──natgasdac.json\n│   ├──naturalgas_end_use.json\n│   ├──naturalgas_fossil_upstream.json\n│   ├──naturalgas_h2.json\n│   ├──naturalgas_h2_ccs.json\n│   ├──naturalgas_power.json\n│   ├──naturalgas_power_ccs.json\n│   ├──nuclear_power.json\n│   ├──powerlines.json\n│   ├──synthetic_liquid_fuels.json\n│   ├──synthetic_naturalgas.json\n│   └──vre.json\n├── run.jl\n├── run_HiGHS.jl\n├── run_with_env.jl\n└── system_data.json","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"In this example, MyCase will define a case with assets like  beccs_electricity, electrolyzer, naturalgas_power etc. resources, the system folder will provide the data for the demand, fuel prices, network etc., and the settings folder will contain the configuration files for the model.","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"The run_HiGHS.jl file should contain the following code:","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"using MacroEnergy\n\n(system, model) = run_case(@__DIR__);","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"which will run the case using the HiGHS solver. To use a different solver, you can pass the Optimizer object as an argument to run_case! function. For example, to use Gurobi as the solver, you can use the following code (which is what the run.jl has):","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"using MacroEnergy\nusing Gurobi\n\n(system, model) = run_case(@__DIR__; optimizer=Gurobi.Optimizer);","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"To run the case, open a terminal and run the following command:","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"$ julia --project=\"/path/to/env\"\njulia> include(\"/path/to/MyCase/run.jl\")","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"where /path/to/env is the path to the environment with Macro installed, and /path/to/MyCase is the path to the folder of the MyCase case. Alternatively, you can run the case directly from the terminal using the following command:","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"$ julia --project=\"/path/to/env\" /path/to/MyCase/run.jl","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"","category":"page"},{"location":"Manual/assets/electrolyzer/#Electrolyzer","page":"Electrolyzer","title":"Electrolyzer","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/#Contents","page":"Electrolyzer","title":"Contents","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Overview | Asset Structure | Flow Equations | Input File (Standard Format) | Types - Asset Structure | Constructors | Examples | Best Practices | Input File (Advanced Format)","category":"page"},{"location":"Manual/assets/electrolyzer/#electrolyzer_overview","page":"Electrolyzer","title":"Overview","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Electrolyzer assets in Macro represent hydrogen production technologies that convert electricity into hydrogen through electrolysis. These assets are defined using either JSON or CSV input files placed in the assets directory, typically named with descriptive identifiers like electrolyzer.json or electrolyzer.csv.","category":"page"},{"location":"Manual/assets/electrolyzer/#electrolyzer_asset_structure","page":"Electrolyzer","title":"Asset Structure","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"An electrolyzer asset consists of three main components:","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Transformation Component: Balances the electricity and hydrogen flows\nElectricity Edge: Represents the electricity consumption from the grid\nHydrogen Edge: Represents the hydrogen production flow","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Here is a graphical representation of the electrolyzer asset:","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph Electrolyzer\n  direction LR\n  A((Electricity)) e1@--> B{{..}}\n  B e2@--> C((Hydrogen))\n  e1@{ animate: true }\n  e2@{ animate: true }\n end\n    style A font-size:19px,r:55px,fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n    style B fill:black,stroke:black,color:black;\n    style C font-size:21px,r:55px,fill:lightblue,stroke:black,color:black,stroke-dasharray: 3,5;\n\n    linkStyle 0 stroke:#FFD700, stroke-width: 2px, stroke-dasharray: 5 5;\n    linkStyle 1 stroke:lightblue, stroke-width: 2px, stroke-dasharray: 5 5;","category":"page"},{"location":"Manual/assets/electrolyzer/#electrolyzer_flow_equations","page":"Electrolyzer","title":"Flow Equations","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"The electrolyzer asset follows these stoichiometric relationships:","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"beginaligned\nphi_h2 = phi_elec cdot epsilon_efficiency_rate \nendaligned","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Where:","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"phi represents the flow of each commodity\nepsilon represents the efficiency rate defined in the table below (see Conversion Process Parameters)","category":"page"},{"location":"Manual/assets/electrolyzer/#electrolyzer_input_file","page":"Electrolyzer","title":"Input File (Standard Format)","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"The easiest way to include an electrolyzer asset in a model is to create a new file (either JSON or CSV) and place it in the assets directory together with the other assets. ","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"your_case/\n├── assets/\n│   ├── electrolyzer.json    # or electrolyzer.csv\n│   ├── other_assets.json\n│   └── ...\n├── system/\n├── settings/\n└── ...","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"This file can either be created manually, or using the template_asset function, as shown in the Adding an Asset to a System section of the User Guide. The file will be automatically loaded when you run your Macro model. ","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"The following is an example of an electrolyzer asset input file:","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"{\n    \"electrolyzer\": [\n        {\n            \"type\": \"Electrolyzer\",\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Electrolyzer\",\n                    \"location\": \"SE\",\n                    \"capacity_size\": 1.5756,\n                    \"investment_cost\": 41139.12592,\n                    \"fixed_om_cost\": 1174.680271,\n                    \"variable_om_cost\": 0.0,\n                    \"efficiency_rate\": 0.87455595,\n                    \"h2_constraints\": {\n                        \"MinFlowConstraint\": true,\n                        \"RampingLimitConstraint\": true\n                    },\n                    \"min_flow_fraction\": 0.1,\n                    \"ramp_up_fraction\": 1,\n                    \"ramp_down_fraction\": 1\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"tip: Global Data vs Instance Data\nWhen working with JSON input files, the global_data field can be used to group data that is common to all instances of the same asset type. This is useful for setting constraints that are common to all instances of the same asset type and avoid repeating the same data for each instance. See the Examples section below for an example.","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"The following tables outline the attributes that can be set for an electrolyzer asset.","category":"page"},{"location":"Manual/assets/electrolyzer/#Essential-Attributes","page":"Electrolyzer","title":"Essential Attributes","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Field Type Description\nType String Asset type identifier: \"Electrolyzer\"\nid String Unique identifier for the electrolyzer instance\nlocation String Geographic location/node identifier","category":"page"},{"location":"Manual/assets/electrolyzer/#electrolyzer_conversion_process_parameters","page":"Electrolyzer","title":"Conversion Process Parameters","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"The following set of parameters control the conversion process and stoichiometry of the electrolyzer asset (see Flow Equations for more details).","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Field Type Description Units Default\nefficiency_rate Float64 Electrolysis efficiency MWh_h2MWh_elec 0.0","category":"page"},{"location":"Manual/assets/electrolyzer/#\"electrolyzer_constraints\"","page":"Electrolyzer","title":"Constraints configuration","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Electrolyzer assets can have different constraints applied to them, and the user can configure them using the following fields:","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Field Type Description\ntransform_constraints Dict{String,Bool} List of constraints applied to the transformation component.\nh2_constraints Dict{String,Bool} List of constraints applied to the hydrogen edge.\nelec_constraints Dict{String,Bool} List of constraints applied to the electricity edge.","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Users can refer to the Adding Asset Constraints to a System section of the User Guide for a list of all the constraints that can be applied to the different components of an electrolyzer asset.","category":"page"},{"location":"Manual/assets/electrolyzer/#Default-constraints","page":"Electrolyzer","title":"Default constraints","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"To simplify the input file and the asset configuration, the following constraints are applied to the electrolyzer asset by default:","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Balance constraint (applied to the transformation component)\nCapacity constraint (applied to the hydrogen edge)","category":"page"},{"location":"Manual/assets/electrolyzer/#Investment-Parameters","page":"Electrolyzer","title":"Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Field Type Description Units Default\ncan_retire Boolean Whether electrolyzer capacity can be retired - true\ncan_expand Boolean Whether electrolyzer capacity can be expanded - true\nexisting_capacity Float64 Initial installed electrolyzer capacity MW 0.0\ncapacity_size Float64 Unit size for capacity decisions - 1.0","category":"page"},{"location":"Manual/assets/electrolyzer/#Additional-Investment-Parameters","page":"Electrolyzer","title":"Additional Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Maximum and minimum capacity constraints","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"If MaxCapacityConstraint or MinCapacityConstraint are added to the constraints dictionary for the hydrogen edge, the following parameters are used by Macro:","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Field Type Description Units Default\nmax_capacity Float64 Maximum allowed electrolyzer capacity MW Inf\nmin_capacity Float64 Minimum allowed electrolyzer capacity MW 0.0","category":"page"},{"location":"Manual/assets/electrolyzer/#Economic-Parameters","page":"Electrolyzer","title":"Economic Parameters","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Field Type Description Units Default\ninvestment_cost Float64 CAPEX per unit electrolyzer capacity $/MW 0.0\nannualized_investment_cost Union{Nothing,Float64} Annualized CAPEX $/MW/yr calculated\nfixed_om_cost Float64 Fixed O&M costs $/MW/yr 0.0\nvariable_om_cost Float64 Variable O&M costs $/MWh 0.0\nwacc Float64 Weighted average cost of capital fraction 0.0\nlifetime Int Asset lifetime in years years 1\ncapital_recovery_period Int Investment recovery period years 1\nretirement_period Int Retirement period years 0","category":"page"},{"location":"Manual/assets/electrolyzer/#Operational-Parameters","page":"Electrolyzer","title":"Operational Parameters","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Field Type Description Units Default\navailability Dict Path to availability file and column name - Empty","category":"page"},{"location":"Manual/assets/electrolyzer/#Additional-Operational-Parameters","page":"Electrolyzer","title":"Additional Operational Parameters","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Minimum flow constraint","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"If MinFlowConstraint is added to the constraints dictionary for the hydrogen edge, the following parameter is used:","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Field Type Description Units Default\nmin_flow_fraction Float64 Minimum flow as fraction of capacity fraction 0.0","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Ramping limit constraint","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"If RampingLimitConstraint is added to the constraints dictionary for the hydrogen edge, the following parameters are used:","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Field Type Description Units Default\nramp_up_fraction Float64 Maximum increase in flow between timesteps fraction 1.0\nramp_down_fraction Float64 Maximum decrease in flow between timesteps fraction 1.0","category":"page"},{"location":"Manual/assets/electrolyzer/#electrolyzer_type_definition","page":"Electrolyzer","title":"Types - Asset Structure","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"The Electrolyzer asset is defined as follows:","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"struct Electrolyzer <: AbstractAsset\n    id::AssetId\n    electrolyzer_transform::Transformation\n    h2_edge::Edge{<:Hydrogen}\n    elec_edge::Edge{<:Electricity}\nend","category":"page"},{"location":"Manual/assets/electrolyzer/#electrolyzer_constructors","page":"Electrolyzer","title":"Constructors","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/#Default-constructor","page":"Electrolyzer","title":"Default constructor","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Electrolyzer(id::AssetId, electrolyzer_transform::Transformation, h2_edge::Edge{<:Hydrogen}, elec_edge::Edge{<:Electricity})","category":"page"},{"location":"Manual/assets/electrolyzer/#Factory-constructor","page":"Electrolyzer","title":"Factory constructor","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"make(asset_type::Type{Electrolyzer}, data::AbstractDict{Symbol,Any}, system::System)","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Field Type Description\nasset_type Type{Electrolyzer} Macro type of the asset\ndata AbstractDict{Symbol,Any} Dictionary containing the input data for the asset\nsystem System System to which the asset belongs","category":"page"},{"location":"Manual/assets/electrolyzer/#electrolyzer_examples","page":"Electrolyzer","title":"Examples","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"This section contains examples of how to use the electrolyzer asset in a Macro model.","category":"page"},{"location":"Manual/assets/electrolyzer/#Single-electrolyzer-in-a-single-zone","page":"Electrolyzer","title":"Single electrolyzer in a single zone","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"This example shows a single electrolyzer in a single zone, SE, with ramping limits and minimum flow constraints.","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"JSON Format:","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"{\n    \"electrolyzer\": [\n        {\n            \"type\": \"Electrolyzer\",\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Electrolyzer\",\n                    \"location\": \"SE\",\n                    \"investment_cost\": 41139.12592,\n                    \"fixed_om_cost\": 1174.680271,\n                    \"variable_om_cost\": 0.0,\n                    \"capacity_size\": 1.5756,\n                    \"efficiency_rate\": 0.87455595,\n                    \"h2_constraints\": {\n                        \"RampingLimitConstraint\": true,\n                        \"MinFlowConstraint\": true\n                    },\n                    \"ramp_up_fraction\": 1,\n                    \"ramp_down_fraction\": 1,\n                    \"min_flow_fraction\": 0.1\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"CSV Format:","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Type id location investment_cost fixed_om_cost variable_om_cost efficiency_rate h2_constraints–RampingLimitConstraint h2_constraints–MinFlowConstraint capacity_size ramp_up_fraction ramp_down_fraction min_flow_fraction\nElectrolyzer SE_Electrolyzer SE 41139.12592 1174.680271 0.0 0.87455595 true true 1.5756 1 1 0.1","category":"page"},{"location":"Manual/assets/electrolyzer/#Multiple-electrolyzers-in-different-zones","page":"Electrolyzer","title":"Multiple electrolyzers in different zones","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"JSON Format:","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Note that the global_data field is used to set the fields and constraints that are common to all instances of the same asset type.","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"{\n    \"electrolyzer\": [\n        {\n            \"type\": \"Electrolyzer\",\n            \"global_data\": {\n                \"h2_constraints\": {\n                    \"RampingLimitConstraint\": true,\n                    \"MinFlowConstraint\": true\n                },\n                \"efficiency_rate\": 0.87455595,\n                \"investment_cost\": 41139.12592,\n                \"fixed_om_cost\": 1174.680271,\n                \"variable_om_cost\": 0.0,\n                \"capacity_size\": 1.5756,\n                \"ramp_up_fraction\": 1,\n                \"ramp_down_fraction\": 1,\n                \"min_flow_fraction\": 0.1\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Electrolyzer\",\n                    \"location\": \"SE\"\n                },\n                {\n                    \"id\": \"MIDAT_Electrolyzer\",\n                    \"location\": \"MIDAT\"\n                },\n                {\n                    \"id\": \"NE_Electrolyzer\",\n                    \"location\": \"NE\"\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"CSV Format:","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Type id location investment_cost fixed_om_cost variable_om_cost efficiency_rate h2_constraints–RampingLimitConstraint h2_constraints–MinFlowConstraint capacity_size ramp_up_fraction ramp_down_fraction min_flow_fraction\nElectrolyzer SE_Electrolyzer SE 41139.12592 1174.680271 0.0 0.87455595 true true 1.5756 1 1 0.1\nElectrolyzer MIDAT_Electrolyzer MIDAT 41139.12592 1174.680271 0.0 0.87455595 true true 1.5756 1 1 0.1\nElectrolyzer NE_Electrolyzer NE 41139.12592 1174.680271 0.0 0.87455595 true true 1.5756 1 1 0.1","category":"page"},{"location":"Manual/assets/electrolyzer/#electrolyzer_best_practices","page":"Electrolyzer","title":"Best Practices","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Use global data for common fields and constraints: Use the global_data field to set the fields and constraints that are common to all instances of the same asset type.\nSet realistic efficiency rates: Ensure the electrolysis efficiency is accurate for the technology being modeled\nUse meaningful IDs: Choose descriptive identifiers that indicate location and technology type\nConsider operational constraints: Set appropriate ramp rates and minimum flow fractions based on technology characteristics\nUse constraints selectively: Only enable constraints that are necessary for your modeling needs\nValidate costs: Ensure investment and O&M costs are in appropriate units\nTest configurations: Start with simple configurations and gradually add complexity","category":"page"},{"location":"Manual/assets/electrolyzer/#electrolyzer_advanced_json_csv_input_format","page":"Electrolyzer","title":"Input File (Advanced Format)","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Macro provides an advanced format for defining electrolyzer assets, offering users and modelers detailed control over asset specifications. This format builds upon the standard format and is ideal for those who need more comprehensive customization.","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"To understand the advanced format, consider the graph representation and the type definition of an electrolyzer asset. The input file mirrors this hierarchical structure.","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"An electrolyzer asset in Macro is composed of a transformation component, represented by a Transformation object, and two edges (electricity and hydrogen), each represented by an Edge object. The input file for an electrolyzer asset is therefore organized as follows:","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"h2_edge\": {\n            // ... h2_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Each top-level key (e.g., \"transforms\" or \"edges\") denotes a component type. The second-level keys either specify the attributes of the component (when there is a single instance) or identify the instances of the component (e.g., \"elec_edge\", \"h2_edge\", etc.) when there are multiple instances. For multiple instances, a third-level key details the attributes for each instance.","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Below is an example of an input file for an electrolyzer asset that sets up multiple electrolyzers across different regions:","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"{\n    \"electrolyzer\": [\n        {\n            \"type\": \"Electrolyzer\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"Electricity\"\n                },\n                \"edges\": {\n                    \"h2_edge\": {\n                        \"commodity\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_retire\": true,\n                        \"can_expand\": true,\n                        \"constraints\": {\n                            \"RampingLimitConstraint\": true,\n                            \"MinFlowConstraint\": true\n                        }\n                    },\n                    \"elec_edge\": {\n                        \"commodity\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Electrolyzer\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.87455595\n                    },\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_SE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 41139.12592,\n                            \"fixed_om_cost\": 1174.680271,\n                            \"variable_om_cost\": 0.0,\n                            \"capacity_size\": 1.5756,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.1\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_Electrolyzer\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.87455595\n                    },\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_MIDAT\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 41139.12592,\n                            \"fixed_om_cost\": 1174.680271,\n                            \"variable_om_cost\": 0.0,\n                            \"capacity_size\": 1.5756,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.1\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_Electrolyzer\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.87455595\n                    },\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_NE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_NE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 41139.12592,\n                            \"fixed_om_cost\": 1174.680271,\n                            \"variable_om_cost\": 0.0,\n                            \"capacity_size\": 1.5756,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.1\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/electrolyzer/#Key-Points","page":"Electrolyzer","title":"Key Points","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"The global_data field is utilized to define attributes and constraints that apply universally to all instances of a particular asset type.\nThe start_vertex and end_vertex fields indicate the nodes to which the edges are connected. These nodes must be defined in the nodes.json file.\nBy default, the hydrogen edge has capacity variables and can be expanded or retired (see note below).\nFor a comprehensive list of attributes that can be configured for the transformation and edge components, refer to the transformation and edges pages of the Macro manual.","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"note: The `has_capacity` Edge Attribute\nThe has_capacity attribute is a flag that indicates whether a specific edge of an asset has a capacity variable, allowing it to be expanded or retired. Typically, users do not need to manually adjust this flag, as the asset creators in Macro have already configured it correctly for each edge. However, advanced users can use this flag to override the default settings for each edge if needed.","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/#Adding-Asset-Constraints-to-a-System","page":"Adding Assets constraints","title":"Adding Asset Constraints to a System","text":"","category":"section"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"One of Macro's most powerful features is the ability to enable and disable constraints through input switches without modifying the source code. ","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"This guide documents all available constraints and explains how to enable them in your system.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"tip: Important - Attribute Prefixes\nThe prefix before _constraints (and all other attributes) in the JSON input file varies depending on the component of the asset that the constraint is applied to. Some examples are:transform_constraints: constraints on the conversion component of an asset\nstorage_constraints: constraints on the storage component of an asset\nelec_constraints: constraints on the power input/output component of an asset\ndischarge_constraints: constraints on the discharging component of an asset\netc.Throughout this guide, we show examples with different prefixes to illustrate this variety. When implementing constraints for your specific asset, make sure to review this example case or the asset definition in the Macro Asset Library to make sure you use the correct prefix for your asset type.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/#Balance-Constraint","page":"Adding Assets constraints","title":"Balance Constraint","text":"","category":"section"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"Note: Enabled by default in all assets in the Macro Asset Library","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"The balance constraint ensures that the sum of inflows and outflows at any component of an asset equals zero at each time step.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"note: Formulation\nbeginaligned\n    sum_i in textinflows textflow(i t) - sum_o in textoutflows textflow(o t) = 0\nendaligned","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"While enabled by default in all assets in the Macro Asset Library, the user can explicitly enable or disable it by adding these lines to their asset's JSON input file:","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"{\n    \"transform_constraints\": {\n        \"BalanceConstraint\": true/false\n    },\n    \"storage_constraints\": {\n        \"BalanceConstraint\": true/false\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/#Capacity-Constraint","page":"Adding Assets constraints","title":"Capacity Constraint","text":"","category":"section"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"Note: Enabled by default in all assets in the Macro Asset Library","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"The capacity constraint ensures that the flow of a commodity through an edge of an asset (e.g, power output) does not exceed the nameplate capacity (multiplied by its availability factor).","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"note: Formulation - Assets without unit commitment\nFor unidirectional edges, the constraint takes this form:beginaligned\n    textflow(e t) leq textavailability(e t) times textcapacity(e)\nendalignedFor bidirectional edges:beginaligned\n    textsign(e) times textflow(e t) leq textavailability(e t) times textcapacity(e)\nendalignedwhere sign(e) is the sign of the flow of the edge, which is 1 for positive flows and -1 for negative flows.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"note: Formulation - Assets with unit commitment\nUnidirectional edges:beginaligned\n    sum_t in texttime_interval(e) textflow(e t) leq textavailability(e t) times textcapacity(e) times textucommit(e t)\nendalignedBidirectional edges:beginaligned\n    textsign(e) times textflow(e t) leq textavailability(e t) times textcapacity(e) times textucommit(e t)\nendalignedwhere sign(e) is the sign of the flow of the edge, which is 1 for positive flows and -1 for negative flows.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"The capacity constraint is enabled by default in all assets in the Macro Asset Library. The user can enable/disable it by adding these lines to their asset's JSON input file:","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"{\n    \"elec_constraints\": {\n        \"CapacityConstraint\": true/false\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"As a reminder, users can define the availability as a time series in the asset's JSON input file using the following format:","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"Vector of numbers","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"{\n    \"availability\": [0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9]\n}","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"Column in a CSV file","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"{\n    \"availability\": {\n        \"timeseries\": {\n            \"path\": \"system/availability.csv\",\n            \"header\": \"<asset_id>\"\n        }\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/#Maximum-Capacity","page":"Adding Assets constraints","title":"Maximum Capacity","text":"","category":"section"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"The maximum capacity constraint enforces that the capacity of an edge or storage of an asset does not exceed the max_capacity attribute as specified in the JSON input file.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"note: Formulation\nbeginaligned\n    textcapacity(y) leq textmax_capacity(y)\nendalignedwhere y is the edge or storage of the asset.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"To enable this constraint:","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"Add the MaxCapacityConstraint to the list of constraints in the JSON input file of the asset and set it to true.\nAdd a value to the max_capacity attribute of the asset.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"{\n    \"elec_constraints\": {\n        \"MaxCapacityConstraint\": true\n    },\n    \"max_capacity\": 27760\n}","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/#Minimum-Capacity","page":"Adding Assets constraints","title":"Minimum Capacity","text":"","category":"section"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"The minimum capacity constraint enforces that the capacity of an edge or storage of an asset is greater than or equal to the min_capacity attribute as specified in the JSON input file.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"note: Formulation\nbeginaligned\n    textcapacity(y) geq textmin_capacity(y)\nendalignedwhere y is the edge or storage of the asset.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"To enable this constraint:","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"Add the MinCapacityConstraint to the list of constraints in the JSON input file of the asset and set it to true.\nAdd a value to the min_capacity attribute of the asset.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"{\n    \"elec_constraints\": {\n        \"MinCapacityConstraint\": true\n    },\n    \"min_capacity\": 100\n}","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/#Minimum-Flow-Constraint","page":"Adding Assets constraints","title":"Minimum Flow Constraint","text":"","category":"section"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"The minimum flow constraint enforces that the flow of a commodity in an edge does not exceed a user-defined fraction of the capacity of the edge (specified using the min_flow_fraction attribute).","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"note: Formulation\nbeginaligned\n    textflow(e t) geq textmin_flow_fraction(e) times textcapacity(e)\nendalignedwhere e is the edge of the asset.In the case of edges with unit commitment, the constraint becomes:beginaligned\n    textflow(e t) geq textmin_flow_fraction(e) times textcapacity_size(e) times textucommit(e t)\nendalignedwhere e is the edge of the asset, and where capacity_size(e)*ucommit(e, t) is the total capacity of the edge that is available at time t.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"To enable this constraint:","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"Add the MinFlowConstraint to the list of constraints in the JSON input file of the asset and set it to true.\nAdd a value to the min_flow_fraction attribute of the asset.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"{\n    \"elec_constraints\": {\n        \"MinFlowConstraint\": true\n    },\n    \"min_flow_fraction\": 0.5\n}","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"warning: Unidirectional Edges Only\nThis constraint is available only for unidirectional edges.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/#Minimum-Up/Down-Time-(Unit-Commitment)","page":"Adding Assets constraints","title":"Minimum Up/Down Time (Unit Commitment)","text":"","category":"section"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"The minimum up/down time constraint enforces that edges with unit commitment must be on/off for a minimum number of time steps (specified using the min_up_time/min_down_time attribute).","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"note: Formulation\nbeginaligned\n    textucommit(e t) geq sum_h=0^textmin_up_time(e)-1 textustart(e t-h)\nendalignedbeginaligned\n    fractextcapacity(e)textcapacity_size(e) - textucommit(e t) geq sum_h=0^textmin_down_time(e)-1 textushut(e t-h)\nendalignedwhere e is the edge of the asset. ","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"To enable this constraint:","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"Add the MinUpTimeConstraint/MinDownTimeConstraint to the list of constraints in the JSON input file of the asset and set it to true.\nAdd a value to the min_up_time/min_down_time attribute of the asset.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"{\n    \"elec_constraints\": {\n        \"MinUpTimeConstraint\": true,\n        \"MinDownTimeConstraint\": true\n    },\n    \"min_up_time\": 6,\n    \"min_down_time\": 6\n}","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"warning: Min up/down time duration - subperiods\nThis constraint will throw an error if the minimum up/down time is longer than the length of one subperiod.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/#Must-Run-Constraint","page":"Adding Assets constraints","title":"Must Run Constraint","text":"","category":"section"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"The must run constraint forces an edge to operate at its full capacity (adjusted by availability) at all times.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"note: Formulation\nbeginaligned\n    textflow(e t) = textavailability(e t) times textcapacity(e)\nendalignedwhere e is the edge of the asset.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"To enable this constraint:","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"Add the MustRunConstraint to the list of constraints in the JSON input file of the asset and set it to true.\n(optional) Add a time series with the availability of the edge.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"{\n    \"elec_constraints\": {\n        \"MustRunConstraint\": true\n    },\n    \"availability\": {\n        \"timeseries\": {\n            \"path\": \"system/availability.csv\",\n            \"header\": \"<asset_id>\"\n        }\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"warning: Must run constraint\nThis constraint is available only for unidirectional edges.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/#Ramping-Limit-Constraint-(RampUp/RampDown)","page":"Adding Assets constraints","title":"Ramping Limit Constraint (RampUp/RampDown)","text":"","category":"section"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"The ramping limits constraint restricts how quickly the flow through an edge can change between consecutive time steps. The maximum rate of change is defined as a fraction of the edge's capacity (ramp_up_fraction/ramp_down_fraction).","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"note: Formulation - Assets without unit commitment\nbeginaligned\n    textflow(e t) - textflow(e t-1) leq textramp_up_fraction(e) times textcapacity(e)\nendalignedbeginaligned\n    textflow(e t-1) - textflow(e t) leq textramp_down_fraction(e) times textcapacity(e)\nendaligned","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"note: Formulation - Assets with unit commitment\nbeginaligned\n    textflow(e t) - textflow(e t-1) - textramp_up_fraction(e) times textcapacity_size(e) times (textucommit(e t) - textustart(e t)) + textmin(availability(e t) max(min_flow_fraction(e) ramp_up_fraction(e))) times textcapacity_size(e) times textustart(e t) - textmin_flow_fraction(e) times textcapacity_size(e) times textushut(e t) leq 0\nendalignedbeginaligned\n    textflow(e t-1) - textflow(e t) - textramp_down_fraction(e) times textcapacity_size(e) times (textucommit(e t) - textustart(e t)) - textmin_flow_fraction(e) times textcapacity_size(e) times textustart(e t) + textmin(availability(e t) max(min_flow_fraction(e) ramp_down_fraction(e))) times textcapacity_size(e) times textushut(e t) leq 0\nendaligned","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"To enable this constraint:","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"Add the RampingLimitConstraint to the list of constraints in the JSON input file of the asset and set it to true.\nAdd a value to the ramp_up_fraction/ramp_down_fraction attribute of the asset.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"{\n    \"elec_constraints\": {\n        \"RampingLimitConstraint\": true\n    },\n    \"ramp_up_fraction\": 0.6,\n    \"ramp_down_fraction\": 0.6\n}","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/#Storage-Capacity-Constraint","page":"Adding Assets constraints","title":"Storage Capacity Constraint","text":"","category":"section"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"Note: Enabled by default for batteries and gas storage assets","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"This constraint ensures that the storage level of a storage component of an asset never exceeds its total energy capacity.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"note: Formulation\nbeginaligned\n    textstorage_level(g t) leq textcapacity(g)\nendalignedwhere g is the storage of the asset.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"As mentioned above, this constraint is enabled by default for batteries and gas storage assets. To enable/disable this constraint for other assets, use the following:","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"Add the StorageCapacityConstraint to the list of constraints in the JSON input file of the asset and set it to true.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"{\n    \"storage_constraints\": {\n        \"StorageCapacityConstraint\": true\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/#Maximum-Storage-Level","page":"Adding Assets constraints","title":"Maximum Storage Level","text":"","category":"section"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"The maximum storage level constraint enforces that the storage level of a storage component of an asset does not exceed the capacity times the max_storage_level attribute as specified in the JSON input file.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"note: Formulation\nbeginaligned\n    textstorage_level(g t) leq textmax_storage_level(g) times textcapacity(g)\nendalignedwhere g is the storage of the asset.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"To enable this constraint:","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"Add the MaxStorageLevelConstraint to the list of constraints in the JSON input file of the asset and set it to true.\nAdd a value to the max_storage_level attribute of the asset.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"{\n    \"storage_constraints\": {\n        \"MaxStorageLevelConstraint\": true\n    },\n    \"max_storage_level\": 1\n}","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/#Minimum-Storage-Level","page":"Adding Assets constraints","title":"Minimum Storage Level","text":"","category":"section"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"The minimum storage level constraint enforces that the storage level of a storage component of an asset does not exceed the capacity times the min_storage_level attribute as specified in the JSON input file.   ","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"note: Formulation\nbeginaligned\n    textstorage_level(g t) geq textmin_storage_level(g) times textcapacity(g)\nendalignedwhere g is the storage of the asset.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"To enable this constraint:","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"Add the MinStorageLevelConstraint to the list of constraints in the JSON input file of the asset and set it to true.\nAdd a value to the min_storage_level attribute of the asset.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"{\n    \"storage_constraints\": {\n        \"MinStorageLevelConstraint\": true\n    },\n    \"min_storage_level\": 0.3\n}","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/#Storage-Charge/Discharge-Ratio","page":"Adding Assets constraints","title":"Storage Charge/Discharge Ratio","text":"","category":"section"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"The storage charge/discharge ratio constraint links the capacity of the charging edge to the capacity of the discharging edge through the charge_discharge_ratio input parameter.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"note: Formulation\nbeginaligned\n    textcharge_discharge_ratio times textcapacity(discharge_edge) = textcapacity(charge_edge)\nendaligned","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"To enable this constraint:","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"Add the StorageChargeDischargeRatioConstraint to the list of constraints in the JSON input file of the asset and set it to true.\nAdd a value to the charge_discharge_ratio attribute of the asset.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"{\n    \"storage_constraints\": {\n        \"StorageChargeDischargeRatioConstraint\": true\n    },\n    \"storage_charge_discharge_ratio\": 0.5\n}","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"warning: Constraint Application Scope\nAs noted above, this constraint is applied to the storage component of the asset, not to the individual charging and discharging edges.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/#Storage-Discharge-Limit-Constraint","page":"Adding Assets constraints","title":"Storage Discharge Limit Constraint","text":"","category":"section"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"Note: Enabled by default for batteries.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"The storage discharge limit constraint ensures that the flow through a discharging edge (adjusted for efficiency) cannot exceed the storage level from the previous time step.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"note: Formulation\nbeginaligned\n   fractextflow(discharge_edge t)textefficiency(discharge_edge) leq textstorage_level(t-1)\nendaligned","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"To enable this constraint:","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"Add the StorageDischargeLimitConstraint to the list of constraints in the JSON input file of the asset and set it to true.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"{\n    \"discharge_constraints\": {\n        \"StorageDischargeLimitConstraint\": true\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"warning: Constraint Application Scope\nThis constraint is applied to discharging edges only.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/#Storage-Maximum/Minimum-Duration-Constraint","page":"Adding Assets constraints","title":"Storage Maximum/Minimum Duration Constraint","text":"","category":"section"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"This constraint limits the maximum/minimum energy capacity that can be stored relative to the discharging capacity. The limit is specified in the max_duration/min_duration attribute as a number of time steps.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"note: Formulation\nbeginaligned\n    textcapacity(storage) leq textmax_duration times textcapacity(discharge_edge)\nendalignedbeginaligned\n    textcapacity(storage) geq textmin_duration times textcapacity(discharge_edge)\nendaligned","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"To enable this constraint:","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"Add the StorageMaxDurationConstraint/StorageMinDurationConstraint to the list of constraints in the JSON input file of the asset and set it to true.\nAdd a value to the storage_max_duration/storage_min_duration attribute of the asset.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"{\n    \"storage_constraints\": {\n        \"StorageMaximumDurationConstraint\": true\n    },\n    \"storage_max_duration\": 10,\n    \"storage_min_duration\": 1\n}","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/#Storage-Symmetric-Capacity-Constraint","page":"Adding Assets constraints","title":"Storage Symmetric Capacity Constraint","text":"","category":"section"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"This constraint ensures that for symmetric storage systems, the maximum simultaneous charge and discharge cannot exceed the capacity of the discharging edge.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"note: Formulation\nbeginaligned\n    textflow(e_discharge t) + textflow(e_charge t) leq textcapacity(e_discharge)\nendaligned","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"To enable this constraint:","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"Add the StorageSymmetricCapacityConstraint to the list of constraints in the JSON input file of the asset and set it to true.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"{\n    \"discharge_constraints\": {\n        \"StorageSymmetricCapacityConstraint\": true\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"warning: Constraint Application Scope\nThis constraint is applied to the discharging edge of the asset.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/#Minimum-Storage-Outflow","page":"Adding Assets constraints","title":"Minimum Storage Outflow","text":"","category":"section"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"warning: HydroRes Assets Only\nThis constraint is specifically designed for HydroRes assets. A warning will be issued otherwise.Tip: If the discharge edge is the only outflow, use the MinFlowConstraint on the discharge edge instead.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"The minimum storage outflow constraint enforces that the sum of the flow through the spillage edge and the discharge edge does not exceed a user-defined fraction of the capacity of the discharge edge (min_outflow_fraction attribute).","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"note: Formulation\nbeginaligned\n    textflow(spillage_edge t) + textflow(discharge_edge t) geq textmin_outflow_fraction times textcapacity(discharge_edge)\nendaligned","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"To enable this constraint:","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"Add the MinStorageOutflowConstraint to the list of constraints in the JSON input file of the asset and set it to true.\nAdd a value to the min_outflow_fraction attribute of the asset.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"{\n    \"storage_constraints\": {\n        \"MinStorageOutflowConstraint\": true\n    },\n    \"min_outflow_fraction\": 0.1\n}","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/#Long-Duration-Storage-Implicit-Min/Max-Constraint","page":"Adding Assets constraints","title":"Long Duration Storage Implicit Min/Max Constraint","text":"","category":"section"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"Note: Enabled by default for batteries, gas storage, and hydro reservoirs when long_duration is set to true in the asset JSON input file.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"This set of constraints manages storage levels for long duration storage systems when modeling representative periods. The implementation is based on the paper: \"Improved formulation for long-duration storage in capacity expansion models using representative periods\" by Federico Parolin, Paolo Colbertaldo, and Ruaridh Macdonald, 2024 (arXiv:2409.19079). For detailed information about the constraint formulation, please refer to the paper.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"This constraint is enabled by default for batteries, gas storage, and hydro reservoirs when long_duration is set to true in the asset JSON input file. To enable/disable this constraint for other assets, use the following:","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"Add the LongDurationStorageImplicitMinMaxConstraint to the list of constraints in the JSON input file of the asset and set it to true.","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"{\n    \"storage_long_duration\": true,\n    \"storage_constraints\": {\n        \"LongDurationStorageImplicitMinMaxConstraint\": true/false\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"","category":"page"},{"location":"Guides/User Guide/user_add_node/#Adding-a-Node-to-a-System","page":"Adding Nodes","title":"Adding a Node to a System","text":"","category":"section"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"Adding a new Node to a System requires a few steps:","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"Add the new Node to the Nodes file\nGive the Node a unique ID\nAdd data and constraints\n(optionally) Add the Node to a Location","category":"page"},{"location":"Guides/User Guide/user_add_node/#Adding-the-Node-to-the-Nodes-file","page":"Adding Nodes","title":"Adding the Node to the Nodes file","text":"","category":"section"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"The Nodes file is a JSON file containing an array of Nodes. Single Nodes should be defined by their Commodity (in the \"type\" field) and instance data. Nodes of the same Commodity with shared attributes can be described using global data.","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"As an example, this Node file (at system/nodes.json, by default) describes a Hydrogen Node, and three Electricity Nodes. The three Electricity Nodes have the same non-served demand (NSD) constraints and prices, so those elements are moved to the global data field to reduce duplicate data.","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"{\"nodes\": [\n    {\n        \"type\": \"Hydrogen\",\n        \"instance_data\": {\n            \"id\": \"single_h2_node\",\n            \"time_interval\": \"Hydrogen\",\n            \"location\": \"SE\",\n            \"demand\": {\n                \"timeseries\": {\n                    \"path\": \"system/demand.csv\",\n                    \"header\": \"H2_demand_se\"\n                }\n            }\n        }\n    },\n    {\n        \"type\": \"Electricity\",\n        \"global_data\": {\n            \"time_interval\": \"Electricity\",\n            \"max_nsd\": [\n                1\n            ],\n            \"price_nsd\": [\n                5000.0\n            ],\n            \"constraints\": {\n                \"BalanceConstraint\": true,\n                \"MaxNonServedDemandConstraint\": true,\n                \"MaxNonServedDemandPerSegmentConstraint\": true\n            }\n        },\n        \"instance_data\": [\n            {\n                \"id\": \"elec_SE\",\n                \"location\": \"SE\",\n                \"demand\": {\n                    \"timeseries\": {\n                        \"path\": \"system/demand.csv\",\n                        \"header\": \"Demand_MW_z1\"\n                    }\n                }\n            },\n            {\n                \"id\": \"elec_MIDAT\",\n                \"location\": \"MIDAT\",\n                \"demand\": {\n                    \"timeseries\": {\n                        \"path\": \"system/demand.csv\",\n                        \"header\": \"Demand_MW_z2\"\n                    }\n                }\n            },\n            {\n                \"id\": \"elec_NE\",\n                \"location\": \"NE\",\n                \"demand\": {\n                    \"timeseries\": {\n                        \"path\": \"system/demand.csv\",\n                        \"header\": \"Demand_MW_z3\"\n                    }\n                }\n            }\n        ]\n    }\n]}","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"The most straightforward way of adding a new Node is to use the template functions.","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"You can add one or more Node by providing the Nodes file as an argument. In these examples, we will assume your have created a system called ExampleSystems/template_example and that you have created an assets folder in that directory.","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"julia> template_location(\"ExampleSystems/template_example/system/nodes.json\", Electricity)\njulia> template_location(\"ExampleSystems/template_example/system/nodes.json\", [Electricity, Hydrogen])","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"Or by providing the associated System:","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"julia> template_location(system, [Electricity, Hydrogen])","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"You can learn how to create or load the System here.","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"Each new Node will be added to the end of the existing Nodes in the Nodes file. For example, adding a new Hydrogen Node to the previous Nodes file will result in:","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"{\n    \"nodes\": [\n        {\n            \"type\": \"Hydrogen\",\n            \"instance_data\": {\n                \"location\": \"SE\",\n                \"id\": \"single_h2_node\",\n                \"demand\": {\n                    \"timeseries\": {\n                        \"path\": \"system/demand.csv\",\n                        \"header\": \"H2_demand_se\"\n                    }\n                },\n                \"time_interval\": \"Hydrogen\"\n            }\n        },\n        {\n            \"global_data\": {\n                \"constraints\": {\n                    \"MaxNonServedDemandPerSegmentConstraint\": true,\n                    \"MaxNonServedDemandConstraint\": true,\n                    \"BalanceConstraint\": true\n                },\n                \"max_nsd\": [\n                    1\n                ],\n                \"price_nsd\": [\n                    5000\n                ],\n                \"time_interval\": \"Electricity\"\n            },\n            \"type\": \"Electricity\",\n            \"instance_data\": [\n                {\n                    \"location\": \"SE\",\n                    \"id\": \"elec_SE\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\",\n                            \"header\": \"Demand_MW_z1\"\n                        }\n                    }\n                },\n                {\n                    \"location\": \"MIDAT\",\n                    \"id\": \"elec_MIDAT\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\",\n                            \"header\": \"Demand_MW_z2\"\n                        }\n                    }\n                },\n                {\n                    \"location\": \"NE\",\n                    \"id\": \"elec_NE\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\",\n                            \"header\": \"Demand_MW_z3\"\n                        }\n                    }\n                }\n            ]\n        },\n        {\n            \"type\": \"Hydrogen\",\n            \"instance_data\": [\n                {\n                    \"location\": null,\n                    \"min_nsd\": [\n                        0\n                    ],\n                    \"timedata\": null,\n                    \"max_nsd\": [\n                        0\n                    ],\n                    \"price\": [\n                    ],\n                    \"price_nsd\": [\n                        0\n                    ],\n                    \"max_supply\": [\n                        0\n                    ],\n                    \"price_supply\": [\n                        0\n                    ],\n                    \"price_unmet_policy\": {\n                    },\n                    \"constraints\": {\n                    },\n                    \"rhs_policy\": {\n                    },\n                    \"id\": null,\n                    \"demand\": [\n                    ]\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"Macro will add all default fields to the new Node. Details on each of these fields can be found here. Most fields can be deleted if you do not want to assign a non-default value. The only field which should not be deleted is the \"id\" field.","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"In the future we will add features to allow several Nodes of the same Commodity to be added at once with global data, as well as tools to automatically group Nodes with the same parameters.","category":"page"},{"location":"Guides/User Guide/user_add_node/#Giving-a-Node-an-ID","page":"Adding Nodes","title":"Giving a Node an ID","text":"","category":"section"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"Each Node must have a unique ID. This can be assigned by entering a name / identifier as a string in the Nodes file (system/nodes.json, by default).","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"Macro does not currently have a way to check if an ID is already in use. This is something we are investigating as a future feature. In the meantime, we recommend using your code editors search features to see if a preferred ID is already in use.","category":"page"},{"location":"Guides/User Guide/user_add_node/#Adding-data-and-constraints","page":"Adding Nodes","title":"Adding data and constraints","text":"","category":"section"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"You should parameterize your new Node by adding data and constraints to the relevant fields of the JSON file.","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"Details on the Node fields can be found in the Nodes page of the manual.","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"Details on adding timeseries data can be found here.","category":"page"},{"location":"Guides/User Guide/user_add_node/#Assing-the-Node-to-a-Location","page":"Adding Nodes","title":"Assing the Node to a Location","text":"","category":"section"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"It is recommended to add Nodes to a Location whenever the design of your System allows. This will allow you to use several features which simplify the process of connecting a Node to Assets and other Nodes.","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"To assign a Node to a Location, input the Location name as a string in the \"location\" field of the Node.","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"Adding a Location to a System details how to add new Locations.","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"In the future, we will add additional features to allow Locations and their constituent Nodes to be added with one template function call.","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/#Adding-Policy-Constraints-to-a-System","page":"Adding Policy constraints","title":"Adding Policy Constraints to a System","text":"","category":"section"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"Currently, Macro supports two types of policy constraints:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"CO₂ cap constraint\nCO₂ storage annual constraint","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"The units of both constraints are determined by the stoichiometric balances used in assets with CO₂ emissions or injection to a CO₂ capture node.","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"The following sections describe the steps to add these constraints to a system:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"Adding a CO₂ cap constraint\nAdding a CO₂ storage annual constraint","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"note: Nodes file\nTo add a policy constraint to a node, the user needs to edit the nodes file in the system (typically located at system/nodes.json). For more information about the nodes file, please refer to the Adding a Node to a System page.","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/#Adding-a-CO-cap-constraint","page":"Adding Policy constraints","title":"Adding a CO₂ cap constraint","text":"","category":"section"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"To add a CO₂ cap constraint to a CO₂ node in a system, the user needs to:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"1. Activate the constraint by setting CO2CapConstraint to true in the constraints field of a node of type CO2 in the nodes file:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"{\n    \"constraints\": {\n        \"CO2CapConstraint\": true\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"2. Set the CO₂ cap value using the CO2CapConstraint key in the rhs_policy field:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"{\n    \"rhs_policy\": {\n        \"CO2CapConstraint\": 0   // e.g. zero emissions\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"3. (Optional) Add a carbon price penalty using the price_unmet_policy field:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"{\n    \"price_unmet_policy\": {\n        \"CO2CapConstraint\": 200  // e.g. 200 USD/tonne penalty cost\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"As a result, to add a CO₂ cap constraint to a CO2 node in a system, the nodes file should have a CO2 node with the following structure:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"{\n    \"type\": \"CO2\",\n    \"instance_data\": [\n        {\n            \"id\": \"co2_sink\",\n            \"constraints\": {\n                \"CO2CapConstraint\": true\n            },\n            \"rhs_policy\": {\n                \"CO2CapConstraint\": 0\n            },\n            \"price_unmet_policy\": {\n                \"CO2CapConstraint\": 200\n            }\n        },\n        // other CO2 nodes\n    ],\n    \"global_data\": {\n        // other attributes\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"4. Link the CO₂ node's id to the co2_sink key of assets in the system that have CO₂ emissions to track their CO₂ output:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"{\n    \"type\": \"ThermalPower\",\n    \"instance_data\": [\n        {\n            \"co2_sink\": \"co2_sink\",\n            // other attributes\n        }\n    ],\n    \"global_data\": {\n        // other attributes\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"Macro will automatically track all CO₂ emissions from assets connected to the co2_sink node and will constrain total emissions to the value specified in the rhs_policy key (unless a carbon price penalty is applied using the price_unmet_policy field).","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/#Adding-a-CO-storage-annual-constraint","page":"Adding Policy constraints","title":"Adding a CO₂ storage annual constraint","text":"","category":"section"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"The CO₂ storage annual constraint limits the amount of CO₂ that can be injected and stored in a CO2Captured node. ","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"To add a CO₂ storage annual constraint to a CO2Captured node in a system, the user needs to:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"1. Activate the constraint by setting CO2StorageConstraint to true in the constraints key of a node of type CO2Captured:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"{\n    \"constraints\": {\n        \"CO2StorageConstraint\": true\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"2. Set the CO₂ storage annual constraint value using the CO2StorageConstraint key in the rhs_policy field:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"{\n    \"rhs_policy\": {\n        \"CO2StorageConstraint\": 4753600\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"Consequently, the nodes.json file should have a CO2Captured node with the following structure:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"{\n    \"type\": \"CO2Captured\",\n    \"instance_data\": [\n        {\n            \"id\": \"co2_storage_1\",\n            \"constraints\": {\n                \"CO2StorageConstraint\": true\n            },\n            \"rhs_policy\": {\n                \"CO2StorageConstraint\": 4753600\n            }\n        },\n        // other CO2Captured nodes\n    ],\n    \"global_data\": {\n        // other attributes\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"3. Link the CO2Captured node's id to the co2_storage key of assets in the system with CO₂ storage edges to track their CO₂ storage:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"{\n    \"type\": \"CO2Injection\",\n    \"instance_data\": [\n        {\n            \"co2_storage\": \"co2_storage_1\",\n            // other attributes\n        }\n    ],\n    \"global_data\": {\n        // other attributes\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"Macro will automatically track all CO₂ injection from assets linked to the co2_storage node and constrain the total injection to the value set in the rhs_policy key.","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"","category":"page"},{"location":"Tutorials/0_getting_started/#Tutorial-0:-Getting-Started-with-Macro","page":"Getting Started","title":"Tutorial 0: Getting Started with Macro","text":"","category":"section"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"note: Interactive Notebook\nThe interactive version of this tutorial can be found here.","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"This tutorial will guide you through the steps to install Macro, a solver, and all the necessary dependencies.","category":"page"},{"location":"Tutorials/0_getting_started/#Installing-Macro","page":"Getting Started","title":"Installing Macro","text":"","category":"section"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"Before installing Macro, make sure you have the following requirements installed:","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"Julia: you can download it here. \nGit: you can download it here.\n(optional) Jupyter Notebook: you can install it using the following command:","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"pip install notebook","category":"page"},{"location":"Tutorials/0_getting_started/#Download-Macro","page":"Getting Started","title":"Download Macro","text":"","category":"section"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"Since Macro is a public repository, you can simply clone it using:","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"git clone https://github.com/macroenergy/MacroEnergy.jl.git","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"If you want to clone a specific branch, you can use:","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"git clone -b <branch-name> https://github.com/macroenergy/MacroEnergy.jl.git","category":"page"},{"location":"Tutorials/0_getting_started/#Installation-steps","page":"Getting Started","title":"Installation steps","text":"","category":"section"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"Navigate to the repository:","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"cd MacroEnergy.jl","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"Install Macro and all the dependencies:","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"julia --project=. -e \"using Pkg; Pkg.instantiate(); Pkg.precompile()\"","category":"page"},{"location":"Tutorials/0_getting_started/#Setting-up-Jupyter-Notebook","page":"Getting Started","title":"Setting up Jupyter Notebook","text":"","category":"section"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"Once Macro is installed, to enable Jupyter Notebook support, you can run the following command:","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"julia --project=. ","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"in the terminal. Then, you can install the IJulia package and install the Macro kernel with the following commands:","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"julia> ]\n(MacroEnergy) pkg> add IJulia\njulia> using IJulia; IJulia.installkernel(\"MacroEnergy\", \"--project=@.\")","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"Once the kernel is installed, you can run Jupyter Notebook with one of the following commands:","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"jupyter lab","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"or ","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"jupyter notebook","category":"page"},{"location":"Tutorials/0_getting_started/#Testing-the-installation","page":"Getting Started","title":"Testing the installation","text":"","category":"section"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"To test the installation, you can run the following command:","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"using MacroEnergy","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"in a Jupyter Notebook cell or in a Julia terminal. If everything is set up correctly, you should see no errors and the package should load without any issues.","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"","category":"page"},{"location":"Guides/User Guide/user_write_results/#Writing-Results-to-Files","page":"Writing Results","title":"Writing Results to Files","text":"","category":"section"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Currently, Macro supports the following types of outputs:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Capacity Results: final capacity, new capacity and retired capacity for each technology.\nCosts: fixed, variable and total system costs.\nFlow Results: flow for each commodity through each edge in the system.\nCombined Results: all results (capacity, costs, flows, non-served demand, storage level) in a single file.","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"For detailed information about output formats and layouts, please refer to the Output Format and Output Files Layout sections below.","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"note: Output Files Location\nBy default, output files are written to a results directory created in the same location as your input data. For more details about output file locations, see the Output Files Location section below.","category":"page"},{"location":"Guides/User Guide/user_write_results/#Capacity-Results","page":"Writing Results","title":"Capacity Results","text":"","category":"section"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"To export system-level capacity results to a file, users can use the write_capacity function:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"write_capacity(\"capacity.csv\", system)","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"This function exports capacity results for all commodities and asset types defined in your case inputs. ","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"You can filter the results by commodity, asset type, or both using the commodity and asset_type parameters:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"# Filter results by commodity\nwrite_capacity(\"capacity.csv\", system, commodity=\"Electricity\")\n# Filter results by asset type\nwrite_capacity(\"capacity.csv\", system, asset_type=\"ThermalPower\")\n# Filter results by commodity and asset type\nwrite_capacity(\"capacity.csv\", system, commodity=\"Electricity\", asset_type=[\"VRE\", \"Battery\"])","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"The * wildcard character enables pattern matching for asset types. For example, the following command exports results for all asset types beginning with ThermalPower (e.g., ThermalPower, ThermalPowerCCS):","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"# Filter using wildcard matching for asset types\nwrite_capacity(\"capacity.csv\", system, commodity=\"Electricity\", asset_type=\"ThermalPower*\")","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Similarly, you can use wildcard matching for commodities:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"# Filter using wildcard matching for commodities\nwrite_capacity(\"capacity.csv\", system, commodity=\"CO2*\")","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"note: Output Layout\nResults are written in long format by default. To use wide format, configure the OutputLayout: {\"Capacity\": \"wide\"} setting in your Macro settings JSON file (see Output Files Layout for details).","category":"page"},{"location":"Guides/User Guide/user_write_results/#Costs","page":"Writing Results","title":"Costs","text":"","category":"section"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Export system-wide cost results using the write_costs function:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"write_costs(\"costs.csv\", system, model)","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Note that the write_costs function requires both the system and model arguments, unlike the write_capacity function.","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"note: Output Layout\nResults are written in long format by default. To use wide format, configure the OutputLayout: {\"Costs\": \"wide\"} setting in your Macro settings JSON file (see Output Files Layout for details).","category":"page"},{"location":"Guides/User Guide/user_write_results/#Flow-Results","page":"Writing Results","title":"Flow Results","text":"","category":"section"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Export system-level flow results using the write_flow function:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"write_flow(\"flows.csv\", system)","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Filter results by commodity, asset type, or both using the commodity and asset_type parameters:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"# Filter by commodity\nwrite_flow(\"flows.csv\", system, commodity=\"Electricity\")\n\n# Filter by asset type using parameter-free matching\nwrite_flow(\"flows.csv\", system, asset_type=\"ThermalPower\")\n\n# Filter by asset type using wildcard matching\nwrite_flow(\"flows.csv\", system, asset_type=\"ThermalPower*\")","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"note: Output Layout\nResults are written in long format by default. To use wide format, configure the OutputLayout: {\"Flow\": \"wide\"} setting in your Macro settings JSON file (see Output Files Layout for details).","category":"page"},{"location":"Guides/User Guide/user_write_results/#Combined-Results","page":"Writing Results","title":"Combined Results","text":"","category":"section"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Export all results at once using the write_results function:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"write_results(file_path, system, model, settings, ext=\".csv.gz\") # Creates multiple .csv.gz files\nwrite_results(file_path, system, model, settings, ext=\".parquet\") # Creates multiple .parquet files","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"note: Multiple Output Files\nThis function creates multiple files, one for each result type:file_path_capacity.ext - Capacity results\nfile_path_flow.ext - Flow results  \nfile_path_non_served_demand.ext - Non-served demand\nfile_path_storage_level.ext - Storage levels\nfile_path_discounted_costs.ext - Discounted costs\nfile_path_undiscounted_costs.ext - Undiscounted costs","category":"page"},{"location":"Guides/User Guide/user_write_results/#Writing-Case-Settings","page":"Writing Results","title":"Writing Case Settings","text":"","category":"section"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"To export case and system settings to a JSON file, use the write_settings function:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"write_settings(case, \"output/settings.json\")","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"This function automatically writes:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Case-level settings\nSystem-level settings for all systems in the case","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"The settings file is useful for:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Documentation and reproducibility\nSharing configuration with other users\nDebugging and troubleshooting","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"note: Automatic Settings Writing\nThe write_settings function is automatically called when using the main output writing functions (write_outputs) for different solution algorithms (Monolithic, Myopic, Benders).","category":"page"},{"location":"Guides/User Guide/user_write_results/#Output-Format","page":"Writing Results","title":"Output Format","text":"","category":"section"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Macro supports multiple output formats to suit different needs:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"CSV: Comma-separated values\nIdeal for small datasets and human-readable output\nDirectly compatible with spreadsheet software\nLess efficient for large datasets\nCSV.GZ: Compressed CSV\nBalances readability and file size\nReduces storage requirements while maintaining CSV format\nRequires decompression for reading\nParquet: Column-based data store\nOptimal for large datasets\nSuperior compression and faster read/write operations\nRequires specialized tools for reading","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"The output format is determined by the file extension. For example, to export results in Parquet format:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"write_results(\"results.parquet\", system, model, settings)","category":"page"},{"location":"Guides/User Guide/user_write_results/#Output-Files-Layout","page":"Writing Results","title":"Output Files Layout","text":"","category":"section"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"By default, all results are written in long format for optimal storage efficiency and performance, particularly for large systems. The wide format is also available for easier reading and visualization.","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Configure the output layout using the OutputLayout setting in your Macro settings JSON file:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"{\n  \"OutputLayout\": \"wide\"\n}","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"or","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"{\n  \"OutputLayout\": {\n    \"Capacity\": \"wide\",\n    \"Costs\": \"long\",\n    \"Flow\": \"long\"\n  }\n}","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Available options:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"\"OutputLayout\": \"long\" (applies to all outputs)\n\"OutputLayout\": \"wide\" (applies to all outputs)\n\"OutputLayout\": {\"Capacity\": \"wide\", \"Costs\": \"long\", \"Flow\": \"long\"} (individual layout settings)","category":"page"},{"location":"Guides/User Guide/user_write_results/#Output-Files-Location","page":"Writing Results","title":"Output Files Location","text":"","category":"section"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Macro provides two settings to control output file locations:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"OutputDir: Specifies the output directory name\nOverwriteResults: Controls whether to overwrite existing files","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"For example:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"{\n  \"OutputDir\": \"results\",\n  \"OverwriteResults\": true\n}","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Users can obtain the output directory path programmatically using the create_output_path function:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"output_path = create_output_path(system)","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"and then pass this path to the write functions:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"write_capacity(joinpath(output_path, \"capacity.csv\"), system)","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"By default, the create_output_path function creates a results directory in the same location as your input data (i.e., the directory containing system_data.json). For more information about the input folder structure, refer to the Creating a new System guide.","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"If OverwriteResults is true, existing files will be overwritten. Otherwise, the function appends a number to the directory name to prevent overwriting.","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Users can specify a custom base path for the output directory:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"output_path = create_output_path(system, \"path/to/output\")\nwrite_capacity(joinpath(output_path, \"capacity.csv\"), system) # Creates /path/to/output/results/capacity.csv","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"In this case, the function creates a directory named according to the OutputDir setting (e.g., results) within your specified path (e.g., path/to/output/results).","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"","category":"page"},{"location":"Manual/assets/battery/#Battery","page":"Battery","title":"Battery","text":"","category":"section"},{"location":"Manual/assets/battery/#Contents","page":"Battery","title":"Contents","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Overview | Asset Structure | Symmetric and Asymmetric Battery | Input File (Standard Format) | Types - Asset Structure | Constructors | Examples | Best Practices | Input File (Advanced Format)","category":"page"},{"location":"Manual/assets/battery/#battery_overview","page":"Battery","title":"Overview","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Battery assets in Macro represent electricity storage technologies that can charge from and discharge to the electricity network. These assets are defined using either JSON or CSV input files placed in the assets directory, typically named electricity_stor.json or electricity_stor.csv.","category":"page"},{"location":"Manual/assets/battery/#battery_asset_structure","page":"Battery","title":"Asset Structure","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"A battery storage asset consists of three main components:","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Storage Component: Tracks the energy level in the battery over time\nCharge Edge: Represents electricity flow from the grid to the battery\nDischarge Edge: Represents electricity flow from the battery to the grid","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Here is a graphical representation of the battery asset:","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph Battery\n  direction BT\n    A((Electricity)) e1@-->|Charge| B[Storage]\n    B e2@-->|Discharge| A\n    e1@{ animate: true }\n    e2@{ animate: true }\n end\n    style A font-size:19px,r:55px,fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n    style B fill:#FFD700,stroke:black,color:black;\n    linkStyle 0,1 stroke:#FFD700, stroke-width: 2px;","category":"page"},{"location":"Manual/assets/battery/#battery_symmetric_and_asymmetric","page":"Battery","title":"Symmetric and Asymmetric Battery","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Macro supports a variety of battery technologies, both with symmetric and asymmetric charge/discharge capacities. Examples of symmetric batteries are lithium-ion batteries, while asymmetric batteries are thermal storage systems.","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"The user can configure the battery asset to be symmetric or asymmetric simply by using the input file as described in the following section. By default, the battery asset is configured to be symmetric.","category":"page"},{"location":"Manual/assets/battery/#battery_input_file","page":"Battery","title":"Input File (Standard Format)","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"The easiest way to include a battery asset in a model is to create a new file (either JSON or CSV) and place it in the assets directory together with the other assets. ","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"your_case/\n├── assets/\n│   ├── electricity_stor.json    # or electricity_stor.csv\n│   ├── other_assets.json\n│   └── ...\n├── system/\n├── settings/\n└── ...","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"This file can either be created manually, or using the template_asset function, as shown in the Adding an Asset to a System section of the User Guide. The file will be automatically loaded when you run your Macro model. ","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"The following is an example of a battery asset input file:","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"{\n    \"elec_stor\": [\n        {\n            \"type\": \"Battery\",\n            \"global_data\": {\n                \"storage_constraints\": {\n                    \"StorageMinDurationConstraint\": true,\n                    \"StorageMaxDurationConstraint\": true,\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"battery_1_SE\",\n                    \"location\": \"SE\",\n                    \"storage_investment_cost\": 10000,\n                    \"storage_fixed_om_cost\": 500,\n                    \"storage_max_duration\": 10,\n                    \"storage_min_duration\": 1,\n                    \"discharge_investment_cost\": 20000,\n                    \"discharge_fixed_om_cost\": 1000,\n                    \"discharge_variable_om_cost\": 1,\n                    \"charge_variable_om_cost\": 1,\n                    \"discharge_efficiency\": 0.95,\n                    \"charge_efficiency\": 0.95\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"tip: Global Data vs Instance Data\nWhen working with JSON input files, the global_data field can be used to group data that is common to all instances of the same asset type. This is useful for setting constraints that are common to all instances of the same asset type and avoid repeating the same data for each instance. See the Examples section below for an example.","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"The following tables outlines the attributes that can be set for a battery asset.","category":"page"},{"location":"Manual/assets/battery/#Essential-Attributes","page":"Battery","title":"Essential Attributes","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Field Type Description\nType String Asset type identifier: \"Battery\"\nid String Unique identifier for the battery instance\nlocation String Geographic location/node identifier","category":"page"},{"location":"Manual/assets/battery/#\"battery_constraints\"","page":"Battery","title":"Constraints configuration","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Battery assets can have different constraints applied to them, and the user can configure them using the following fields:","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Field Type Description\nstorage_constraints Dict{String,Bool} List of constraints applied to the storage component.\ndischarge_constraints Dict{String,Bool} List of constraints applied to the discharge edge.\ncharge_constraints Dict{String,Bool} List of constraints applied to the charge edge.","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"For example, if the user wants to apply the StorageMinDurationConstraint to the storage component and the MinFlowConstraint to the discharge edge, the storage_constraints and discharge_constraints fields should be set to {\"StorageMinDurationConstraint\": true} and {\"MinFlowConstraint\": true}, respectively:","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"{\n    \"storage_constraints\": {\n        \"StorageMinDurationConstraint\": true\n    },\n    \"discharge_constraints\": {\n        \"MinFlowConstraint\": true\n    }\n}","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Users can refer to the Adding Asset Constraints to a System section of the User Guide for a list of all the constraints that can be applied to a battery asset.","category":"page"},{"location":"Manual/assets/battery/#Default-constraints","page":"Battery","title":"Default constraints","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"To simplify the input file and the asset configuration, the following constraints are applied to the battery asset by default:","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Balance constraint (applied to the storage component)\nStorage capacity constraint (applied to the storage component)\nStorage symmetric capacity constraint (applied to the storage component)\nCapacity constraint (applied to the discharge edge)\nStorage discharge limit constraint (applied to the discharge edge)","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"If the storage is a long-duration storage, the following additional constraints are applied:","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Long-duration storage constraints (applied to the storage component)","category":"page"},{"location":"Manual/assets/battery/#Investment-Parameters","page":"Battery","title":"Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Field Type Description Units Default\nstorage_can_retire Boolean Whether storage capacity can be retired - true\nstorage_can_expand Boolean Whether storage capacity can be expanded - true\nstorage_existing_capacity Float64 Initial installed storage capacity MWh 0.0\nstorage_capacity_size Float64 Unit size for capacity decisions - 1.0\ndischarge_can_retire Boolean Whether discharge capacity can be retired - true\ndischarge_can_expand Boolean Whether discharge capacity can be expanded - true\ndischarge_existing_capacity Float64 Initial installed discharge capacity MWh/hr 0.0\ndischarge_capacity_size Float64 Unit size for capacity decisions - 1.0","category":"page"},{"location":"Manual/assets/battery/#Asymmetric-battery","page":"Battery","title":"Asymmetric battery","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"If the battery is asymmetric, the following investment parameters are also used:","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Field Type Description Units Default\ncharge_has_capacity Boolean Whether the charge edge has capacity variables and limits - false\ncharge_can_retire Boolean Whether charge capacity can be retired - false\ncharge_can_expand Boolean Whether charge capacity can be expanded - false\ncharge_existing_capacity Float64 Initial installed charge capacity MWh/hr 0.0\ncharge_capacity_size Float64 Unit size for capacity decisions - 1.0","category":"page"},{"location":"Manual/assets/battery/#Additional-Investment-Parameters","page":"Battery","title":"Additional Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Maximum and minimum capacity constraints","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"If MaxCapacityConstraint or MinCapacityConstraint are added to the constraints dictionary for any of the three components, the following parameters are used by Macro:","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Field Type Description Units Default\nstorage_max_capacity Float64 Maximum allowed storage capacity MWh Inf\nstorage_min_capacity Float64 Minimum allowed storage capacity MWh 0.0\ndischarge_max_capacity Float64 Maximum allowed discharge capacity MWh/hr Inf\ndischarge_min_capacity Float64 Minimum allowed discharge capacity MWh/hr 0.0\ncharge_max_capacity Float64 Maximum allowed charge capacity MWh/hr Inf\ncharge_min_capacity Float64 Minimum allowed charge capacity MWh/hr 0.0","category":"page"},{"location":"Manual/assets/battery/#Economic-Parameters","page":"Battery","title":"Economic Parameters","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Field Type Description Units Default\nstorage_investment_cost Float64 CAPEX per unit storage capacity $/MWh 0.0\nstorage_annualized_investment_cost Union{Nothing,Float64} Annualized CAPEX $/MWh/yr calculated\nstorage_fixed_om_cost Float64 Fixed O&M costs of the storage component $/MWh/yr 0.0\nstorage_variable_om_cost Float64 Variable O&M costs of the storage component $/MWh 0.0\nstorage_wacc Float64 Weighted average cost of capital fraction 0.0\nstorage_lifetime Int Asset lifetime in years years 1\nstorage_capital_recovery_period Int Investment recovery period years 1\nstorage_retirement_period Int Retirement period years 0\ndischarge_investment_cost Float64 CAPEX per unit discharge capacity $/MW 0.0\ndischarge_annualized_investment_cost Union{Nothing,Float64} Annualized CAPEX $/MW/yr calculated\ndischarge_fixed_om_cost Float64 Fixed O&M costs of the discharge edge $/MW/yr 0.0\ndischarge_variable_om_cost Float64 Variable O&M costs of the discharge edge $/MWh 0.0\ndischarge_wacc Float64 Weighted average cost of capital fraction 0.0\ndischarge_lifetime Int Asset lifetime in years years 1\ndischarge_capital_recovery_period Int Investment recovery period years 1\ndischarge_retirement_period Int Retirement period years 0\ncharge_variable_om_cost Float64 Variable O&M costs of the charge edge $/MWh 0.0","category":"page"},{"location":"Manual/assets/battery/#Asymmetric-battery-2","page":"Battery","title":"Asymmetric battery","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"If the battery is asymmetric, the following economic parameters are also used:","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Field Type Description Units Default\ncharge_investment_cost Float64 CAPEX per unit charge capacity $/MW 0.0\ncharge_annualized_investment_cost Union{Nothing,Float64} Annualized CAPEX $/MW/yr calculated\ncharge_fixed_om_cost Float64 Fixed O&M costs of the charge edge $/MW/yr 0.0","category":"page"},{"location":"Manual/assets/battery/#Charge-and-Discharge-Efficiency","page":"Battery","title":"Charge and Discharge Efficiency","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Field Type Description Default\ndischarge_efficiency Float64 Efficiency of discharging process 1.0\ncharge_efficiency Float64 Efficiency of charging process 1.0","category":"page"},{"location":"Manual/assets/battery/#Operational-Parameters","page":"Battery","title":"Operational Parameters","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Field Type Description Units Default\nstorage_loss_fraction Float64 Fraction of stored energy lost per timestep fraction 0.0","category":"page"},{"location":"Manual/assets/battery/#Additional-Operational-Parameters","page":"Battery","title":"Additional Operational Parameters","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Storage duration constraints","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"If StorageMaxDurationConstraint or StorageMinDurationConstraint are added to the constraints dictionary for the storage component, the following parameters are used:","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Field Type Description Units Default\nstorage_max_duration Float64 Maximum storage duration hours 0.0\nstorage_min_duration Float64 Minimum storage duration hours 0.0","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Maximum and minimum storage level constraints","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"If MaxStorageLevelConstraint or MinStorageLevelConstraint are added to the constraints dictionary for the storage component, the following parameters are used:","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Field Type Description Units Default\nstorage_max_storage_level Float64 Maximum storage level as fraction of capacity fraction 0.0\nstorage_min_storage_level Float64 Minimum storage level as fraction of capacity fraction 0.0","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Storage charge/discharge ratio constraint","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"If StorageChargeDischargeRatioConstraint is added to the constraints dictionary for the storage component, the following parameter is used:","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Field Type Description Units Default\nstorage_charge_discharge_ratio Float64 Ratio between charging and discharging rates fraction 1.0","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Long-duration storage constraint","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"If LongDurationStorageImplicitMinMaxConstraint is added to the constraints dictionary for the storage component, the following parameter is used:","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Field Type Description Default\nstorage_long_duration Boolean Whether this is long-duration storage false","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Minimum flow constraint","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"If MinFlowConstraint is added to the constraints dictionary for the discharge edge, the following parameter is used:","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Field Type Description Units Default\ndischarge_min_flow_fraction Float64 Minimum discharge as fraction of capacity fraction 0.0\ncharge_min_flow_fraction Float64 Minimum charge as fraction of capacity fraction 0.0","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Ramping limit constraint","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"If RampingLimitConstraint is added to the constraints dictionary for the discharge edge, the following parameter is used:","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Field Type Description Units Default\ndischarge_ramp_up_fraction Float64 Maximum increase in discharge between timesteps fraction 1.0\ndischarge_ramp_down_fraction Float64 Maximum decrease in discharge between timesteps fraction 1.0\ncharge_ramp_up_fraction Float64 Maximum increase in charge between timesteps fraction 1.0\ncharge_ramp_down_fraction Float64 Maximum decrease in charge between timesteps fraction 1.0","category":"page"},{"location":"Manual/assets/battery/#battery_type_definition","page":"Battery","title":"Types - Asset Structure","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"The Battery asset is defined as follows:","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"struct Battery <: AbstractAsset\n    id::AssetId\n    battery_storage::AbstractStorage{<:Electricity}\n    discharge_edge::Edge{<:Electricity}\n    charge_edge::Edge{<:Electricity}\nend","category":"page"},{"location":"Manual/assets/battery/#battery_constructors","page":"Battery","title":"Constructors","text":"","category":"section"},{"location":"Manual/assets/battery/#Default-constructor","page":"Battery","title":"Default constructor","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Battery(id::AssetId, storage::AbstractStorage{<:Electricity}, discharge_edge::Edge{<:Electricity}, charge_edge::Edge{<:Electricity})","category":"page"},{"location":"Manual/assets/battery/#Factory-constructor","page":"Battery","title":"Factory constructor","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"make(asset_type::Type{Battery}, data::AbstractDict{Symbol,Any}, system::System)","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Field Type Description\nasset_type Type{Battery} Macro type of the asset\ndata AbstractDict{Symbol,Any} Dictionary containing the input data for the asset\nsystem System System to which the asset belongs","category":"page"},{"location":"Manual/assets/battery/#battery_examples","page":"Battery","title":"Examples","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"This section contains examples of how to use the battery asset in a Macro model.","category":"page"},{"location":"Manual/assets/battery/#Two-batteries-in-the-same-zone-\"SE\"","page":"Battery","title":"Two batteries in the same zone \"SE\"","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"This example shows two batteries in the same zone \"SE\" with different investment costs and O&M costs. The discharge efficiency and charge efficiency are set to 0.95 and 0.92, respectively. Both batteries have the StorageMinDurationConstraint and StorageMaxDurationConstraint constraints applied to the storage component.","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"JSON Format:","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Note that the global_data field is used to set the fields and constraints that are common to all instances of the same asset type.","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"{\n    \"elec_stor\": [\n        {\n            \"type\": \"Battery\",\n            \"global_data\": {\n                \"storage_constraints\": {\n                    \"StorageMinDurationConstraint\": true,\n                    \"StorageMaxDurationConstraint\": true,\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"battery_1_SE\",\n                    \"location\": \"SE\",\n                    \"storage_investment_cost\": 10000,\n                    \"storage_fixed_om_cost\": 500,\n                    \"storage_max_duration\": 10,\n                    \"storage_min_duration\": 1,\n                    \"discharge_investment_cost\": 20000,\n                    \"discharge_fixed_om_cost\": 1000,\n                    \"discharge_variable_om_cost\": 1,\n                    \"charge_variable_om_cost\": 1,\n                    \"discharge_efficiency\": 0.95,\n                    \"charge_efficiency\": 0.95\n                },\n                {\n                    \"id\": \"battery_2_SE\",\n                    \"location\": \"SE\",\n                    \"storage_investment_cost\": 15000,\n                    \"storage_fixed_om_cost\": 800,\n                    \"storage_max_duration\": 4,\n                    \"storage_min_duration\": 1,\n                    \"discharge_investment_cost\": 25000,\n                    \"discharge_fixed_om_cost\": 1200,\n                    \"discharge_variable_om_cost\": 1.2,\n                    \"charge_variable_om_cost\": 1.2,\n                    \"discharge_efficiency\": 0.92,\n                    \"charge_efficiency\": 0.92\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"CSV Format:","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Type id location storage_constraints–StorageMinDurationConstraint storage_constraints–StorageMaxDurationConstraint storage_investment_cost storage_fixed_om_cost storage_max_duration storage_min_duration discharge_investment_cost discharge_fixed_om_cost discharge_variable_om_cost charge_variable_om_cost discharge_efficiency charge_efficiency\nBattery battery_1_SE SE true true 10000 500 10 1 20000 1000 1 1 0.95 0.95\nBattery battery_2_SE SE true true 15000 800 4 1 25000 1200 1.2 1.2 0.92 0.92","category":"page"},{"location":"Manual/assets/battery/#Pumped-Hydro-Storage","page":"Battery","title":"Pumped Hydro Storage","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"This example shows a pumped hydro storage asset with a fixed discharge and storage capacity (capacity cannot be expanded or retired) and a minimum discharge flow constraint of 0.5.","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"JSON Format:","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"{\n    \"elec_stor\": [\n        {\n            \"type\": \"Battery\",\n            \"global_data\": {\n                \"discharge_can_expand\": false,\n                \"discharge_can_retire\": false,\n                \"storage_can_expand\": false,\n                \"storage_can_retire\": false,\n                \"discharge_constraints\": {\n                    \"MinFlowConstraint\": true\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"pumpedhydro_SE\",\n                    \"location\": \"SE\",\n                    \"discharge_capacity_size\": 200,\n                    \"discharge_existing_capacity\": 5000,\n                    \"discharge_fixed_om_cost\": 40000,\n                    \"discharge_min_flow_fraction\": 0.5,\n                    \"discharge_efficiency\": 0.87,\n                    \"charge_efficiency\": 0.87\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"CSV Format:","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Type id location discharge_can_expand discharge_can_retire storage_can_expand storage_can_retire discharge_constraints–MinFlowConstraint discharge_capacity_size discharge_existing_capacity discharge_fixed_om_cost discharge_min_flow_fraction discharge_efficiency charge_efficiency\nBattery pumpedhydro_SE SE false false false false true 200 5000 40000 0.5 0.87 0.87","category":"page"},{"location":"Manual/assets/battery/#battery_best_practices","page":"Battery","title":"Best Practices","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Use global data for common fields and constraints: Use the global_data field to set the fields and constraints that are common to all instances of the same asset type.\nSet realistic efficiencies: Make sure the efficiencies are realistic for the technology being modeled\nUse meaningful IDs: Choose descriptive identifiers that indicate location and technology type\nConsider duration constraints: Set appropriate min/max duration based on technology\nUse constraints selectively: Only enable constraints that are necessary for your modeling needs\nValidate costs: Ensure investment and O&M costs are in appropriate units\nTest configurations: Start with simple configurations and gradually add complexity","category":"page"},{"location":"Manual/assets/battery/#battery_advanced_json_csv_input_format","page":"Battery","title":"Input File (Advanced Format)","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Macro provides an advanced format for defining battery assets, offering users and modelers detailed control over asset specifications. This format builds upon the standard format and is ideal for those who need more comprehensive customization.","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"To understand the advanced format, consider the graph representation and the type definition of a battery asset. The input file mirrors this hierarchical structure.","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"A battery asset in Macro is composed of a storage component, represented by a Storage object, and two edges (charge and discharge), each represented by an Edge object. The input file for a battery asset is therefore organized as follows:","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"{\n    \"storage\":{\n        // ... storage-specific attributes ...\n    },\n    \"edges\":{\n        \"charge_edge\": {\n            // ... charge_edge-specific attributes ...\n        },\n        \"discharge_edge\": {\n            // ... discharge_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Each top-level key (e.g., \"storage\" or \"edges\") denotes a component type. The second-level keys either specify the attributes of the component (when there is a single instance) or identify the instances of the component (e.g., \"discharge_edge\" or \"charge_edge\") when there are multiple instances. For multiple instances, a third-level key details the attributes for each instance.","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Below is an example of an input file for a battery asset that sets up three batteries, located in the SE, MIDAT, and NE regions.","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"{\n    \"elec_stor\": [\n        {\n            \"type\": \"Battery\",\n            \"global_data\": {\n                \"storage\": {\n                    \"commodity\": \"Electricity\",\n                    \"can_expand\": true,\n                    \"can_retire\": false,\n                    \"constraints\": {\n                        \"StorageMinDurationConstraint\": true,\n                        \"StorageMaxDurationConstraint\": true,\n                    }\n                },\n                \"edges\": {\n                    \"discharge_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"StorageDischargeLimitConstraint\": true\n                        }\n                    },\n                    \"charge_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"battery_SE\",\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"capacity_size\": 1.0,\n                            \"existing_capacity\": 0.0,\n                            \"fixed_om_cost\": 4536.98,\n                            \"investment_cost\": 17239.56121,\n                            \"variable_om_cost\": 0.15,\n                            \"efficiency\": 0.92\n                        },\n                        \"charge_edge\": {\n                            \"start_vertex\": \"elec_SE\",\n                            \"efficiency\": 0.92,\n                            \"variable_om_cost\": 0.15\n                        }\n                    },\n                    \"storage\": {\n                        \"existing_capacity\": 0.0,\n                        \"fixed_om_cost\": 2541.19,\n                        \"investment_cost\": 9656.002735,\n                        \"max_duration\": 10,\n                        \"min_duration\": 1\n                    }\n                },\n                {\n                    \"id\": \"battery_MIDAT\",\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"capacity_size\": 1.0,\n                            \"existing_capacity\": 0.0,\n                            \"fixed_om_cost\": 4536.98,\n                            \"investment_cost\": 17239.56121,\n                            \"variable_om_cost\": 0.15,\n                            \"efficiency\": 0.92\n                        },\n                        \"charge_edge\": {\n                            \"start_vertex\": \"elec_SE\",\n                            \"efficiency\": 0.92,\n                            \"variable_om_cost\": 0.15\n                        }\n                    },\n                    \"storage\": {\n                        \"existing_capacity\": 0.0,\n                        \"fixed_om_cost\": 2541.19,\n                        \"investment_cost\": 9656.002735,\n                        \"max_duration\": 10,\n                        \"min_duration\": 1\n                    }\n                },\n                {\n                    \"id\": \"battery_NE\",\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"capacity_size\": 1.0,\n                            \"existing_capacity\": 0.0,\n                            \"fixed_om_cost\": 4536.98,\n                            \"investment_cost\": 17239.56121,\n                            \"variable_om_cost\": 0.15,\n                            \"efficiency\": 0.92\n                        },\n                        \"charge_edge\": {\n                            \"start_vertex\": \"elec_SE\",\n                            \"efficiency\": 0.92,\n                            \"variable_om_cost\": 0.15\n                        }\n                    },\n                    \"storage\": {\n                        \"existing_capacity\": 0.0,\n                        \"fixed_om_cost\": 2541.19,\n                        \"investment_cost\": 9656.002735,\n                        \"max_duration\": 10,\n                        \"min_duration\": 1\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/battery/#Key-Points","page":"Battery","title":"Key Points","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"The global_data field is utilized to define attributes and constraints that apply universally to all instances of a particular asset type.\nThe start_vertex and end_vertex fields indicate the nodes to which the charge and discharge edges are connected. These nodes must be defined in the nodes.json file.\nFor a comprehensive list of attributes that can be configured for the storage and edge components, refer to the storage and edges pages of the Macro manual.","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"note: The `has_capacity` Edge Attribute\nThe has_capacity attribute is a flag that indicates whether a specific edge of an asset has a capacity variable, allowing it to be expanded or retired. Typically, users do not need to manually adjust this flag, as the asset creators in Macro have already configured it correctly for each edge. However, advanced users can use this flag to override the default settings for each edge if needed.","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"","category":"page"},{"location":"Manual/assets/hydropower/#Hydro-Reservoir","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"","category":"section"},{"location":"Manual/assets/hydropower/#Contents","page":"Hydro Reservoir","title":"Contents","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Overview | Asset Structure | Input File (Standard Format) | Types - Asset Structure | Constructors | Examples | Best Practices | Input File (Advanced Format)","category":"page"},{"location":"Manual/assets/hydropower/#hydropower_overview","page":"Hydro Reservoir","title":"Overview","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Hydro Reservoir assets in Macro models hydroelectric storage systems that can store and release water to generate electricity. These assets are defined using either JSON or CSV input files placed in the assets directory, typically named hydrores.json or hydrores.csv.","category":"page"},{"location":"Manual/assets/hydropower/#hydropower_asset_structure","page":"Hydro Reservoir","title":"Asset Structure","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"A hydro reservoir asset consists of one storage component and three edge components:","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Storage Component: Represents the hydroelectric reservoir that stores water\nInflow Edge: Incoming edge representing water inflow to the reservoir\nDischarge Edge: Outgoing edge representing electricity production from water release\nSpillage Edge: Outgoing edge representing water spillage","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Here is a graphical representation of the hydro reservoir asset:","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph HydroRes\n    direction LR\n    A((Hydro Source)) e1@--> B[Storage] e2@--> C((Electricity))\n    B e3@--> A\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n  end\n  \n  style A r:55px,fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n  style B fill:#FFD700,stroke:black,color:black;\n  style C r:48px,fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n\n  linkStyle 0 stroke:#FFD700, stroke-width: 2px;\n  linkStyle 1 stroke:#FFD700, stroke-width: 2px;\n  linkStyle 2 stroke:#FFD700, stroke-width: 2px;","category":"page"},{"location":"Manual/assets/hydropower/#hydropower_input_file","page":"Hydro Reservoir","title":"Input File (Standard Format)","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"The easiest way to include a hydro reservoir asset in a model is to create a new file (either JSON or CSV) and place it in the assets directory together with the other assets.","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"your_case/\n├── assets/\n│   ├── hydrores.json    # or hydrores.csv\n│   ├── other_assets.json\n│   └── ...\n├── system/\n├── settings/\n└── ...","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"This file can either be created manually, or using the template_asset function, as shown in the Adding an Asset to a System section of the User Guide. The file will be automatically loaded when you run your Macro model.","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"The following is an example of a hydro reservoir asset input file:","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"{\n    \"hydrores\": [\n        {\n            \"type\": \"HydroRes\",\n            \"instance_data\": [\n                {\n                    \"id\": \"MIDAT_conventional_hydroelectric_1\",\n                    \"location\": \"MIDAT\",\n                    \"hydro_source\": \"hydro_source\",\n                    \"discharge_can_expand\": false,\n                    \"discharge_can_retire\": false,\n                    \"inflow_can_expand\": false,\n                    \"inflow_can_retire\": false,\n                    \"storage_can_expand\": false,\n                    \"storage_can_retire\": false,\n                    \"storage_constraints\": {\n                        \"MinStorageOutflowConstraint\": true\n                    },\n                    \"storage_min_outflow_fraction\": 0.109311313,\n                    \"storage_charge_discharge_ratio\": 1.0,\n                    \"discharge_capacity_size\": 29.853,\n                    \"discharge_existing_capacity\": 2806.182,\n                    \"discharge_fixed_om_cost\": 45648,\n                    \"discharge_efficiency\": 1.0,\n                    \"inflow_availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"MIDAT_conventional_hydroelectric_1\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"tip: Global Data vs Instance Data\nWhen working with JSON input files, the global_data field can be used to group data that is common to all instances of the same asset type. This is useful for setting constraints that are common to all instances of the same asset type and avoid repeating the same data for each instance. See the Examples section below for an example.","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"The following tables outline the attributes that can be set for a hydro reservoir asset.","category":"page"},{"location":"Manual/assets/hydropower/#Essential-Attributes","page":"Hydro Reservoir","title":"Essential Attributes","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Field Type Description\nType String Asset type identifier: \"HydroRes\"\nid String Unique identifier for the hydro reservoir instance\nlocation String Geographic location/node identifier\nhydro_source String ID of the electricity node in the system that represents the hydro source","category":"page"},{"location":"Manual/assets/hydropower/#\"hydropower_constraints\"","page":"Hydro Reservoir","title":"Constraints Configuration","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Hydro reservoir assets can have different constraints applied to them, and the user can configure them using the following fields:","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Field Type Description\nstorage_constraints Dict{String,Bool} List of constraints applied to the storage component.\ndischarge_constraints Dict{String,Bool} List of constraints applied to the discharge edge.\ninflow_constraints Dict{String,Bool} List of constraints applied to the inflow edge.\nspill_constraints Dict{String,Bool} List of constraints applied to the spillage edge.","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"For example, if the user wants to apply the LongDurationStorageImplicitMinMaxConstraint to the storage component and the RampingLimitConstraint to the discharge edge, the constraints fields should be set as follows:","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"{\n    \"storage_constraints\": {\n        \"LongDurationStorageImplicitMinMaxConstraint\": true\n    },\n    \"discharge_constraints\": {\n        \"RampingLimitConstraint\": true\n    }\n}","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Users can refer to the Adding Asset Constraints to a System section of the User Guide for a list of all the constraints that can be applied to the different components of a hydro reservoir asset.","category":"page"},{"location":"Manual/assets/hydropower/#Default-constraints","page":"Hydro Reservoir","title":"Default constraints","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"To simplify the input file and the asset configuration, the following constraints are applied to the hydro reservoir asset by default:","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Balance constraint (applied to the storage component)\nStorage charge discharge ratio constraint (applied to the storage component)\nMust run constraint (applied to the inflow edge)\nCapacity constraint (applied to the discharge edge)","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"If the storage is a long-duration storage, the following additional constraints are applied:","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Long-duration storage constraints (applied to the storage component)","category":"page"},{"location":"Manual/assets/hydropower/#Investment-Parameters","page":"Hydro Reservoir","title":"Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Field Type Description Units Default\nstorage_can_retire Boolean Whether storage capacity can be retired - false\nstorage_can_expand Boolean Whether storage capacity can be expanded - false\nstorage_existing_capacity Float64 Initial installed storage capacity MWh 0.0\ndischarge_can_retire Boolean Whether discharge edge capacity can be retired - true\ndischarge_can_expand Boolean Whether discharge edge capacity can be expanded - true\ndischarge_existing_capacity Float64 Initial installed discharge edge capacity MW 0.0\ndischarge_capacity_size Float64 Unit size for capacity decisions - 1.0\ninflow_can_retire Boolean Whether inflow edge capacity can be retired - true\ninflow_can_expand Boolean Whether inflow edge capacity can be expanded - true\ninflow_existing_capacity Float64 Initial installed inflow edge capacity MW 0.0\ninflow_capacity_size Float64 Unit size for capacity decisions - 1.0","category":"page"},{"location":"Manual/assets/hydropower/#Additional-Investment-Parameters","page":"Hydro Reservoir","title":"Additional Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Maximum and minimum capacity constraints","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"If MaxCapacityConstraint or MinCapacityConstraint are added to the constraints dictionary for the storage or discharge edge, the following parameters are used by Macro:","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Field Type Description Units Default\nstorage_max_capacity Float64 Maximum allowed storage capacity MWh Inf\nstorage_min_capacity Float64 Minimum allowed storage capacity MWh 0.0\ndischarge_max_capacity Float64 Maximum allowed discharge edge capacity MW Inf\ndischarge_min_capacity Float64 Minimum allowed discharge edge capacity MW 0.0\ninflow_max_capacity Float64 Maximum allowed inflow edge capacity MW Inf\ninflow_min_capacity Float64 Minimum allowed inflow edge capacity MW 0.0","category":"page"},{"location":"Manual/assets/hydropower/#Economic-Parameters","page":"Hydro Reservoir","title":"Economic Parameters","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Field Type Description Units Default\nstorage_investment_cost Float64 CAPEX per unit storage capacity $/MWh/yr 0.0\nstorage_fixed_om_cost Float64 Fixed O&M costs of the storage component $/MWh/yr 0.0\ndischarge_investment_cost Float64 CAPEX per unit discharge edge capacity $/MW/yr 0.0\ndischarge_fixed_om_cost Float64 Fixed O&M costs of the discharge edge $/MW/yr 0.0\ndischarge_variable_om_cost Float64 Variable O&M costs of the discharge edge $/MWh 0.0\ninflow_investment_cost Float64 CAPEX per unit inflow edge capacity $/MW/yr 0.0\ninflow_fixed_om_cost Float64 Fixed O&M costs of the inflow edge $/MW/yr 0.0","category":"page"},{"location":"Manual/assets/hydropower/#Operational-Parameters","page":"Hydro Reservoir","title":"Operational Parameters","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Field Type Description Units Default\ninflow_availability Dict Path to availability file and column name - Empty","category":"page"},{"location":"Manual/assets/hydropower/#Additional-Operational-Parameters","page":"Hydro Reservoir","title":"Additional Operational Parameters","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Minimum Storage Outflow Constraint","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"If MinStorageOutflowConstraint is added to the constraints dictionary for the storage component, the following parameters are used:","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Field Type Description Units Default\nstorage_min_outflow_fraction Float64 Minimum outflow as a fraction of capacity fraction 0.0","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Storage Charge Discharge Ratio Constraint","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"If StorageChargeDischargeRatioConstraint is added to the constraints dictionary for the storage component, the following parameters are used:","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Field Type Description Units Default\nstorage_charge_discharge_ratio Float64 Ratio between charging and discharging flows fraction 1.0","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Ramping limit constraint","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"If RampingLimitConstraint is added to the constraints dictionary for the discharge edge, the following parameters are used:","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Field Type Description Units Default\ndischarge_ramp_up_fraction Float64 Maximum increase in flow between timesteps fraction 1.0\ndischarge_ramp_down_fraction Float64 Maximum decrease in flow between timesteps fraction 1.0","category":"page"},{"location":"Manual/assets/hydropower/#hydropower_type_definition","page":"Hydro Reservoir","title":"Types - Asset Structure","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"The HydroRes asset is defined as follows:","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"struct HydroRes <: AbstractAsset\n    id::AssetId\n    hydrostor::AbstractStorage{<:Electricity}\n    discharge_edge::Edge{<:Electricity}\n    inflow_edge::Edge{<:Electricity}\n    spill_edge::Edge{<:Electricity}\nend","category":"page"},{"location":"Manual/assets/hydropower/#hydropower_constructors","page":"Hydro Reservoir","title":"Constructors","text":"","category":"section"},{"location":"Manual/assets/hydropower/#Default-constructor","page":"Hydro Reservoir","title":"Default constructor","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"HydroRes(id::AssetId, hydrostor::AbstractStorage{<:Electricity}, discharge_edge::Edge{<:Electricity}, inflow_edge::Edge{<:Electricity}, spill_edge::Edge{<:Electricity})","category":"page"},{"location":"Manual/assets/hydropower/#Factory-constructor","page":"Hydro Reservoir","title":"Factory constructor","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"make(asset_type::Type{HydroRes}, data::AbstractDict{Symbol,Any}, system::System)","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Field Type Description\nasset_type Type{HydroRes} Macro type of the asset\ndata AbstractDict{Symbol,Any} Dictionary containing the input data for the asset\nsystem System System to which the asset belongs","category":"page"},{"location":"Manual/assets/hydropower/#hydropower_examples","page":"Hydro Reservoir","title":"Examples","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"This section contains examples of how to use the hydro reservoir asset in a Macro model.","category":"page"},{"location":"Manual/assets/hydropower/#Simple-Hydro-Reservoir-with-Fixed-Capacity","page":"Hydro Reservoir","title":"Simple Hydro Reservoir with Fixed Capacity","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"This example shows a hydro reservoir asset with existing and fixed capacity (capacity cannot be expanded or retired), minimum outflow fraction of 0.1, and an availability time series for the inflow edge loaded from a CSV file. A MinStorageOutflowConstraint constraint is applied to the storage component to ensure that the outflow is at least 10% of the capacity.","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"JSON Format:","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"{\n    \"hydrores\": [\n        {\n            \"type\": \"HydroRes\",\n            \"instance_data\": [\n                {\n                    \"id\": \"Fixed_Hydro_SE\",\n                    \"location\": \"SE\",\n                    \"hydro_source\": \"hydro_source\",\n                    \"discharge_can_expand\": false,\n                    \"discharge_can_retire\": false,\n                    \"inflow_can_expand\": false,\n                    \"inflow_can_retire\": false,\n                    \"storage_can_expand\": false,\n                    \"storage_can_retire\": false,\n                    \"storage_constraints\": {\n                        \"MinStorageOutflowConstraint\": true\n                    },\n                    \"storage_min_outflow_fraction\": 0.1,\n                    \"discharge_capacity_size\": 1.0,\n                    \"discharge_existing_capacity\": 1000.0,\n                    \"discharge_fixed_om_cost\": 10000.0,\n                    \"discharge_efficiency\": 1.0,\n                    \"inflow_availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"Fixed_Hydro_SE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"CSV Format:","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Type id location hydro_source discharge_can_expand discharge_can_retire inflow_can_expand inflow_can_retire storage_can_expand storage_can_retire storage_constraints–MinStorageOutflowConstraint storage_min_outflow_fraction discharge_capacity_size discharge_existing_capacity discharge_fixed_om_cost discharge_efficiency inflow_availability–timeseries–path inflow_availability–timeseries–header\nHydroRes Fixed_Hydro_SE SE hydro_source false false false false false false true 0.1 1.0 1000.0 10000.0 1.0 system/availability.csv Fixed_Hydro_SE","category":"page"},{"location":"Manual/assets/hydropower/#Multiple-Hydro-Reservoir-Assets-in-Different-Zones","page":"Hydro Reservoir","title":"Multiple Hydro Reservoir Assets in Different Zones","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"This example shows three hydro reservoir assets with existing and fixed capacity (capacity cannot be expanded or retired) located in the MIDAT, NE, and SE regions. A RampingLimitConstraint constraint is applied to the discharge edge with a ramping limit of 0.83. A MinStorageOutflowConstraint constraint is applied to the storage component to ensure that the outflow is at least 10% of the capacity. Finally, the storage component is set to be a long-duration storage with a LongDurationStorageImplicitMinMaxConstraint constraint applied to it.","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"JSON Format:","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Note that the global_data field is used to set the fields and constraints that are common to all instances of the same asset type.","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"{\n    \"hydrores\": [\n        {\n            \"type\": \"HydroRes\",\n            \"global_data\": {\n                \"hydro_source\": \"hydro_source\",\n                \"discharge_constraints\": {\n                    \"RampingLimitConstraint\": true\n                },\n                \"discharge_can_expand\": false,\n                \"discharge_can_retire\": false,\n                \"inflow_can_expand\": false,\n                \"inflow_can_retire\": false,\n                \"storage_can_expand\": false,\n                \"storage_can_retire\": false,\n                \"storage_long_duration\": true,\n                \"storage_constraints\": {\n                    \"MinStorageOutflowConstraint\": true,\n                    \"LongDurationStorageImplicitMinMaxConstraint\": true\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"MIDAT_conventional_hydroelectric_1\",\n                    \"location\": \"MIDAT\",\n                    \"storage_min_outflow_fraction\": 0.109311313,\n                    \"discharge_capacity_size\": 29.853,\n                    \"discharge_existing_capacity\": 2806.182,\n                    \"discharge_fixed_om_cost\": 45648,\n                    \"discharge_ramp_down_fraction\": 0.83,\n                    \"discharge_ramp_up_fraction\": 0.83,\n                    \"discharge_efficiency\": 1.0,\n                    \"inflow_availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"MIDAT_conventional_hydroelectric_1\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_conventional_hydroelectric_1\",\n                    \"location\": \"NE\",\n                    \"storage_min_outflow_fraction\": 0.095,\n                    \"discharge_capacity_size\": 24.13,\n                    \"discharge_existing_capacity\": 4729.48,\n                    \"discharge_fixed_om_cost\": 45648,\n                    \"discharge_ramp_down_fraction\": 0.083,\n                    \"discharge_ramp_up_fraction\": 0.083,\n                    \"discharge_efficiency\": 1.0,\n                    \"inflow_availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"NE_conventional_hydroelectric_1\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"SE_conventional_hydroelectric_1\",\n                    \"location\": \"SE\",\n                    \"storage_min_outflow_fraction\": 0.135129141,\n                    \"discharge_capacity_size\": 31.333,\n                    \"discharge_existing_capacity\": 11123.215,\n                    \"discharge_fixed_om_cost\": 45648,\n                    \"discharge_ramp_down_fraction\": 0.083,\n                    \"discharge_ramp_up_fraction\": 0.083,\n                    \"discharge_efficiency\": 1.0,\n                    \"inflow_availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"SE_conventional_hydroelectric_1\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"CSV Format:","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Type id location hydro_source discharge_can_expand discharge_can_retire inflow_can_expand inflow_can_retire storage_can_expand storage_can_retire storage_constraints–MinStorageOutflowConstraint storage_min_outflow_fraction discharge_capacity_size discharge_existing_capacity discharge_fixed_om_cost discharge_ramp_down_fraction discharge_ramp_up_fraction discharge_efficiency inflow_availability–timeseries–path inflow_availability–timeseries–header\nHydroRes MIDAT_conventional_hydroelectric_1 MIDAT hydro_source false false false false false false true 0.109311313 29.853 2806.182 45648 0.83 0.83 1.0 system/availability.csv MIDAT_conventional_hydroelectric_1\nHydroRes NE_conventional_hydroelectric_1 NE hydro_source false false false false false false true 0.095 24.13 4729.48 45648 0.083 0.083 1.0 system/availability.csv NE_conventional_hydroelectric_1\nHydroRes SE_conventional_hydroelectric_1 SE hydro_source false false false false false false true 0.135129141 31.333 11123.215 45648 0.083 0.083 1.0 system/availability.csv SE_conventional_hydroelectric_1","category":"page"},{"location":"Manual/assets/hydropower/#hydropower_best_practices","page":"Hydro Reservoir","title":"Best Practices","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Use global data for common constraints: Use the global_data field to set the fields and constraints that are common to all instances of the same asset type.\nSet realistic minimum outflow fractions: These should reflect environmental and operational requirements\nUse meaningful IDs: Choose descriptive identifiers that indicate location and technology type\nConsider availability profiles: Use availability time series to model seasonal variations in water inflow\nSet appropriate ramping limits: These should reflect the actual operational characteristics of the hydro plant\nValidate costs: Ensure investment and O&M costs are in appropriate units and time periods\nTest configurations: Start with simple configurations and gradually add complexity","category":"page"},{"location":"Manual/assets/hydropower/#hydropower_advanced_json_csv_input_format","page":"Hydro Reservoir","title":"Input File (Advanced Format)","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Macro provides an advanced format for defining hydro reservoir assets, offering users and modelers detailed control over asset specifications. This format builds upon the standard format and is ideal for those who need more comprehensive customization.","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"To understand the advanced format, consider the graph representation and the type definition of a hydro reservoir asset. The input file mirrors this hierarchical structure.","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"A hydro reservoir asset in Macro is composed of a storage component, represented by a Storage object, and three edges, each represented by an Edge object. The input file for a hydro reservoir asset is therefore organized as follows:","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"{\n    \"storage\":{\n        // ... storage-specific attributes ...\n    },\n    \"edges\":{\n        \"inflow_edge\": {\n            // ... inflow_edge-specific attributes ...\n        },\n        \"discharge_edge\": {\n            // ... discharge_edge-specific attributes ...\n        },\n        \"spill_edge\": {\n            // ... spill_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Each top-level key (e.g., \"storage\" or \"edges\") denotes a component type. The second-level keys either specify the attributes of the component (when there is a single instance) or identify the instances of the component (e.g., \"discharge_edge\", \"inflow_edge\", \"spill_edge\") when there are multiple instances. For multiple instances, a third-level key details the attributes for each instance.","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Below is an example of an input file for a hydro reservoir asset that sets up a single asset in the SE region with detailed edge specifications.","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"{\n    \"hydrores\": [\n        {\n            \"type\": \"HydroRes\",\n            \"global_data\": {\n                \"storage\": {\n                    \"commodity\": \"Electricity\",\n                    \"can_expand\": false,\n                    \"can_retire\": false,\n                    \"constraints\": {\n                        \"MinStorageOutflowConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"inflow_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"start_vertex\": \"hydro_source\",\n                        \"has_capacity\": true,\n                        \"constraints\": {\n                            \"MustRunConstraint\": true\n                        }\n                    },\n                    \"discharge_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": false,\n                        \"can_retire\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true\n                        }\n                    },\n                    \"spill_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"end_vertex\": \"hydro_source\",\n                        \"can_expand\": false,\n                        \"can_retire\": false,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_conventional_hydroelectric_1\",\n                    \"storage\": {\n                        \"min_outflow_fraction\": 0.135129141,\n                        \"charge_discharge_ratio\": 1.0\n                    },\n                    \"edges\": {\n                        \"inflow_edge\": {\n                            \"efficiency\": 1.0,\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_conventional_hydroelectric_1\"\n                                }\n                            }\n                        },\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"capacity_size\": 31.333,\n                            \"existing_capacity\": 11123.215,\n                            \"fixed_om_cost\": 45648,\n                            \"ramp_down_fraction\": 0.083,\n                            \"ramp_up_fraction\": 0.083,\n                            \"efficiency\": 1.0\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/hydropower/#Key-Points","page":"Hydro Reservoir","title":"Key Points","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"The global_data field is utilized to define attributes and constraints that apply universally to all instances of a particular asset type.\nThe start_vertex and end_vertex fields indicate the nodes to which the edges are connected. These nodes must be defined in the nodes.json file.\nBy default, both the discharge and inflow edges are allowed to have capacity variables and constraints, as this represents the main capacity decision for the hydro facility (see note below).\nThe inflow edge uses availability time series to model seasonal variations in water inflow.\nFor a comprehensive list of attributes that can be configured for the storage and edge components, refer to the storage and edges pages of the Macro manual.","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"tip: Prefixes\nUsers can apply prefixes to adjust parameters for the components of a hydro reservoir asset, even when using the standard format. For instance, discharge_can_retire will adjust the can_retire parameter for the discharge edge, and discharge_existing_capacity will adjust the existing_capacity parameter for the discharge edge. Below are the prefixes available for modifying parameters for the components of a hydro reservoir asset:storage_ for the storage component\ndischarge_ for the discharge edge\ninflow_ for the inflow edge\nspill_ for the spill edge","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"","category":"page"},{"location":"References/6_assets/#Macro-Asset-Library-Reference","page":"Macro Asset Library Reference","title":"Macro Asset Library Reference","text":"","category":"section"},{"location":"References/6_assets/#VRE-(make-function)","page":"Macro Asset Library Reference","title":"VRE (make function)","text":"","category":"section"},{"location":"References/6_assets/#MacroEnergy.make-Tuple{Type{<:VRE}, AbstractDict{Symbol, Any}, MacroEnergy.System}","page":"Macro Asset Library Reference","title":"MacroEnergy.make","text":"make(::Type{<:VRE}, data::AbstractDict{Symbol, Any}, system::System) -> VRE\n\nVRE is an alias for Union{SolarPV, WindTurbine}\n\nNecessary data fields:\n - transforms: Dict{Symbol, Any}\n    - id: String\n    - timedata: String\n- edges: Dict{Symbol, Any}\n    - edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n\n\n\n\n\n","category":"method"},{"location":"References/6_assets/#Battery-(make-function)","page":"Macro Asset Library Reference","title":"Battery (make function)","text":"","category":"section"},{"location":"References/6_assets/#MacroEnergy.make-Tuple{Type{Battery}, AbstractDict{Symbol, Any}, MacroEnergy.System}","page":"Macro Asset Library Reference","title":"MacroEnergy.make","text":"make(::Type{Battery}, data::AbstractDict{Symbol, Any}, system::System) -> Battery\n\nNecessary data fields:\n - storage: Dict{Symbol, Any}\n    - id: String\n    - commodity: String\n    - can_retire: Bool\n    - can_expand: Bool\n    - existing_capacity: Float64\n    - investment_cost: Float64\n    - fixed_om_cost: Float64\n    - loss_fraction: Float64\n    - min_duration: Float64\n    - max_duration: Float64\n    - min_storage_level: Float64\n    - min_capacity: Float64\n    - max_capacity: Float64\n    - constraints: Vector{AbstractTypeConstraint}\n - edges: Dict{Symbol, Any}\n    - charge_edge: Dict{Symbol, Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - efficiency: Float64\n    - discharge_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - efficiency\n        - constraints: Vector{AbstractTypeConstraint}\n\n\n\n\n\n","category":"method"},{"location":"References/6_assets/#Electrolyzer-(make-function)","page":"Macro Asset Library Reference","title":"Electrolyzer (make function)","text":"","category":"section"},{"location":"References/6_assets/#MacroEnergy.make-Tuple{Type{Electrolyzer}, AbstractDict{Symbol, Any}, MacroEnergy.System}","page":"Macro Asset Library Reference","title":"MacroEnergy.make","text":"make(::Type{Electrolyzer}, data::AbstractDict{Symbol, Any}, system::System) -> Electrolyzer\n\nNecessary data fields:\n - transforms: Dict{Symbol, Any}\n    - id: String\n    - timedata: String\n    - efficiency_rate: Float64\n    - constraints: Vector{AbstractTypeConstraint}\n- edges: Dict{Symbol, Any}\n    - h2_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n    - e_edge: Dict{Symbol, Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n\n\n\n\n\n","category":"method"},{"location":"References/6_assets/#ThermalHydrogen-(make-function)","page":"Macro Asset Library Reference","title":"ThermalHydrogen (make function)","text":"","category":"section"},{"location":"References/6_assets/#MacroEnergy.make-Tuple{Type{ThermalHydrogen}, AbstractDict{Symbol, Any}, MacroEnergy.System}","page":"Macro Asset Library Reference","title":"MacroEnergy.make","text":"make(::Type{ThermalHydrogen}, data::AbstractDict{Symbol, Any}, system::System) -> ThermalHydrogen\n\nNecessary data fields:\n - transforms: Dict{Symbol, Any}\n    - id: String\n    - timedata: String\n    - efficiency_rate: Float64\n    - emission_rate: Float64\n    - constraints: Vector{AbstractTypeConstraint}\n- edges: Dict{Symbol, Any}\n    - elec_edge: Dict{Symbol,Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n    - h2_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - min_up_time: Int\n        - min_down_time: Int\n        - startup_cost: Float64\n        - startup_fuel_consumption: Float64\n        - startup_fuel_balance_id: Symbol\n        - constraints: Vector{AbstractTypeConstraint}\n    - fuel_edge: Dict{Symbol, Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n    - co2_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n\n\n\n\n\n","category":"method"},{"location":"References/6_assets/#ThermalHydrogenCCS-(make-function)","page":"Macro Asset Library Reference","title":"ThermalHydrogenCCS (make function)","text":"","category":"section"},{"location":"References/6_assets/#MacroEnergy.make-Tuple{Type{ThermalHydrogenCCS}, AbstractDict{Symbol, Any}, MacroEnergy.System}","page":"Macro Asset Library Reference","title":"MacroEnergy.make","text":"make(::Type{ThermalHydrogenCCS}, data::AbstractDict{Symbol, Any}, system::System) -> ThermalHydrogenCCS\n\nNecessary data fields:\n - transforms: Dict{Symbol, Any}\n    - id: String\n    - timedata: String\n    - efficiency_rate: Float64\n    - emission_rate: Float64\n    - constraints: Vector{AbstractTypeConstraint}\n- edges: Dict{Symbol, Any}\n    - elec_edge: Dict{Symbol,Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n    - h2_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - min_up_time: Int\n        - min_down_time: Int\n        - startup_cost: Float64\n        - startup_fuel_consumption: Float64\n        - startup_fuel_balance_id: Symbol\n        - constraints: Vector{AbstractTypeConstraint}\n    - fuel_edge: Dict{Symbol, Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n    - co2_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n    - co2_captured_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n\n\n\n\n\n","category":"method"},{"location":"References/6_assets/#FuelCell-(make-function)","page":"Macro Asset Library Reference","title":"FuelCell (make function)","text":"","category":"section"},{"location":"References/6_assets/#MacroEnergy.make-Tuple{Type{FuelCell}, AbstractDict{Symbol, Any}, MacroEnergy.System}","page":"Macro Asset Library Reference","title":"MacroEnergy.make","text":"make(::Type{FuelCell}, data::AbstractDict{Symbol, Any}, system::System) -> FuelCell\n\nNecessary data fields:\n - transforms: Dict{Symbol, Any}\n    - id: String\n    - timedata: String\n    - efficiency_rate: Float64\n    - constraints: Vector{AbstractTypeConstraint}\n- edges: Dict{Symbol, Any}\n    - h2_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n    - elec_edge: Dict{Symbol, Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n\n\n\n\n\n","category":"method"},{"location":"References/6_assets/","page":"Macro Asset Library Reference","title":"Macro Asset Library Reference","text":"","category":"page"},{"location":"Manual/Overview/","page":"-","title":"-","text":"","category":"page"},{"location":"#Macro","page":"Introduction","title":"Macro","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Welcome to the Macro documentation!","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"This documentation is a work-in-progress, so please forgive our appearance as we add material.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"All feedback is welcome and please report and errors or omissions through the MacroEnergy.jl issues page.","category":"page"},{"location":"#What-is-Macro?","page":"Introduction","title":"What is Macro?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Macro is a bottom-up, multi-sectoral infrastructure optimization model for macro-energy systems. It co-optimizes the design and operation of user-defined models of multi-sector energy systems and networks. Macro allows users to explore the impact of energy policies, technology costs and performance, demand patterns, and other factors on an energy system as a whole and as separate sectors.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The main features of Macro include:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Graph-based representation of the energy system, facilitating clear representation and analysis of energy and mass flows between sectors.\n\"Plug and play\" flexibility for integrating new technologies and sectors, including electricity, hydrogen, heat, and transport.\nHigh spatial and temporal resolution to accurately capture sector dynamics.\nDesigned for distributed computing to enable large-scale optimizations.\nTailored Benders decomposition framework for optimization.\nOpen-source built using Julia and JuMP.","category":"page"},{"location":"#Structure-of-the-documentation","page":"Introduction","title":"Structure of the documentation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The documentation contains five main sections:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Getting Started: How to install Macro and run your first cases\nTutorials: Long-form guides with worked examples, intended to help you learn how to use Macro\nGuides: Short guides which walk you through how to achieve specific tasks, intended to be a day-to-day reference when working with Macro\nManual: A detailed description of Macro's components and features\nReference: A function reference for Macro's API","category":"page"},{"location":"#Macro-development-strategy","page":"Introduction","title":"Macro development strategy","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Macro is a very flexible tool for modelling energy systems. However, that flexibility also means the core architecture and functions are complex and difficult to use correctly.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"To make Macro as useful and accessible to the widest audience possible we designed and developed it with three layers of abstractions in mind, each serving a different user profile:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: Macro architecture)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Due to these abstractions, users and modelers will be able to achieve their goals without needing to understand every aspect of Macro. The guides section of the documentation has guides for users, modelers, and developers.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"Manual/Inputs/#Inputs","page":"Inputs","title":"Inputs","text":"","category":"section"},{"location":"Manual/Inputs/#JSON-Inputs","page":"Inputs","title":"JSON Inputs","text":"","category":"section"},{"location":"Manual/Inputs/#CSV-Inputs","page":"Inputs","title":"CSV Inputs","text":"","category":"section"},{"location":"Manual/Inputs/","page":"Inputs","title":"Inputs","text":"","category":"page"},{"location":"Manual/Model/#Model","page":"Model","title":"Model","text":"","category":"section"},{"location":"Manual/Model/","page":"Model","title":"Model","text":"","category":"page"},{"location":"Manual/Outputs/#Outputs","page":"Outputs","title":"Outputs","text":"","category":"section"},{"location":"Manual/Outputs/","page":"Outputs","title":"Outputs","text":"","category":"page"},{"location":"Guides/User Guide/user_add_commodity/#Adding-a-Commodity-to-a-System","page":"Adding Commodities","title":"Adding a Commodity to a System","text":"","category":"section"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"In Macro, the production, transport, and consumption of energy and materials is described by flows of Commodities. To include Assets, Locations and/or Nodes which include one or more of these flows, you must add the relevant Commodities to your System.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/#Adding-a-Commodity","page":"Adding Commodities","title":"Adding a Commodity","text":"","category":"section"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"The file containing the list of Commodities in your System is defined in the System's system_data.json file. The default file is system/commodities.json. If you created your System using the template functions, then your Commodity list will include all of Macro's default Commodities:","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"{\n    \"commodities\": [\n        \"Electricity\",\n        \"NaturalGas\",\n        \"CO2\",\n        \"Hydrogen\",\n        \"CO2Captured\",\n        \"Biomass\",\n        \"Uranium\",\n        \"LiquidFuels\",\n    ]\n}","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"If you created your System from scratch, you will have to add the Commodities you require yourself. If preferred, you can add the list directly to your system_data.json file. In that case, it will look something like:","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"{\n    \"commodities\": [\n        \"Electricity\",\n        \"NaturalGas\",\n        \"CO2\",\n        \"Hydrogen\",\n        \"CO2Captured\",\n        \"Biomass\",\n        \"Uranium\",\n        \"LiquidFuels\",\n    ],\n    \"locations\": {\n        \"path\": \"system/locations.json\"\n    },\n    \"settings\": {\n        \"path\": \"settings/macro_settings.json\"\n    },\n    \"assets\": {\n        \"path\": \"assets\"\n    },\n    \"time_data\": {\n        \"path\": \"system/time_data.json\"\n    },\n    \"nodes\": {\n        \"path\": \"system/nodes.json\"\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_add_commodity/#Listing-Macro-Commodities","page":"Adding Commodities","title":"Listing Macro Commodities","text":"","category":"section"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"There is almost no overhead to including Commodities which are not used by your System, so we recommend adding all of the default Commodities to your Commodities list. If you want to see a list all of the Commodities available in Macro, call the following function in the REPL or a script:","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"julia> using MacroEnergy\njulia> MacroEnergy.commodity_types()","category":"page"},{"location":"Guides/User Guide/user_add_commodity/#Specifying-time-data-for-Commodities","page":"Adding Commodities","title":"Specifying time data for Commodities","text":"","category":"section"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"As well as being included in the Commodities list, each Commodity must be included in the System's time data file. This file is system/time_data.json by default.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"The time data file defines the representative periods (aka subperiods) which Macro should use to build the System, as well as the time-discretization of the operating decisions for each Commodity.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"The latter is determined by two field:","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"HoursPerSubperiod: The number of hours in each representative period / subperiod.\nHoursPerTimeStep: The number of time-steps per representative period / subperiod.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"For now, all Commodities must have the same HoursPerSubperiod. In the future we will allow this to vary.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"The HoursPerTimeStep variable can be different for different Commodities. As an example of how this might be used, let's consider a System with Electricity and Natural Gas Commodities.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"{\n    \"commodities\": [\n        \"Electricity\",\n        \"NaturalGas\"\n    ]\n}","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"The System is a one-year model, made up of ten week-long representative periods / subperiods. We want the Electricity decisions to be optimized hourly, to capture hourly variation in demand and renewable energy availability. However, we don't anticipate that the Natural Gas systems will need to vary operations as frequently. To reduce our Model size and decrease runtime, we limit Natural Gas operating decisions to every 12 hours.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"Our time data file is then:","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"{\n    \"HoursPerSubperiod\": {\n        \"Electricity\": 168,\n        \"NaturalGas\": 168\n    },\n    \"HoursPerTimeStep\": {\n        \"Electricity\": 1,\n        \"NaturalGas\": 12\n    },\n    \"TotalHoursModeled\": 8760,\n    \"NumberOfSubperiods\": 10,\n    \"SubPeriodMap\": {\n        \"path\": \"system/Period_map.csv\"\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"Further details about time data files, including how period maps work, can be found here.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/#Creating-a-new-sub-Commodity","page":"Adding Commodities","title":"Creating a new sub-Commodity","text":"","category":"section"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"There are many circumstances in which you may want to differentiate between two flows of the same Commodity. For example, you may want to differentiate between biofuels produced from wood vs. crops, or hydrogen produced by electrolysis vs. steam methane reforming. The easiest solution is usually to create sub-Commodities for each version of the Commodity you require.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"The manual contains more detail on how sub-Commodities function and examples of how you can use them.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"Sub-Commodities are additional Commodities created specifically for your System, which inherit the time data and other properties of an existing Commodity. To create a new sub-Commodity, you must therefore tell Macro which Commodity (or existing sub-Commodity) it is inheriting from.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"You can add sub-Commodities by manually editing your Commodities file. However, Macro also has template functions to do so which will also help catch errors.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"To create sub-Commodities for electrolysis-produced vs.SMR-produced hydrogen, we will create two new sub-Commodities which inherit from the Hydrogen Commodity. First, we must make sure that our System includes the Hydrogen Commodity.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"We'll create a new System using the template_system function. This guide gives more details on how to create a System.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"system = template_system(\"ExampleSystems/template_example\")","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"The template will add all Commodities to the System, but we'll only consider Hydrogen for now:","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"{\n    \"commodities\": [\n        \"Hydrogen\",\n        ...\n    ]\n}","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"We next use the template_subcommodity to add our two new sub-Commodities, with Hydrogen as the base Commodity in both cases.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"template_subcommodity(\"ExampleSystems/template_example/system/commodities.json\", \"ElectrolysisHydrogen\", \"Hydrogen\")\ntemplate_subcommodity(\"ExampleSystems/template_example/system/commodities.json\", \"SMRHydrogen\", \"Hydrogen\")","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"Your Commodity file should now look like this:","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"{\n    \"commodities\": [\n        \"Hydrogen\",\n        {\n            \"name\": \"ElectrolysisHydrogen\",\n            \"acts_like\": \"Hydrogen\"\n        },\n        {\n            \"name\": \"SMRHydrogen\",\n            \"acts_like\": \"Hydrogen\"\n        },\n        ...\n    ]\n}","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"Regular Commodities are always listed as strings in the Commodity file, while sub-Commodities are short dictionaries defining its name and super-Commmodity.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"For now, Macro adds Commodities and sub-Commodities in the order they are listed in the Commodity file. You should make sure that new sub-Commodities are always listed after the Commodity they inherit from.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"You can also have the template_subcommodity function target the System, rather than the Commodity file itself.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"template_subcommodity(system, \"ElectrolysisHydrogen\", \"Hydrogen\")\ntemplate_subcommodity(system, \"SMRHydrogen\", \"Hydrogen\")","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"You can combine these two function calls using lists of arguments.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"template_subcommodity(system, [\"ElectrolysisHydrogen\", \"SMRHydrogen\"], [\"Hydrogen\", \"Hydrogen\"])","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"If you only give one super-Commodity, Macro will assume that all new sub-Commodities should inherit from it.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"template_subcommodity(system, [\"ElectrolysisHydrogen\", \"SMRHydrogen\"], \"Hydrogen\")","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"As mentioned, you can also have sub-Commodities inherit from other sub-Commodities:","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"template_subcommodity(system, [\"HighEmissElectrolysisHydrogen\", \"LowEmissElectrolysisHydrogen\"], \"ElectrolysisHydrogen\")","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"This will leave you with the following Commodity file:","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"{\n    \"commodities\": [\n        \"Hydrogen\",\n        {\n            \"name\": \"ElectrolysisHydrogen\",\n            \"acts_like\": \"Hydrogen\"\n        },\n        {\n            \"name\": \"SMRHydrogen\",\n            \"acts_like\": \"Hydrogen\"\n        },\n        {\n            \"name\": \"HighEmissElectrolysisHydrogen\",\n            \"acts_like\": \"ElectrolysisHydrogen\"\n        },\n        {\n            \"name\": \"LowEmissElectrolysisHydrogen\",\n            \"acts_like\": \"ElectrolysisHydrogen\"\n        },\n        ...\n    ]\n}","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"","category":"page"},{"location":"Tutorials/tutorials_introduction/#Tutorials","page":"Introduction","title":"Tutorials","text":"","category":"section"},{"location":"Tutorials/tutorials_introduction/","page":"Introduction","title":"Introduction","text":"The tutorials in this section are long-form explanations of how to use Macro. They are intended to help you learn to complete full workflows with Macro, as opposed to being convenient references for specific tasks. Each step of the tutorial is written out in full, rather than linking to the relevant guides. Most also have Jupyter notebooks to make it easier to follow the tasks.","category":"page"},{"location":"Tutorials/tutorials_introduction/","page":"Introduction","title":"Introduction","text":"We currently have the following tutorials:","category":"page"},{"location":"Tutorials/tutorials_introduction/","page":"Introduction","title":"Introduction","text":"Getting Started: Shows you how to download, install, and test Macro.\nRunning Macro: Describes how to optimize an electricity grid, write the results, and plot them. It will then show you how to add an emission limit to the system.\nMultisector Modelling: Show you how to add a hydrogen sector model to the electricity grid from the previous tutorial. You will then optimize the multisector system, write and plot the results.","category":"page"},{"location":"Tutorials/tutorials_introduction/#Contributing-a-tutorial","page":"Introduction","title":"Contributing a tutorial","text":"","category":"section"},{"location":"Tutorials/tutorials_introduction/","page":"Introduction","title":"Introduction","text":"We welcome additional tutorials. If you have written one and think it would be useful to others, please consider submitting it for inclusion here by creating a pull request (PR). See the \"How to contribute\" page for more information on how to do so.","category":"page"},{"location":"Tutorials/tutorials_introduction/","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"Manual/assets/beccselectricity/#BECCS-Electricity","page":"BECCS Electricity","title":"BECCS Electricity","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/#Contents","page":"BECCS Electricity","title":"Contents","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Overview | Asset Structure | Flow Equations | Input File (Standard Format) | Types - Asset Structure | Constructors | Examples | Best Practices | Input File (Advanced Format)","category":"page"},{"location":"Manual/assets/beccselectricity/#beccselectricity_overview","page":"BECCS Electricity","title":"Overview","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"BECCS Electricity assets in Macro represent Bioenergy with Carbon Capture and Storage (BECCS) technologies that produce electricity from biomass while capturing CO₂. These assets are defined using either JSON or CSV input files placed in the assets directory, typically named beccs_electricity.json or beccs_electricity.csv.","category":"page"},{"location":"Manual/assets/beccselectricity/#beccselectricity_asset_structure","page":"BECCS Electricity","title":"Asset Structure","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"A BECCS electricity asset consists of one transformation component and five edge components:","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Biomass Edge: Incoming edge representing biomass supply\nCO₂ Edge: Incoming edge representing CO₂ absorption from atmosphere\nTransformation Component: Balances flows of biomass, CO₂, electricity, and CO₂ captured\nElectricity Edge: Outgoing edge representing electricity production\nCO₂ Emission Edge: Outgoing edge representing CO₂ emissions from the process\nCO₂ Captured Edge: Outgoing edge representing captured CO₂","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Here is a graphical representation of the BECCS electricity asset:","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph BECCSElectricity\n  direction BT\n    B((Biomass)) e1@--> A{{..}}\n    C((CO₂ Source)) e2@--> A\n    A e5@--> D((Electricity))\n    A e3@--> E((CO₂ Emitted))\n    A e4@--> F((CO₂ Captured))\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n end\n    style A fill:black,stroke:black,color:black;\n    style B r:55px,fill:palegreen,stroke:black,color:black, stroke-dasharray: 3,5;\n    style C r:55px,fill:lightgray,stroke:black,color:black, stroke-dasharray: 3,5;\n    style D font-size:19px,r:55px,fill:#FFD700,stroke:black,color:black, stroke-dasharray: 3,5;\n    style E font-size:17px,r:55px,fill:lightgray,stroke:black,color:black, stroke-dasharray: 3,5;\n    style F font-size:15px,r:55px,fill:lightgray,stroke:black,color:black, stroke-dasharray: 3,5;\n\n    linkStyle 0 stroke:palegreen, stroke-width: 2px;\n    linkStyle 1,3,4 stroke:lightgray, stroke-width: 2px;\n    linkStyle 2 stroke:#FFD700, stroke-width: 2px;","category":"page"},{"location":"Manual/assets/beccselectricity/#beccselectricity_flow_equations","page":"BECCS Electricity","title":"Flow Equations","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"The BECCS electricity asset follows these stoichiometric relationships:","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"beginaligned\nphi_elec = phi_biomass cdot epsilon_elec_prod \nphi_co2 = phi_biomass cdot epsilon_co2_content \nphi_co2_emitted = phi_biomass cdot epsilon_emission_rate \nphi_co2_captured = phi_biomass cdot epsilon_capture_rate \nendaligned","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Where:","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"phi represents the flow of each commodity\nepsilon represents the stoichiometric coefficients defined in the table below (see table Conversion Process Parameters)","category":"page"},{"location":"Manual/assets/beccselectricity/#beccselectricity_input_file","page":"BECCS Electricity","title":"Input File (Standard Format)","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"The easiest way to include a BECCS electricity asset in a model is to create a new file (either JSON or CSV) and place it in the assets directory together with the other assets.","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"your_case/\n├── assets/\n│   ├── beccs_electricity.json    # or beccs_electricity.csv\n│   ├── other_assets.json\n│   └── ...\n├── system/\n├── settings/\n└── ...","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"This file can either be created manually, or using the template_asset function, as shown in the Adding an Asset to a System section of the User Guide. The file will be automatically loaded when you run your Macro model.","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"The following is an example of a BECCS electricity asset input file:","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"{\n    \"BECCS_Electricity\": [\n        {\n            \"type\": \"BECCSElectricity\",\n            \"global_data\": {\n                \"biomass_constraints\": {\n                    \"MinFlowConstraint\": true\n                },\n                \"capacity_size\": 400,\n                \"investment_cost\": 765260.16,\n                \"fixed_om_cost\": 212409.12,\n                \"variable_om_cost\": 47.2,\n                \"emission_rate\": 0.116756,\n                \"co2_content\": 1.717,\n                \"capture_rate\": 1.600244,\n                \"electricity_production\": 1.606568331,\n                \"min_flow_fraction\": 0.4,\n                \"co2_sink\": \"co2_sink\"\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_BECCS_Electricity_Herb\",\n                    \"location\": \"SE\",\n                    \"biomass_commodity\": \"Biomass_Herb\",\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"SE_BECCS_Electricity_Herb\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"tip: Global Data vs Instance Data\nWhen working with JSON input files, the global_data field can be used to group data that is common to all instances of the same asset type. This is useful for setting constraints that are common to all instances of the same asset type and avoid repeating the same data for each instance. See the Examples section below for an example.","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"The following tables outline the attributes that can be set for a BECCS electricity asset.","category":"page"},{"location":"Manual/assets/beccselectricity/#Essential-Attributes","page":"BECCS Electricity","title":"Essential Attributes","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Field Type Description\nType String Asset type identifier: \"BECCSElectricity\"\nid String Unique identifier for the BECCS electricity instance\nlocation String Geographic location/node identifier\nbiomass_commodity String Commodity identifier for the biomass supply (can be a sub-commodity of Biomass)\nco2_sink String ID of a CO₂ sink vertex (has to be defined in the nodes input file)","category":"page"},{"location":"Manual/assets/beccselectricity/#beccselectricity_conversion_process_parameters","page":"BECCS Electricity","title":"Conversion Process Parameters","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"The following set of parameters control the conversion process and stoichiometry of the BECCS electricity asset (see Flow Equations for more details).","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Field Type Description Units Default\nelectricity_production Float64 Electricity production per unit biomass MWht_Biomass 0.0\ncapture_rate Float64 CO₂ capture rate per unit biomass t_CO2t_Biomass 1.0\nco2_content Float64 CO₂ content in biomass t_CO2t_Biomass 0.0\nemission_rate Float64 CO₂ emission rate per unit biomass t_CO2t_Biomass 1.0","category":"page"},{"location":"Manual/assets/beccselectricity/#\"beccselectricity_constraints\"","page":"BECCS Electricity","title":"Constraints Configuration","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"BECCS electricity assets can have different constraints applied to them, and the user can configure them using the following fields:","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Field Type Description\ntransform_constraints Dict{String,Bool} List of constraints applied to the transformation component.\nbiomass_constraints Dict{String,Bool} List of constraints applied to the biomass edge.\nco2_constraints Dict{String,Bool} List of constraints applied to the CO₂ edge.\nco2_emission_constraints Dict{String,Bool} List of constraints applied to the CO₂ emission edge.\nco2_captured_constraints Dict{String,Bool} List of constraints applied to the CO₂ captured edge.","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"For example, if the user wants to apply the BalanceConstraint to the transformation component and the CapacityConstraint to the biomass edge, the constraints fields should be set as follows:","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"{\n    \"transform_constraints\": {\n        \"BalanceConstraint\": true\n    },\n    \"biomass_constraints\": {\n        \"CapacityConstraint\": true\n    }\n}","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Users can refer to the Adding Asset Constraints to a System section of the User Guide for a list of all the constraints that can be applied to the different components of a BECCS electricity asset.","category":"page"},{"location":"Manual/assets/beccselectricity/#Default-constraints","page":"BECCS Electricity","title":"Default constraints","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"To simplify the input file and the asset configuration, the following constraints are applied to the BECCS electricity asset by default:","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Balance constraint (applied to the transformation component)\nCapacity constraint (applied to the biomass edge)","category":"page"},{"location":"Manual/assets/beccselectricity/#Investment-Parameters","page":"BECCS Electricity","title":"Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Field Type Description Units Default\ncan_retire Boolean Whether BECCS electricity asset capacity can be retired - true\ncan_expand Boolean Whether BECCS electricity asset capacity can be expanded - true\nexisting_capacity Float64 Initial installed BECCS electricity asset capacity t_Biomasshr 0.0\ncapacity_size Float64 Unit size for capacity decisions - 1.0","category":"page"},{"location":"Manual/assets/beccselectricity/#Additional-Investment-Parameters","page":"BECCS Electricity","title":"Additional Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Maximum and minimum capacity constraints","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"If MaxCapacityConstraint or MinCapacityConstraint are added to the constraints dictionary for the biomass edge, the following parameters are used by Macro:","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Field Type Description Units Default\nmax_capacity Float64 Maximum allowed BECCS electricity asset capacity t_Biomasshr Inf\nmin_capacity Float64 Minimum allowed BECCS electricity asset capacity t_Biomasshr 0.0","category":"page"},{"location":"Manual/assets/beccselectricity/#Economic-Parameters","page":"BECCS Electricity","title":"Economic Parameters","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Field Type Description Units Default\ninvestment_cost Float64 CAPEX per unit BECCS electricity asset capacity (t_Biomasshr) 0.0\nannualized_investment_cost Union{Nothing,Float64} Annualized CAPEX (t_Biomasshryr) calculated\nfixed_om_cost Float64 Fixed O&M costs of the BECCS electricity asset (t_Biomasshryr) 0.0\nvariable_om_cost Float64 Variable O&M costs of the BECCS electricity asset t_Biomass 0.0","category":"page"},{"location":"Manual/assets/beccselectricity/#Operational-Parameters","page":"BECCS Electricity","title":"Operational Parameters","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Field Type Description Units Default\navailability Dict Path to availability file and column name - Empty","category":"page"},{"location":"Manual/assets/beccselectricity/#Additional-Operational-Parameters","page":"BECCS Electricity","title":"Additional Operational Parameters","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Minimum flow constraint","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"If MinFlowConstraint is added to the constraints dictionary for the biomass edge, the following parameter is used:","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Field Type Description Units Default\nmin_flow_fraction Float64 Minimum flow as fraction of capacity fraction 0.0","category":"page"},{"location":"Manual/assets/beccselectricity/#beccselectricity_type_definition","page":"BECCS Electricity","title":"Types - Asset Structure","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"The BECCSElectricity asset is defined as follows:","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"struct BECCSElectricity <: AbstractAsset\n    id::AssetId\n    beccs_transform::Transformation\n    biomass_edge::Edge{<:Biomass}\n    elec_edge::Edge{<:Electricity}\n    co2_edge::Edge{<:CO2}\n    co2_emission_edge::Edge{<:CO2}\n    co2_captured_edge::Edge{<:CO2Captured}\nend","category":"page"},{"location":"Manual/assets/beccselectricity/#beccselectricity_constructors","page":"BECCS Electricity","title":"Constructors","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/#Default-constructor","page":"BECCS Electricity","title":"Default constructor","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"BECCSElectricity(id::AssetId, beccs_transform::Transformation, biomass_edge::Edge{<:Biomass}, co2_edge::Edge{<:CO2}, elec_edge::Edge{<:Electricity}, co2_captured_edge::Edge{<:CO2Captured}, co2_emission_edge::Edge{<:CO2})","category":"page"},{"location":"Manual/assets/beccselectricity/#Factory-constructor","page":"BECCS Electricity","title":"Factory constructor","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"make(asset_type::Type{BECCSElectricity}, data::AbstractDict{Symbol,Any}, system::System)","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Field Type Description\nasset_type Type{BECCSElectricity} Macro type of the asset\ndata AbstractDict{Symbol,Any} Dictionary containing the input data for the asset\nsystem System System to which the asset belongs","category":"page"},{"location":"Manual/assets/beccselectricity/#beccselectricity_examples","page":"BECCS Electricity","title":"Examples","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"This section contains examples of how to use the BECCS electricity asset in a Macro model.","category":"page"},{"location":"Manual/assets/beccselectricity/#Simple-BECCS-Electricity-Asset","page":"BECCS Electricity","title":"Simple BECCS Electricity Asset","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"This example shows a single BECCS electricity asset with existing capacity using Biomass_Herb as the biomass commodity.","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"JSON Format:","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"{\n    \"BECCS_Electricity\": [\n        {\n            \"type\": \"BECCSElectricity\",\n            \"instance_data\": [\n                {\n                    \"id\": \"Fixed_BECCS_Electricity_SE\",\n                    \"location\": \"SE\",\n                    \"biomass_commodity\": \"Biomass_Herb\",\n                    \"co2_sink\": \"co2_sink\",\n                    \"electricity_production\": 1.6,\n                    \"capture_rate\": 1.5,\n                    \"co2_content\": 1.8,\n                    \"emission_rate\": 0.3,\n                    \"existing_capacity\": 500.0,\n                    \"fixed_om_cost\": 150000.0,\n                    \"variable_om_cost\": 40.0\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"CSV Format:","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Type id location biomass_commodity co2_sink electricity_production capture_rate co2_content emission_rate existing_capacity fixed_om_cost variable_om_cost\nBECCSElectricity Fixed_BECCS_Electricity_SE SE Biomass_Herb co2_sink 1.6 1.5 1.8 0.3 500.0 150000.0 40.0","category":"page"},{"location":"Manual/assets/beccselectricity/#Two-BECCS-Electricity-Assets-in-the-SE-Region","page":"BECCS Electricity","title":"Two BECCS Electricity Assets in the SE Region","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"This example shows two BECCS electricity assets in the SE region with different biomass types. The biomass constraints are set to the MinFlowConstraint constraint with a minimum flow fraction of 0.4, and the availability time series are set to the SE_BECCS_Electricity_Herb and SE_BECCS_Electricity_Wood time series.","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"JSON Format:","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Note that the global_data field is used to set the fields and constraints that are common to all instances of the same asset type.","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"{\n    \"BECCS_Electricity\": [\n        {\n            \"type\": \"BECCSElectricity\",\n            \"global_data\": {\n                \"biomass_constraints\": {\n                    \"MinFlowConstraint\": true\n                },\n                \"co2_sink\": \"co2_sink\",\n                \"electricity_production\": 1.606568331,\n                \"capture_rate\": 1.600244,\n                \"co2_content\": 1.717,\n                \"emission_rate\": 0.116756,\n                \"investment_cost\": 765260.16,\n                \"fixed_om_cost\": 212409.12,\n                \"variable_om_cost\": 47.2,\n                \"capacity_size\": 400,\n                \"min_flow_fraction\": 0.4\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_BECCS_Electricity_Herb\",\n                    \"location\": \"SE\",\n                    \"biomass_commodity\": \"Biomass_Herb\",\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"SE_BECCS_Electricity_Herb\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"SE_BECCS_Electricity_Wood\",\n                    \"location\": \"SE\",\n                    \"biomass_commodity\": \"Biomass_Wood\",\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"SE_BECCS_Electricity_Wood\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"CSV Format:","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Type id fixed_om_cost capture_rate electricity_production capacity_size co2_sink emission_rate variable_om_cost investment_cost min_flow_fraction co2_content biomass_constraints–MinFlowConstraint location biomass_commodity availability–timeseries–path availability–timeseries–header\nBECCSElectricity SE_BECCS_Electricity_Herb 212409.12 1.600244 1.606568331 400 co2_sink 0.116756 47.2 765260.16 0.4 1.717 true SE Biomass_Herb system/availability.csv SE_BECCS_Electricity_Herb\nBECCSElectricity SE_BECCS_Electricity_Wood 212409.12 1.600244 1.606568331 400 co2_sink 0.116756 47.2 765260.16 0.4 1.717 true SE Biomass_Wood system/availability.csv SE_BECCS_Electricity_Wood","category":"page"},{"location":"Manual/assets/beccselectricity/#beccselectricity_best_practices","page":"BECCS Electricity","title":"Best Practices","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Use global data for common fields and constraints: Use the global_data field to set the fields and constraints that are common to all instances of the same asset type.\nSet realistic stoichiometric coefficients: Ensure the transformation parameters reflect actual technology performance\nUse meaningful IDs: Choose descriptive identifiers that indicate location and biomass type\nConsider availability profiles: Use availability time series to model seasonal variations in biomass supply\nValidate costs: Ensure investment and O&M costs are in appropriate units\nTest configurations: Start with simple configurations and gradually add complexity\nMonitor CO₂ balance: Ensure the CO₂ capture and emission rates are consistent with the overall system CO₂ balance","category":"page"},{"location":"Manual/assets/beccselectricity/#beccselectricity_advanced_json_csv_input_format","page":"BECCS Electricity","title":"Input File (Advanced Format)","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Macro provides an advanced format for defining BECCS electricity assets, offering users and modelers detailed control over asset specifications. This format builds upon the standard format and is ideal for those who need more comprehensive customization.","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"To understand the advanced format, consider the graph representation and the type definition of a BECCS electricity asset. The input file mirrors this hierarchical structure.","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"A BECCS electricity asset in Macro is composed of a transformation component, represented by a Transformation object, and five edges, each represented by an Edge object. The input file for a BECCS electricity asset is therefore organized as follows:","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"biomass_edge\": {\n            // ... biomass_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        },\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"co2_emission_edge\": {\n            // ... co2_emission_edge-specific attributes ...\n        },\n        \"co2_captured_edge\": {\n            // ... co2_captured_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Each top-level key (e.g., \"transforms\" or \"edges\") denotes a component type. The second-level keys either specify the attributes of the component (when there is a single instance) or identify the instances of the component (e.g., \"biomass_edge\", \"elec_edge\", etc.) when there are multiple instances. For multiple instances, a third-level key details the attributes for each instance.","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Below is an example of an input file for a BECCS electricity asset that sets up a single asset in the SE region with detailed edge specifications.","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"{\n    \"BECCS_Electricity\": [\n        {\n            \"type\": \"BECCSElectricity\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"commodity\": \"Biomass\",\n                    \"timedata\": \"Biomass\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"biomass_edge\": {\n                        \"type\": \"Biomass\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"MinFlowConstraint\": true\n                        }\n                    },\n                    \"co2_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"co2_captured_edge\": {\n                        \"type\": \"CO2Captured\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"co2_emission_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_BECCS_Electricity_Herb\",\n                    \"transforms\": {\n                        \"electricity_production\": 1.656626506,\n                        \"capture_rate\": 1.5313914,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.2288286\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"bioherb_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_BECCS_Electricity_Herb\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 696050.2868,\n                            \"fixed_om_cost\": 193228.9157,\n                            \"variable_om_cost\": 42.93975904,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.4\n                        },\n                        \"co2_edge\": {\n                            \"start_vertex\": \"co2_sink\"\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_SE\"\n                        },\n                        \"co2_captured_edge\": {\n                            \"end_vertex\": \"co2_captured_sink\"\n                        },\n                        \"co2_emission_edge\": {\n                            \"end_vertex\": \"co2_sink\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/beccselectricity/#Key-Points","page":"BECCS Electricity","title":"Key Points","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"The global_data field is utilized to define attributes and constraints that apply universally to all instances of a particular asset type.\nThe start_vertex and end_vertex fields indicate the nodes to which the edges are connected. These nodes must be defined in the nodes.json file.\nBy default, only the biomass edge is allowed to have capacity variables and constraints, as this represents the main capacity decision for the BECCS facility. However, the user can add capacity variables and constraints to the other edges as well (see note below).\nThe biomass edge uses availability time series to model seasonal variations in biomass supply.\nFor a comprehensive list of attributes that can be configured for the transformation and edge components, refer to the transformation and edges pages of the Macro manual.","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"note: The `has_capacity` Edge Attribute\nThe has_capacity attribute is a flag that indicates whether a specific edge of an asset has a capacity variable, allowing it to be expanded or retired. Typically, users do not need to manually adjust this flag, as the asset creators in Macro have already configured it correctly for each edge. However, advanced users can use this flag to override the default settings for each edge if needed.","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"tip: Prefixes\nUsers can apply prefixes to adjust parameters for the components of a BECCS electricity asset, even when using the standard format. For instance, co2_can_retire will adjust the can_retire parameter for the CO₂ edge, and co2_existing_capacity will adjust the existing_capacity parameter for the CO₂ edge. Below are the prefixes available for modifying parameters for the components of a BECCS electricity asset:transform_ for the transformation component\nbiomass_ for the biomass edge\nco2_ for the CO₂ edge\nco2_emission_ for the CO₂ emission edge\nco2_captured_ for the CO₂ captured edge\nelec_ for the electricity edge","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"","category":"page"},{"location":"Guides/Developer Guide/dev_create_constraint/","page":"Creating a Constraint","title":"Creating a Constraint","text":"","category":"page"},{"location":"Manual/assets/vre/#vre","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"","category":"section"},{"location":"Manual/assets/vre/#Contents","page":"Variable Renewable Energy Resources (VRE)","title":"Contents","text":"","category":"section"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"Overview | Asset Structure | Input File (Standard Format) | Types - Asset Structure | Constructors | Examples | Best Practices | Input File (Advanced Format)","category":"page"},{"location":"Manual/assets/vre/#vre_overview","page":"Variable Renewable Energy Resources (VRE)","title":"Overview","text":"","category":"section"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"VRE (Variable Renewable Energy) assets in Macro represent electricity generation technologies with variable output, such as wind turbines and solar photovoltaic systems. These assets are defined using either JSON or CSV input files placed in the assets directory, typically named with descriptive identifiers like vre.json or renewables.csv.","category":"page"},{"location":"Manual/assets/vre/#vre_asset_structure","page":"Variable Renewable Energy Resources (VRE)","title":"Asset Structure","text":"","category":"section"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"A VRE asset consists of two main components:","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"Transformation Component\nElectricity Edge: Represents the electricity production flow to the grid","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"Here is a graphical representation of the VRE asset:","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph VRE\n  direction LR\n  A((Energy Source)) e1@--> B{{..}}\n  B e2@--> C((Electricity))\n  e1@{ animate: true }\n  e2@{ animate: true }\n end\n    style A r:55px,fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n    style B r:55px,fill:black,stroke:black,color:black,stroke-dasharray: 3,5;\n    style C font-size:20px,r:55px,fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n    linkStyle 0 stroke:#FFD700, stroke-width: 2px;\n    linkStyle 1 stroke:#FFD700, stroke-width: 2px;","category":"page"},{"location":"Manual/assets/vre/#vre_input_file","page":"Variable Renewable Energy Resources (VRE)","title":"Input File (Standard Format)","text":"","category":"section"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"The easiest way to include a VRE asset in a model is to create a new file (either JSON or CSV) and place it in the assets directory together with the other assets. ","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"your_case/\n├── assets/\n│   ├── vre.json    # or vre.csv\n│   ├── other_assets.json\n│   └── ...\n├── system/\n├── settings/\n└── ...","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"This file can either be created manually, or using the template_asset function, as shown in the Adding an Asset to a System section of the User Guide. The file will be automatically loaded when you run your Macro model. ","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"The following is an example of a VRE asset input file:","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"{\n    \"existing_vre\": [\n        {\n            \"type\": \"VRE\",\n            \"instance_data\": [\n                {\n                    \"id\": \"existing_solar_MIDAT\",\n                    \"can_expand\": false,\n                    \"can_retire\": true,\n                    \"location\": \"MIDAT\",\n                    \"fixed_om_cost\": 22887,\n                    \"capacity_size\": 10.578,\n                    \"existing_capacity\": 2974.6,\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"MIDAT_solar_photovoltaic_1\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"tip: Global Data vs Instance Data\nWhen working with JSON input files, the global_data field can be used to group data that is common to all instances of the same asset type. This is useful for setting constraints that are common to all instances of the same asset type and avoid repeating the same data for each instance. See the Examples section below for an example.","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"The following tables outline the attributes that can be set for a VRE asset.","category":"page"},{"location":"Manual/assets/vre/#Essential-Attributes","page":"Variable Renewable Energy Resources (VRE)","title":"Essential Attributes","text":"","category":"section"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"Field Type Description\nType String Asset type identifier: \"VRE\"\nid String Unique identifier for the VRE instance\nlocation String Geographic location/node identifier","category":"page"},{"location":"Manual/assets/vre/#vre_constraints","page":"Variable Renewable Energy Resources (VRE)","title":"Constraints configuration","text":"","category":"section"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"VRE assets can have different constraints applied to them, and the user can configure them using the following fields:","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"Field Type Description\ntransform_constraints Dict{String,Bool} List of constraints applied to the transformation component.\nelec_constraints Dict{String,Bool} List of constraints applied to the electricity edge.","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"Users can refer to the Adding Asset Constraints to a System section of the User Guide for a list of all the constraints that can be applied to a VRE asset.","category":"page"},{"location":"Manual/assets/vre/#Default-constraints","page":"Variable Renewable Energy Resources (VRE)","title":"Default constraints","text":"","category":"section"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"To simplify the input file and the asset configuration, the following constraints are applied to the VRE asset by default:","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"Balance constraint (applied to the transformation component)","category":"page"},{"location":"Manual/assets/vre/#Investment-Parameters","page":"Variable Renewable Energy Resources (VRE)","title":"Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"Field Type Description Units Default\ncan_retire Boolean Whether capacity can be retired - true\ncan_expand Boolean Whether capacity can be expanded - true\nexisting_capacity Float64 Initial installed capacity MW 0.0\ncapacity_size Float64 Unit size for capacity decisions - 1.0","category":"page"},{"location":"Manual/assets/vre/#Additional-Investment-Parameters","page":"Variable Renewable Energy Resources (VRE)","title":"Additional Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"Maximum and minimum capacity constraints","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"If MaxCapacityConstraint or MinCapacityConstraint are added to the constraints dictionary for the electricity edge, the following parameters are used by Macro:","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"Field Type Description Units Default\nmax_capacity Float64 Maximum allowed capacity MW Inf\nmin_capacity Float64 Minimum allowed capacity MW 0.0","category":"page"},{"location":"Manual/assets/vre/#Economic-Parameters","page":"Variable Renewable Energy Resources (VRE)","title":"Economic Parameters","text":"","category":"section"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"Field Type Description Units Default\ninvestment_cost Float64 CAPEX per unit capacity $/MW 0.0\nannualized_investment_cost Union{Nothing,Float64} Annualized CAPEX $/MW/yr calculated\nfixed_om_cost Float64 Fixed O&M costs $/MW/yr 0.0\nvariable_om_cost Float64 Variable O&M costs $/MWh 0.0\nwacc Float64 Weighted average cost of capital fraction 0.0\nlifetime Int Asset lifetime in years years 1\ncapital_recovery_period Int Investment recovery period years 1\nretirement_period Int Retirement period years 0","category":"page"},{"location":"Manual/assets/vre/#Operational-Parameters","page":"Variable Renewable Energy Resources (VRE)","title":"Operational Parameters","text":"","category":"section"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"Field Type Description Units Default\navailability Dict Availability file path and header - Empty","category":"page"},{"location":"Manual/assets/vre/#vre_type_definition","page":"Variable Renewable Energy Resources (VRE)","title":"Types - Asset Structure","text":"","category":"section"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"The VRE asset is defined as follows:","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"struct VRE <: AbstractAsset\n    id::AssetId\n    energy_transform::Transformation\n    edge::Edge{<:Electricity}\nend","category":"page"},{"location":"Manual/assets/vre/#vre_constructors","page":"Variable Renewable Energy Resources (VRE)","title":"Constructors","text":"","category":"section"},{"location":"Manual/assets/vre/#Default-constructor","page":"Variable Renewable Energy Resources (VRE)","title":"Default constructor","text":"","category":"section"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"VRE(id::AssetId, energy_transform::Transformation, edge::Edge{<:Electricity})","category":"page"},{"location":"Manual/assets/vre/#Factory-constructor","page":"Variable Renewable Energy Resources (VRE)","title":"Factory constructor","text":"","category":"section"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"make(asset_type::Type{VRE}, data::AbstractDict{Symbol,Any}, system::System)","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"Field Type Description\nasset_type Type{VRE} Macro type of the asset\ndata AbstractDict{Symbol,Any} Dictionary containing the input data for the asset\nsystem System System to which the asset belongs","category":"page"},{"location":"Manual/assets/vre/#vre_examples","page":"Variable Renewable Energy Resources (VRE)","title":"Examples","text":"","category":"section"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"This section contains examples of how to use the VRE asset in a Macro model.","category":"page"},{"location":"Manual/assets/vre/#Multiple-VRE-assets-in-different-zones-(existing-and-new)","page":"Variable Renewable Energy Resources (VRE)","title":"Multiple VRE assets in different zones (existing and new)","text":"","category":"section"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"This example shows how to define existing and new VRE assets in different zones. The existing VRE assets have initial capacity that is only allowed to be retired. The new VRE assets do not have an existing capacity but can be expanded. A MaxCapacityConstraint constraint is applied to the electricity edge with a maximum capacity determined by the max_capacity field.","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"JSON Format:","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"Note that the global_data field is used to set the fields and constraints that are common to all instances of the same asset type.","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"{\n    \"existing_vre\": [\n        {\n            \"type\": \"VRE\",\n            \"global_data\": {\n                \"can_expand\": false,\n                \"can_retire\": true\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"existing_solar_MIDAT\",\n                    \"location\": \"MIDAT\",\n                    \"fixed_om_cost\": 22887,\n                    \"capacity_size\": 10.578,\n                    \"existing_capacity\": 2974.6,\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"existing_solar_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"existing_solar_SE\",\n                    \"location\": \"SE\",\n                    \"fixed_om_cost\": 22887,\n                    \"capacity_size\": 17.142,\n                    \"existing_capacity\": 8502.2,\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"existing_solar_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"existing_solar_NE\",\n                    \"location\": \"NE\",\n                    \"fixed_om_cost\": 22887,\n                    \"capacity_size\": 3.63,\n                    \"existing_capacity\": 1629.6,\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"existing_solar_NE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"existing_wind_NE\",\n                    \"location\": \"NE\",\n                    \"fixed_om_cost\": 43000,\n                    \"capacity_size\": 86.17,\n                    \"existing_capacity\": 3654.5,\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"existing_wind_NE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"existing_wind_MIDAT\",\n                    \"location\": \"MIDAT\",\n                    \"fixed_om_cost\": 43000,\n                    \"capacity_size\": 161.2,\n                    \"existing_capacity\": 3231.6,\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"existing_wind_MIDAT\"\n                        }\n                    }\n                }\n            ]\n        }\n    ],\n    \"new_vre\": [\n        {\n            \"type\": \"VRE\",\n            \"global_data\": {\n                \"can_expand\": true,\n                \"can_retire\": false,\n                \"constraints\": {\n                    \"MaxCapacityConstraint\": true\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"NE_offshorewind\",\n                    \"location\": \"NE\",\n                    \"fixed_om_cost\": 57294.4,\n                    \"investment_cost\": 173830.4242,\n                    \"max_capacity\": 32928.493,\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"NE_offshorewind\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"SE_utilitypv\",\n                    \"location\": \"SE\",\n                    \"fixed_om_cost\": 13510.19684,\n                    \"investment_cost\": 40649.03073,\n                    \"max_capacity\": 1041244,\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"SE_utilitypv\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_utilitypv\",\n                    \"location\": \"MIDAT\",\n                    \"fixed_om_cost\": 13510.19684,\n                    \"investment_cost\": 41179.38174,\n                    \"max_capacity\": 26783,\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"MIDAT_utilitypv\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_utilitypv\",\n                    \"location\": \"NE\",\n                    \"fixed_om_cost\": 13510.19684,\n                    \"investment_cost\": 43445.847,\n                    \"max_capacity\": 156573,\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"NE_utilitypv\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"SE_landbasedwind\",\n                    \"location\": \"SE\",\n                    \"fixed_om_cost\": 26256.10757,\n                    \"investment_cost\": 74858.52871,\n                    \"max_capacity\": 84058,\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"SE_landbasedwind\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_landbasedwind\",\n                    \"location\": \"MIDAT\",\n                    \"fixed_om_cost\": 26256.10757,\n                    \"investment_cost\": 78331.91929,\n                    \"max_capacity\": 1384,\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"MIDAT_landbasedwind\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_landbasedwind\",\n                    \"location\": \"NE\",\n                    \"fixed_om_cost\": 26256.10757,\n                    \"investment_cost\": 90411.84793,\n                    \"max_capacity\": 6841,\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"NE_landbasedwind\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"CSV Format:","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"Type id location can_expand can_retire fixed_om_cost capacity_size existing_capacity availability–timeseries–path availability–timeseries–header\nVRE existing_solar_MIDAT MIDAT false true 22887 10.578 2974.6 system/availability.csv existing_solar_MIDAT\nVRE existing_solar_SE SE false true 22887 17.142 8502.2 system/availability.csv existing_solar_SE\nVRE existing_solar_NE NE false true 22887 3.63 1629.6 system/availability.csv existing_solar_NE\nVRE existing_wind_NE NE false true 43000 86.17 3654.5 system/availability.csv existing_wind_NE\nVRE existing_wind_MIDAT MIDAT false true 43000 161.2 3231.6 system/availability.csv existing_wind_MIDAT","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"Type id location can_expand can_retire constraints–MaxCapacityConstraint fixed_om_cost investment_cost max_capacity availability–timeseries–path availability–timeseries–header\nVRE NE_offshorewind NE true false true 57294.4 173830.4242 32928.493 system/availability.csv NE_offshorewind\nVRE SE_utilitypv SE true false true 13510.19684 40649.03073 1041244 system/availability.csv SE_utilitypv\nVRE MIDAT_utilitypv MIDAT true false true 13510.19684 41179.38174 26783 system/availability.csv MIDAT_utilitypv\nVRE NE_utilitypv NE true false true 13510.19684 43445.847 156573 system/availability.csv NE_utilitypv\nVRE SE_landbasedwind SE true false true 26256.10757 74858.52871 84058 system/availability.csv SE_landbasedwind\nVRE MIDAT_landbasedwind MIDAT true false true 26256.10757 78331.91929 1384 system/availability.csv MIDAT_landbasedwind\nVRE NE_landbasedwind NE true false true 26256.10757 90411.84793 6841 system/availability.csv NE_landbasedwind","category":"page"},{"location":"Manual/assets/vre/#vre_best_practices","page":"Variable Renewable Energy Resources (VRE)","title":"Best Practices","text":"","category":"section"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"Use global data for common fields and constraints: Use the global_data field to set the fields and constraints that are common to all instances of the same asset type.\nSet realistic availability profiles: Ensure availability profiles reflect actual resource characteristics and correctly capture the temporal variations of the resource.\nUse meaningful IDs: Choose descriptive identifiers that indicate location and technology type\nConsider capacity constraints: Set appropriate maximum capacity limits based on resource potential\nUse constraints selectively: Only enable constraints that are necessary for your modeling needs\nValidate costs: Ensure investment and O&M costs are in appropriate units\nTest configurations: Start with simple configurations and gradually add complexity.","category":"page"},{"location":"Manual/assets/vre/#vre_advanced_json_csv_input_format","page":"Variable Renewable Energy Resources (VRE)","title":"Input File (Advanced Format)","text":"","category":"section"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"Macro provides an advanced format for defining VRE assets, offering users and modelers detailed control over asset specifications. This format builds upon the standard format and is ideal for those who need more comprehensive customization.","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"To understand the advanced format, consider the graph representation and the type definition of a VRE asset. The input file mirrors this hierarchical structure.","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"A VRE asset in Macro is composed of a transformation component, represented by a Transformation object, and an electricity edge, represented by an Edge object. The input file for a VRE asset is therefore organized as follows:","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"{\n    \"transforms\": {\n        // ... transformation-specific attributes ...\n    },\n    \"edges\": {\n        \"edge\": {\n            // ... edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"Each top-level key (e.g., \"transforms\" or \"edges\") denotes a component type. The second-level keys either specify the attributes of the component (when there is a single instance) or identify the instances of the component (e.g., \"edge\") when there are multiple instances. For multiple instances, a third-level key details the attributes for each instance.","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"Below is an example of an input file for a VRE asset that sets up multiple renewable energy facilities in different regions.","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"{\n    \"VRE\": {\n        \"type\": \"VRE\",\n        \"global_data\": {\n            \"transforms\": {\n                \"timedata\": \"Electricity\"\n            },\n            \"edges\": {\n                \"edge\": {\n                    \"unidirectional\": true,\n                    \"has_capacity\": true,\n                    \"commodity\": \"Electricity\"\n                }\n            }\n        },\n        \"instance_data\": [\n            {\n                \"id\": \"MA_solar_pv\",\n                \"edges\": {\n                    \"edge\": {\n                        \"can_retire\": true,\n                        \"max_capacity\": -1,\n                        \"can_expand\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true\n                        },\n                        \"min_capacity\": 0,\n                        \"commodity\": \"Electricity\",\n                        \"fixed_om_cost\": 18760,\n                        \"end_vertex\": \"elec_MA\",\n                        \"investment_cost\": 85300,\n                        \"variable_om_cost\": 0,\n                        \"capacity_size\": 1,\n                        \"availability\": {\n                            \"timeseries\": {\n                                \"header\": \"MA_solar_pv\",\n                                \"path\": \"system/vre_availability.csv\"\n                            }\n                        },\n                        \"existing_capacity\": 0\n                    }\n                }\n            },\n            {\n                \"id\": \"CT_onshore_wind\",\n                \"edges\": {\n                    \"edge\": {\n                        \"can_retire\": true,\n                        \"max_capacity\": -1,\n                        \"can_expand\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true\n                        },\n                        \"min_capacity\": 0,\n                        \"commodity\": \"Electricity\",\n                        \"fixed_om_cost\": 43205,\n                        \"end_vertex\": \"elec_CT\",\n                        \"investment_cost\": 97200,\n                        \"variable_om_cost\": 0.1,\n                        \"capacity_size\": 1,\n                        \"availability\": {\n                            \"timeseries\": {\n                                \"header\": \"CT_onshore_wind\",\n                                \"path\": \"system/vre_availability.csv\"\n                            }\n                        },\n                        \"existing_capacity\": 0\n                    }\n                }\n            },\n            {\n                \"id\": \"CT_solar_pv\",\n                \"edges\": {\n                    \"edge\": {\n                        \"can_retire\": true,\n                        \"max_capacity\": -1,\n                        \"can_expand\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true\n                        },\n                        \"min_capacity\": 0,\n                        \"commodity\": \"Electricity\",\n                        \"fixed_om_cost\": 18760,\n                        \"end_vertex\": \"elec_CT\",\n                        \"investment_cost\": 85300,\n                        \"variable_om_cost\": 0,\n                        \"capacity_size\": 1,\n                        \"availability\": {\n                            \"timeseries\": {\n                                \"header\": \"CT_solar_pv\",\n                                \"path\": \"system/vre_availability.csv\"\n                            }\n                        },\n                        \"existing_capacity\": 0\n                    }\n                }\n            },\n            {\n                \"id\": \"ME_onshore_wind\",\n                \"edges\": {\n                    \"edge\": {\n                        \"can_retire\": true,\n                        \"max_capacity\": -1,\n                        \"can_expand\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true\n                        },\n                        \"min_capacity\": 0,\n                        \"commodity\": \"Electricity\",\n                        \"fixed_om_cost\": 43205,\n                        \"end_vertex\": \"elec_ME\",\n                        \"investment_cost\": 97200,\n                        \"variable_om_cost\": 0.1,\n                        \"capacity_size\": 1,\n                        \"availability\": {\n                            \"timeseries\": {\n                                \"header\": \"ME_onshore_wind\",\n                                \"path\": \"system/vre_availability.csv\"\n                            }\n                        },\n                        \"existing_capacity\": 0\n                    }\n                }\n            }\n        ]\n    }\n}","category":"page"},{"location":"Manual/assets/vre/#Key-Points","page":"Variable Renewable Energy Resources (VRE)","title":"Key Points","text":"","category":"section"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"The global_data field is utilized to define attributes and constraints that apply universally to all instances of a particular asset type.\nThe end_vertex field indicates the node to which the electricity edge is connected. This node must be defined in the nodes.json file.\nFor a comprehensive list of attributes that can be configured for the transformation and edge components, refer to the transformations and edges pages of the Macro manual.","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy Resources (VRE)","title":"Variable Renewable Energy Resources (VRE)","text":"","category":"page"},{"location":"Manual/System/#System","page":"System","title":"System","text":"","category":"section"},{"location":"Manual/System/#Contents","page":"System","title":"Contents","text":"","category":"section"},{"location":"Manual/System/","page":"System","title":"System","text":"Overview | Fields | Types | Constructors | Methods | Examples","category":"page"},{"location":"Manual/System/#manual-system-overview","page":"System","title":"Overview","text":"","category":"section"},{"location":"Manual/System/","page":"System","title":"System","text":"The System type is a compound component in Macro which represents the complete description of an energy system for a single operating period. It serves as a container that aggregates all the essential elements needed to define and analyze an energy system, including settings, commodities, time data, and the network of locations and nodes.","category":"page"},{"location":"Manual/System/#Key-Distinction:-System-vs-Model","page":"System","title":"Key Distinction: System vs Model","text":"","category":"section"},{"location":"Manual/System/","page":"System","title":"System","text":"It's important to understand the distinction between a System and the optimization model:","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"System: Describes the physical and economic characteristics of the energy system (infrastructure, parameters, time series data, etc.)\nModel: The mathematical optimization formulation built from one or more Systems","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"A System contains the data and structure that defines what the energy system looks like, while the optimization model defines how to solve for optimal operations, investments, or planning decisions.","category":"page"},{"location":"Manual/System/#Role-and-Purpose","page":"System","title":"Role and Purpose","text":"","category":"section"},{"location":"Manual/System/","page":"System","title":"System","text":"The System type plays several critical roles:","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"Data Aggregation: Consolidates all necessary data components (settings, commodities, time data, nodes, edges, storage, transformations) into a single coherent structure\nSingle Period Representation: Represents the energy system for one specific operating period, with all associated time series data, operational parameters, and network configuration\nMulti-System Integration: Multiple System objects can be combined into a Case to represent multi-period planning problems, stochastic scenarios, or different operating conditions\nModel Input: Serves as the primary input for building optimization models, providing all the data needed for constraint generation and variable definition\nValidation and Consistency: Ensures that all components of the energy system are compatible and properly configured before model building","category":"page"},{"location":"Manual/System/#System-Components","page":"System","title":"System Components","text":"","category":"section"},{"location":"Manual/System/","page":"System","title":"System","text":"A System aggregates the following key components:","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"Settings: Configuration parameters that control model behavior and solution approaches\nCommodities: Definitions of all energy carriers, materials, and services in the system\nTime Data: Temporal information including time steps, periods, and associated time series data\nNetwork Elements: All physical and logical components of the energy system\nNodes: Geographic or conceptual locations where commodities are balanced\nEdges: Transmission and distribution infrastructure connecting nodes\nStorage: Energy storage technologies and facilities\nTransformations: Technologies that convert between different commodities","category":"page"},{"location":"Manual/System/#Multi-Period-and-Scenario-Modeling","page":"System","title":"Multi-Period and Scenario Modeling","text":"","category":"section"},{"location":"Manual/System/","page":"System","title":"System","text":"While a single System represents one operating period, MacroEnergy.jl supports complex modeling scenarios through:","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"Multi-Period Cases: Multiple System objects representing different time periods (e.g., years in a planning horizon)\nStochastic Modeling: Multiple System objects representing different uncertainty scenarios\nOperational vs Planning: Different System configurations for operational dispatch vs long-term capacity planning","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"This design provides flexibility for modeling everything from single-year operational problems to multi-decade capacity expansion planning under uncertainty.","category":"page"},{"location":"Manual/System/#Key-Concepts","page":"System","title":"Key Concepts","text":"","category":"section"},{"location":"Manual/System/","page":"System","title":"System","text":"System vs Model: A System describes the physical energy infrastructure and data, while the optimization model defines the mathematical problem to be solved\nSingle Period: Each System represents one operating period with its own time series, parameters, and network configuration\nData Container: Systems aggregate all essential components (settings, commodities, time data, locations, assets) into a coherent structure\nMulti-System Cases: Multiple System objects can be combined to model multi-period planning, stochastic scenarios, or sensitivity analyses\nNetwork Integration: Systems contain all network elements (nodes, edges, storage, transformations) that define the energy system topology\nSystem Data: Systems are defined using the system_data.json input file","category":"page"},{"location":"Manual/System/#System-Fields","page":"System","title":"System Fields","text":"","category":"section"},{"location":"Manual/System/","page":"System","title":"System","text":"Systems have the following fields. When creating a model, these fields are populated through input files or programmatically constructed. The fields represent all the essential data needed to define a complete energy system for optimization.","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"note: Units in Macro\nWe have assumed that your System is using units of MWh for energy, tonnes for mass, and hour-long time steps. You can use any set of units as long as they are consistent across your operations and investment inputs.","category":"page"},{"location":"Manual/System/#Data-Management","page":"System","title":"Data Management","text":"","category":"section"},{"location":"Manual/System/","page":"System","title":"System","text":"Field Type Description Default\ndata_dirpath String Path to directory containing system input files -","category":"page"},{"location":"Manual/System/#Configuration-and-Settings","page":"System","title":"Configuration and Settings","text":"","category":"section"},{"location":"Manual/System/","page":"System","title":"System","text":"Field Type Description Default\nsettings NamedTuple Configuration parameters for model behavior NamedTuple()\ncommodities Dict{Symbol,DataType} Map of commodity symbols to their types Dict{Symbol,DataType}()","category":"page"},{"location":"Manual/System/#Temporal-Data","page":"System","title":"Temporal Data","text":"","category":"section"},{"location":"Manual/System/","page":"System","title":"System","text":"Field Type Description Default\ntime_data Dict{Symbol,TimeData} Time series data for each commodity Dict{Symbol,TimeData}()","category":"page"},{"location":"Manual/System/#Network-Components","page":"System","title":"Network Components","text":"","category":"section"},{"location":"Manual/System/","page":"System","title":"System","text":"Field Type Description Default\nassets Vector{AbstractAsset} All assets (technologies) in the system AbstractAsset[]\nlocations Vector{Union{Node, Location}} All nodes and locations in the system Union{Node, Location}[]","category":"page"},{"location":"Manual/System/#manual-system-types","page":"System","title":"Types","text":"","category":"section"},{"location":"Manual/System/#Type-Hierarchy","page":"System","title":"Type Hierarchy","text":"","category":"section"},{"location":"Manual/System/","page":"System","title":"System","text":"System types follow a simple hierarchical structure:","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"AbstractSystem\n└── System","category":"page"},{"location":"Manual/System/#System-Type","page":"System","title":"System Type","text":"","category":"section"},{"location":"Manual/System/","page":"System","title":"System","text":"The System type represents a complete energy system description for a single operating period. It serves as the primary container for all system data, aggregating settings, commodities, time data, and network components.","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"Key characteristics:","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"Single Period Representation: Each System represents one operating period with consistent temporal data\nData Aggregation: Consolidates all necessary components (settings, commodities, time data, assets, locations)\nInput File Integration: Designed to be populated from standardized input file formats\nModel Building: Serves as the primary input for optimization model construction\nMulti-System Compatibility: Can be combined with other Systems in Case objects for multi-period modeling","category":"page"},{"location":"Manual/System/#manual-system-constructors","page":"System","title":"Constructors","text":"","category":"section"},{"location":"Manual/System/#Direct-Constructors","page":"System","title":"Direct Constructors","text":"","category":"section"},{"location":"Manual/System/","page":"System","title":"System","text":"System(data_dirpath::String, settings::NamedTuple, commodities::Dict{Symbol,DataType}, \n       time_data::Dict{Symbol,TimeData}, assets::Vector{AbstractAsset}, \n       locations::Vector{Union{Node, Location}})","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"Direct constructor using all fields explicitly.","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"Parameter Type Description Required\ndata_dirpath String Path to directory containing system input files Yes\nsettings NamedTuple Configuration parameters for model behavior Yes\ncommodities Dict{Symbol,DataType} Map of commodity symbols to their types Yes\ntime_data Dict{Symbol,TimeData} Time series data for each commodity Yes\nassets Vector{AbstractAsset} All assets in the system Yes\nlocations Vector{Union{Node, Location}} All nodes and locations in the system Yes","category":"page"},{"location":"Manual/System/#Factory-Constructors","page":"System","title":"Factory Constructors","text":"","category":"section"},{"location":"Manual/System/","page":"System","title":"System","text":"empty_system(data_dirpath::String)","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"Creates an empty System with minimal initialization, suitable for programmatic population.","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"Parameter Type Description\ndata_dirpath String Path to directory for system input files","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"load_system(path::AbstractString; lazy_load::Bool=true)","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"Loads a complete System from input files in the specified directory or file path.","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"Parameter Type Description\npath AbstractString Path to system directory or system_data.json file\nlazy_load Bool Whether to load data lazily (default: true)","category":"page"},{"location":"Manual/System/#manual-system-methods","page":"System","title":"Methods","text":"","category":"section"},{"location":"Manual/System/#Accessor-Methods","page":"System","title":"Accessor Methods","text":"","category":"section"},{"location":"Manual/System/","page":"System","title":"System","text":"Methods for accessing system data, components, and properties.","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"Method Description Return Type\nasset_ids(system; source=\"assets\") Get asset IDs from system or input files Set{AssetId}\nlocation_ids(system) Get IDs of all locations in the system Vector{Symbol}\nget_asset_types(system) Get types of all assets in the system Vector{DataType}\nget_asset_by_id(system, id) Find asset by its ID Union{AbstractAsset,Nothing}\nfind_locations(system, id) Find location by its ID Union{Node,Location,Nothing}\nget_assets_sametype(system, asset_type) Get all assets of specific type Vector{<:AbstractAsset}\nget_nodes(system) Get all nodes and locations Vector{Union{Node,Location}}\nget_edges(system; return_ids_map=false) Get all edges from assets Vector{AbstractEdge} or Tuple\nget_storage(system; return_ids_map=false) Get all storage components from assets Vector{Storage} or Tuple\nget_transformations(system; return_ids_map=false) Get all transformation components from assets Vector{Transformation} or Tuple\nedges_with_capacity_variables(system; return_ids_map=false) Get edges with capacity variables Vector{AbstractEdge} or Tuple\nfind_node(nodes_list, id, commodity=missing) Search for node with specified ID and commodity Union{Node,Nothing}","category":"page"},{"location":"Manual/System/#System-Modification-Methods","page":"System","title":"System Modification Methods","text":"","category":"section"},{"location":"Manual/System/","page":"System","title":"System","text":"Methods for modifying system contents.","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"Method Description Return Type\nset_data_dirpath!(system, data_dirpath) Set the data directory path Nothing\nadd!(system, asset) Add an asset to the system Nothing\nadd!(system, location) Add a location/node to the system Nothing","category":"page"},{"location":"Manual/System/#Factory-Methods","page":"System","title":"Factory Methods","text":"","category":"section"},{"location":"Manual/System/","page":"System","title":"System","text":"Methods for creating system instances.","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"Method Description Return Type\nempty_system(data_dirpath) Create empty system with specified data path System\nload_system(path; lazy_load=true) Load complete system from input files System\ngenerate_system(system, system_data) Generate system from system data dictionary Nothing\nload_system_data(file_path, system) Load system data from input file at file_path, with relative paths based on system.data_dirpath Dict{Symbol,Any}\nload!(system, file_path) Load system data from input file at file_path into system Nothing\nload!(system, system_data::AbstractDict{Symbol,Any}) Load system data into existing system Nothing\nload!(system, data::AbstractVector{<:AbstractDict{Symbol,Any}})) Load system data from a vector of dictionaries into system Nothing\nload!(system, data::Any) Throws an error for badly formatted input data Nothing","category":"page"},{"location":"Manual/System/#manual-system-examples","page":"System","title":"Examples","text":"","category":"section"},{"location":"Manual/System/","page":"System","title":"System","text":"Most Users and Modellers will not need to create a System directly as they will be automatically created when the system data input file is loaded. The following examples show some of how Macro does these tasks. These steps could be used to create a System programmatically.","category":"page"},{"location":"Manual/System/#Loading-and-creating-a-System","page":"System","title":"Loading and creating a System","text":"","category":"section"},{"location":"Manual/System/","page":"System","title":"System","text":"If we have a system data file called system_data.json in the current directory, we can load it into a System object as follows:","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"using MacroEnergy\n\nfile_path = joinpath(pwd(), \"system_data.json\")  # Path to your system data file\nsystem_data = load_system_data(file_path)  # Load system data from file\nsystem = empty_system(dirname(file_path))  # Create an empty System with the data directory path\ngenerate_system!(system, system_data)  # Populate the System with data","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"Alternatively, we can use the load_system function to create a System directly from the input file:","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"using MacroEnergy\n\nfile_path = joinpath(pwd(), \"system_data.json\")  # Path to your system data file\nsystem = load_system(file_path)  # Load system directly from file","category":"page"},{"location":"Manual/System/#System-Data-File-Structure","page":"System","title":"System Data File Structure","text":"","category":"section"},{"location":"Manual/System/","page":"System","title":"System","text":"Systems and Cases are typically defined in the system_data.json file, which contains all the necessary data to define the energy system. Full details on the structure of this file can be found in the Inputs section. Here, we review the structure of the system_data.json file:","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"The following is a Case made up of one operating period / stochastic scenario / sensitivity case. The case field containts an array of System definitions. These definitions could directly include all of the System data but in this case we've used Macro's path feature to refer to other JSON files. These addresses are relative to the data_dirpath of the System or the directory containing the system_data.json file.","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"The settings field outside of the case array contains the Case settings.","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"{\n    \"case\": [\n        {\n            \"commodities\": {\n                \"path\": \"system/commodities.json\"\n            },\n            \"locations\": {\n                \"path\": \"system/locations.json\"\n            },\n            \"settings\": {\n                \"path\": \"settings/macro_settings.json\"\n            },\n            \"assets\": {\n                \"path\": \"assets\"\n            },\n            \"time_data\": {\n                \"path\": \"system/time_data.json\"\n            },\n            \"nodes\": {\n                \"path\": \"system/nodes.json\"\n            }\n        }\n    ],\n    \"settings\": {\n        \"path\": \"settings/case_settings.json\"\n    }\n}","category":"page"},{"location":"Manual/System/#See-Also","page":"System","title":"See Also","text":"","category":"section"},{"location":"Manual/System/","page":"System","title":"System","text":"Case - Container for multiple Systems representing different scenarios or periods\nEdges - Components that connect Vertices and carry flows\nNodes - Network nodes that allow for import and export of commodities\nStorage - Components that store commodities for later use\nTransformations - Components that convert commodities from one type to another\nCommodities - Types of resources stored by Commodities\nTime Data - Temporal modeling framework\nSettings - Configuration parameters for model behavior\nInputs - Input file formats and data structures","category":"page"},{"location":"Manual/System/","page":"System","title":"System","text":"","category":"page"},{"location":"Manual/Sectors/","page":"Sectors","title":"Sectors","text":"","category":"page"},{"location":"Manual/TimeData/#Time-Data","page":"Time Data","title":"Time Data","text":"","category":"section"},{"location":"Manual/TimeData/","page":"Time Data","title":"Time Data","text":"","category":"page"},{"location":"Getting Started/2_installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"Getting Started/2_installation/#Requirements","page":"Installation","title":"Requirements","text":"","category":"section"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"Julia 1.9 or later\nGit (to clone the repository)","category":"page"},{"location":"Getting Started/2_installation/#Installation-steps","page":"Installation","title":"Installation steps","text":"","category":"section"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"To install Macro, we recommend following these steps:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"Clone the Macro repository:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"git clone https://github.com/macroenergy/MacroEnergy.jl.git","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"note: Cloning a specific branch\nIf you want to clone a specific branch, you can use the -b flag:git clone -b <branch_name> https://github.com/macroenergy/MacroEnergy.jl.git","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"Navigate to the cloned repository:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"cd MacroEnergy.jl","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"Install Macro and all its dependencies:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"julia --project=. -e \"using Pkg; Pkg.instantiate(); Pkg.precompile()\"","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"Test the installation:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"Start Julia with the project environment in a terminal:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"$ julia --project=.","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"Load Macro in the Julia REPL:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"using MacroEnergy","category":"page"},{"location":"Getting Started/2_installation/#Editing-the-installation","page":"Installation","title":"Editing the installation","text":"","category":"section"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"If the user wants to edit the installation, for example, to install a specific version of a dependency, they can do so by following the steps below:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"Run a Julia session with the Macro project environment activated:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"$ cd MacroEnergy.jl\n$ julia --project=.","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"Alternatively, you can first run Julia:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"$ cd MacroEnergy.jl\n$ julia","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"Then, enter the Pkg mode by pressing ], and activate the project environment:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"] activate .","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"Use the Pkg mode to install or update a dependency:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"] rm <dependency_name>\n] add <dependency_name>@<version>","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"For instance, to install the JuMP package version v1.22.2, you can use the following commands:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"] rm JuMP\n] add JuMP@v1.22.2","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"note: Activating the project environment\nWhen working with the Macro package, always remember to activate the project environment before running any commands. This ensures that the correct dependencies are used and that the project is in the correct state.","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"To activate the project environment, you can use the following commands:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"cd MacroEnergy.jl\njulia --project=.","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"or","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"cd MacroEnergy.jl\njulia\n] activate .","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"","category":"page"},{"location":"References/5_utilities/#Utility-functions","page":"Utilities","title":"Utility functions","text":"","category":"section"},{"location":"References/5_utilities/","page":"Utilities","title":"Utilities","text":"Pages = [\"4_utilities.md\"]","category":"page"},{"location":"References/5_utilities/#all_constraints","page":"Utilities","title":"all_constraints","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.all_constraints","page":"Utilities","title":"MacroEnergy.all_constraints","text":"all_constraints(v::AbstractVertex)\n\nGet all constraints on a vertex.\n\nArguments\n\nv: A vertex object that is a subtype of AbstractVertex\n\nReturns\n\nA vector of all constraint objects on the vertex\n\nExamples\n\nconstraints = all_constraints(elec_node)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#all_constraints_types","page":"Utilities","title":"all_constraints_types","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.all_constraints_types","page":"Utilities","title":"MacroEnergy.all_constraints_types","text":"all_constraints_types(v::AbstractVertex)\n\nGet the types of all constraints on a vertex.\n\nArguments\n\nv: A vertex object that is a subtype of AbstractVertex\n\nReturns\n\nA vector of types of all constraints on the vertex\n\nExamples\n\nconstraint_types = all_constraints_types(elec_node)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#asset_ids","page":"Utilities","title":"asset_ids","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.asset_ids","page":"Utilities","title":"MacroEnergy.asset_ids","text":"asset_ids(system::System; source::String=\"assets\")\n\nGet the set of asset IDs from a system, either from loaded assets or input files.\n\nArguments\n\nsystem::System: The system to get asset IDs from\nsource::String: The source to get asset IDs from. Can be either:\n\"assets\" (default): Get IDs from already loaded assets in the system\n\"inputs\": Get IDs from input files\n\nReturns\n\nSet{AssetId}: A set of asset IDs\n\nExamples\n\n# Get IDs from loaded assets\nids = asset_ids(system)\n\nNotes\n\nIf source=\"assets\" and no assets are loaded, a warning is issued\nIf an invalid source is provided, an error is thrown\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#balance_ids","page":"Utilities","title":"balance_ids","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.balance_ids","page":"Utilities","title":"MacroEnergy.balance_ids","text":"balance_ids(v::AbstractVertex)\n\nGet the IDs of all balance equations in a vertex.\n\nArguments\n\nv: A vertex object that is a subtype of AbstractVertex\n\nReturns\n\nA vector of Symbols representing the IDs of all balance equations\n\nExamples\n\nbalance_ids = balance_ids(elec_node)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#balance_data","page":"Utilities","title":"balance_data","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.balance_data","page":"Utilities","title":"MacroEnergy.balance_data","text":"balance_data(v::AbstractVertex, i::Symbol)\n\nGet the input data for a specific balance equation in a vertex.\n\nArguments\n\nv: A vertex object that is a subtype of AbstractVertex\ni: Symbol representing the ID of the balance equation\n\nReturns\n\nThe input data (usually stoichiometric coefficients) for the specified balance equation\n\nExamples\n\ndemand_data = balance_data(elec_node, :demand)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#create_output_path","page":"Utilities","title":"create_output_path","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.create_output_path","page":"Utilities","title":"MacroEnergy.create_output_path","text":"create_output_path(system::System, path::String=system.data_dirpath)\n\nCreate and return the path to the output directory for storing results based on system settings.\n\nArguments\n\nsystem::System: The system object containing settings and configuration\npath::String: Base path for the output directory (defaults to system.data_dirpath)\n\nReturns\n\nString: Path to the created output directory\n\nThe function creates an output directory based on system settings. If OverwriteResults  is false, it will avoid overwriting existing directories by appending incremental numbers  (e.g., \"001\", \"002\") to the directory name. The directory is created if it doesn't exist.\n\nExample\n\njulia> system.settings\n(..., OverwriteResults = true, OutputDir = \"result_dir\")\njulia> output_path = create_output_path(system)\n# Returns \"path/to/system.data_dirpath/result_dir\" or \"path/to/system.data_dirpath/result_dir_001\" if original exists\njulia> output_path = create_output_path(system, \"path/to/output\")\n# Returns \"path/to/output/result_dir\" or \"path/to/output/result_dir_001\" if original exists\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#get_asset_by_id","page":"Utilities","title":"get_asset_by_id","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.get_asset_by_id","page":"Utilities","title":"MacroEnergy.get_asset_by_id","text":"get_asset_by_id(system::System, id::Symbol)\n\nFind an asset in the system by its ID.\n\nArguments\n\nsystem: A System object containing various assets\nid: Symbol representing the ID of the asset to find\n\nReturns\n\nThe asset object if found\nnothing if no asset with the given ID exists\n\nExamples\n\n# Find a battery asset\nbattery = get_asset_by_id(system, :battery_SE)\n\n# Find a thermal power plant\nthermal_plant = get_asset_by_id(system, :natural_gas_SE)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#get_assets_sametype","page":"Utilities","title":"get_assets_sametype","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.get_assets_sametype","page":"Utilities","title":"MacroEnergy.get_assets_sametype","text":"get_assets_sametype(system::System, asset_type::T) where T<:Type{<:AbstractAsset}\n\nGet all assets of a specific type from the system.\n\nArguments\n\nsystem: A System object containing various assets\nasset_type: The type of assets to retrieve (must be a subtype of AbstractAsset)\n\nReturns\n\nA vector of assets of the specified type\n\nExamples\n\n# Get all battery assets\nbatteries = get_assets_sametype(system, Battery)\nbattery = batteries[1]  # first battery in the list\n\n# Get all natural gas thermal power plants\nthermal_plants = get_assets_sametype(system, ThermalPower{NaturalGas})\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#get_asset_types","page":"Utilities","title":"get_asset_types","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.get_asset_types","page":"Utilities","title":"MacroEnergy.get_asset_types","text":"get_asset_types(system::System)\n\nGet a vector of the types of all assets in the system.\n\nArguments\n\nsystem: A System object containing various assets\n\nReturns\n\nA vector of DataTypes representing the type of each asset in the system\n\nExamples\n\nasset_types = get_asset_types(system)\nunique(asset_types)  # Get unique asset types in the system\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#get_balance","page":"Utilities","title":"get_balance","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.get_balance","page":"Utilities","title":"MacroEnergy.get_balance","text":"get_balance(v::AbstractVertex, i::Symbol)\n\nGet the mathematical expression of a balance equation in a vertex.\n\nArguments\n\nv: A vertex object that is a subtype of AbstractVertex\ni: Symbol representing the ID of the balance equation\n\nReturns\n\nThe mathematical expression of the balance equation\n\nExamples\n\n# Get the demand balance expression\ndemand_expr = get_balance(elec_node, :demand)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#get_constraint_by_type","page":"Utilities","title":"get_constraint_by_type","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.get_constraint_by_type","page":"Utilities","title":"MacroEnergy.get_constraint_by_type","text":"get_constraint_by_type(v::AbstractVertex, constraint_type::Type{<:AbstractTypeConstraint})\n\nGet a constraint on a vertex by its type.\n\nArguments\n\nv: A vertex object that is a subtype of AbstractVertex\nconstraint_type: The type of constraint to find\n\nReturns\n\nIf exactly one constraint of the specified type exists: returns that constraint\nIf multiple constraints of the specified type exist: returns a vector of those constraints\nIf no constraints of the specified type exist: returns nothing\n\nExamples\n\nbalance_constraint = get_constraint_by_type(elec_node, BalanceConstraint)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#get_component_by_fieldname","page":"Utilities","title":"get_component_by_fieldname","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.get_component_by_fieldname","page":"Utilities","title":"MacroEnergy.get_component_by_fieldname","text":"get_component_by_fieldname(asset::AbstractAsset, fieldname::Symbol)\n\nGet a component of an asset by its field name (i.e., fieldname of the asset struct).\n\nArguments\n\nasset: An asset object that is a subtype of AbstractAsset\nfieldname: Symbol representing the field name of the component to get (i.e., fieldname of the asset struct)\n\nReturns\n\nThe component object stored in the specified field\n\nExamples\n\nelec_edge = get_component_by_fieldname(thermal_plant, :elec_edge)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#get_component_ids","page":"Utilities","title":"get_component_ids","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.get_component_ids","page":"Utilities","title":"MacroEnergy.get_component_ids","text":"get_component_ids(asset::AbstractAsset)\n\nGet the IDs of all components in an asset.\n\nArguments\n\nasset: An asset object that is a subtype of AbstractAsset\n\nReturns\n\nA vector of Symbols representing the IDs of all components in the asset\n\nExamples\n\ncomponent_ids = get_component_ids(thermal_plant)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#get_component_by_id","page":"Utilities","title":"get_component_by_id","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.get_component_by_id","page":"Utilities","title":"MacroEnergy.get_component_by_id","text":"get_component_by_id(asset::AbstractAsset, component_id::Symbol)\n\nFind a component (e.g., edges, storages, transformations) of an asset by its ID.\n\nArguments\n\nasset: An asset object that is a subtype of AbstractAsset\ncomponent_id: Symbol representing the ID of the component to find\n\nReturns\n\nThe component object if found\nnothing if no component with the given ID exists\n\nExamples\n\nelec_edge = get_component_by_id(thermal_plant, :SE_natural_gas_elec_edge)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#get_edges","page":"Utilities","title":"get_edges","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.get_edges","page":"Utilities","title":"MacroEnergy.get_edges","text":"get_edges(asset::AbstractAsset; return_ids_map::Bool=false)\nget_edges(assets::Vector{<:AbstractAsset}; return_ids_map::Bool=false)\n\nGet all edges from an asset or a vector of assets. If return_ids_map=true, a Dict is also returned mapping edge ids to the corresponding asset objects.\n\nArguments\n\nasset or assets: An asset object or vector of assets that are subtypes of AbstractAsset\nreturn_ids_map: If true, also return a Dict mapping edge IDs to their corresponding assets (default: false)\n\nReturns\n\nIf return_ids_map=false: A vector of edges\nIf return_ids_map=true: A tuple of (vector of edges, Dict mapping edge IDs to assets)\n\nExamples\n\n# Get all edges from a single asset\nedges = get_edges(thermal_plant)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#get_output_layout","page":"Utilities","title":"get_output_layout","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.get_output_layout","page":"Utilities","title":"MacroEnergy.get_output_layout","text":"get_output_layout(system::System, variable::Union{Nothing,Symbol}=nothing)::String\n\nGet the output layout (\"wide\" or \"long\") for a specific variable from system settings.\n\nArguments\n\nsystem::System: System containing output layout settings\nvariable::Union{Nothing,Symbol}=nothing: Variable to get layout for (e.g., :Cost, :Flow)\n\nReturns\n\nString indicating layout format: \"wide\" or \"long\"\n\nSettings Format\n\nThe OutputLayout setting can be specified in three ways:\n\nGlobal string setting:\nsettings = (OutputLayout=\"wide\",)  # Same layout for all variables\nPer-variable settings using NamedTuple:\nsettings = (OutputLayout=(Cost=\"wide\", Flow=\"long\"),)\nDefault behavior:\nReturns \"long\" if setting is missing or invalid\nLogs warning for unsupported types or missing variables\n\nExamples\n\n# Global layout\nsystem = System(settings=(OutputLayout=\"wide\",))\nget_output_layout(system, :Cost)  # Returns \"wide\"\n\n# Per-variable layout\nsystem = System(settings=(OutputLayout=(Cost=\"wide\", Flow=\"long\"),))\nget_output_layout(system, :Cost)  # Returns \"wide\"\nget_output_layout(system, :Flow)  # Returns \"long\"\nget_output_layout(system, :Other) # Returns \"long\" with warning\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#get_value","page":"Utilities","title":"get_value","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.get_value","page":"Utilities","title":"MacroEnergy.get_value","text":"get_value(dict::AbstractDict, keys::Vector{Symbol})\n\nGet the value from a dictionary based on a sequence of keys.\n\nArguments\n\ndict::AbstractDict: The dictionary from which to retrieve the value.\nkeys::Vector{Symbol}: The sequence of keys to traverse the dictionary.\n\nReturns\n\nThe value retrieved from the dictionary based on the given keys.\n\nExamples\n\ndict = Dict(:a => Dict(:b => 1, :c => Dict(:b => 2)))\nget_value(dict, [:a, :b]) # returns 1\nget_value(dict, [:a, :c, :b]) # returns 2\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#get_value_and_keys","page":"Utilities","title":"get_value_and_keys","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.get_value_and_keys","page":"Utilities","title":"MacroEnergy.get_value_and_keys","text":"get_value_and_keys(dict::AbstractDict, target_key::Symbol, keys=Symbol[])\n\nRecursively searches for a target key in a dictionary and returns a list of  tuples containing the value associated with the target key and the keys leading  to it. This function is used to replace the path to a timeseries file with the actual vector of data.\n\nArguments\n\ndict::AbstractDict: The (nested) dictionary to search in.\ntarget_key::Symbol: The key to search for.\nkeys=Symbol[]: (optional) The keys leading to the current dictionary.\n\nReturns\n\nvalue_keys: A list of tuples, where each tuple contains                - the value associated with the target key               - the keys leading to it in the nested dictionary.\n\nExamples\n\ndict = Dict(:a => Dict(:b => 1, :c => Dict(:b => 2)))\nget_value_and_keys(dict, :b) # returns [(1, [:a, :b]), (2, [:a, :c, :b])]\n\nWhere the first element of the tuple is the value of the key :b and the second  element is the list of keys to reach that value.\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#filter_edges_by_asset_type!","page":"Utilities","title":"filter_edges_by_asset_type!","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.filter_edges_by_asset_type!","page":"Utilities","title":"MacroEnergy.filter_edges_by_asset_type!","text":"filter_edges_by_asset_type!(edges::Vector{AbstractEdge}, asset_type::Union{Symbol,Vector{Symbol}}, edge_asset_map::Dict{Symbol,Base.RefValue{<:AbstractAsset}})\n\nFilter edges and their associated assets by asset type.\n\nArguments\n\nedges::Vector{AbstractEdge}: Edges to filter\nasset_type::Union{Symbol,Vector{Symbol}}: Target asset type(s)\nedge_asset_map::Dict{Symbol,Base.RefValue{<:AbstractAsset}}: Mapping of edges to assets\n\nEffects\n\nModifies edges in-place to keep only edges matching the asset type\nModifies edge_asset_map to keep only matching assets\n\nThrows\n\nArgumentError: If none of the requested asset types are found in the system\n\nExample\n\nfilter_edges_by_asset_type!(edges, :Battery, edge_asset_map)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#filter_edges_by_commodity!","page":"Utilities","title":"filter_edges_by_commodity!","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.filter_edges_by_commodity!","page":"Utilities","title":"MacroEnergy.filter_edges_by_commodity!","text":"filter_edges_by_commodity!(edges::Vector{AbstractEdge}, commodity::Union{Symbol,Vector{Symbol}}, edge_asset_map::Dict{Symbol,Base.RefValue{<:AbstractAsset}}=Dict{Symbol,Base.RefValue{<:AbstractAsset}}())\n\nFilter the edges by commodity and update the edgeassetmap to match the filtered edges (optional).\n\nArguments\n\nedges::Vector{AbstractEdge}: The edges to filter\ncommodity::Union{Symbol,Vector{Symbol}}: The commodity to filter by\nedge_asset_map::Dict{Symbol,Base.RefValue{<:AbstractAsset}}: The edgeassetmap to update (optional)\n\nEffects\n\nModifies edges in-place to keep only edges matching the commodity type\nIf edge_asset_map is provided, filters it to match remaining edges\n\nExample\n\nfilter_edges_by_commodity!(edges, :Electricity)\nfilter_edges_by_commodity!(edges, [:Electricity, :NaturalGas], edge_asset_map)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#find_available_path","page":"Utilities","title":"find_available_path","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.find_available_path","page":"Utilities","title":"MacroEnergy.find_available_path","text":"find_available_path(path::String, basename::String=\"results\"; max_attempts::Int=999)\n\nChoose an available output directory with the name \"basename_<number>\" by appending incremental numbers to the base path.\n\nArguments\n\npath::String: Base path for the output directory.\nbasename::String: Base name of the output directory.\nmax_attempts::Int: Maximum number of attempts to find an available directory (default is 999).\n\nReturns\n\nString: Full path to the chosen output directory.\n\nThe function first expands the given path to its full path and then attempts to find an available directory by appending incremental numbers (e.g., \"basename001\", \"basename002\") up to max_attempts times. If an available directory is found, it returns the full path to that directory. If no available directory is found after max_attempts attempts, it raises an error.\n\nExample\n\njulia> path = \"path/to/output\"\njulia> output_path = find_available_path(path)\n# Returns \"path/to/output/results_001\" or \"path/to/output/results_002\" etc.\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#find_node","page":"Utilities","title":"find_node","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.find_node","page":"Utilities","title":"MacroEnergy.find_node","text":"find_node(nodes_list::Vector{Union{Node, Location}}, id::Symbol, commodity::Union{Missing,DataType}=missing)\n\nSearch for a node with the specified id and optional commodity type in a list of nodes and locations.\n\nArguments\n\nnodes_list: Vector of nodes and locations to search through\nid: Symbol representing the ID of the node to find\ncommodity: Optional DataType specifying the commodity type of the node (default: missing)\n\nReturns\n\nThe found node if it exists\nThrows an error if no matching node is found\n\nExamples\n\n# Find a node by ID only\nnode = find_node(system.locations, :co2_sink)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#id","page":"Utilities","title":"id","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.id","page":"Utilities","title":"MacroEnergy.id","text":"id(v::AbstractVertex)\n\nGet the unique identifier (ID) of a vertex.\n\nArguments\n\nv: A vertex object that is a subtype of AbstractVertex (i.e., Node, Storage, Transformation)\n\nReturns\n\nA Symbol representing the vertex's unique identifier\n\nExamples\n\nvertex_id = id(elec_node)\n\n\n\n\n\nid(asset::AbstractAsset)\n\nGet the unique identifier (ID) of an asset.\n\nArguments\n\nasset: An asset object that is a subtype of AbstractAsset\n\nReturns\n\nA Symbol representing the asset's unique identifier\n\nExamples\n\nthermal_plant = get_asset_by_id(system, :SE_natural_gas)\nasset_id = id(thermal_plant)  # Returns the ID of the thermal plant\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#json_to_csv","page":"Utilities","title":"json_to_csv","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.json_to_csv","page":"Utilities","title":"MacroEnergy.json_to_csv","text":"json_to_csv(json_data::AbstractDict{Symbol, Any}, vec_data::VectorData=VectorData(), nesting_str::AbstractString=\"--\")\n\nConvert a JSON object to a CSV file. The Dict should contain a single \nasset described by :type, :instance_data, and possibly :global_data fields.\n\n# Arguments\n- `json_data`: The JSON object to convert.\n- `vec_data`: The VectorData object to store the timeseries or other vector data in.\n- `nesting_str`: The string used to denote nested properties.\n\n# Returns\n- A vector of OrderedDicts containing the data for each instance\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#location_ids","page":"Utilities","title":"location_ids","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.location_ids","page":"Utilities","title":"MacroEnergy.location_ids","text":"location_ids(system::System)\n\nGet a vector of the IDs of all locations in the system.\n\nArguments\n\nsystem: A System object containing various locations\n\nReturns\n\nA vector of Symbols representing the IDs of all locations in the system\n\nExamples\n\nids = location_ids(system)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#print_struct_info","page":"Utilities","title":"print_struct_info","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.print_struct_info","page":"Utilities","title":"MacroEnergy.print_struct_info","text":"print_struct_info(asset::AbstractAsset)\n\nPrint fields and types of a given asset.\n\nArguments\n\nasset: An asset object that is a subtype of AbstractAsset\n\nExamples\n\nthermal_plant = get_asset_by_id(system, :SE_natural_gas_fired_combined_cycle_1)\nprint_struct_info(thermal_plant)  # Prints the fields and types of the asset\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#reshape_wide","page":"Utilities","title":"reshape_wide","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.reshape_wide","page":"Utilities","title":"MacroEnergy.reshape_wide","text":"reshape_wide(df::DataFrame; variable_col::Symbol=:variable, value_col::Symbol=:value)\n\nReshape a DataFrame from long to wide format.\n\nArguments\n\ndf::DataFrame: Input DataFrame\nvariable_col::Symbol: Column name containing variable names\nvalue_col::Symbol: Column name containing values\n\nExamples\n\ndf_long = DataFrame(id=[1,1,2,2], variable=[:a,:b,:a,:b], value=[10,30,20,40])\ndf_wide = reshape_wide(df_long)\n\n\n\n\n\nreshape_wide(df::DataFrame, id_cols::Union{Vector{Symbol},Symbol}, variable_col::Symbol, value_col::Symbol)\n\nReshape a DataFrame from long to wide format.\n\nArguments\n\ndf::DataFrame: DataFrame in long format to be reshaped\nid_cols::Union{Vector{Symbol},Symbol}: Column(s) to use as identifiers\nvariable_col::Symbol: Column containing variable names that will become new columns\nvalue_col::Symbol: Column containing values that will fill the new columns\n\nReturns\n\nDataFrame: Reshaped DataFrame in wide format\n\nThrows\n\nArgumentError: If required columns are not present in the DataFrame\n\nExamples\n\ndf_wide = reshape_wide(df, :year, :variable, :value)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#reshape_long","page":"Utilities","title":"reshape_long","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.reshape_long","page":"Utilities","title":"MacroEnergy.reshape_long","text":"reshape_long(df::DataFrame; id_cols::Vector{Symbol}=Symbol[], view::Bool=true)\n\nReshape a DataFrame from wide to long format.\n\nArguments\n\ndf::DataFrame: Input DataFrame\nid_cols::Vector{Symbol}: Columns to use as identifiers when stacking\nview::Bool: Whether to return a view of the DataFrame instead of a copy\n\nExamples\n\ndf_wide = DataFrame(id=[1,2], a=[10,20], b=[30,40])\ndf_long = reshape_long(df_wide, :time, :component_id, :value)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#search_assets","page":"Utilities","title":"search_assets","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.search_assets","page":"Utilities","title":"MacroEnergy.search_assets","text":"search_assets(asset_type, available_types)\n\nSearch for asset types in a list of available assets, supporting wildcards and parametric types.\n\nArguments\n\nasset_type::Union{AbstractString,Vector{<:AbstractString}}: Type(s) to search for\navailable_types::Vector{<:AbstractString}: Available asset types to search from\n\nReturns\n\nTuple of two vectors:\n\nVector{Symbol}: Found asset types\nVector{Symbol}: Missing asset types (only if no matches found)\n\nPattern Matching\n\nSupports three types of matches:\n\nExact match: \"Battery\" matches \"Battery\"\nParametric match: \"ThermalPower\" matches \"ThermalPower{Fuel}\"\nWildcard match: \"ThermalPower*\" matches both \"ThermalPower{Fuel}\" and \"ThermalPowerCCS{Fuel}\"\n\nExamples\n\n# Available assets\nassets = [\"Battery\", \"ThermalPower{Coal}\", \"ThermalPower{Gas}\"]\n\n# Exact match\nfound, missing = search_assets(\"Battery\", assets)\n# found = [:Battery], missing = []\n\n# Parametric match\nfound, missing = search_assets(\"ThermalPower\", assets)\n# found = [:ThermalPower{Coal}, :ThermalPower{Gas}], missing = []\n\n# Wildcard match\nfound, missing = search_assets(\"ThermalPower*\", assets)\n# found = [:ThermalPower{Coal}, :ThermalPower{Gas}], missing = []\n\n# Multiple types\nfound, missing = search_assets([\"Battery\", \"Solar\"], assets)\n# found = [:Battery], missing = [:Solar]\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#search_commodities","page":"Utilities","title":"search_commodities","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.search_commodities","page":"Utilities","title":"MacroEnergy.search_commodities","text":"search_commodities(commodities, available_commodities)\n\nSearch for commodity types in a list of available commodities, supporting wildcards and subtypes.\n\nArguments\n\ncommodities::Union{AbstractString,Vector{<:AbstractString}}: Commodity type(s) to search for\navailable_commodities::Vector{<:AbstractString}: Available commodity types to search from\n\nReturns\n\nTuple of two vectors:\n\nVector{Symbol}: Found commodity types\nVector{Symbol}: Missing commodity types (only if no matches found)\n\nPattern Matching\n\nSupports two types of matches:\n\nExact match: \"Electricity\" matches only \"Electricity\"\nWildcard match: \"CO2*\" matches both CO2 and its subtypes (e.g., CO2Captured)\n\nExamples\n\n# Available commodities\ncommodities = [\"Electricity\", \"CO2\", \"CO2Captured\"]\n\n# Exact match\nfound, missing = search_commodities(\"Electricity\", commodities)\n# found = [:Electricity], missing = []\n\n# Wildcard match\nfound, missing = search_commodities(\"CO2*\", commodities)\n# found = [:CO2, :CO2Captured], missing = []\n\n# Multiple types\nfound, missing = search_commodities([\"Electricity\", \"Heat\"], commodities)\n# found = [:Electricity], missing = [:Heat]\n\nnote: Note\nWildcard searches check against registered commodity types in MacroEnergy.jl.\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#set_value","page":"Utilities","title":"set_value","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.set_value","page":"Utilities","title":"MacroEnergy.set_value","text":"set_value(dict::AbstractDict, keys::Vector{Symbol}, new_value)\n\nSet the value of a nested dictionary given a list of keys.\n\nArguments\n\ndict::AbstractDict: The dictionary to modify.\nkeys::Vector{Symbol}: A list of keys representing the path to the value to \n\nbe modified.\n\nnew_value: The new value to set.\n\nExamples\n\ndict = Dict(:a => Dict(:b => 1, :c => Dict(:b => 2)))\nset_value(dict, [:a, :b], 3)\nget_value(dict, [:a, :b]) # returns 3\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#struct_info","page":"Utilities","title":"struct_info","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.struct_info","page":"Utilities","title":"MacroEnergy.struct_info","text":"struct_info(t::Type{T}) where T\n\nReturn a vector of tuples with the field names and types of a struct.\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#timestepbefore","page":"Utilities","title":"timestepbefore","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.timestepbefore","page":"Utilities","title":"MacroEnergy.timestepbefore","text":"timestepbefore(t::Int, h::Int,subperiods::Vector{StepRange{Int64,Int64})\n\nDetermines the time step that is h steps before index t in subperiod p with circular indexing.\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#collect_flow_results","page":"Utilities","title":"collect_flow_results","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.collect_flow_results","page":"Utilities","title":"MacroEnergy.collect_flow_results","text":"Collect flow results from all subproblems, handling distributed case.\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#collect_local_flows","page":"Utilities","title":"collect_local_flows","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.collect_local_flows","page":"Utilities","title":"MacroEnergy.collect_local_flows","text":"Collect flow results from local subproblems.\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#collect_distributed_flows","page":"Utilities","title":"collect_distributed_flows","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.collect_distributed_flows","page":"Utilities","title":"MacroEnergy.collect_distributed_flows","text":"Collect flow results from subproblems on distributed workers.\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#evaluate_vtheta_in_expression","page":"Utilities","title":"evaluate_vtheta_in_expression","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.evaluate_vtheta_in_expression","page":"Utilities","title":"MacroEnergy.evaluate_vtheta_in_expression","text":"Evaluate the expression expr for a specific period using operational subproblem solutions.\n\nArguments\n\nm::Model: JuMP model containing vTHETA variables and the expression expr to evaluate\nexpr::Symbol: The expression to evaluate\nsubop_sol::Dict: Dictionary mapping subproblem indices to their operational costs\nsubop_indices::Vector{Int64}: The subproblem indices to evaluate\n\nReturns\n\nThe evaluated expression for the specified period \n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/","page":"Utilities","title":"Utilities","text":"","category":"page"},{"location":"Manual/manual_introduction/#Manual","page":"Introduction","title":"Manual","text":"","category":"section"},{"location":"Manual/manual_introduction/","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"Manual/Constraints/#Constraints","page":"Constraints","title":"Constraints","text":"","category":"section"},{"location":"Manual/Constraints/","page":"Constraints","title":"Constraints","text":"","category":"page"},{"location":"Manual/assets/mustrun/#Must-Run","page":"Must Run","title":"Must Run","text":"","category":"section"},{"location":"Manual/assets/mustrun/#Contents","page":"Must Run","title":"Contents","text":"","category":"section"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"Overview | Asset Structure | Input File (Standard Format) | Types - Asset Structure | Constructors | Examples | Best Practices | Input File (Advanced Format)","category":"page"},{"location":"Manual/assets/mustrun/#mustrun_overview","page":"Must Run","title":"Overview","text":"","category":"section"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"Must-run assets in Macro represent electricity generation technologies that must operate at their full available capacity when available. These assets are typically used for small hydroelectric plants, or other generation that has contractual or operational requirements to run when available. They are defined using either JSON or CSV input files placed in the assets directory, typically named with descriptive identifiers like mustrun.json or mustrun.csv.","category":"page"},{"location":"Manual/assets/mustrun/#mustrun_asset_structure","page":"Must Run","title":"Asset Structure","text":"","category":"section"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"A must-run asset consists of two main components:","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"Transformation Component\nElectricity Edge: Represents the electricity production flow to the grid","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"Here is a graphical representation of the must-run asset:","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph MustRun\n  direction LR\n  A{{..}} e1@--> B((Electricity))\n  e1@{ animate: true }\n end\n    style A fill:black,stroke:black,color:black;\n    style B fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n    \n    linkStyle 0 stroke:#FFD700, stroke-width: 2px, stroke-dasharray: 5 5;","category":"page"},{"location":"Manual/assets/mustrun/#mustrun_input_file","page":"Must Run","title":"Input File (Standard Format)","text":"","category":"section"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"The easiest way to include a must-run asset in a model is to create a new file (either JSON or CSV) and place it in the assets directory together with the other assets. ","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"your_case/\n├── assets/\n│   ├── mustrun.json    # or mustrun.csv\n│   ├── other_assets.json\n│   └── ...\n├── system/\n├── settings/\n└── ...","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"This file can either be created manually, or using the template_asset function, as shown in the Adding an Asset to a System section of the User Guide. The file will be automatically loaded when you run your Macro model. ","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"The following is an example of a must-run asset input file:","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"{\n    \"mustrun\": [\n        {\n            \"type\": \"MustRun\",\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_small_hydroelectric_1\",\n                    \"location\": \"SE\",\n                    \"can_expand\": false,\n                    \"can_retire\": false,\n                    \"fixed_om_cost\": 45648,\n                    \"existing_capacity\": 249.895,\n                    \"capacity_size\": 1.219,\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"SE_small_hydroelectric_1\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"tip: Global Data vs Instance Data\nWhen working with JSON input files, the global_data field can be used to group data that is common to all instances of the same asset type. This is useful for setting constraints that are common to all instances of the same asset type and avoid repeating the same data for each instance. See the Examples section below for an example.","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"The following tables outline the attributes that can be set for a must-run asset.","category":"page"},{"location":"Manual/assets/mustrun/#Essential-Attributes","page":"Must Run","title":"Essential Attributes","text":"","category":"section"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"Field Type Description\nType String Asset type identifier: \"MustRun\"\nid String Unique identifier for the must-run instance\nlocation String Geographic location/node identifier","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"Users can refer to the Adding Asset Constraints to a System section of the User Guide for a list of all the constraints that can be applied to a must-run asset.","category":"page"},{"location":"Manual/assets/mustrun/#\"mustrun_constraints\"","page":"Must Run","title":"Constraints configuration","text":"","category":"section"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"Must-run assets can have different constraints applied to them, and the user can configure them using the following fields:","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"Field Type Description\ntransform_constraints Dict{String,Bool} List of constraints applied to the transformation component.\nedge_constraints Dict{String,Bool} List of constraints applied to the electricity edge.","category":"page"},{"location":"Manual/assets/mustrun/#Default-constraints","page":"Must Run","title":"Default constraints","text":"","category":"section"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"To simplify the input file and the asset configuration, the following constraints are applied to the must-run asset by default:","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"Balance constraint (applied to the transformation component)\nMust run constraint (applied to the electricity edge)","category":"page"},{"location":"Manual/assets/mustrun/#Investment-Parameters","page":"Must Run","title":"Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"Field Type Description Units Default\ncan_retire Boolean Whether must-run capacity can be retired - true\ncan_expand Boolean Whether must-run capacity can be expanded - true\nexisting_capacity Float64 Initial installed capacity MW 0.0\ncapacity_size Float64 Unit size for capacity decisions - 1.0","category":"page"},{"location":"Manual/assets/mustrun/#Additional-Investment-Parameters","page":"Must Run","title":"Additional Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"Maximum and minimum capacity constraints","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"If MaxCapacityConstraint or MinCapacityConstraint are added to the constraints dictionary for the electricity edge, the following parameters are used by Macro:","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"Field Type Description Units Default\nmax_capacity Float64 Maximum allowed must-run capacity MW Inf\nmin_capacity Float64 Minimum allowed must-run capacity MW 0.0","category":"page"},{"location":"Manual/assets/mustrun/#Economic-Parameters","page":"Must Run","title":"Economic Parameters","text":"","category":"section"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"Field Type Description Units Default\ninvestment_cost Float64 CAPEX per unit capacity $/MW 0.0\nannualized_investment_cost Union{Nothing,Float64} Annualized CAPEX $/MW/yr calculated\nfixed_om_cost Float64 Fixed O&M costs $/MW/yr 0.0\nvariable_om_cost Float64 Variable O&M costs $/MWh 0.0\nwacc Float64 Weighted average cost of capital fraction 0.0\nlifetime Int Asset lifetime in years years 1\ncapital_recovery_period Int Investment recovery period years 1\nretirement_period Int Retirement period years 0","category":"page"},{"location":"Manual/assets/mustrun/#Operational-Parameters","page":"Must Run","title":"Operational Parameters","text":"","category":"section"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"Field Type Description Units Default\navailability Dict Availability file path and header - Empty","category":"page"},{"location":"Manual/assets/mustrun/#mustrun_type_definition","page":"Must Run","title":"Types - Asset Structure","text":"","category":"section"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"The MustRun asset is defined as follows:","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"struct MustRun <: AbstractAsset\n    id::AssetId\n    energy_transform::Transformation\n    elec_edge::Edge{<:Electricity}\nend","category":"page"},{"location":"Manual/assets/mustrun/#mustrun_constructors","page":"Must Run","title":"Constructors","text":"","category":"section"},{"location":"Manual/assets/mustrun/#Default-constructor","page":"Must Run","title":"Default constructor","text":"","category":"section"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"MustRun(id::AssetId, energy_transform::Transformation, elec_edge::Edge{<:Electricity})","category":"page"},{"location":"Manual/assets/mustrun/#Factory-constructor","page":"Must Run","title":"Factory constructor","text":"","category":"section"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"make(asset_type::Type{MustRun}, data::AbstractDict{Symbol,Any}, system::System)","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"Field Type Description\nasset_type Type{MustRun} Macro type of the asset\ndata AbstractDict{Symbol,Any} Dictionary containing the input data for the asset\nsystem System System to which the asset belongs","category":"page"},{"location":"Manual/assets/mustrun/#mustrun_examples","page":"Must Run","title":"Examples","text":"","category":"section"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"This section contains examples of how to use the must-run asset in a Macro model.","category":"page"},{"location":"Manual/assets/mustrun/#Multiple-must-run-assets-in-different-zones","page":"Must Run","title":"Multiple must-run assets in different zones","text":"","category":"section"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"This example shows three small hydroelectric plants in different regions, with existing and fixed capacity (capacity cannot be expanded or retired).","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"JSON Format:","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"Note that the global_data field is used to set the fields that are common to all instances of the same asset type.","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"{\n    \"mustrun\": [\n        {\n            \"type\": \"MustRun\",\n            \"global_data\": {\n                \"can_expand\": false,\n                \"can_retire\": false,\n                \"fixed_om_cost\": 45648\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_small_hydroelectric_1\",\n                    \"location\": \"SE\",\n                    \"existing_capacity\": 249.895,\n                    \"capacity_size\": 1.219,\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"SE_small_hydroelectric_1\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_small_hydroelectric_1\",\n                    \"location\": \"MIDAT\",\n                    \"existing_capacity\": 263.268,\n                    \"capacity_size\": 1.236,\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"MIDAT_small_hydroelectric_1\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_small_hydroelectric_1\",\n                    \"location\": \"NE\",\n                    \"existing_capacity\": 834.494,\n                    \"capacity_size\": 1.051,\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"NE_small_hydroelectric_1\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"CSV Format:","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"Type id location can_expand can_retire fixed_om_cost existing_capacity capacity_size availability–timeseries–path availability–timeseries–header\nMustRun SE_small_hydroelectric_1 SE false false 45648 249.895 1.219 system/availability.csv SE_small_hydroelectric_1\nMustRun MIDAT_small_hydroelectric_1 MIDAT false false 45648 263.268 1.236 system/availability.csv MIDAT_small_hydroelectric_1\nMustRun NE_small_hydroelectric_1 NE false false 45648 834.494 1.051 system/availability.csv NE_small_hydroelectric_1","category":"page"},{"location":"Manual/assets/mustrun/#mustrun_best_practices","page":"Must Run","title":"Best Practices","text":"","category":"section"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"Use global data for common fields: Use the global_data field to set the fields that are common to all instances of the same asset type.\nSet realistic availability profiles: Ensure availability profiles reflect actual operational constraints\nUse meaningful IDs: Choose descriptive identifiers that indicate location and technology type\nConsider capacity constraints: Set appropriate capacity limits based on technology and location\nUse constraints selectively: Only enable constraints that are necessary for your modeling needs\nValidate costs: Ensure investment and O&M costs are in appropriate units\nTest configurations: Start with simple configurations and gradually add complexity","category":"page"},{"location":"Manual/assets/mustrun/#mustrun_advanced_json_csv_input_format","page":"Must Run","title":"Input File (Advanced Format)","text":"","category":"section"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"Macro provides an advanced format for defining must-run assets, offering users and modelers detailed control over asset specifications. This format builds upon the standard format and is ideal for those who need more comprehensive customization.","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"To understand the advanced format, consider the graph representation and the type definition of a must-run asset. The input file mirrors this hierarchical structure.","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"A must-run asset in Macro is composed of a transformation component, represented by a Transformation object, and an electricity edge, represented by an Edge object. The input file for a must-run asset is therefore organized as follows:","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"{\n    \"transforms\": {\n        // ... transformation-specific attributes ...\n    },\n    \"edges\": {\n        \"elec_edge\": {\n            // ... electricity_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"Each top-level key (such as \"transforms\" or \"edges\") represents a type of component. The second-level keys either define the attributes of the component (for storage and transformation components) or specify the instances of the component (for edges). For edges, a third-level key provides the attributes for each specific instance.","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"Below is an example of an input file for a must-run asset that sets up three small hydroelectric plants in different regions.","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"{\n    \"mustrun\": [\n        {\n            \"type\": \"MustRun\",\n            \"global_data\": {\n                \"nodes\": {},\n                \"transforms\": {\n                    \"timedata\": \"Electricity\"\n                },\n                \"edges\": {\n                    \"elec_edge\": {\n                        \"unidirectional\": true,\n                        \"can_expand\": false,\n                        \"can_retire\": false,\n                        \"has_capacity\": true,\n                        \"constraints\": {\n                            \"MustRunConstraint\": true\n                        }\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_small_hydroelectric_1\",\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"existing_capacity\": 249.895,\n                            \"capacity_size\": 1.219,\n                            \"fixed_om_cost\": 45648,\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"system/availability.csv\",\n                                    \"header\": \"SE_small_hydroelectric_1\"\n                                }\n                            }\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_small_hydroelectric_1\",\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_MIDAT\",\n                            \"existing_capacity\": 263.268,\n                            \"capacity_size\": 1.236,\n                            \"fixed_om_cost\": 45648,\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"system/availability.csv\",\n                                    \"header\": \"MIDAT_small_hydroelectric_1\"\n                                }\n                            }\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_small_hydroelectric_1\",\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_NE\",\n                            \"existing_capacity\": 834.494,\n                            \"capacity_size\": 1.051,\n                            \"fixed_om_cost\": 45648,\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"system/availability.csv\",\n                                    \"header\": \"NE_small_hydroelectric_1\"\n                                }\n                            }\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/mustrun/#Key-Points","page":"Must Run","title":"Key Points","text":"","category":"section"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"The global_data field is utilized to define attributes and constraints that apply universally to all instances of a particular asset type.\nThe end_vertex field indicates the node to which the electricity edge is connected. This node must be defined in the nodes.json file.\nFor a comprehensive list of attributes that can be configured for the transformation and edge components, refer to the transformations and edges pages of the Macro manual.","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/#Energy-System-Graph-Based-Representation","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"This section of the documentation provides an overview of how Locations and Assets are internally represented in Macro, to help modelers create new sectors and assets effectively.","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/#Sector-Networks","page":"Energy System Graph-Based Representation","title":"Sector Networks","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"As mentioned in the Getting Started section, Macro is structured around two main components:","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"Locations: Represent geographical areas with some demand or supply for several commodities.\nAssets: Represent means of producing, storing, transporting, and consuming one or more commodities. Each asset can be sited at a specific location.","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"(Image: high_level_macro)","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"While this high-level view is useful, modeling new sectors and assets often requires a deeper understanding of how Locations and Assets are internally structured. In Macro, the energy system is modeled as a collection of interconnected sector networks. Each sector network includes nodes and edges:","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"Nodes: represent the demand or supply for a specific commodity or sector.\nEdges: represent the flow of commodities between nodes.","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"More importantly, sector networks are connected through elements called transformations. A transformation is a special type of vertex in the full network that connects two or more commodity networks. It represents a physical conversion process, such as an electrolyzer, natural gas power plant, or biorefinery.","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"So, in the full network, the definitions of Locations and Assets are expanded as follows:","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"Locations: Collection of nodes, each indicating demand or supply for one or more commodities.\nAssets: Collection of transformation vertices representing conversion processes, storage, and edges connecting nodes across different commodity networks.","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"Therefore, the high-level figure above can be expanded into the following detailed representation:","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"(Image: multi-commodity flow network)","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"This figure illustrates the internal structure of the energy system. Each location is expanded to show sector-specific nodes and edges. Yellow nodes represent demand in the electricity sector, light blue nodes represent natural gas nodes (modeled exogenously in this example), and the grey node represents a CO₂ sink.","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"The next section outlines the core components of Macro and how they work together to model an energy system.","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/#Macro-Internal-Components","page":"Energy System Graph-Based Representation","title":"Macro Internal Components","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"As seen in the previous section, an energy system in Macro is composed of the following components:","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"Vertices: Represent balance equations.\nThere are three types of vertices in Macro:\nNodes: Represent demand (outflow) or supply (inflow) of a commodity.\nTransformations: Represent conversion processes. These are special vertices that convert one or more commodity types into one or more other types. Each transformation is defined by a set of stoichiometric equations specifying conversion ratios.\nStorage: Represent storage systems that hold commodities for future use. The flow of commodities into and out of storage is governed by storage balance equations.\nEdges: Represent the flow of commodities into or out of a vertex.\nCapacity sizing decisions, CAPEX/OPEX, and both planning and operational constraints are associated with edges.","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"By combining these components, Macro enables the fast and flexible assembly of new technologies and sectors.","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"In the following sections, we’ll describe how to create new sectors and assets, as well as how to debug and test the resulting system.","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"","category":"page"},{"location":"Manual/Locations/#Locations","page":"Locations","title":"Locations","text":"","category":"section"},{"location":"Manual/Locations/#Contents","page":"Locations","title":"Contents","text":"","category":"section"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Overview | Fields | Types | Constructors | Methods | Examples","category":"page"},{"location":"Manual/Locations/#manual-locations-overview","page":"Locations","title":"Overview","text":"","category":"section"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Locations are compound components in Macro that represent geographic or conceptual places in an energy system. They serve as containers for collections of Nodes, where each Node has a different Commodity or sub-Commodity type. Locations are one of the core organizational concepts in Macro, alongside Assets.","category":"page"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"The primary purpose of Locations is to simplify the construction and management of complex energy system models. Rather than requiring users to manually connect individual Edges of Assets to specific Nodes for each commodity type, the Asset as a whole can be connected to a Location and Macro will automatically handle the routing and connection of the appropriate Edges and Nodes within that Location. This abstraction makes model building more intuitive and less error-prone.","category":"page"},{"location":"Manual/Locations/#Location-Structure-and-Node-Management","page":"Locations","title":"Location Structure and Node Management","text":"","category":"section"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Each Location maintains a collection of Nodes organized by commodity type, with each Node handling flows of a specific Commodity. The Location uses a Set to track the commodity types of all Nodes it contains, ensuring that only one Node per commodity type exists within any given Location. This constraint maintains clarity about which Node handles each commodity type and how Edges should be routed.","category":"page"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"When a user attempts to add a Node to a Location that already contains a Node of the same commodity type, the system will throw an error unless explicitly instructed to replace the existing Node. This safeguard helps maintain model consistency and prevents accidental overwrites of important network components. Macro can also be configured to automatically create new Nodes for commodity types that do not already exist in the Location, streamlining the process of adding new components to the model.","category":"page"},{"location":"Manual/Locations/#Simplified-Model-Construction","page":"Locations","title":"Simplified Model Construction","text":"","category":"section"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"The Location abstraction makes building energy systems much more intuitive because it mirrors how people naturally think about energy infrastructure. Physical equipment like power plants, storage facilities, and transmission lines are typically associated with specific geographic locations. By organizing the model around Locations, users can construct systems that directly correspond to real-world geography and infrastructure layout.","category":"page"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"When Assets are connected to Locations rather than individual Nodes, Macro automatically determines the appropriate connections based on the commodity types involved in the Asset's operation. For example, a natural gas power plant Asset connected to a Location will automatically have its gas input connected to the Location's natural gas Node and its electricity output connected to the Location's electricity Node. This automatic routing eliminates much of the manual wiring that would otherwise be required.","category":"page"},{"location":"Manual/Locations/#Physical-and-Logical-Modeling","page":"Locations","title":"Physical and Logical Modeling","text":"","category":"section"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Locations can represent both physical geographic areas (such as cities, regions, or specific sites) and logical groupings (such as market zones or administrative areas). This flexibility allows users to organize their models at the appropriate level of detail for their analysis needs. A national energy system model might use Locations to represent states or provinces, while a local energy system model might use Locations to represent individual buildings or districts.","category":"page"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"The Location concept also supports hierarchical thinking about energy systems, where larger geographic areas contain multiple smaller areas, each with their own local energy infrastructure and commodity flows. While Macro doesn't enforce hierarchical relationships between Locations, users can organize their models to reflect these real-world structures.","category":"page"},{"location":"Manual/Locations/#Key-Concepts","page":"Locations","title":"Key Concepts","text":"","category":"section"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Node Collection: Locations contain multiple Nodes, each handling a specific commodity type at that location\nAutomatic Routing: Assets connected to Locations automatically route to appropriate Nodes based on commodity types\nCommodity Uniqueness: Each Location enforces one Node per commodity or sub-commodity type using a tracking Set\nSimplified Modeling: Locations make model construction intuitive by mirroring real-world geographic organization\nFlexible Abstraction: Can represent physical locations or logical groupings depending on modeling needs\nError Prevention: Automatic checking prevents duplicate commodity Nodes within the same Location","category":"page"},{"location":"Manual/Locations/#Location-Fields","page":"Locations","title":"Location Fields","text":"","category":"section"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Locations have the following fields. When running a model, the fields are set by the input files or programmatically when building the system.","category":"page"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"note: Units in Macro\nWe have assumed that your System is using units of MWh for energy, tonnes for mass, and hour-long time steps. You can use any set of units as long as they are consistent across your operations and investment inputs.","category":"page"},{"location":"Manual/Locations/#Identification-and-System-Reference","page":"Locations","title":"Identification and System Reference","text":"","category":"section"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Field Type Description Default\nid Symbol Unique identifier for the location -\nsystem AbstractSystem Reference to the system containing this location -","category":"page"},{"location":"Manual/Locations/#Node-Management","page":"Locations","title":"Node Management","text":"","category":"section"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Field Type Description Default\nnodes Dict{Symbol,Node} Dictionary mapping commodity symbols to nodes Dict{Symbol,Node}()\ncommodities Set{Symbol} Set of commodity symbols for nodes in this location Set{Symbol}()","category":"page"},{"location":"Manual/Locations/#manual-locations-types","page":"Locations","title":"Types","text":"","category":"section"},{"location":"Manual/Locations/#Type-Hierarchy","page":"Locations","title":"Type Hierarchy","text":"","category":"section"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Location is a subtype ofthe abstract MacroObject type:","category":"page"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"MacroObject\n├── Location\n├── AbstractAsset\n├── AbstractVertex\n└── AbstractEdge","category":"page"},{"location":"Manual/Locations/#Location","page":"Locations","title":"Location","text":"","category":"section"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"The Location type represents a geographic or conceptual place in an energy system that contains multiple nodes for different commodities.","category":"page"},{"location":"Manual/Locations/#manual-locations-constructors","page":"Locations","title":"Constructors","text":"","category":"section"},{"location":"Manual/Locations/#Keyword-Constructors","page":"Locations","title":"Keyword Constructors","text":"","category":"section"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Location(; id::Symbol, system::AbstractSystem, nodes::Dict{Symbol,Node}=Dict{Symbol,Node}(), \n         commodities::Set{Symbol}=Set{Symbol}())","category":"page"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Direct constructor using keyword arguments for all fields.","category":"page"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Parameter Type Description Required\nid Symbol Unique identifier for the location Yes\nsystem AbstractSystem Reference to the containing system Yes\nnodes Dict{Symbol,Node} Dictionary mapping commodity symbols to nodes No\ncommodities Set{Symbol} Set of commodity symbols for contained nodes No","category":"page"},{"location":"Manual/Locations/#Factory-Constructors","page":"Locations","title":"Factory Constructors","text":"","category":"section"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"load_locations!(system::AbstractSystem, rel_or_abs_path::String, data::AbstractString)\nload_locations!(system::AbstractSystem, rel_or_abs_path::String, data::Vector{<:AbstractString})\nload_locations!(system::AbstractSystem, rel_or_abs_path::String, data::AbstractDict{Symbol, Any})","category":"page"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Factory methods for loading locations from input data and adding them to a system.","category":"page"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Parameter Type Description\nsystem AbstractSystem System to add the locations to\nrel_or_abs_path String Relative or absolute path for data files\ndata String/Vector/Dict Location data (ID strings, vector, or dictionary)","category":"page"},{"location":"Manual/Locations/#manual-locations-methods","page":"Locations","title":"Methods","text":"","category":"section"},{"location":"Manual/Locations/#Accessor-Methods","page":"Locations","title":"Accessor Methods","text":"","category":"section"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Methods for accessing location data and properties.","category":"page"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Method Description Return Type\nid(location) Get location identifier Symbol","category":"page"},{"location":"Manual/Locations/#Node-Management-Methods","page":"Locations","title":"Node Management Methods","text":"","category":"section"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Methods for managing nodes within locations.","category":"page"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Method Description Return Type\nadd_node!(location, node, replace=false) Add a node to the location for its commodity type Nothing\nrefresh_commodities_list!(location) Update the commodities set based on current nodes Nothing","category":"page"},{"location":"Manual/Locations/#System-Loading-Methods","page":"Locations","title":"System Loading Methods","text":"","category":"section"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Methods for loading locations into systems from input data.","category":"page"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Method Description Return Type\nload_locations!(system, path, data::AbstractString) Load single location from a Location ID Nothing\nload_locations!(system, path, data::Vector{<:AbstractString}) Load multiple locations from vector of IDs Nothing\nload_locations!(system, path, data::AbstractDict{Symbol,Any}) Load locations from dictionary data Nothing","category":"page"},{"location":"Manual/Locations/#Model-Building-Methods-(Inherited-from-MacroObject)","page":"Locations","title":"Model Building Methods (Inherited from MacroObject)","text":"","category":"section"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Methods used internally during model construction.","category":"page"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Method Description Return Type\nadd_linking_variables!(location, model) Add linking variables to JuMP model Nothing\ndefine_available_capacity!(location, model) Define available capacity constraints Nothing\nplanning_model!(location, model) Add planning model constraints Nothing\noperation_model!(location, model) Add operational model constraints Nothing","category":"page"},{"location":"Manual/Locations/#manual-locations-examples","page":"Locations","title":"Examples","text":"","category":"section"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Currently, Locations are configured by creating and configuring Nodes and then adding them to a Location. The load_locations! function is used to load a list of Location IDs from a file. These are then populated with Nodes as needed. If the AutoCreateLocations setting is set to true, Macro can also automatically create Locations if a Node has a location field which does not match an existing Location ID. If the AutoCreateNodes setting is set to true, Macro can also automatically create Nodes for commodity types that do not already exist in the Location.","category":"page"},{"location":"Manual/Locations/#Location-File","page":"Locations","title":"Location File","text":"","category":"section"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"The Location file is a JSON file that contains a list of Location IDs. Its default location is system/locations.json. The file can be structured as follows:","category":"page"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"{\n  \"locations\": [\n    \"boston\",\n    \"princeton\",\n    \"new york\"\n  ]\n}","category":"page"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"This is not a required file, but it is a convenient way to define the Location IDs. In the future, we will add more functionality to this file, such as defining the Nodes and their commodity types.","category":"page"},{"location":"Manual/Locations/#Adding-a-Node-to-a-Location","page":"Locations","title":"Adding a Node to a Location","text":"","category":"section"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Nodes are added to a Location by including the location field in the Node input file. For example, to add Node{Electricity} to Boston and Princeton, you would define it as follows:","category":"page"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"{\n    \"nodes\": [\n        {\n            \"type\": \"Electricity\",\n            \"global_data\": {\n                \"global_data\": {\n                    \"time_interval\": \"Electricity\",\n                    \"max_nsd\": [1.0],\n                    \"price_nsd\": [5000.0],\n                    \"constraints\": {\n                        \"BalanceConstraint\": true,\n                        \"MaxNonServedDemandConstraint\": true,\n                        \"MaxNonServedDemandPerSegmentConstraint\": true\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"boston_electricity\",\n                    \"location\": \"boston\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\",\n                            \"header\": \"Demand_Boston\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"princeton_electricity\",\n                    \"location\": \"princeton\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\",\n                            \"header\": \"Demand_Princeton\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"During the System generation process, Macro will add these Nodes to the Locations specified in the location field using the add_node! method. If both Boston and Princeton already have Node{Electricity} defined, Macro will throw an error unless the replace parameter of the add_node! is set to true.","category":"page"},{"location":"Manual/Locations/#Automatically-Creating-Locations-and-Nodes","page":"Locations","title":"Automatically Creating Locations and Nodes","text":"","category":"section"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Automatic creating of Locations and Nodes can be enabled by setting the AutoCreateLocations and AutoCreateNodes flags in the system configuration (settings/macro_settings by default).","category":"page"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"{\n  \"AutoCreateNodes\":false,\n  \"AutoCreateLocations\":true,\n  // ...\n}","category":"page"},{"location":"Manual/Locations/#AutoCreateLocations","page":"Locations","title":"AutoCreateLocations","text":"","category":"section"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Using the example input from the previous section, if we did not have a locations.json input file but AutoCreateLocations is set to true, then Macro will create the Location IDs \"boston\" and \"princeton\" automatically when the corresponding Node instances are created.","category":"page"},{"location":"Manual/Locations/#AutoCreateNodes","page":"Locations","title":"AutoCreateNodes","text":"","category":"section"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Let's consider a second example where a ThermalPower{NaturalGas} Asset has a location field set to \"boston\" and that Location exists in the locations.json file. Macro will attempt to automatically connect the Edge{NaturalGas} and Edge{Electricity} of the ThermalPower{NaturalGas} Asset to the corresponding Node instances in the \"boston\" location. If one or both of these Node instances do not exist, and the AutoCreateNodes setting is set to true, Macro will automatically create the necessary Node instances for the missing commodity types.","category":"page"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Note that these Nodes will not have any exogeneous demand, supply, constraints or other properties defined. They are simply created to allow the Asset to connect to the Location without errors.","category":"page"},{"location":"Manual/Locations/#See-Also","page":"Locations","title":"See Also","text":"","category":"section"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"Nodes: Individual commodity balance points that Locations contain and manage\nEdges: Transmission and distribution infrastructure that connects nodes across locations\nSystem: The overall system container that holds locations, assets, and other components\nAssets: Energy technologies and infrastructure that connect to locations for simplified modeling","category":"page"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"","category":"page"},{"location":"Guides/Modeler Guide/modeler_workflow/#Suggested-Development-Workflow","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_workflow/","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"When developing a new model, and in general when working with Macro and Julia, we recommend that you run your models and Julia commands in a Julia REPL:","category":"page"},{"location":"Guides/Modeler Guide/modeler_workflow/","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"julia> using Macro\njulia> # Load a system\njulia> system = load_system(\"path/to/system_data.json\")\njulia> # Generate a model\njulia> model = generate_model(system)\njulia> # Set the optimizer\njulia> set_optimizer(model, optimizer)\njulia> # Run optimization\njulia> optimize!(model)\n# [... other commands ...]","category":"page"},{"location":"Guides/Modeler Guide/modeler_workflow/","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"This interactive approach is recommended instead of creating a script and running it directly from the terminal:","category":"page"},{"location":"Guides/Modeler Guide/modeler_workflow/","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"julia my_new_model.jl","category":"page"},{"location":"Guides/Modeler Guide/modeler_workflow/#Using-VS-Code","page":"Suggested Development Workflow","title":"Using VS Code","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_workflow/","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"If using VS Code, this workflow is particularly easy to implement with the Julia extension enabled. You can:","category":"page"},{"location":"Guides/Modeler Guide/modeler_workflow/","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"Open your script\nMove the cursor to any line\nPress cmd/ctrl + return/enter to execute that line in an interactive REPL\nSelect multiple lines and use the same shortcut to execute them as a group","category":"page"},{"location":"Guides/Modeler Guide/modeler_workflow/#Benefits-of-the-Interactive-Workflow","page":"Suggested Development Workflow","title":"Benefits of the Interactive Workflow","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_workflow/","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"Performance: Julia's JIT (Just-In-Time) compilation means each method is compiled the first time it's called. Subsequent calls with the same argument types will be much faster, as the compiled code is cached.\nDebugging: The REPL maintains all variables in memory, making it easier to:\nInspect variable values using @show or println\nModify and re-run code without restarting the entire program\nUse the debugger with @enter or @run\nTest small code snippets in isolation\nInteractivity: \nPlots and graphs automatically open in separate windows\nResults are immediately visible\nYou can modify parameters and re-run simulations on the fly","category":"page"},{"location":"Guides/Modeler Guide/modeler_workflow/#When-to-Use-Scripts","page":"Suggested Development Workflow","title":"When to Use Scripts","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_workflow/","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"Once your model has been thoroughly debugged and tested in the REPL, you can switch to using scripts for:","category":"page"},{"location":"Guides/Modeler Guide/modeler_workflow/","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"Production runs\nLarge-scale optimizations\nSharing data and models with others","category":"page"},{"location":"Guides/Modeler Guide/modeler_workflow/","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"Both workflows can be used interchangeably at this stage, depending on your needs.","category":"page"},{"location":"Guides/Modeler Guide/modeler_workflow/","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"In the next section, you'll find several useful methods and utilities for working with new models in Macro.","category":"page"},{"location":"Guides/Modeler Guide/modeler_workflow/","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"","category":"page"},{"location":"Guides/User Guide/4_constraints/#macro_constraint_library","page":"Macro Constraint Library","title":"Macro Constraint Library","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/","page":"Macro Constraint Library","title":"Macro Constraint Library","text":"Currently, Macro includes the following constraints:","category":"page"},{"location":"Guides/User Guide/4_constraints/#balance_constraint_ref","page":"Macro Constraint Library","title":"Balance constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{BalanceConstraint, MacroEnergy.AbstractVertex, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::BalanceConstraint, v::AbstractVertex, model::Model)\n\nAdd a balance constraint to the vertex v. \n\nIf v is a Node, a demand balance constraint is added. \nIf v is a Transformation, this constraint ensures that the stoichiometric equations linking the input and output flows are correctly balanced.\n\nbeginaligned\n    sum_substacki  in  textbalance_eqs_ids(v)  t  in  texttime_interval(v)  textbalance_eq(v i t) = 00\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#capacity_constraint_ref","page":"Macro Constraint Library","title":"Capacity constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{CapacityConstraint, Edge, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::CapacityConstraint, e::Edge, model::Model)\n\nAdd a capacity constraint to the edge e. If the edge is unidirectional, the functional form of the constraint is:\n\nbeginaligned\n    textflow(e t) leq textavailability(e t) times textcapacity(e)\nendaligned\n\nIf the edge is bidirectional, the constraint is:\n\nbeginaligned\n    i times textflow(e t) leq textavailability(e t) times textcapacity(e)\nendaligned\n\nfor each time t in time_interval(e) for the edge e and each i in {0, 1}. The function availability returns the time series of the capacity factor of the edge at time t.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{CapacityConstraint, EdgeWithUC, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::CapacityConstraint, e::EdgeWithUC, model::Model)\n\nAdd a capacity constraint to the edge e with unit commitment. If the edge is unidirectional, the functional form of the constraint is:\n\nbeginaligned\n    sum_t in texttime_interval(e) textflow(e t) leq textavailability(e t) times textcapacity(e) times textucommit(e t)\nendaligned\n\nIf the edge is bidirectional, the constraint is:\n\nbeginaligned\n    i times textflow(e t) leq textavailability(e t) times textcapacity(e) times textucommit(e t)\nendaligned\n\nfor each time t in time_interval(e) for the edge e and each i in [-1, 1]. The function availability returns the time series of the availability of the edge at time t.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#co2_capacity_constraint_ref","page":"Macro Constraint Library","title":"CO2 capacity constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/","page":"Macro Constraint Library","title":"Macro Constraint Library","text":"The CO2 capacity constraint is used to limit the amount of CO2 that can be emitted by a single CO2 node.","category":"page"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{CO2CapConstraint, Node{CO2}, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::CO2CapConstraint, n::Node{CO2}, model::Model)\n\nConstraint the CO2 emissions of CO2 on a CO2 node n to be less than or equal to the value of the rhs_policy for the CO2CapConstraint constraint type. If the price_unmet_policy is also specified, then a slack variable is added to the constraint to allow for the CO2 emissions to exceed the value of the rhs_policy, incurring in a penalty cost specified in the price_unmet_policy for the CO2CapConstraint constraint type. Please check the example case in the MacroEnergyExamples.jl repository, or the Macro Input Data section of the documentation for more information on how to specify the rhs_policy and price_unmet_policy for the CO2CapConstraint constraint type.\n\nTherefore, the functional form of the constraint is:\n\nbeginaligned\n    sum_t in texttime_interval(n) textemissions(n t) - textslack(n) leq textrhs_policy(n)\nendaligned\n\n\"Emissions\" in the above equation is the net balance of CO2 flows into and out of the CO2 node n.\n\nnote: Enabling CO2 emissions for an asset\nFor modelers: To allow for an asset to contribute to the CO2 emissions of a CO2 node, the asset must have an \"emissions\" key in its balance_data dictionary. The value of this key should be the emission_rate of the asset.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#long_duration_storage_constraints_ref","page":"Macro Constraint Library","title":"Long-duration storage constraints","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/","page":"Macro Constraint Library","title":"Macro Constraint Library","text":"These additional constraints (and variables) can be used to ensure that storage levels of long-duration storage systems do not exceed installed capacity over non-representative subperiods. ","category":"page"},{"location":"Guides/User Guide/4_constraints/","page":"Macro Constraint Library","title":"Macro Constraint Library","text":"For a complete description of the constraints, see the paper: \"Improved formulation for long-duration storage in capacity expansion models using representative periods\", Federico Parolin, Paolo Colbertaldo, Ruaridh Macdonald, 2024, https://doi.org/10.48550/arXiv.2409.19079.","category":"page"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{LongDurationStorageImplicitMinMaxConstraint, LongDurationStorage, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::LongDurationStorageImplicitMinMaxConstraint, g::LongDurationStorage, model::Model)\n\nAdds constraints to ensure that the storage levels of long-duration storage systems do not exceed installed capacity over non-representative subperiods.\n\nThe functional form of the two constraints are:\n\nbeginaligned\n    textstorage_balance(p) + textmax_storage_level(r) - textstorage_level(tstart(p)) leq textcapacity(g) \n    textstorage_balance(p) +  textmin_storage_level(r) - textstorage_level(tstart(p)) geq 0\nendaligned\n\nwhere:\n\np is a non-representative subperiod.\nr is the representative subperiod used to model p.\ntstart(p) is the first timestep of the representative subperiod r used to model the non-representative subperiod p.\nstorage_balance(p) is the balance of the storage resource at the non-representative subperiod p and is defined as \n\nbeginaligned\n    textstorage_balance(p) = (1 - textloss_fraction) times textstorage_initial(p) + fractextflow(discharge_edge tstart(p))textefficiency(discharge_edge) - textefficiency(charge_edge) times textflow(charge_edge tstart(p))\nendaligned\n\nmax_storage_level(r) and min_storage_level(r) are the maximum and minimum storage levels for the representative subperiod r, respectively. These are used to constrain the storage levels as follows:\n\nbeginaligned\n    textmin_storage_level(t) leq textstorage_level(t) leq textmax_storage_level(t)\nendaligned\n\nfor each time t in the time interval of the storage resource g. t' is the corresponding time in the representative subperiod r used to model the time interval of the storage resource g.\n\nwarning: Only applies to long duration energy storage\nThis constraint only applies to long duration energy storage resources. To model a storage technology as long duration energy storage, the user must set long_duration = true in the Storage component of the asset in the .json file. Check the the file hydropower.json in the multisectorthreezones example for an example of how to model a long duration energy storage resource.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#max_capacity_constraint_ref","page":"Macro Constraint Library","title":"Maximum capacity constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{MaxCapacityConstraint, Union{AbstractEdge, AbstractStorage}, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MaxCapacityConstraint, y::Union{AbstractEdge,AbstractStorage}, model::Model)\n\nAdd a max capacity constraint to the edge or storage y. The functional form of the constraint is:\n\nbeginaligned\n    textcapacity(y) leq textmax_capacity(y)\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#max_non_served_demand_constraint_ref","page":"Macro Constraint Library","title":"Maximum non-served demand constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{MaxNonServedDemandConstraint, Node, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MaxNonServedDemandConstraint, n::Node, model::Model)\n\nAdd a max non-served demand constraint to the node n. The functional form of the constraint is:\n\nbeginaligned\n    sum_s in textsegments_nsd(n) textnon_served_demand(n s t) leq textdemand(n t)\nendaligned\n\nfor each time t in time_interval(n) for the node n.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#max_non_served_demand_per_segment_constraint_ref","page":"Macro Constraint Library","title":"Maximum non-served demand per segment constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{MaxNonServedDemandPerSegmentConstraint, Node, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(\n    ct::MaxNonServedDemandPerSegmentConstraint,\n    n::Node,\n    model::Model,\n)\n\nAdd a max non-served demand per segment constraint to the node n. The functional form of the constraint is:\n\nbeginaligned\n    textnon_served_demand(n s t) leq textmax_non_served_demand(n s) times textdemand(n t)\nendaligned\n\nfor each segment s in segments_non_served_demand(n) and each time t in time_interval(n) for the node n. The function segments_non_served_demand returns the segments of the non-served demand of the node n as defined in the input data nodes.json.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#max_storage_level_constraint_ref","page":"Macro Constraint Library","title":"Maximum storage level constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{MaxStorageLevelConstraint, AbstractStorage, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MaxStorageLevelConstraint, g::AbstractStorage, model::Model)\n\nAdd a max storage level constraint to the storage g. The functional form of the constraint is:\n\nbeginaligned\n    textstorage_level(g t) leq textmax_storage_level(g) times textcapacity(g)\nendaligned\n\nfor each time t in time_interval(g) for the storage g.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#min_capacity_constraint_ref","page":"Macro Constraint Library","title":"Minimum capacity constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{MinCapacityConstraint, Union{AbstractEdge, AbstractStorage}, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MinCapacityConstraint, y::Union{AbstractEdge,AbstractStorage}, model::Model)\n\nAdd a min capacity constraint to the edge or storage y. The functional form of the constraint is:\n\nbeginaligned\n    textcapacity(y) geq textmin_capacity(y)\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#min_flow_constraint_ref","page":"Macro Constraint Library","title":"Minimum flow constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{MinFlowConstraint, Edge, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MinFlowConstraint, e::Edge, model::Model)\n\nAdd a min flow constraint to the edge e. The functional form of the constraint is:\n\nbeginaligned\n    textflow(e t) geq textmin_flow_fraction(e) times textcapacity(e)\nendaligned\n\nfor each time t in time_interval(e) for the edge e. \n\nnote: Note\nThis constraint is available only for unidirectional edges.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{MinFlowConstraint, EdgeWithUC, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MinFlowConstraint, e::EdgeWithUC, model::Model)\n\nAdd a min flow constraint to the edge e with unit commitment. The functional form of the constraint is:\n\nbeginaligned\n    textflow(e t) geq textmin_flow_fraction(e) times textcapacity_size(e) times textucommit(e t)\nendaligned\n\nfor each time t in time_interval(e) for the edge e.\n\nnote: Note\nThis constraint is available only for unidirectional edges.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#min_storage_level_constraint_ref","page":"Macro Constraint Library","title":"Minimum storage level constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{MinStorageLevelConstraint, AbstractStorage, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MinStorageLevelConstraint, g::AbstractStorage, model::Model)\n\nAdd a min storage level constraint to the storage g. The functional form of the constraint is:\n\nbeginaligned\n    textstorage_level(g t) geq textmin_storage_level(g) times textcapacity(g)\nendaligned\n\nfor each time t in time_interval(g) for the storage g.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#min_storage_outflow_constraint_ref","page":"Macro Constraint Library","title":"Minimum storage outflow constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{MinStorageOutflowConstraint, AbstractStorage, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MinStorageOutflowConstraint, g::AbstractStorage, model::Model)\n\nAdd a min storage outflow constraint to the storage g part of a HydroRes asset. The functional form of the constraint is:\n\nbeginaligned\n    textflow(spillage_edge t) + textflow(discharge_edge t) geq textmin_outflow_fraction(g) times textcapacity(discharge_edge)\nendaligned\n\nfor each time t in time_interval(g) for the storage g.\n\nwarning: Only applies to HydroRes assets\nThis constraint only applies to HydroRes assets. It returns a warning if the storage g does not have a spillage edge.  If the discharge edge is the only outflow, you should apply MinFlowConstraint to the discharge edge.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#min_up_and_down_time_constraint_ref","page":"Macro Constraint Library","title":"Minimum up and down time constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{MinUpTimeConstraint, EdgeWithUC, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MinUpTimeConstraint, e::EdgeWithUC, model::Model)\n\nAdd a min up time constraint to the edge e with unit commitment. The functional form of the constraint is:\n\nbeginaligned\n    textucommit(e t) geq sum_h=0^textmin_up_time(e)-1 textustart(e t-h)\nendaligned\n\nfor each time t in time_interval(e) for the edge e. The function timestepbefore is used to perform the time wrapping within the subperiods and get the correct time step before t.\n\nnote: Min up time duration\nThis constraint will throw an error if the minimum up time is longer than the length of one subperiod.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{MinDownTimeConstraint, EdgeWithUC, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MinDownTimeConstraint, e::EdgeWithUC, model::Model)\n\nAdd a min down time constraint to the edge e with unit commitment. The functional form of the constraint is:\n\nbeginaligned\n    fractextcapacity(e)textcapacity_size(e) - textucommit(e t) geq sum_h=0^textmin_down_time(e)-1 textushut(e t-h)\nendaligned\n\nfor each time t in time_interval(e) for the edge e. The function timestepbefore is used to perform the time wrapping within the subperiods and get the correct time step before t.\n\nnote: Min down time duration\nThis constraint will throw an error if the minimum down time is longer than the length of one subperiod.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#must_run_constraint_ref","page":"Macro Constraint Library","title":"Must-run constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{MustRunConstraint, Edge, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MustRunConstraint, e::Edge, model::Model)\n\nAdd a must run constraint to the edge e. The functional form of the constraint is:\n\nbeginaligned\n    textflow(e t) = textavailability(e t) times textcapacity(e)\nendaligned\n\nfor each time t in time_interval(e) for the edge e.\n\nnote: Must run constraint\nThis constraint is available only for unidirectional edges.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#ramping_limits_constraint_ref","page":"Macro Constraint Library","title":"Ramping limits constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{RampingLimitConstraint, Edge, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::RampingLimitConstraint, e::Edge, model::Model)\n\nAdd a ramping limit constraint to the edge e. The functional form of the ramping up limit constraint is:\n\nbeginaligned\n    textflow(e t) - textflow(e t-1) + textregulation_term(e t) + textreserves_term(e t) - textramp_up_fraction(e) times textcapacity(e) leq 0\nendaligned\n\nOn the other hand, the ramping down limit constraint is:\n\nbeginaligned\n    textflow(e t-1) - textflow(e t) + textregulation_term(e t) + textreserves_term(e t) - textramp_down_fraction(e) times textcapacity(e) leq 0\nendaligned\n\nfor each time t in time_interval(e) for the edge e. The function timestepbefore is used to perform the time wrapping within the subperiods and get the correct time step before t.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{RampingLimitConstraint, EdgeWithUC, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::RampingLimitConstraint, e::EdgeWithUC, model::Model)\n\nAdd a ramping limit constraint to the edge e with unit commitment. The functional form of the ramping up limit constraint is:\n\nbeginaligned\n    textflow(e t) - textflow(e t-1) + textregulation_term(e t) + textreserves_term(e t) - textramp_up_fraction(e) times textcapacity_size(e) times (textucommit(e t) - textustart(e t)) + textmin(availability(e t) max(min_flow_fraction(e) ramp_up_fraction(e))) times textcapacity_size(e) times textustart(e t) - textmin_flow_fraction(e) times textcapacity_size(e) times textushut(e t) leq 0\nendaligned\n\nOn the other hand, the ramping down limit constraint is:\n\nbeginaligned\n    textflow(e t-1) - textflow(e t) + textregulation_term(e t) + textreserves_term(e t) - textramp_down_fraction(e) times textcapacity_size(e) times (textucommit(e t) - textustart(e t)) - textmin_flow_fraction(e) times textcapacity_size(e) times textustart(e t) + textmin(availability(e t) max(min_flow_fraction(e) ramp_down_fraction(e))) times textcapacity_size(e) times textushut(e t) leq 0\nendaligned\n\nfor each time t in time_interval(e) for the edge e. The function timestepbefore is used to perform the time wrapping within the subperiods and get the correct time step before t.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#storage_capacity_constraint_ref","page":"Macro Constraint Library","title":"Storage capacity constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{StorageCapacityConstraint, AbstractStorage, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::StorageCapacityConstraint, g::AbstractStorage, model::Model)\n\nAdd a storage capacity constraint to the storage g. The functional form of the constraint is:\n\nbeginaligned\n    textstorage_level(g t) leq textcapacity(g)\nendaligned\n\nfor each time t in time_interval(g) for the storage g.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#storage_discharge_limit_constraint_ref","page":"Macro Constraint Library","title":"Storage discharge limit constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{StorageDischargeLimitConstraint, Edge, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::StorageDischargeLimitConstraint, e::Edge, model::Model)\n\nAdd a storage discharge limit constraint to the edge e if the start vertex of the edge is a storage. The functional form of the constraint is:\n\nbeginaligned\n   fractextflow(e t)textefficiency(e) leq textstorage_level(start_vertex(e) timestepbefore(t 1 subperiods(e)))\nendaligned\n\nfor each time t in time_interval(e) for the edge e. The function timestepbefore is used to perform the time wrapping within the subperiods and get the correct time step before t.\n\nnote: Storage discharge limit constraint\nThis constraint is only applied to edges with a start vertex that is a storage.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#storage_symmetric_capacity_constraint_ref","page":"Macro Constraint Library","title":"Storage symmetric capacity constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{StorageSymmetricCapacityConstraint, AbstractStorage, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(\n    ct::StorageSymmetricCapacityConstraint,\n    g::AbstractStorage,\n    model::Model,\n)\n\nAdd a storage symmetric capacity constraint to the storage g. The functional form of the constraint is:\n\nbeginaligned\n    textflow(e_discharge t) + textflow(e_charge t) leq textcapacity(e_discharge)\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#storage_charge_discharge_ratio_constraint_ref","page":"Macro Constraint Library","title":"Storage charge discharge ratio constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{StorageChargeDischargeRatioConstraint, AbstractStorage, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(\n    ct::StorageChargeDischargeRatioConstraint,\n    g::AbstractStorage,\n    model::Model,\n)\n\nAdd a storage charge discharge ratio constraint to the storage g. The functional form of the constraint is:\n\nbeginaligned\n    textcharge_discharge_ratio(g) times textcapacity(gdischarge_edge) = textcapacity(gcharge_edge)\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#storage_max_duration_constraint_ref","page":"Macro Constraint Library","title":"Storage max duration constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{StorageMaxDurationConstraint, AbstractStorage, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::StorageMaxDurationConstraint, g::AbstractStorage, model::Model)\n\nAdd a storage max duration constraint to the storage g. The functional form of the constraint is:\n\nbeginaligned\n    textcapacity(g) leq textmax_duration(g) times textcapacity(discharge_edge(g))\nendaligned\n\nnote: Storage max duration constraint\nThis constraint is only applied if the maximum duration is greater than 0.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#storage_min_duration_constraint_ref","page":"Macro Constraint Library","title":"Storage min duration constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{StorageMinDurationConstraint, AbstractStorage, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::StorageMinDurationConstraint, g::AbstractStorage, model::Model)\n\nAdd a storage min duration constraint to the storage g. The functional form of the constraint is:\n\nbeginaligned\n    textcapacity(g) geq textmin_duration(g) times textcapacity(discharge_edge(g))\nendaligned\n\nnote: Storage min duration constraint\nThis constraint is only applied if the minimum duration is greater than 0.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/","page":"Macro Constraint Library","title":"Macro Constraint Library","text":"","category":"page"},{"location":"References/4_writing_output/#Output-functions","page":"Writing output data","title":"Output functions","text":"","category":"section"},{"location":"References/4_writing_output/","page":"Writing output data","title":"Writing output data","text":"Pages = [\"3_writing_output.md\"]","category":"page"},{"location":"References/4_writing_output/#collect_results","page":"Writing output data","title":"collect_results","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.collect_results","page":"Writing output data","title":"MacroEnergy.collect_results","text":"collect_results(system::System, model::Model, settings::NamedTuple, scaling::Float64=1.0)\n\nReturns a DataFrame with all the results after the optimization is performed. \n\nArguments\n\nsystem::System: The system object containing the case inputs.\nmodel::Model: The model being optimized.\nsettings::NamedTuple: The settings for the system, including output configurations.\nscaling::Float64: The scaling factor for the results.\n\nReturns\n\nDataFrame: A `DataFrame containing all the outputs from a system.\n\nExample\n\ncollect_results(system, model)\n198534×12 DataFrame\n    Row │ case_name  commodity    commodity_subtype  zone        resource_id                component_id                       type              variable  segment  time   value\n        │ Missing    Symbol       Symbol             Symbol      Symbol                     Symbol                             Symbol            Symbol    Int64    Int64  Float64\n────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n      1 │   missing  Biomass      flow               bioherb_SE  SE_BECCS_Electricity_Herb  SE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  flow            1      1  0.0\n      2 │   missing  Biomass      flow               bioherb_SE  SE_BECCS_Electricity_Herb  SE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  flow            1      2  0.0\n      3 │   missing  Biomass      flow               bioherb_SE  SE_BECCS_Electricity_Herb  SE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  flow            1      3  0.0\n      ...\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/#get_optimal_capacity","page":"Writing output data","title":"get_optimal_capacity","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.get_optimal_capacity","page":"Writing output data","title":"MacroEnergy.get_optimal_capacity","text":"get_optimal_capacity(system::System; scaling::Float64=1.0)\n\nGet the optimal capacity values for all assets/edges in a system.\n\nArguments\n\nsystem::System: The system containing the assets/edges to analyze\nscaling::Float64: The scaling factor for the results.\n\nReturns\n\nDataFrame: A dataframe containing the optimal capacity values for all assets/edges, with missing columns removed\n\nExample\n\nget_optimal_capacity(system)\n153×8 DataFrame\n Row │ commodity    commodity_subtype  zone           resource_id                        component_id                       type              variable  value    \n     │ Symbol       Symbol             Symbol         Symbol                             Symbol                             Symbol            Symbol    Float64 \n─────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ Electricity  capacity           elec_SE        existing_solar_SE                  existing_solar_SE_edge             VRE               capacity   8.5022\n   2 │ Electricity  capacity           elec_NE        existing_solar_NE                  existing_solar_NE_edge             VRE               capacity   0.0   \n   3 │ Electricity  capacity           elec_NE        existing_wind_NE                   existing_wind_NE_edge              VRE               capacity   3.6545\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/#get_optimal_discounted_costs","page":"Writing output data","title":"get_optimal_discounted_costs","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.get_optimal_discounted_costs","page":"Writing output data","title":"MacroEnergy.get_optimal_discounted_costs","text":"Helper function to extract discounted costs from the optimization results and return them as a DataFrame.\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/#get_optimal_flow","page":"Writing output data","title":"get_optimal_flow","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.get_optimal_flow","page":"Writing output data","title":"MacroEnergy.get_optimal_flow","text":"get_optimal_flow(\n    system::System; \n    scaling::Float64=1.0, \n    commodity::Union{AbstractString,Vector{<:AbstractString},Nothing}=nothing, \n    asset_type::Union{AbstractString,Vector{<:AbstractString},Nothing}=nothing\n)\n\nGet the optimal flow values for all edges in a system.\n\nFiltering\n\nResults can be filtered by:\n\ncommodity: Specific commodity type(s)\nasset_type: Specific asset type(s)\n\nPattern Matching\n\nTwo types of pattern matching are supported:\n\nParameter-free matching:\n\"ThermalPower\" matches any ThermalPower{...} type (i.e. no need to specify parameters inside {})\nWildcards using \"*\":\n\"ThermalPower*\" matches ThermalPower{Fuel}, ThermalPowerCCS{Fuel}, etc.\n\"CO2*\" matches CO2, CO2Captured, etc.\n\nArguments\n\nsystem::System: The system containing the all edges to output   \nscaling::Float64: The scaling factor for the results.\ncommodity::Union{AbstractString,Vector{<:AbstractString},Nothing}: The commodity to filter by\nasset_type::Union{AbstractString,Vector{<:AbstractString},Nothing}: The asset type to filter by\n\nReturns\n\nDataFrame: A dataframe containing the optimal flow values for all edges, with missing columns removed\n\nExample\n\nget_optimal_flow(system)\n186984×11 DataFrame\n    Row │ commodity    commodity_subtype  zone        resource_id                component_id                       type              variable  segment  time   value     \n        │ Symbol       Symbol             Symbol      Symbol                     Symbol                             Symbol            Symbol    Int64    Int64  Float64\n────────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n      1 │ Biomass      flow               bioherb_SE  SE_BECCS_Electricity_Herb  SE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  flow            1      1  0.0    \n      2 │ Biomass      flow               bioherb_SE  SE_BECCS_Electricity_Herb  SE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  flow            1      2  0.0    \n      3 │ Biomass      flow               bioherb_SE  SE_BECCS_Electricity_Herb  SE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  flow            1      3  0.0    \n      ...\n# Filter by commodity\nget_optimal_flow(system, commodity=\"Electricity\")\n# Filter by commodity and asset type using parameter-free matching\nget_optimal_flow(system, commodity=\"Electricity\", asset_type=\"ThermalPower\") # only ThermalPower{Fuel} will be returned\n# Filter by commodity and asset type using wildcard matching\nget_optimal_flow(system, commodity=\"Electricity\", asset_type=\"ThermalPower*\") # all types starting with ThermalPower (e.g., ThermalPower{Fuel}, ThermalPowerCCS{Fuel}) will be returned)\n\n\n\n\n\nget_optimal_flow(asset::AbstractAsset, scaling::Float64=1.0)\n\nGet the optimal flow values for all edges in an asset.\n\nArguments\n\nasset::AbstractAsset: The asset containing the edges to analyze\nscaling::Float64: The scaling factor for the results.\n\nReturns\n\nDataFrame: A dataframe containing the optimal flow values for all edges, with missing columns removed\n\nExample\n\nasset = get_asset_by_id(system, :elec_SE)\nget_optimal_flow(asset)\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/#get_optimal_new_capacity","page":"Writing output data","title":"get_optimal_new_capacity","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.get_optimal_new_capacity","page":"Writing output data","title":"MacroEnergy.get_optimal_new_capacity","text":"get_optimal_new_capacity(system::System; scaling::Float64=1.0)\n\nGet the optimal new capacity values for all assets/edges in a system.\n\nArguments\n\nsystem::System: The system containing the assets/edges to analyze\nscaling::Float64: The scaling factor for the results.\n\nReturns\n\nDataFrame: A dataframe containing the optimal new capacity values for all assets/edges, with missing columns removed\n\nExample\n\nget_optimal_new_capacity(system)\n153×8 DataFrame\n Row │ commodity    commodity_subtype  zone           resource_id                        component_id                       type              variable      value  \n     │ Symbol       Symbol             Symbol         Symbol                             Symbol                             Symbol            Symbol        Float64\n─────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ Biomass      capacity           bioherb_SE     SE_BECCS_Electricity_Herb          SE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  new_capacity      0.0\n   2 │ Biomass      capacity           bioherb_MIDAT  MIDAT_BECCS_Electricity_Herb       MIDAT_BECCS_Electricity_Herb_bio…  BECCSElectricity  new_capacity      0.0\n   3 │ Biomass      capacity           bioherb_NE     NE_BECCS_Electricity_Herb          NE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  new_capacity      0.0\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/#get_optimal_retired_capacity","page":"Writing output data","title":"get_optimal_retired_capacity","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.get_optimal_retired_capacity","page":"Writing output data","title":"MacroEnergy.get_optimal_retired_capacity","text":"get_optimal_retired_capacity(system::System; scaling::Float64=1.0)\n\nGet the optimal retired capacity values for all assets/edges in a system.\n\nArguments\n\nsystem::System: The system containing the assets/edges to analyze\nscaling::Float64: The scaling factor for the results.\n\nReturns\n\nDataFrame: A dataframe containing the optimal retired capacity values for all assets/edges, with missing columns removed\n\nExample\n\nget_optimal_retired_capacity(system)\n153×8 DataFrame\n Row │ commodity    commodity_subtype  zone           resource_id                        component_id                       type              variable      value    \n     │ Symbol       Symbol             Symbol         Symbol                             Symbol                             Symbol            Symbol        Float64  \n─────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ Biomass      capacity           bioherb_SE     SE_BECCS_Electricity_Herb          SE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  retired_capacity  0.0\n   2 │ Biomass      capacity           bioherb_MIDAT  MIDAT_BECCS_Electricity_Herb       MIDAT_BECCS_Electricity_Herb_bio…  BECCSElectricity  retired_capacity  0.0\n   3 │ Biomass      capacity           bioherb_NE     NE_BECCS_Electricity_Herb          NE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  retired_capacity  0.0\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/#write_capacity","page":"Writing output data","title":"write_capacity","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.write_capacity","page":"Writing output data","title":"MacroEnergy.write_capacity","text":"write_capacity(\n    file_path::AbstractString, \n    system::System; \n    scaling::Float64=1.0, \n    drop_cols::Vector{AbstractString}=String[], \n    commodity::Union{AbstractString,Vector{AbstractString},Nothing}=nothing, \n    asset_type::Union{AbstractString,Vector{AbstractString},Nothing}=nothing\n)\n\nWrite the optimal capacity results for all assets/edges in a system to a file.  The extension of the file determines the format of the file. Capacity, NewCapacity, and RetiredCapacity are first concatenated and then written to the file.\n\nFiltering\n\nResults can be filtered by:\n\ncommodity: Specific commodity type(s)\nasset_type: Specific asset type(s)\n\nPattern Matching\n\nTwo types of pattern matching are supported:\n\nParameter-free matching:\n\"ThermalPower\" matches any ThermalPower{...} type (i.e. no need to specify parameters inside {})\nWildcards using \"*\":\n\"ThermalPower*\" matches ThermalPower{Fuel}, ThermalPowerCCS{Fuel}, etc.\n\"CO2*\" matches CO2, CO2Captured, etc.\n\nArguments\n\nfile_path::AbstractString: The path to the file where the results will be written\nsystem::System: The system containing the assets/edges to analyze as well as the settings for the output\nscaling::Float64: The scaling factor for the results\ndrop_cols::Vector{AbstractString}: Columns to drop from the DataFrame\ncommodity::Union{AbstractString,Vector{AbstractString},Nothing}: The commodity to filter by\nasset_type::Union{AbstractString,Vector{AbstractString},Nothing}: The asset type to filter by\n\nReturns\n\nnothing: The function returns nothing, but writes the results to the file\n\nExample\n\nwrite_capacity(\"capacity.csv\", system)\n# Filter by commodity\nwrite_capacity(\"capacity.csv\", system, commodity=\"Electricity\")\n# Filter by commodity and asset type using parameter-free matching\nwrite_capacity(\"capacity.csv\", system, asset_type=\"ThermalPower\")\n# Filter by asset type using wildcard matching\nwrite_capacity(\"capacity.csv\", system, asset_type=\"ThermalPower*\")\n# Filter by commodity and asset type\nwrite_capacity(\"capacity.csv\", system, commodity=\"Electricity\", asset_type=[\"ThermalPower\", \"Battery\"])\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/#write_costs","page":"Writing output data","title":"write_costs","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.write_costs","page":"Writing output data","title":"MacroEnergy.write_costs","text":"write_costs(\n    file_path::AbstractString, \n    system::System, \n    model::Union{Model,NamedTuple}; \n    scaling::Float64=1.0, \n    drop_cols::Vector{AbstractString}=String[]\n)\n\nWrite the optimal cost results for all assets/edges in a system to a file.  The extension of the file determines the format of the file.\n\nArguments\n\nfile_path::AbstractString: The path to the file where the results will be written\nsystem::System: The system containing the assets/edges to analyze as well as the settings for the output\nmodel::Union{Model,NamedTuple}: The optimal model after the optimization\nscaling::Float64: The scaling factor for the results\ndrop_cols::Vector{AbstractString}: Columns to drop from the DataFrame\n\nReturns\n\nnothing: The function returns nothing, but writes the results to the file\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/#write_flow","page":"Writing output data","title":"write_flow","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.write_flow","page":"Writing output data","title":"MacroEnergy.write_flow","text":"write_flow(\n    file_path::AbstractString, \n    system::System; \n    scaling::Float64=1.0, \n    drop_cols::Vector{<:AbstractString}=String[],\n    commodity::Union{AbstractString,Vector{<:AbstractString},Nothing}=nothing,\n    asset_type::Union{AbstractString,Vector{<:AbstractString},Nothing}=nothing\n)\n\nWrite the optimal flow results for the system to a file. The extension of the file determines the format of the file.\n\nFiltering\n\nResults can be filtered by:\n\ncommodity: Specific commodity type(s)\nasset_type: Specific asset type(s)\n\nPattern Matching\n\nTwo types of pattern matching are supported:\n\nParameter-free matching:\n\"ThermalPower\" matches any ThermalPower{...} type (i.e. no need to specify parameters inside {})\nWildcards using \"*\":\n\"ThermalPower*\" matches ThermalPower{Fuel}, ThermalPowerCCS{Fuel}, etc.\n\"CO2*\" matches CO2, CO2Captured, etc.\n\nArguments\n\nfile_path::AbstractString: The path to the file where the results will be written\nsystem::System: The system containing the edges to analyze as well as the settings for the output\nscaling::Float64: The scaling factor for the results\ndrop_cols::Vector{<:AbstractString}: Columns to drop from the DataFrame\ncommodity::Union{AbstractString,Vector{<:AbstractString},Nothing}: The commodity to filter by\nasset_type::Union{AbstractString,Vector{<:AbstractString},Nothing}: The asset type to filter by\n\nReturns\n\nnothing: The function returns nothing, but writes the results to the file\n\nExample\n\nwrite_flow(\"flow.csv\", system)\n# Filter by commodity\nwrite_flow(\"flow.csv\", system, commodity=\"Electricity\")\n# Filter by commodity and asset type using parameter-free matching\nwrite_flow(\"flow.csv\", system, commodity=\"Electricity\", asset_type=\"ThermalPower\")\n# Filter by commodity and asset type using wildcard matching\nwrite_flow(\"flow.csv\", system, commodity=\"Electricity\", asset_type=\"ThermalPower*\")\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/#write_settings","page":"Writing output data","title":"write_settings","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.write_settings","page":"Writing output data","title":"MacroEnergy.write_settings","text":"write_settings(case::Case, filepath::AbstractString)\n\nWrite the case and system settings to a JSON file.\n\nThis function extracts the settings from a Case object and writes them to a JSON file. The settings include both case-level settings and system-level settings for all systems in the case.\n\nArguments\n\ncase::Case: The case object containing the settings to write\nfilepath::AbstractString: The full path to the output JSON file\n\nReturns\n\nnothing: The function returns nothing, but writes the settings to the specified file\n\nExample\n\n# Write settings to a JSON file\nwrite_settings(case, \"output/settings.json\")\n\n# Write settings to a case results directory\nwrite_settings(case, joinpath(case_path, \"settings.json\"))\n\nOutput Format\n\nThe JSON file will contain:\n\ncase_settings: The case-level settings\nsystem_settings: An array of settings for each system in the case\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/#write_dataframe","page":"Writing output data","title":"write_dataframe","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.write_dataframe","page":"Writing output data","title":"MacroEnergy.write_dataframe","text":"write_dataframe(\n    file_path::AbstractString, \n    df::AbstractDataFrame, \n    drop_cols::Vector{<:AbstractString}=String[]\n)\n\nWrite a DataFrame to a file in the appropriate format based on file extension. Supported formats: .csv, .csv.gz, .parquet\n\nArguments\n\nfile_path::AbstractString: Path where to save the file\ndf::AbstractDataFrame: DataFrame to write\ndrop_cols::Vector{<:AbstractString}: Columns to drop from the DataFrame\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/#write_results","page":"Writing output data","title":"write_results","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.write_results","page":"Writing output data","title":"MacroEnergy.write_results","text":"write_results(file_path::AbstractString, system::System, model::Model, settings::NamedTuple)\n\nCollects all the results as a DataFrame and then writes them to disk after the optimization is performed. \n\nArguments\n\nfile_path::AbstractString: full path of the file to export. \nsystem::System: The system object containing the case inputs.\nmodel::Model: The model being optimized.\nsettings::NamedTuple: The settings for the system, including output configurations.\n\nReturns\n\nExample\n\nwrite_results(case_path, system, model, settings, ext=\".csv\") # CSV\nwrite_results(case_path, system, model, settings, ext=\".csv.gz\")  # GZIP\nwrite_results(case_path, system, model, settings, ext=\".parquet\") # PARQUET\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/#MacroEnergy.write_outputs","page":"Writing output data","title":"MacroEnergy.write_outputs","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.write_outputs","page":"Writing output data","title":"MacroEnergy.write_outputs","text":"Write results when using Monolithic as solution algorithm.\n\n\n\n\n\nWrite results when using Myopic as solution algorithm. \n\n\n\n\n\nWrite results when using Benders as solution algorithm.\n\n\n\n\n\nFallback function to write outputs for a single period.\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/#MacroEnergy.write_period_outputs","page":"Writing output data","title":"MacroEnergy.write_period_outputs","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.write_period_outputs","page":"Writing output data","title":"MacroEnergy.write_period_outputs","text":"Write outputs for a single period during myopic iteration. This function is called for every period to write outputs immediately.\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/","page":"Writing output data","title":"Writing output data","text":"","category":"page"},{"location":"Manual/assets/natgasdaq/#Natural-Gas-DAC","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/#Contents","page":"Natural Gas DAC","title":"Contents","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Overview | Asset Structure | Input File (Standard Format) | Types - Asset Structure | Constructors | Examples | Best Practices | Input File (Advanced Format)","category":"page"},{"location":"Manual/assets/natgasdaq/#natgasdaq_overview","page":"Natural Gas DAC","title":"Overview","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Natural Gas DAC (Direct Air Capture) assets in Macro represent carbon dioxide removal technologies that use natural gas as a fuel source to capture CO₂ directly from the atmosphere. These assets are defined using either JSON or CSV input files placed in the assets directory, typically named natgasdac.json or natgasdac.csv.","category":"page"},{"location":"Manual/assets/natgasdaq/#natgasdaq_asset_structure","page":"Natural Gas DAC","title":"Asset Structure","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"A natural gas DAC asset consists of one transformation component and five edge components:","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Transformation Component: Balances the incoming and outgoing flows of natural gas, CO₂, and electricity\nNatural Gas Edge: Incoming edge representing natural gas fuel supply\nCO₂ Edge: Incoming edge representing CO₂ absorption from atmosphere\nElectricity Edge: Outgoing edge representing electricity production\nCO₂ Emission Edge: Outgoing edge representing CO₂ emissions from the process\nCO₂ Captured Edge: Outgoing edge representing captured CO₂","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Here is a graphical representation of the Natural Gas DAC asset:","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph NaturalGasDAC\n    direction BT\n    A((Natural Gas)) e1@--> C{{..}}\n    B((CO₂)) e2@--> C{{..}}\n    C{{..}} e3@--> D((Electricity))\n    C{{..}} e4@--> E((CO₂ Emitted))\n    C{{..}} e5@--> F((CO₂ Captured))\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n  end\n  \n    style A r:55px,fill:#005F6A,stroke:black,color:white, stroke-dasharray: 3,5;\n    style B r:55px,fill:lightgray,stroke:black,color:black, stroke-dasharray: 3,5;\n    style C r:55px,fill:black,stroke:black,color:black, stroke-dasharray: 3,5;\n    style D font-size:19px,r:55px,fill:#FFD700,stroke:black,color:black, stroke-dasharray: 3,5;\n    style E font-size:17px,r:55px,fill:lightgray,stroke:black,color:black, stroke-dasharray: 3,5;\n    style F font-size:15px,r:55px,fill:lightgray,stroke:black,color:black, stroke-dasharray: 3,5;\n\n    linkStyle 0 stroke:#005F6A, stroke-width: 2px;\n    linkStyle 1 stroke:lightgray, stroke-width: 2px;\n    linkStyle 2 stroke:#FFD700, stroke-width: 2px;\n    linkStyle 3 stroke:lightgray, stroke-width: 2px;\n    linkStyle 4 stroke:lightgray, stroke-width: 2px;","category":"page"},{"location":"Manual/assets/natgasdaq/#natgasdaq_flow_equations","page":"Natural Gas DAC","title":"Flow Equations","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"The natural gas DAC asset follows these stoichiometric relationships:","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"beginaligned\nphi_elec = phi_co2 cdot epsilon_elec_prod \nphi_ng = phi_co2 cdot epsilon_fuel_consumption \nphi_co2 = phi_ng cdot epsilon_emission_rate \nphi_co2_captured = phi_ng cdot epsilon_co2_capture_rate + phi_co2\nendaligned","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Where:","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"phi represents the flow of each commodity\nepsilon represents the stoichiometric coefficients defined in the table below (see table Conversion Process Parameters)","category":"page"},{"location":"Manual/assets/natgasdaq/#natgasdaq_input_file","page":"Natural Gas DAC","title":"Input File (Standard Format)","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"The easiest way to include a natural gas DAC asset in a model is to create a new file (either JSON or CSV) and place it in the assets directory together with the other assets.","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"your_case/\n├── assets/\n│   ├── natgasdac.json    # or natgasdac.csv\n│   ├── other_assets.json\n│   └── ...\n├── system/\n├── settings/\n└── ...","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"This file can either be created manually, or using the template_asset function, as shown in the Adding an Asset to a System section of the User Guide. The file will be automatically loaded when you run your Macro model. ","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"The following is an example of a Natural Gas DAC asset input file:","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"{\n    \"NaturalGasDAC\": [\n        {\n            \"type\": \"NaturalGasDAC\",\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Solvent_DAC\",\n                    \"location\": \"SE\",\n                    \"co2_sink\": \"co2_sink\",\n                    \"emission_rate\": 0.001810482,\n                    \"capture_rate\": 0.179237753,\n                    \"electricity_production\": 0.125,\n                    \"fuel_consumption\": 3.047059187,\n                    \"investment_cost\": 973000,\n                    \"fixed_om_cost\": 430000,\n                    \"variable_om_cost\": 65.42,\n                    \"co2_constraints\": {\n                        \"RampingLimitConstraint\": true\n                    },\n                    \"ramp_up_fraction\": 1.0,\n                    \"ramp_down_fraction\": 1.0,\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"SE_Solvent_DAC\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"tip: Global Data vs Instance Data\nWhen working with JSON input files, the global_data field can be used to group data that is common to all instances of the same asset type. This is useful for setting constraints that are common to all instances of the same asset type and avoid repeating the same data for each instance. See the Examples section below for an example.","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"The following tables outline the attributes that can be set for a Natural Gas DAC asset.","category":"page"},{"location":"Manual/assets/natgasdaq/#Essential-Attributes","page":"Natural Gas DAC","title":"Essential Attributes","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Field Type Description\nType String Asset type identifier: \"NaturalGasDAC\"\nid String Unique identifier for the Natural Gas DAC instance\nlocation String Geographic location/node identifier\nco2_sink String ID of a CO₂ sink vertex (must be defined in the nodes input file)","category":"page"},{"location":"Manual/assets/natgasdaq/#natgasdaq_conversion_process_parameters","page":"Natural Gas DAC","title":"Conversion Process Parameters","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"The following set of parameters control the conversion process and stoichiometry of the natgasdaq asset (see Flow Equations for more details).","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Field Type Description Units Default\ncapture_rate Float64 CO₂ capture rate per unit natural gas t_CO₂MWh 1.0\nelectricity_production Float64 Electricity production per unit CO₂ processed MWht_CO₂ 0.0\nemission_rate Float64 CO₂ emission rate per unit natural gas t_CO₂MWh 1.0\nfuel_consumption Float64 Natural gas consumption per unit CO₂ processed MWht_CO₂ 0.0","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Users can refer to the Adding Asset Constraints to a System section of the User Guide for a list of all the constraints that can be applied to a Natural Gas DAC asset.","category":"page"},{"location":"Manual/assets/natgasdaq/#\"natgasdaq_constraints\"","page":"Natural Gas DAC","title":"Constraints Configuration","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Natural gas DAC assets can have different constraints applied to them, and the user can configure them using the following fields:","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Field Type Description\ntransform_constraints Dict{String,Bool} List of constraints applied to the transformation component.\nco2_constraints Dict{String,Bool} List of constraints applied to the CO₂ edge.\nnatgas_constraints Dict{String,Bool} List of constraints applied to the natural gas edge.\nelec_constraints Dict{String,Bool} List of constraints applied to the electricity edge.\nco2_emission_constraints Dict{String,Bool} List of constraints applied to the CO₂ emission edge.\nco2_captured_constraints Dict{String,Bool} List of constraints applied to the CO₂ captured edge.","category":"page"},{"location":"Manual/assets/natgasdaq/#Default-constraints","page":"Natural Gas DAC","title":"Default constraints","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"To simplify the input file and the asset configuration, the following constraints are applied to the Natural Gas DAC asset by default:","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Balance constraint (applied to the transformation component)\nCapacity constraint (applied to the CO₂ edge)","category":"page"},{"location":"Manual/assets/natgasdaq/#Investment-Parameters","page":"Natural Gas DAC","title":"Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Field Type Description Units Default\ncan_retire Boolean Whether capacity can be retired - true\ncan_expand Boolean Whether capacity can be expanded - true\nexisting_capacity Float64 Initial installed capacity t_CO₂hr 0.0\ncapacity_size Float64 Unit size for capacity decisions - 1.0","category":"page"},{"location":"Manual/assets/natgasdaq/#Additional-Investment-Parameters","page":"Natural Gas DAC","title":"Additional Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Maximum and minimum capacity constraints","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"If MaxCapacityConstraint or MinCapacityConstraint are added to the constraints dictionary for the CO₂ edge, the following parameters are used by Macro:","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Field Type Description Units Default\nmax_capacity Float64 Maximum allowed capacity t_CO₂hr Inf\nmin_capacity Float64 Minimum allowed capacity t_CO₂hr 0.0","category":"page"},{"location":"Manual/assets/natgasdaq/#Economic-Parameters","page":"Natural Gas DAC","title":"Economic Parameters","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Field Type Description Units Default\ninvestment_cost Float64 CAPEX per unit capacity (t_CO₂hr) 0.0\nannualized_investment_cost Union{Nothing,Float64} Annualized CAPEX (t_CO₂hryr) calculated\nfixed_om_cost Float64 Fixed O&M costs (t_CO₂hryr) 0.0\nvariable_om_cost Float64 Variable O&M costs t_CO₂ 0.0\nwacc Float64 Weighted average cost of capital fraction 0.0\nlifetime Int Asset lifetime in years years 1\ncapital_recovery_period Int Investment recovery period years 1\nretirement_period Int Retirement period years 0","category":"page"},{"location":"Manual/assets/natgasdaq/#Operational-Parameters","page":"Natural Gas DAC","title":"Operational Parameters","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Field Type Description Units Default\navailability Dict Availability file path and header - Empty","category":"page"},{"location":"Manual/assets/natgasdaq/#Additional-Operational-Parameters","page":"Natural Gas DAC","title":"Additional Operational Parameters","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Ramping limit constraint","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"If RampingLimitConstraint is added to the constraints dictionary for the CO₂ edge, the following parameters are used:","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Field Type Description Units Default\nramp_up_fraction Float64 Maximum increase in output between timesteps fraction 1.0\nramp_down_fraction Float64 Maximum decrease in output between timesteps fraction 1.0","category":"page"},{"location":"Manual/assets/natgasdaq/#natgasdaq_type_definition","page":"Natural Gas DAC","title":"Types - Asset Structure","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"The NaturalGasDAC asset is defined as follows:","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"struct NaturalGasDAC <: AbstractAsset\n    id::AssetId\n    natgasdac_transform::Transformation\n    co2_edge::Edge{<:CO2}\n    co2_emission_edge::Edge{<:CO2}\n    natgas_edge::Edge{<:NaturalGas}\n    elec_edge::Edge{<:Electricity}\n    co2_captured_edge::Edge{<:CO2Captured}\nend","category":"page"},{"location":"Manual/assets/natgasdaq/#natgasdaq_constructors","page":"Natural Gas DAC","title":"Constructors","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/#Default-constructor","page":"Natural Gas DAC","title":"Default constructor","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"NaturalGasDAC(id::AssetId, natgasdac_transform::Transformation, co2_edge::Edge{<:CO2}, co2_emission_edge::Edge{<:CO2}, natgas_edge::Edge{<:NaturalGas}, elec_edge::Edge{<:Electricity}, co2_captured_edge::Edge{<:CO2Captured})","category":"page"},{"location":"Manual/assets/natgasdaq/#Factory-constructor","page":"Natural Gas DAC","title":"Factory constructor","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"make(asset_type::Type{NaturalGasDAC}, data::AbstractDict{Symbol,Any}, system::System)","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Field Type Description\nasset_type Type{NaturalGasDAC} Macro type of the asset\ndata AbstractDict{Symbol,Any} Dictionary containing the input data for the asset\nsystem System System to which the asset belongs","category":"page"},{"location":"Manual/assets/natgasdaq/#natgasdaq_examples","page":"Natural Gas DAC","title":"Examples","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"This section contains examples of how to use the natural gas DAC asset in a Macro model.","category":"page"},{"location":"Manual/assets/natgasdaq/#Fixed-Capacity-Natural-Gas-DAC","page":"Natural Gas DAC","title":"Fixed Capacity Natural Gas DAC","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"This example shows a natural gas DAC asset located in the SE region. A RampingLimitConstraint constraint is applied to the CO₂ edge with a ramping limit of 1.0. The asset has an availability time series loaded from a CSV file.","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"JSON Format:","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"{\n    \"NaturalGasDAC\": [\n        {\n            \"type\": \"NaturalGasDAC\",\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Solvent_DAC\",\n                    \"location\": \"SE\",\n                    \"co2_sink\": \"co2_sink\",\n                    \"co2_constraints\": {\n                        \"RampingLimitConstraint\": true\n                    },\n                    \"emission_rate\": 0.001810482,\n                    \"capture_rate\": 0.179237753,\n                    \"electricity_production\": 0.125,\n                    \"fuel_consumption\": 3.047059187,\n                    \"investment_cost\": 973000,\n                    \"fixed_om_cost\": 430000,\n                    \"variable_om_cost\": 65.42,\n                    \"ramp_up_fraction\": 1.0,\n                    \"ramp_down_fraction\": 1.0,\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"SE_Solvent_DAC\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"CSV Format:","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Type id location co2_sink co2_constraints–RampingLimitConstraint emission_rate capture_rate electricity_production fuel_consumption investment_cost fixed_om_cost variable_om_cost ramp_up_fraction ramp_down_fraction availability–timeseries–path availability–timeseries–header\nNaturalGasDAC SE_Solvent_DAC SE co2_sink true 0.001810482 0.179237753 0.125 3.047059187 973000 430000 65.42 1.0 1.0 system/availability.csv SE_Solvent_DAC","category":"page"},{"location":"Manual/assets/natgasdaq/#Multiple-Natural-Gas-DAC-assets-in-different-zones","page":"Natural Gas DAC","title":"Multiple Natural Gas DAC assets in different zones","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"This example shows three natural gas DAC assets located in the SE, MIDAT, and NE regions. A RampingLimitConstraint constraint is applied to the CO₂ edge with a ramping limit of 1.0. The asset has an availability time series loaded from a CSV file.","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"JSON Format:","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Note that the global_data field is used to set the fields and constraints that are common to all instances of the same asset type.","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"{\n    \"NaturalGasDAC\": [\n        {\n            \"type\": \"NaturalGasDAC\",\n            \"global_data\": {\n                \"transforms_timedata\": \"NaturalGas\",\n                \"co2_constraints\": {\n                    \"RampingLimitConstraint\": true\n                },\n                \"co2_sink\": \"co2_sink\",\n                \"emission_rate\": 0.001810482,\n                \"capture_rate\": 0.179237753,\n                \"electricity_production\": 0.125,\n                \"fuel_consumption\": 3.047059187,\n                \"investment_cost\": 973000,\n                \"fixed_om_cost\": 430000,\n                \"variable_om_cost\": 65.42,\n                \"ramp_up_fraction\": 1.0,\n                \"ramp_down_fraction\": 1.0\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Solvent_DAC\",\n                    \"location\": \"SE\",\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"SE_Solvent_DAC\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_Solvent_DAC\",\n                    \"location\": \"MIDAT\",\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"MIDAT_Solvent_DAC\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_Solvent_DAC\",\n                    \"location\": \"NE\",\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"NE_Solvent_DAC\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"CSV Format:","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Type id location co2_constraints–RampingLimitConstraint co2_sink emission_rate capture_rate electricity_production fuel_consumption investment_cost fixed_om_cost variable_om_cost ramp_up_fraction ramp_down_fraction availability–timeseries–path availability–timeseries–header\nNaturalGasDAC SE_Solvent_DAC SE true co2_sink 0.001810482 0.179237753 0.125 3.047059187 973000 430000 65.42 1.0 1.0 system/availability.csv SE_Solvent_DAC\nNaturalGasDAC MIDAT_Solvent_DAC MIDAT true co2_sink 0.001810482 0.179237753 0.125 3.047059187 973000 430000 65.42 1.0 1.0 system/availability.csv MIDAT_Solvent_DAC\nNaturalGasDAC NE_Solvent_DAC NE true co2_sink 0.001810482 0.179237753 0.125 3.047059187 973000 430000 65.42 1.0 1.0 system/availability.csv NE_Solvent_DAC","category":"page"},{"location":"Manual/assets/natgasdaq/#natgasdaq_best_practices","page":"Natural Gas DAC","title":"Best Practices","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Use global data for common fields and constraints: Use the global_data field to set the fields and constraints that are common to all instances of the same asset type.\nSet realistic stoichiometric coefficients: Ensure the transformation parameters reflect actual technology performance\nUse meaningful IDs: Choose descriptive identifiers that indicate location and technology type\nConsider ramping constraints: Set appropriate ramping limits based on technology characteristics\nUse constraints selectively: Only enable constraints that are necessary for your modeling needs\nValidate costs: Ensure investment and O&M costs are in appropriate units\nTest configurations: Start with simple configurations and gradually add complexity\nAccount for emissions: Include both direct emissions and electricity production in the model","category":"page"},{"location":"Manual/assets/natgasdaq/#natgasdaq_advanced_json_csv_input_format","page":"Natural Gas DAC","title":"Input File (Advanced Format)","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Macro provides an advanced format for defining Natural Gas DAC assets, offering users and modelers detailed control over asset specifications. This format builds upon the standard format and is ideal for those who need more comprehensive customization.","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"To understand the advanced format, consider the graph representation and the type definition of a Natural Gas DAC asset. The input file mirrors this hierarchical structure.","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"A Natural Gas DAC asset in Macro is composed of a transformation component, represented by a Transformation object, and two edges (CO₂ and electricity), each represented by an Edge object. The input file for a Natural Gas DAC asset is therefore organized as follows:","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"{\n    \"transforms\": {\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"ng_edge\": {\n            // ... ng_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        },\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"co2_emission_edge\": {\n            // ... co2_emission_edge-specific attributes ...\n        },\n        \"co2_captured_edge\": {\n            // ... co2_captured_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Each top-level key (e.g., \"transforms\" or \"edges\") denotes a component type. The second-level keys either specify the attributes of the component (when there is a single instance) or identify the instances of the component (e.g., \"co2edge\" or \"elecedge\") when there are multiple instances. For multiple instances, a third-level key details the attributes for each instance.","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Each top-level key (e.g., \"transforms\" or \"edges\") denotes a component type. The second-level keys either specify the attributes of the component (when there is a single instance) or identify the instances of the component (e.g., \"co2_edge\", \"co2_emission_edge\", \"natgas_edge\", \"elec_edge\", \"co2_captured_edge\") when there are multiple instances. For multiple instances, a third-level key details the attributes for each instance.","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Below is an example of an input file for a natural gas DAC asset that sets up multiple natural gas DAC assets across different regions. ","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"{\n    \"NaturalGasDAC\": [\n        {\n            \"type\": \"NaturalGasDAC\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"NaturalGas\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"co2_edge\": {\n                        \"commodity\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"start_vertex\": \"co2_sink\",\n                        \"can_retire\": true,\n                        \"can_expand\": true,\n                        \"integer_decisions\": false,\n                        \"uc\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true\n                        }\n                    },\n                    \"co2_emission_edge\": {\n                        \"commodity\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_sink\"\n                    },\n                    \"natgas_edge\": {\n                        \"commodity\": \"NaturalGas\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"elec_edge\": {\n                        \"commodity\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"co2_captured_edge\": {\n                        \"commodity\": \"CO2Captured\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Solvent_DAC\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.001810482,\n                        \"capture_rate\": 0.179237753,\n                        \"electricity_production\": 0.125,\n                        \"fuel_consumption\": 3.047059187\n                    },\n                    \"edges\": {\n                        \"co2_edge\": {\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"system/availability.csv\",\n                                    \"header\": \"SE_Solvent_DAC\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 973000,\n                            \"fixed_om_cost\": 430000,\n                            \"variable_om_cost\": 65.42,\n                            \"ramp_up_fraction\": 1.0,\n                            \"ramp_down_fraction\": 1.0\n                        },\n                        \"natgas_edge\": {\n                            \"start_vertex\": \"natgas_SE\"\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_SE\"\n                        },\n                        \"co2_captured_edge\": {\n                            \"end_vertex\": \"co2_captured_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_Solvent_DAC\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.001810482,\n                        \"capture_rate\": 0.179237753,\n                        \"electricity_production\": 0.125,\n                        \"fuel_consumption\": 3.047059187\n                    },\n                    \"edges\": {\n                        \"co2_edge\": {\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"system/availability.csv\",\n                                    \"header\": \"MIDAT_Solvent_DAC\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 973000,\n                            \"fixed_om_cost\": 430000,\n                            \"variable_om_cost\": 65.42,\n                            \"ramp_up_fraction\": 1.0,\n                            \"ramp_down_fraction\": 1.0\n                        },\n                        \"natgas_edge\": {\n                            \"start_vertex\": \"natgas_MIDAT\"\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_MIDAT\"\n                        },\n                        \"co2_captured_edge\": {\n                            \"end_vertex\": \"co2_captured_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_Solvent_DAC\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.001810482,\n                        \"capture_rate\": 0.179237753,\n                        \"electricity_production\": 0.125,\n                        \"fuel_consumption\": 3.047059187\n                    },\n                    \"edges\": {\n                        \"co2_edge\": {\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"system/availability.csv\",\n                                    \"header\": \"NE_Solvent_DAC\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 973000,\n                            \"fixed_om_cost\": 430000,\n                            \"variable_om_cost\": 65.42,\n                            \"ramp_up_fraction\": 1.0,\n                            \"ramp_down_fraction\": 1.0\n                        },\n                        \"natgas_edge\": {\n                            \"start_vertex\": \"natgas_NE\"\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_NE\"\n                        },\n                        \"co2_captured_edge\": {\n                            \"end_vertex\": \"co2_captured_NE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/natgasdaq/#Key-Points","page":"Natural Gas DAC","title":"Key Points","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"The global_data field is utilized to define attributes and constraints that apply universally to all instances of a particular asset type.\nThe start_vertex and end_vertex fields indicate the nodes to which the edges are connected. These nodes must be defined in the nodes.json file.\nBy default, only the CO₂ edge is allowed to have capacity variables and constraints, as this represents the main capacity decision for the DAC facility (see note below).\nFor a comprehensive list of attributes that can be configured for the transformation and edge components, refer to the transformation and edges pages of the Macro manual.","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"note: The `has_capacity` Edge Attribute\nThe has_capacity attribute is a flag that indicates whether a specific edge of an asset has a capacity variable, allowing it to be expanded or retired. Typically, users do not need to manually adjust this flag, as the asset creators in Macro have already configured it correctly for each edge. However, advanced users can use this flag to override the default settings for each edge if needed.","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"tip: Prefixes\nUsers can apply prefixes to adjust parameters for the components of a Natural Gas DAC asset, even when using the standard format. For instance, co2_can_retire will adjust the can_retire parameter for the CO₂ edge, and co2_existing_capacity will adjust the existing_capacity parameter for the CO₂ edge. Below are the prefixes available for modifying parameters for the components of a Natural Gas DAC asset:transform_ for the transformation component\nnatgas_ for the natural gas edge\nco2_ for the CO₂ edge\nco2_emission_ for the CO₂ emission edge\nco2_captured_ for the CO₂ captured edge\nelec_ for the electricity edge","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"","category":"page"},{"location":"Guides/Modeler Guide/modeler_introduction/#Modeler-Guides","page":"Introduction","title":"Modeler Guides","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_introduction/","page":"Introduction","title":"Introduction","text":"This guide is designed to help modelers create, debug, and test new sectors, assets, and public policies.","category":"page"},{"location":"Guides/Modeler Guide/modeler_introduction/","page":"Introduction","title":"Introduction","text":"It is organized into the following sections:","category":"page"},{"location":"Guides/Modeler Guide/modeler_introduction/","page":"Introduction","title":"Introduction","text":"Energy System Graph-Based Representation: An overview of how Macro represents an energy system as a multi-commodity flow network.\nCreating a New Sector: Step-by-step instructions for developing a new sector.\nCreating a New Asset: Instructions for creating a new asset.\nAdding Documentation for a New Asset: Instructions for adding documentation to a new asset.\nCreating a New Example Case: A guide to developing a new example case.\nSuggested Development Workflow: A recommended workflow for developing new sectors and assets.\nDebugging and Testing a Macro Model: Guidance on how to debug and test new sectors and assets.","category":"page"},{"location":"Guides/Modeler Guide/modeler_introduction/","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"Getting Started/4_macro_repo_contents/#What-is-in-the-Macro-repo?","page":"What's Included With Macro","title":"What is in the Macro repo?","text":"","category":"section"},{"location":"Getting Started/4_macro_repo_contents/","page":"What's Included With Macro","title":"What's Included With Macro","text":"If you have downloaded or cloned the Macro code, rather than simply import it as a Julia package (which is not currently possible if your are a beta-user), then you will find the following files in your Macro folder:","category":"page"},{"location":"Getting Started/4_macro_repo_contents/","page":"What's Included With Macro","title":"What's Included With Macro","text":"MacroEnergy.jl\n├── docs\n├── src\n├── test\n├── LICENSE\n└── Project.toml","category":"page"},{"location":"Getting Started/4_macro_repo_contents/","page":"What's Included With Macro","title":"What's Included With Macro","text":"You will probably see several other files and folders but you can ignore these. They are mostly responsible for configuring and managing the GitHub repository.","category":"page"},{"location":"Getting Started/4_macro_repo_contents/","page":"What's Included With Macro","title":"What's Included With Macro","text":"The list below gives brief descriptions of the files and folders in the Macro repo.","category":"page"},{"location":"Getting Started/4_macro_repo_contents/","page":"What's Included With Macro","title":"What's Included With Macro","text":"docs: This contains Macro's documentation. You will have to add content here if you create a new Asset or feature.\nsrc: This is the Macro source code. Please follow this guide if you would like more information about the structure of the code.\ntest: These are automatic tests, run every time an update is made to the Macro GitHub repository. They help us check that updates have not introduced bugs and that existing features still work as expected.\nLICENSE: Macro is released under an MIT license. These file gives the terms of the license.\nProject.toml: Macro works using a Julia project environment. This is defined in the Project.toml file. It describes all the required Julia packages, their versions, and gives some information on the current version of Macro and its authors.","category":"page"},{"location":"Getting Started/4_macro_repo_contents/","page":"What's Included With Macro","title":"What's Included With Macro","text":"","category":"page"},{"location":"Guides/Developer Guide/2_type_hierarchy/#Macro-type-hierarchy","page":"Type Hierarchy","title":"Macro type hierarchy","text":"","category":"section"},{"location":"Guides/Developer Guide/2_type_hierarchy/#Commodity-Types","page":"Type Hierarchy","title":"Commodity Types","text":"","category":"section"},{"location":"Guides/Developer Guide/2_type_hierarchy/","page":"Type Hierarchy","title":"Type Hierarchy","text":"using MacroEnergy # hide\nusing AbstractTrees # hide\nusing InteractiveUtils # hide\nAbstractTrees.children(d::DataType) = subtypes(d) # hide\nprint_tree(Commodity)","category":"page"},{"location":"Guides/Developer Guide/2_type_hierarchy/#Asset-Types","page":"Type Hierarchy","title":"Asset Types","text":"","category":"section"},{"location":"Guides/Developer Guide/2_type_hierarchy/","page":"Type Hierarchy","title":"Type Hierarchy","text":"print_tree(AbstractAsset)","category":"page"},{"location":"Guides/Developer Guide/2_type_hierarchy/#Constraint-Types","page":"Type Hierarchy","title":"Constraint Types","text":"","category":"section"},{"location":"Guides/Developer Guide/2_type_hierarchy/","page":"Type Hierarchy","title":"Type Hierarchy","text":"print_tree(MacroEnergy.AbstractTypeConstraint)","category":"page"},{"location":"Guides/Developer Guide/2_type_hierarchy/","page":"Type Hierarchy","title":"Type Hierarchy","text":"","category":"page"},{"location":"Guides/User Guide/user_run_model/#Run-a-Macro-Model","page":"Running Models","title":"Run a Macro Model","text":"","category":"section"},{"location":"Guides/User Guide/user_run_model/","page":"Running Models","title":"Running Models","text":"How to use the existing runtools\nHow to write their own run-script\ne.g. How to run several cases from one script\ne.g. How to run several cases, changing an assets cost each time","category":"page"},{"location":"Guides/User Guide/user_run_model/","page":"Running Models","title":"Running Models","text":"","category":"page"},{"location":"References/1_introduction/#References","page":"Introduction","title":"References","text":"","category":"section"},{"location":"References/1_introduction/","page":"Introduction","title":"Introduction","text":"This section contains the reference documentation for all the functionalities of the MacroEnergy package.","category":"page"},{"location":"References/1_introduction/","page":"Introduction","title":"Introduction","text":"Click on the links below to navigate to the corresponding section:","category":"page"},{"location":"References/1_introduction/","page":"Introduction","title":"Introduction","text":"Reading input functions\nMacro Objects\nOutput functions\nUtility functions","category":"page"},{"location":"References/1_introduction/","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#Debugging-and-Testing-a-Macro-Model","page":"Debugging and Testing Tips","title":"Debugging and Testing a Macro Model","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Macro offers a range of utility functions designed to make debugging and testing new models and sectors more efficient and straightforward.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"The following functions are organized with the following sections:","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Working with a System\nGenerating a Model\nWorking with Nodes\nWorking with Assets\nWorking with Edges\nWorking with Transformations\nWorking with Storages\nTime Management\nResults Collection","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#Working-with-a-System","page":"Debugging and Testing Tips","title":"Working with a System","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Let's start by loading a system from a case folder (you can find more information about the structure of this folder in the Running Macro section).","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[load_system](@ref)","page":"Debugging and Testing Tips","title":"load_system","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"using MacroEnergy\nusing HiGHS # hide\nusing DataFrames # hide\nsystem = MacroEnergy.load_system(\"doctest\");","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#propertynames","page":"Debugging and Testing Tips","title":"propertynames","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"The propertynames function in Julia can be used to retrieve the names of the fields of a System object, such as the data directory path, settings, and locations.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"propertynames(system)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"data_dirpath: Path to the data directory.\nsettings: Settings of the system.\ncommodities: Sectors modeled in the system.\ntimedata: Time resolution for each sector.\nlocations: Vector of all Locations and Nodes.\nassets: Vector of all Assets.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"A System consists of six primary fields, each of which can be accessed using dot notation:","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"system.data_dirpath\nsystem.settings","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"When interacting with a System, users might need to retrieve information about specific nodes, locations, or assets. The functions listed below are helpful for these tasks:","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[find_node](@ref)","page":"Debugging and Testing Tips","title":"find_node","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Finds a node by its ID.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"co2_node = MacroEnergy.find_node(system.locations, :co2_sink);","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_asset_types](@ref)","page":"Debugging and Testing Tips","title":"get_asset_types","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves all the types of assets in the system.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"asset_types = MacroEnergy.get_asset_types(system);\nunique(asset_types)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[asset_ids](@ref)","page":"Debugging and Testing Tips","title":"asset_ids","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the IDs of all the assets in the system.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"ids = MacroEnergy.asset_ids(system)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Once you have the IDs, you can retrieve an asset by its ID using the following function:","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_asset_by_id](@ref)","page":"Debugging and Testing Tips","title":"get_asset_by_id","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves an asset by its ID.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"battery_SE = MacroEnergy.get_asset_by_id(system, :battery_SE);\nthermal_plant_SE = MacroEnergy.get_asset_by_id(system, :SE_natural_gas_fired_combined_cycle_1);","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"The following function can be useful to retrieve a vector of all the assets of a given type.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_assets_sametype](@ref)","page":"Debugging and Testing Tips","title":"get_assets_sametype","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Returns a vector of assets of a given type.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"batteries = MacroEnergy.get_assets_sametype(system, Battery);\nbattery = batteries[1]; # first battery in the list\nthermal_plants = MacroEnergy.get_assets_sametype(system, ThermalPower{NaturalGas});\nthermal_plant = thermal_plants[1]; # first thermal power plant in the list","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#Model-Generation-and-Running","page":"Debugging and Testing Tips","title":"Model Generation and Running","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#generate_model","page":"Debugging and Testing Tips","title":"generate_model","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Uses JuMP to generate the optimization model for the system data. ","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"model = MacroEnergy.generate_model(system);","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#set_optimizer","page":"Debugging and Testing Tips","title":"set_optimizer","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Sets the optimizer for the JuMP model.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.set_optimizer(model, HiGHS.Optimizer);","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#optimize!","page":"Debugging and Testing Tips","title":"optimize!","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Solves the optimization model.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.set_silent(model) # hide\nMacroEnergy.optimize!(model)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"The following set of functions can be used to retrieve the optimal values of some variables in the model.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_optimal_capacity](@ref)","page":"Debugging and Testing Tips","title":"get_optimal_capacity","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Fetches the final capacities for all assets.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"capacity = MacroEnergy.get_optimal_capacity(system);\ncapacity[!, [:commodity, :resource_id, :value]]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_optimal_new_capacity](@ref)","page":"Debugging and Testing Tips","title":"get_optimal_new_capacity","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Fetches the new capacities for all assets.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"new_capacity = MacroEnergy.get_optimal_new_capacity(system);\nnew_capacity[!, [:commodity, :resource_id, :value]]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_optimal_retired_capacity](@ref)","page":"Debugging and Testing Tips","title":"get_optimal_retired_capacity","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Fetches the retired capacities for all assets.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"retired_capacity = MacroEnergy.get_optimal_retired_capacity(system);\nretired_capacity[!, [:commodity, :resource_id, :value]]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_optimal_discounted_costs](@ref)","page":"Debugging and Testing Tips","title":"get_optimal_discounted_costs","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Fetches all the system costs.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"costs = MacroEnergy.get_optimal_discounted_costs(model);\ncosts[!, [:variable, :value]]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#Working-with-Nodes-in-a-System","page":"Debugging and Testing Tips","title":"Working with Nodes in a System","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Once a System object is loaded, and the model is generated, users can use the following functions to inspect the nodes in the system.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"tip: Node Interface\nFor a comprehensive list of function interfaces available for node besides id, commodity_type and the ones listed below, users can refer to the node.jl and the vertex.jl source code.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[find_node](@ref)-2","page":"Debugging and Testing Tips","title":"find_node","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Finds a node in the System by its ID.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"elec_node = MacroEnergy.find_node(system.locations, :elec_SE);","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"note: Understanding Balance Equations\nNodes, as explained in the Macro Internal Components section, are a unique type of vertex that represent the demand or supply of a commodity, where each vertex in Macro is associated with a balance equation. To programmatically access all balance equations within the system, the following functions are available:balance_ids: Retrieve the IDs of all balance equations associated with a vertex.\nget_balance: Obtain the mathematical expression of a specific balance equation.\nbalance_data: Access the input balance data, which typically includes the stoichiometric coefficients of a specific balance equation, if applicable.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Here is an example of how to use these functions to access the balance equations for the electricity node in the system:","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[balance_ids](@ref)","page":"Debugging and Testing Tips","title":"balance_ids","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the IDs of all balance equations in a node.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.balance_ids(elec_node)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"note: Demand Balance Equation\nMacro automatically creates a :demand balance equation for each node that has a BalanceConstraint. ","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_balance](@ref)","page":"Debugging and Testing Tips","title":"get_balance","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the mathematical expression of the demand balance equation for the node.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"demand_expression = MacroEnergy.get_balance(elec_node, :demand);\ndemand_expression[1] # first time step","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[balance_ids](@ref)-2","page":"Debugging and Testing Tips","title":"balance_ids","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"co2_node = MacroEnergy.find_node(system.locations, :co2_sink);\nMacroEnergy.balance_ids(co2_node)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"note: CO₂ Balance Equation\nMacro automatically creates an :emissions balance equation for each CO₂ node that has a CO2CapConstraint.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_balance](@ref)-2","page":"Debugging and Testing Tips","title":"get_balance","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"emissions_expression = MacroEnergy.get_balance(co2_node, :emissions);\nemissions_expression[1] # first time step","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"tip: Total Emissions\nTo calculate the total emissions at a node, users should perform the following steps:emissions_expression = MacroEnergy.get_balance(co2_node, :emissions);\nMacroEnergy.value(sum(emissions_expression))","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"To check and visualize the mathematical expressions of the constraints applied to a node, the following functions are available:","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"all_constraints: Retrieve all constraints associated with a node.\nall_constraints_types: Retrieve all types of constraints associated with a node.\nget_constraint_by_type: Retrieve a specific constraint on a node by its type.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[all_constraints](@ref)","page":"Debugging and Testing Tips","title":"all_constraints","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves all the constraints attached to a node.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"all_constraints = MacroEnergy.all_constraints(elec_node);","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[all_constraints_types](@ref)","page":"Debugging and Testing Tips","title":"all_constraints_types","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves all the types of constraints attached to a node.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"all_constraints_types = MacroEnergy.all_constraints_types(elec_node)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_constraint_by_type](@ref),-constraint_ref","page":"Debugging and Testing Tips","title":"get_constraint_by_type, constraint_ref","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves a constraint on a node by its type.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"balance_constraint = MacroEnergy.get_constraint_by_type(elec_node, BalanceConstraint);\nMacroEnergy.constraint_ref(balance_constraint);\n\nmax_non_served_demand_constraint = MacroEnergy.get_constraint_by_type(elec_node, MaxNonServedDemandConstraint);\nMacroEnergy.constraint_ref(max_non_served_demand_constraint)[1:5]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#Working-with-Assets","page":"Debugging and Testing Tips","title":"Working with Assets","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Together with Locations, assets form the core components of an energy system in Macro. The functions below are essential for managing and interacting with assets.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#id","page":"Debugging and Testing Tips","title":"id","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the ID of an asset.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"thermal_plant = MacroEnergy.get_asset_by_id(system, :SE_natural_gas_fired_combined_cycle_1);\nMacroEnergy.id(thermal_plant)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[print_struct_info](@ref)","page":"Debugging and Testing Tips","title":"print_struct_info","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Prints the structure of an asset in terms of its components (edges, transformations, storages, etc.)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.print_struct_info(thermal_plant)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Once you have collected the names of the components of an asset, you can use the following function to get a specific component by its name.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_component_by_fieldname](@ref)","page":"Debugging and Testing Tips","title":"get_component_by_fieldname","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves a component of an asset by its field name.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"elec_edge = MacroEnergy.get_component_by_fieldname(thermal_plant, :elec_edge);\nMacroEnergy.id(elec_edge)\nMacroEnergy.typeof(elec_edge)\nMacroEnergy.commodity_type(elec_edge)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Alternatively, users can retrieve a specific component using its ID.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_component_ids](@ref)","page":"Debugging and Testing Tips","title":"get_component_ids","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the IDs of all the components of an asset.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.get_component_ids(thermal_plant)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_component_by_id](@ref)","page":"Debugging and Testing Tips","title":"get_component_by_id","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves a component of an asset by its ID.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"elec_edge = MacroEnergy.get_component_by_id(thermal_plant, :SE_natural_gas_fired_combined_cycle_1_elec_edge);\nMacroEnergy.id(elec_edge)\nMacroEnergy.typeof(elec_edge)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#Working-with-Edges","page":"Debugging and Testing Tips","title":"Working with Edges","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#id-2","page":"Debugging and Testing Tips","title":"id","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the ID of an edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.id(elec_edge)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#commodity_type","page":"Debugging and Testing Tips","title":"commodity_type","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the commodity type of an edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.commodity_type(elec_edge)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"tip: Edge Interface\nFor a comprehensive list of function interfaces available for edge besides id, commodity_type and the ones listed below, users can refer to the edge.jl source code.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_edges](@ref)","page":"Debugging and Testing Tips","title":"get_edges","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves all the edges in the system.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"edges = MacroEnergy.get_edges(system);","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#capacity","page":"Debugging and Testing Tips","title":"capacity","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the capacity expression of an edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"capacity_expression = MacroEnergy.capacity(elec_edge)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#final_capacity","page":"Debugging and Testing Tips","title":"final_capacity","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the final capacity of an edge (i.e. the optimal value of the capacity expression).","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"capacity_expression = MacroEnergy.capacity(elec_edge)\nMacroEnergy.value(capacity_expression)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#flow","page":"Debugging and Testing Tips","title":"flow","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the flow variables of an edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"flow_variables = MacroEnergy.flow(elec_edge);\nflow_variables[1:5]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#value","page":"Debugging and Testing Tips","title":"value","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the values of the flow variables of an edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"flow_values = MacroEnergy.value.(flow_variables);\nflow_values[1:5]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"note: Broadcasted `value`\nNote that the value function is called with the dot notation to apply it to each element of the flow_variables array (see Julia's documentation for more information).","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"In this example, we first get the flow of the CO₂ edge and then we call the value function to get the values of these variables.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"co2_edge = MacroEnergy.get_component_by_fieldname(thermal_plant, :co2_edge);\nemission = MacroEnergy.flow(co2_edge)[1:5]\nemission_values = MacroEnergy.value.(emission);\nemission_values[1:5]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"The functions available for nodes when dealing with constraints can also be used for edges.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[all_constraints_types](@ref)-2","page":"Debugging and Testing Tips","title":"all_constraints_types","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.all_constraints_types(elec_edge)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_constraint_by_type](@ref)","page":"Debugging and Testing Tips","title":"get_constraint_by_type","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"constraint = MacroEnergy.get_constraint_by_type(elec_edge, CapacityConstraint);\nMacroEnergy.constraint_ref(constraint)[1:5]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#start_vertex","page":"Debugging and Testing Tips","title":"start_vertex","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the starting node of an edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"start_node = MacroEnergy.start_vertex(elec_edge);\nMacroEnergy.id(start_node)\nMacroEnergy.typeof(start_node)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#end_vertex","page":"Debugging and Testing Tips","title":"end_vertex","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the ending node of an edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"end_node = MacroEnergy.end_vertex(elec_edge);\nMacroEnergy.id(end_node)\nMacroEnergy.typeof(end_node)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#Working-with-Transformations","page":"Debugging and Testing Tips","title":"Working with Transformations","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"tip: Transformation Interface\nFor a comprehensive list of function interfaces available for transformation besides id, commodity_type and the ones listed below, users can refer to the transformation.jl and the vertex.jl source code.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"To access the transformation component of an asset, utilize the following functions:","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.print_struct_info(thermal_plant)\nthermal_transform = MacroEnergy.get_component_by_fieldname(thermal_plant, :thermal_transform);\nMacroEnergy.id(thermal_transform)\nMacroEnergy.typeof(thermal_transform)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[balance_ids](@ref)-3","page":"Debugging and Testing Tips","title":"balance_ids","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the IDs of all the balance equations in a transformation.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.balance_ids(thermal_transform)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[balance_data](@ref)","page":"Debugging and Testing Tips","title":"balance_data","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the balance data of a transformation. This is very useful to check the stoichiometric coefficients of a transformation.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.balance_data(thermal_transform, :energy)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_balance](@ref)-3","page":"Debugging and Testing Tips","title":"get_balance","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the mathematical expression of the balance of a transformation.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.get_balance(thermal_transform, :energy)[1:5]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"We can do the same for the emissions balance equation.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[balance_data](@ref)-2","page":"Debugging and Testing Tips","title":"balance_data","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.balance_data(thermal_transform, :emissions)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_balance](@ref)-4","page":"Debugging and Testing Tips","title":"get_balance","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.get_balance(thermal_transform, :emissions)[1:5]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"The functions available for nodes and edges can also be applied to transformations.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[all_constraints](@ref)-2","page":"Debugging and Testing Tips","title":"all_constraints","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.all_constraints(thermal_transform)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[all_constraints_types](@ref)-3","page":"Debugging and Testing Tips","title":"all_constraints_types","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.all_constraints_types(thermal_transform)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_constraint_by_type](@ref)-2","page":"Debugging and Testing Tips","title":"get_constraint_by_type","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.get_constraint_by_type(thermal_transform, BalanceConstraint)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#Working-with-Storages","page":"Debugging and Testing Tips","title":"Working with Storages","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"tip: Storage Interface\nFor a comprehensive list of function interfaces available for storage besides id, commodity_type and the ones listed below, users can refer to the storage.jl and the vertex.jl source code.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"To access the storage component of an asset, utilize the following functions:","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"battery = MacroEnergy.get_asset_by_id(system, :battery_SE);\nMacroEnergy.print_struct_info(battery)\nstorage = MacroEnergy.get_component_by_fieldname(battery, :battery_storage);\nMacroEnergy.id(storage)\nMacroEnergy.typeof(storage)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[balance_ids](@ref)-4","page":"Debugging and Testing Tips","title":"balance_ids","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the IDs of all the balance equations in a storage.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.balance_ids(storage)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[balance_data](@ref)-3","page":"Debugging and Testing Tips","title":"balance_data","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the balance data of a storage. This is very useful to check the stoichiometric coefficients of a storage.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.balance_data(storage, :storage)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_balance](@ref)-5","page":"Debugging and Testing Tips","title":"get_balance","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the mathematical expression of the balance of a storage.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.get_balance(storage, :storage)[1:5]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"The same set of functions that we have seen for nodes, edges, and transformations are also available for storages.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[all_constraints_types](@ref)-4","page":"Debugging and Testing Tips","title":"all_constraints_types","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.all_constraints_types(storage)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_constraint_by_type](@ref)-3","page":"Debugging and Testing Tips","title":"get_constraint_by_type","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.get_constraint_by_type(storage, BalanceConstraint)\nconstraint = MacroEnergy.get_constraint_by_type(storage, StorageCapacityConstraint);\nMacroEnergy.constraint_ref(constraint)[1:5]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#storage_level","page":"Debugging and Testing Tips","title":"storage_level","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the storage level variables of a storage component.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"storage_level = MacroEnergy.storage_level(storage);\nMacroEnergy.value.(storage_level)[1:5]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#charge_edge","page":"Debugging and Testing Tips","title":"charge_edge","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the charge edge connected to a storage component.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"charge_edge = MacroEnergy.charge_edge(storage);\nMacroEnergy.id(charge_edge)\nMacroEnergy.typeof(charge_edge)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#discharge_edge","page":"Debugging and Testing Tips","title":"discharge_edge","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the discharge edge connected to a storage component.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"discharge_edge = MacroEnergy.discharge_edge(storage);\nMacroEnergy.id(discharge_edge)\nMacroEnergy.typeof(discharge_edge)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#spillage_edge","page":"Debugging and Testing Tips","title":"spillage_edge","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the spillage edge connected to a storage component (applicable to hydro reservoirs).","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"julia> MacroEnergy.spillage_edge(storage)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#Time-Management","page":"Debugging and Testing Tips","title":"Time Management","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"vertex = MacroEnergy.find_node(system.locations, :elec_SE);\nedge = MacroEnergy.get_component_by_fieldname(thermal_plant, :elec_edge);","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#time_interval","page":"Debugging and Testing Tips","title":"time_interval","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the time interval of a vertex/edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.time_interval(vertex)\nMacroEnergy.time_interval(edge)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#period_map","page":"Debugging and Testing Tips","title":"period_map","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the period map of a vertex/edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.period_map(vertex)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#modeled_subperiods","page":"Debugging and Testing Tips","title":"modeled_subperiods","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the modeled subperiods of a vertex/edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.modeled_subperiods(vertex)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#current_subperiod","page":"Debugging and Testing Tips","title":"current_subperiod","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the subperiod a given time step belongs to for the time series attached to a given vertex/edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.current_subperiod(vertex, 7)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#subperiods","page":"Debugging and Testing Tips","title":"subperiods","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the subperiods of the time series attached to a vertex/edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.subperiods(vertex)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#subperiod_indices","page":"Debugging and Testing Tips","title":"subperiod_indices","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the indices of the subperiods of the time series attached to a vertex/edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.subperiod_indices(vertex)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#get_subperiod","page":"Debugging and Testing Tips","title":"get_subperiod","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the subperiod of a vertex/edge for a given index.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.get_subperiod(vertex, 6)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#subperiod_weight","page":"Debugging and Testing Tips","title":"subperiod_weight","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Retrieves the weight of a subperiod of a vertex/edge for a given index.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"MacroEnergy.subperiod_weight(vertex, 17)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#Results-Collection","page":"Debugging and Testing Tips","title":"Results Collection","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[collect_results](@ref)","page":"Debugging and Testing Tips","title":"collect_results","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Collects all the results from the model as a set of DataFrames:","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"All the capacity variables/expressions (capacity, new_capacity, retired_capacity)\nAll the flow variables (flow)\nNon-served demand variables (non_served_demand)\nStorage level variables (storage_level)\nCosts (costs)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"results = MacroEnergy.collect_results(system, model);\nfirst(results, 5)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[reshape_wide](@ref)","page":"Debugging and Testing Tips","title":"reshape_wide","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Reshapes the results to wide format.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"capacity_results = MacroEnergy.get_optimal_capacity(system; scaling=1e3);\nnew_capacity_results = MacroEnergy.get_optimal_new_capacity(system; scaling=1e3);\nretired_capacity_results = MacroEnergy.get_optimal_retired_capacity(system; scaling=1e3);\nall_capacity_results = vcat(capacity_results, new_capacity_results, retired_capacity_results);\ndf_wide = MacroEnergy.reshape_wide(all_capacity_results);\ndf_wide[1:5, [:commodity, :resource_id, :capacity, :new_capacity, :retired_capacity]]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[write_flow](@ref)","page":"Debugging and Testing Tips","title":"write_flow","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Writes the flow results to a (CSV, CSV.GZ, or Parquet) file. An optional commodity and asset type filter can be applied.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"julia> write_flow(\"flow.csv\", system)\n# Filter by commodity: write only the flow of edges of commodity \"Electricity\"\njulia> write_flow(\"flow.csv\", system, commodity=\"Electricity\")\n# Filter by commodity and asset type using parameter-free matching\njulia> write_flow(\"flow.csv\", system, commodity=\"Electricity\", asset_type=\"ThermalPower\")\n# Filter by commodity and asset type using wildcard matching\njulia> write_flow(\"flow.csv\", system, commodity=\"Electricity\", asset_type=\"ThermalPower*\")","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[write_capacity](@ref)","page":"Debugging and Testing Tips","title":"write_capacity","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Writes the capacity results to a (CSV, CSV.GZ, or Parquet) file. An optional commodity and asset type filter can be applied.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"julia> write_capacity(\"capacity.csv\", system)\n# Filter by commodity: write only the capacity of edges of commodity \"Electricity\"\njulia> write_capacity(\"capacity.csv\", system, commodity=\"Electricity\")\n# Filter by commodity and asset type using parameter-free matching\njulia> write_capacity(\"capacity.csv\", system, asset_type=\"ThermalPower\")\n# Filter by asset type using wildcard matching\njulia> write_capacity(\"capacity.csv\", system, asset_type=\"ThermalPower*\")\n# Filter by commodity and asset type\njulia> write_capacity(\"capacity.csv\", system, commodity=\"Electricity\", asset_type=[\"ThermalPower\", \"Battery\"])","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[write_costs](@ref)","page":"Debugging and Testing Tips","title":"write_costs","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"Writes the costs results to a (CSV, CSV.GZ, or Parquet) file. An optional type filter can be applied.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"julia> write_costs(\"costs.csv\", system, model)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[write_settings](@ref)","page":"Debugging and Testing Tips","title":"write_settings","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"julia> write_settings(case, \"settings.json\")","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"This function exports case and system settings to a JSON file, useful for debugging and documentation.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[write_results](@ref)","page":"Debugging and Testing Tips","title":"write_results","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"julia> write_results(file_path, system, model, settings, ext=\".csv.gz\")\njulia> write_results(file_path, system, model, settings, ext=\".parquet\")","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"This function creates multiple output files, one for each result type:","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"file_path_capacity.ext - Capacity results\nfile_path_flow.ext - Flow results\nfile_path_non_served_demand.ext - Non-served demand\nfile_path_storage_level.ext - Storage levels\nfile_path_discounted_costs.ext - Discounted costs\nfile_path_undiscounted_costs.ext - Undiscounted costs","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"warning: Legacy Function\nThis function is part of the legacy unified output system. For new code, consider using the specialized output functions instead.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing Tips","title":"Debugging and Testing Tips","text":"","category":"page"},{"location":"Appendix/TEA/#tea","page":"TEA","title":"Techno-Economic Analysis Simplified: A Practical Guide for Macro Users","text":"","category":"section"},{"location":"Appendix/TEA/#tea_authors","page":"TEA","title":"Authors","text":"","category":"section"},{"location":"Appendix/TEA/","page":"TEA","title":"TEA","text":"Hongxi Luo and Eric D. Larson","category":"page"},{"location":"Appendix/TEA/","page":"TEA","title":"TEA","text":"Andlinger Center for Energy and the Environment, Princeton University, Princeton, NJ 08540, USA","category":"page"},{"location":"Appendix/TEA/#tea_background","page":"TEA","title":"Background","text":"","category":"section"},{"location":"Appendix/TEA/","page":"TEA","title":"TEA","text":"This document provides high-level guidance and practical recommendations for Macro users who are new to techno-economic analysis, assisting them in extracting relevant techno-economic parameters from the literature for technology assets to be represented in Macro. While not required by Macro, it is strongly recommended that users carefully document the sources of the techno-economic parameters for all assets.","category":"page"},{"location":"Appendix/TEA/#tea_example_system","page":"TEA","title":"Example System","text":"","category":"section"},{"location":"Appendix/TEA/","page":"TEA","title":"TEA","text":"The Natural Gas Combined Cycle with carbon capture and storage (NGCC-CCS), categorized under \"ThermalPowerCCS\" in Macro, is used as the example, with the technical report \"Cost and Performance Baseline for Fossil Energy Plants Volume 1: Bituminous Coal and Natural Gas to Electricity\" from the National Energy Technology Laboratory (NETL) [1] serving as the primary reference. Tables and figures in this NETL report are labeled \"Exhibits 1-1\", \"Exhibit 2-1\", etc. and so will be referred to in this guide as \"Ex 1-1\", \"Ex 2-1\", etc.","category":"page"},{"location":"Appendix/TEA/#tea_system_description","page":"TEA","title":"System Description","text":"","category":"section"},{"location":"Appendix/TEA/","page":"TEA","title":"TEA","text":"The example has two significant components –- the NGCC power plant and the CCS facility.","category":"page"},{"location":"Appendix/TEA/","page":"TEA","title":"TEA","text":"The NGCC power plant features a 2×2×1 configuration, consisting of two F-class combustion turbine generators (CTGs), two heat recovery steam generators (HRSGs), and one steam turbine generator (STG).\nThe CCS facility captures 90% of the CO₂ from the flue gas exiting the HRSGs using the Cansolv (amine solvent) system, purifies it, and compresses it to conditions suitable for pipeline transportation.","category":"page"},{"location":"Appendix/TEA/#tea_fuel_properties","page":"TEA","title":"Fuel Properties","text":"","category":"section"},{"location":"Appendix/TEA/","page":"TEA","title":"TEA","text":"Parameters related to fuel properties are \"emission_rate\" and \"capture_rate\".","category":"page"},{"location":"Appendix/TEA/","page":"TEA","title":"TEA","text":"Ex 2-6 provides the natural gas composition on a volumetric basis. Under standard conditions and assuming ideal gas behavior, the volumetric composition can be approximated by the molar composition. By applying the appropriate molecular weight (e.g., 16 kg/kmol for CH₄) and accounting for the atom balance (e.g., one carbon atom per CH₄ molecule), the CO₂ emissions embedded in natural gas (assuming eventual complete combustion) are 2.64 kg CO₂ per kg of natural gas, or 2.64 tonnes of CO₂ per tonne of natural gas.\nEx 2-6 provides the higher heating value (HHV) and lower heating value (LHV) of natural gas: 52,295 kJ/kg and 47,201 kJ/kg, respectively. Dividing these numbers by 3,600 to convert kJ/kg into MWh/tonne, the HHV and LHV of natural gas are 14.53 MWh/tonne and 13.11 MWh/tonne, respectively.\nBased on the calculations above, the CO₂ emissions embedded in natural gas are 0.182 tonnes of CO₂ per MWh of natural gas (HHV basis) and 0.201 tonnes of CO₂ per MWh of natural gas (LHV basis). Upon complete combustion, all the CO₂ embedded in natural gas is converted to CO₂ in the flue gas, with 90% captured and 10% emitted.\nThe emission_rate for this asset in the Macro is 0.0182 tonnes of CO₂ per MWh of natural gas (HHV basis) or 0.0201 tonnes of CO₂ per MWh (LHV basis).\nThe capture_rate for this asset in the Macro is 0.1638 tonnes of CO₂ per MWh of natural gas (HHV basis) and 0.1809 tonnes of CO₂ per MWh (LHV basis).","category":"page"},{"location":"Appendix/TEA/#tea_fuel_properties_notes","page":"TEA","title":"Fuel Properties - Notes","text":"","category":"section"},{"location":"Appendix/TEA/","page":"TEA","title":"TEA","text":"The calculation method above relies on fuel composition and elemental balance, ensuring high analytical rigor. In cases where this information is unavailable, users can refer to well-established emission factors for fuels.\nThe calculations above reflect the emissions associated with natural gas consumption. However, emissions from natural gas extraction and transportation can also be significant and should be incorporated separately in other sections of the Macro model. These considerations apply equally to other fuels, including coal and biomass.\nUsers should recognize that CO₂ removal efficiency (e.g., 90% for the NGCC-CCS case) is specific to each technology asset and must ensure that an appropriate CO₂ removal efficiency is used when calculating both the emission_rate and the capture_rate.","category":"page"},{"location":"Appendix/TEA/#tea_steady_state_operation","page":"TEA","title":"Steady-state Operation","text":"","category":"section"},{"location":"Appendix/TEA/","page":"TEA","title":"TEA","text":"Key parameters for steady-state operations are \"fuel_consumption\" and \"capacity_size\".","category":"page"},{"location":"Appendix/TEA/","page":"TEA","title":"TEA","text":"Ex 5-23 shows that the NGCC-CCS facility has a net electric power output of 646 MWe. Hence, the capacity_size for this asset in the Macro is 646 MWe.\nEx 5-23 indicates that the net plant efficiency is 47.7% (HHV basis) and 52.8% (LHV basis). Therefore, the fuel_consumption (reciprocal of efficiency) for this asset in the Macro is 2.096 (HHV basis) or 1.894 (LHV basis).","category":"page"},{"location":"Appendix/TEA/#tea_steady_state_operation_notes","page":"TEA","title":"Steady-state Operation - Notes","text":"","category":"section"},{"location":"Appendix/TEA/","page":"TEA","title":"TEA","text":"Within an asset, users must ensure that they input the emission_rate, capture_rate, and fuel_consumption using a consistent heating value basis, either LHV or HHV.\nIt is recommended that users use the capacity_size and fuel_consumption that are representative of the geographic region of interest. For technology assets expected to be deployed only in the future, it may be acceptable to use capacity_size and fuel_consumption projections from other regions if no specific values are available for the region of interest.","category":"page"},{"location":"Appendix/TEA/#tea_project_economics","page":"TEA","title":"Project Economics","text":"","category":"section"},{"location":"Appendix/TEA/","page":"TEA","title":"TEA","text":"Parameters related to project economics are \"investment_cost\", \"fixed_om_cost\", \"variable_om_cost\" and fuel cost.","category":"page"},{"location":"Appendix/TEA/","page":"TEA","title":"TEA","text":"Ex 5-32 shows that the total as-spent cost (TASC) of the NGCC-CCS facility is $1,701,831,000 (in 2018 dollars). Dividing this by the facility's capacity (i.e., capacity_size) of 646 MWe yields a unit capacity investment of $2,634,413 per MWe (in 2018 dollars). Therefore, in the Macro model, the investment_cost for this asset is $2,634,413/MWe. If users instead wish to input an annualized_investment_cost, a capital recovery factor (e.g., 0.07 as recommended in another NETL report [2]) can be applied to the investment_cost, resulting in an annualized_investment_cost of $184,409/yr-MWe (in 2018 dollars) for this asset in the Macro model.\nEx 5-33 indicates that the annual fixed operating costs are $63.91 per year per kWe (in 2018 dollars). Therefore, the fixed_om_cost for this asset in the Macro model is $63,911/yr-MWe (in 2018 dollars).\nEx 5-33 shows that the variable operating costs (which excludes fuel costs) are $5.63 per MWh (in 2018 dollars). Hence, the variable_om_cost for this asset in the Macro model is $5.63/MWh (in 2018 dollars).\nThe study uses a natural gas price of $4.19 per GJ on an HHV basis (in 2018 dollars, as noted in the paragraph above Exhibit 2-6). As a result, users should input $15.08/MWh for all cells under \"Time_Index\" in the \"fuel_price.csv\" file.","category":"page"},{"location":"Appendix/TEA/#tea_project_economics_notes","page":"TEA","title":"Project Economics - Notes","text":"","category":"section"},{"location":"Appendix/TEA/","page":"TEA","title":"TEA","text":"Ideally, techno-economic parameters reported by studies that thoroughly discuss input data and assumptions should be prioritized. A good example of such studies, in the form of a journal article, is [3].\nUsers should carefully identify the underlying assumptions and considerations for capital cost estimates, such as which cost layers are included, how each cost layer is evaluated, and whether the project is first-of-its-kind or commercially mature, because these factors can significantly influence the final capital cost value. For example, in Ex 2-20 of the NETL report, the capital cost is divided into five layers, ranging from the bare-erected cost (BEC) to the total as-spent cost (TASC). In the case of the NGCC-CCS facility, the BEC, as shown in Ex 5-31, is $847,376,000 (in 2018 dollars). If this value is used instead of the TASC, the investment_cost for this asset in the Macro model would be $1,311,727/MWe (in 2018 dollars). In this case, understanding whether to use TASC or one of the other capital cost layers in the NETL report is the responsibility of the user.\nUsers should carefully identify the base year of the capital cost values (e.g., 2018 for the NGCC-CCS example) and ensure consistency in the base year used across different assets. If the base year differs between the collected values, appropriate indexes, such as the Chemical Engineering Plant Cost Index (CEPCI) [4] or its equivalent, should be referenced and applied to adjust all base years to a common desired base year.\nUsers should carefully identify the geographic region for which capital cost values are developed and always use values specific to the region of interest. If capital costs for the desired region are unavailable, location factors may be used to adjust values from another region [5]. Generally, it is inappropriate to apply capital cost values directly from one region to another.\nUsers should understand that once a capital cost value –- whether derived from real-world projects or engineering design studies –- is selected as a representative value for an asset in the Macro model, it becomes a user estimate. This estimate is unlikely to be more accurate than a Class IV estimate, as defined by the Association for the Advancement of Cost Engineering (AACE) [6], which has an uncertainty range of -30% to +50%. This range should be kept in mind when considering conducting sensitivity analysis on investment_cost values.\nUsers should recognize that the reported capital cost value typically corresponds to the capacity of a specific facility. If this capacity differs from the one of interest, e.g., if the available capital cost estimate is for a 300 MW NGCC plant, while most NGCC plants in the region of interest are 500 MW, a scaling method can be applied. Further details on how to properly conduct the scaling process can be found in a NETL report [7].\nIt is recommended that users obtain region- and technology-specific weighted-average cost of capital (WACC) [8], which forms a key part of the capital recovery factor (CRF) used to convert investment_cost into annualized_investment_cost. At a minimum, a region-specific, technology-agnostic WACC should be used.\nThe annual fixed operating costs (fixed_om_cost) typically include labor costs, maintenance costs, and property taxes and insurance. Apart from labor costs, the other expenses are generally estimated as a small percentage of the capital cost. Consequently, the base year of these costs should be adjusted in the same manner as capital costs, i.e., using the CEPCI or an equivalent index. For labor costs, statistics published by the Bureau of Labor (or equivalent organization in a region) could be consulted to determine an appropriate salary for asset operators in the desired base year.\nUsers should ensure that the annual variable operating costs (variable_om_cost) do not include fuel costs, as some studies combine them. Since the price of consumables can vary significantly, using a most recent 10-year average adjusted for inflation to reflect the desired base year is considered a reasonable approach.","category":"page"},{"location":"Appendix/TEA/#tea_references","page":"TEA","title":"References","text":"","category":"section"},{"location":"Appendix/TEA/","page":"TEA","title":"TEA","text":"1. James Iii, R.E., et al., Cost and performance baseline for fossil energy plants volume 1: bituminous coal and natural gas to electricity. 2019, National Energy Technology Laboratory (NETL), Pittsburgh, PA, Morgantown, WV .... Available from: https://www.osti.gov/biblio/1569246","category":"page"},{"location":"Appendix/TEA/","page":"TEA","title":"TEA","text":"2. Theis, J., Quality Guidelines for Energy Systems Studies: Cost Estimation Methodology for NETL Assessments of Power Plant Performance. 2021: United States.","category":"page"},{"location":"Appendix/TEA/","page":"TEA","title":"TEA","text":"3. Luo, H., et al., Biopower with molten carbonate fuel cell carbon dioxide capture: Performance, cost, and grid-integration evaluations. Energy Conversion and Management, 2024. 322: p. 119167.","category":"page"},{"location":"Appendix/TEA/","page":"TEA","title":"TEA","text":"4. The Chemical Engineering Plant Cost Index. Chemical Engineering, 2023 [cited 2023 Feb 28]; Available from: https://www.chemengonline.com/pci-home.","category":"page"},{"location":"Appendix/TEA/","page":"TEA","title":"TEA","text":"5. Towler, G. and R. Sinnott, Chemical engineering design: principles, practice and economics of plant and process design. 2021: Butterworth-Heinemann.","category":"page"},{"location":"Appendix/TEA/","page":"TEA","title":"TEA","text":"6. Christensen, P., et al., Cost Estimate Classification system-as applied in engineering, procurement, and construction for the process industries. AACE International Recommended Practices, 2005: p. 1-30.","category":"page"},{"location":"Appendix/TEA/","page":"TEA","title":"TEA","text":"7. Zoelle, A. and N. Kuehn, Quality Guidelines for Energy System Studies: Capital Cost Scaling Methodology: Revision 4 Report. 2019, National Energy Technology Laboratory (NETL), Pittsburgh, PA, Morgantown, WV ....","category":"page"},{"location":"Appendix/TEA/","page":"TEA","title":"TEA","text":"8. Davis, D. Methods, Assumptions, Scenarios & Sensitivities. Net Zero Australia 2023 [cited 2025 Jan, 2nd]; Available from: https://www.netzeroaustralia.net.au/wp-content/uploads/2023/04/Net-Zero-Australia-Methods-Assumptions-Scenarios-Sensitivities.pdf.","category":"page"},{"location":"Appendix/TEA/","page":"TEA","title":"TEA","text":"","category":"page"},{"location":"Guides/Modeler Guide/modeler_create_example_case/#modeler_create_example_case","page":"Creating a New Example Case","title":"Creating a New Example Case","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_create_example_case/","page":"Creating a New Example Case","title":"Creating a New Example Case","text":"The best way to get started is by reviewing the existing example cases in the Macro repository, located in the MacroEnergyExamples.jl repo.","category":"page"},{"location":"Guides/Modeler Guide/modeler_create_example_case/","page":"Creating a New Example Case","title":"Creating a New Example Case","text":"As described in Running Macro, an example case is a directory containing all the necessary data files to run the model. The folder should follow the structure outlined below:","category":"page"},{"location":"Guides/Modeler Guide/modeler_create_example_case/","page":"Creating a New Example Case","title":"Creating a New Example Case","text":"MyCase\n│ \n├── 📁 settings\n│   └── macro_settings.yml\n│ \n├── 📁 system\n│   ├── commodities.json \n│   ├── time_data.json\n│   ├── nodes.json\n│   ├── fuel_prices.csv\n│   └── demand.csv\n│ \n├── 📁 assets\n│   ├── MyNewAsset1.json\n│   ├── MyNewAsset2.json\n| [...other asset types...]\n│   └── availability.csv\n│ \n└── system_data.json","category":"page"},{"location":"Guides/Modeler Guide/modeler_create_example_case/","page":"Creating a New Example Case","title":"Creating a New Example Case","text":"To test the new sector and assets, make sure the following items are correctly set up:","category":"page"},{"location":"Guides/Modeler Guide/modeler_create_example_case/","page":"Creating a New Example Case","title":"Creating a New Example Case","text":"<div style=\"margin-left: 2em;\">\n<input type=\"checkbox\" style=\"margin-right: 4px;\"> The new sector is included in the <strong>commodities.json</strong> file.<br>\n<input type=\"checkbox\" style=\"margin-right: 4px;\"> The new sector is defined in the <strong>time_data.json</strong> file, with appropriate values for HoursPerTimeStep and HoursPerSubperiod.<br>\n<input type=\"checkbox\" style=\"margin-right: 4px;\"> Nodes for the new sector are included in the <strong>nodes.json</strong> file.<br>\n<input type=\"checkbox\" style=\"margin-right: 4px;\"> If applicable, add demand for the new sector at each relevant node in the <strong>demand.csv</strong> file.<br>\n<input type=\"checkbox\" style=\"margin-right: 4px;\"> New assets are defined in their respective JSON files within the <strong>assets</strong> folder.<br>\n<input type=\"checkbox\" style=\"margin-right: 4px;\"> If necessary, update the <strong>fuel_prices.csv</strong> file with the fuel prices for the new sector.<br>\n<input type=\"checkbox\" style=\"margin-right: 4px;\"> If necessary, update the <strong>availability.csv</strong> file with the availability information for the new assets.<br>\n</div>\n<br>","category":"page"},{"location":"Guides/Modeler Guide/modeler_create_example_case/","page":"Creating a New Example Case","title":"Creating a New Example Case","text":"warning: Important Checks\nDouble-check that the keys in commodities.json and time_data.json exactly match the name of the new sector (i.e., the Julia abstract type name it was added to the model).\nEnsure that the values of the type keys in the node JSON entries match the name of the sector.\nFor each asset JSON file, verify that the type key matches the Julia struct name created, and that the commodity keys in the edges and storage sections are correct.","category":"page"},{"location":"Guides/Modeler Guide/modeler_create_example_case/","page":"Creating a New Example Case","title":"Creating a New Example Case","text":"","category":"page"},{"location":"References/2_reading_input/#Reading-input-functions","page":"Reading input data","title":"Reading input functions","text":"","category":"section"},{"location":"References/2_reading_input/","page":"Reading input data","title":"Reading input data","text":"Pages = [\"1_reading_input.md\"]","category":"page"},{"location":"References/2_reading_input/#add_default_system_data!","page":"Reading input data","title":"add_default_system_data!","text":"","category":"section"},{"location":"References/2_reading_input/#MacroEnergy.add_default_system_data!","page":"Reading input data","title":"MacroEnergy.add_default_system_data!","text":"add_default_system_data!(system_data::AbstractDict{Symbol,Any})::Nothing\n\nAdd the default system data to the system data dictionary. This adds any required fields that are missing.\n\n\n\n\n\n","category":"function"},{"location":"References/2_reading_input/#clean_up_keys","page":"Reading input data","title":"clean_up_keys","text":"","category":"section"},{"location":"References/2_reading_input/#MacroEnergy.clean_up_keys","page":"Reading input data","title":"MacroEnergy.clean_up_keys","text":"clean_up_keys(dict::AbstractDict{Symbol,Any})::AbstractDict{Symbol,Any}\n\nClean up a Dict{Symbol,Any} object by copying values from keys that match the key name.\n\n\n\n\n\n","category":"function"},{"location":"References/2_reading_input/#eager_load_json_inputs","page":"Reading input data","title":"eager_load_json_inputs","text":"","category":"section"},{"location":"References/2_reading_input/#MacroEnergy.eager_load_json_inputs","page":"Reading input data","title":"MacroEnergy.eager_load_json_inputs","text":"eager_load_json_inputs(json_data::AbstractDict{Symbol, Any}, rel_path::AbstractString)::AbstractDict{Symbol, Any}\n\nRecursively loads data from sources specified in an input Dict{Symbol,Any} and returns a new \nDict{Symbol,Any} object with the data inserted.\n\n\n\n\n\neager_load_json_inputs(json_data::AbstractVector{<:AbstractDict{Symbol,Any}}, rel_path::AbstractString)::AbstractVector{<:AbstractDict{Symbol,Any}}\n\nRecursively loads data from sources specified in several input Dict{Symbol,Any}, stored as a Vector, \nand returns a new Vector{Dict{Symbol,Any}} object with the data inserted.\n\n\n\n\n\n","category":"function"},{"location":"References/2_reading_input/#fetch_data","page":"Reading input data","title":"fetch_data","text":"","category":"section"},{"location":"References/2_reading_input/#MacroEnergy.fetch_data","page":"Reading input data","title":"MacroEnergy.fetch_data","text":"fetch_data(path::AbstractString, dict::AbstractDict{Symbol, Any}, root_path::AbstractString, lazy_load::Bool = true)::Any\n\nFetch data from a JSON file or directory and return it as a Dict{Symbol,Any} object.\n\n\n\n\n\n","category":"function"},{"location":"References/2_reading_input/#load_csv","page":"Reading input data","title":"load_csv","text":"","category":"section"},{"location":"References/2_reading_input/#MacroEnergy.load_csv","page":"Reading input data","title":"MacroEnergy.load_csv","text":"load_time_series_data(file_path::AbstractString, header::AbstractVector{Symbol})::Dict{Symbol,Any}\n\nLoad time series data from one or more headers in a CSV file and return as a DataFrame.\n\n\n\n\n\n","category":"function"},{"location":"References/2_reading_input/#load_default_system_data","page":"Reading input data","title":"load_default_system_data","text":"","category":"section"},{"location":"References/2_reading_input/#MacroEnergy.load_default_system_data","page":"Reading input data","title":"MacroEnergy.load_default_system_data","text":"load_default_system_data()::Dict{Symbol,Any}\n\nLoad the default system data from a JSON file.  This describes the default locations for the system data files.\n\n\n\n\n\n","category":"function"},{"location":"References/2_reading_input/#load_json_inputs","page":"Reading input data","title":"load_json_inputs","text":"","category":"section"},{"location":"References/2_reading_input/#MacroEnergy.load_json_inputs","page":"Reading input data","title":"MacroEnergy.load_json_inputs","text":"load_json_inputs(file_path::AbstractString; rel_path::AbstractString=dirname(file_path), lazy_load::Bool = true)::Dict{Symbol,Any}\n\nLoad JSON data from a file and return a Dict{Symbol,Any} object. The data can all be included in the \nspecified JSON file or distributed across multiple files and directories, with each source specified\nusing \"path\" or \"timeseries\" keys.\\n \nThe `rel_path` argument is used to specify the path relative to which the file paths of this distributed\ndata should be resolved.\\n\nIf `lazy_load` is set to `true`, then only the top-level data in the specified JSON file will be loaded. \nIf `lazy_load` is set to `false`, then the distrinuted data will be loaded recursively into the \nappropriate data structures.\n\n\n\n\n\n","category":"function"},{"location":"References/2_reading_input/#load_system","page":"Reading input data","title":"load_system","text":"","category":"section"},{"location":"References/2_reading_input/#MacroEnergy.load_system","page":"Reading input data","title":"MacroEnergy.load_system","text":"load_system(path::AbstractString = pwd(); lazy_load::Bool=true)\n\nLoad a system from the system_data.json file or directory containing the system data.\n\nArguments\n\npath::AbstractString = pwd(): The path to the system_data.json file or directory containing the system data.\nlazy_load::Bool=true: Whether to lazy load the system data.\n\nReturns\n\nA System object containing the case data.\n\nExamples\n\nsystem = load_system(\"path/to/system_data.json\")\n\nsystem = load_system(\"path/to/system_data_directory\")\n\n\n\n\n\n","category":"function"},{"location":"References/2_reading_input/#load_system_data","page":"Reading input data","title":"load_system_data","text":"","category":"section"},{"location":"References/2_reading_input/#MacroEnergy.load_system_data","page":"Reading input data","title":"MacroEnergy.load_system_data","text":"load_system_data(file_path::AbstractString, rel_path::AbstractString; lazy_load::Bool = true)::Dict{Symbol,Any}\n\nLoad the system data (currently only from a JSON file) given a file path and directory to search for the file in. All other file names defined in the system data file are assumed to be relative to rel_path.\n\n\n\n\n\nload_system_data(file_path::AbstractString, (system::System))::Dict{Symbol,Any}\n\nLoad the system data (currently only from a JSON file) given a file path and existing System. All other file names defined in the system data file are assumed to be relative to the data_dirpath field of the System.\n\n\n\n\n\n","category":"function"},{"location":"References/2_reading_input/#prep_system_data","page":"Reading input data","title":"prep_system_data","text":"","category":"section"},{"location":"References/2_reading_input/#MacroEnergy.prep_system_data","page":"Reading input data","title":"MacroEnergy.prep_system_data","text":"prep_system_data(file_path::AbstractString)::Nothing\n\nThis attempts to load the system data from the file at file_path, adds any missing fields from the default system data, and writes the updated system data back to the file. In the future, we may change this to not write to the file, but for now, it's a quick way to ensure the system data is up-to-date.\n\n\n\n\n\n","category":"function"},{"location":"References/2_reading_input/#load_benders_settings","page":"Reading input data","title":"load_benders_settings","text":"","category":"section"},{"location":"References/2_reading_input/#MacroEnergy.load_benders_settings","page":"Reading input data","title":"MacroEnergy.load_benders_settings","text":"load_benders_settings(settings::AbstractDict{Symbol,Any}, path::AbstractString)::AbstractDict{Symbol,Any}\n\nLoad Benders settings from a file. First checks if a specific path is provided in the settings, otherwise looks for benders_settings.json in the settings directory. Handles both absolute and relative paths.\n\n\n\n\n\n","category":"function"},{"location":"References/2_reading_input/#try_load_benders_settings","page":"Reading input data","title":"try_load_benders_settings","text":"","category":"section"},{"location":"References/2_reading_input/#MacroEnergy.try_load_benders_settings","page":"Reading input data","title":"MacroEnergy.try_load_benders_settings","text":"try_load_benders_settings(path::AbstractString)::Union{AbstractDict{Symbol,Any}, Nothing}\n\nAttempts to load Benders settings from the given path. Returns the settings if found, nothing otherwise.\n\n\n\n\n\n","category":"function"},{"location":"References/2_reading_input/","page":"Reading input data","title":"Reading input data","text":"","category":"page"},{"location":"Manual/assets/transmissionlink/#Transmission-Link","page":"Transmission Link","title":"Transmission Link","text":"","category":"section"},{"location":"Manual/assets/transmissionlink/#Contents","page":"Transmission Link","title":"Contents","text":"","category":"section"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"Overview | Asset Structure | Input File (Standard Format) | Types - Asset Structure | Constructors | Examples | Best Practices | Input File (Advanced Format)","category":"page"},{"location":"Manual/assets/transmissionlink/#transmissionlink_overview","page":"Transmission Link","title":"Overview","text":"","category":"section"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"Transmission Link assets in Macro represent a general commodity transmission infrastructure that links various geographic regions or nodes. These assets are specified using JSON or CSV input files located in the assets directory, usually named with descriptive identifiers such as transmissions.json or transmissions.csv.","category":"page"},{"location":"Manual/assets/transmissionlink/#transmissionlink_asset_structure","page":"Transmission Link","title":"Asset Structure","text":"","category":"section"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"A Transmission Link asset consists of one main component:","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"Transmission Edge: Represents the flow of a commodity between two nodes with capacity constraints and losses","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"Here is a graphical representation of the Transmission Link asset:","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph TransmissionLink\n  direction LR\n    A((Commodity)) e1@-->|Transmission| B((Commodity))\n    e1@{ animate: true }\n end\n    style A r:40,fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n    style B r:40,fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n    linkStyle 0 stroke:#FFD700, stroke-width: 2px;","category":"page"},{"location":"Manual/assets/transmissionlink/#transmissionlink_input_file","page":"Transmission Link","title":"Input File (Standard Format)","text":"","category":"section"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"The easiest way to include a Transmission Link asset in a model is to create a new file (either JSON or CSV) and place it in the assets directory together with the other assets. ","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"your_case/\n├── assets/\n│   ├── transmissions.json    # or transmissions.csv\n│   ├── other_assets.json\n│   └── ...\n├── system/\n├── settings/\n└── ...","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"This file can either be created manually, or using the template_asset function, as shown in the Adding an Asset to a System section of the User Guide. The file will be automatically loaded when you run your Macro model. ","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"The following is an example of a Transmission Link asset input file:","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"{\n    \"link\": [\n        {\n            \"type\": \"TransmissionLink\",\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_to_MIDAT\",\n                    \"commodity\": \"Electricity\",\n                    \"transmission_origin\": \"elec_SE\",\n                    \"transmission_dest\": \"elec_MIDAT\",\n                    \"distance\": 491.4512001,\n                    \"existing_capacity\": 5552,\n                    \"max_capacity\": 27760,\n                    \"investment_cost\": 40219,\n                    \"loss_fraction\": 0.04914512,\n                    \"transmission_constraints\": {\n                        \"MaxCapacityConstraint\": true\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"tip: Global Data vs Instance Data\nWhen working with JSON input files, the global_data field can be used to group data that is common to all instances of the same asset type. This is useful for setting constraints that are common to all instances of the same asset type and avoid repeating the same data for each instance. See the Examples section below for an example.","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"The following tables outline the attributes that can be set for a Transmission Link asset.","category":"page"},{"location":"Manual/assets/transmissionlink/#Essential-Attributes","page":"Transmission Link","title":"Essential Attributes","text":"","category":"section"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"Field Type Description\nType String Asset type identifier: \"TransmissionLink\"\nid String Unique identifier for the Transmission Link instance\ncommodity String Commodity type being transmitted (e.g., \"Electricity\")\ntransmission_origin String Origin node identifier\ntransmission_dest String Destination node identifier","category":"page"},{"location":"Manual/assets/transmissionlink/#transmissionlink_constraints","page":"Transmission Link","title":"Constraints configuration","text":"","category":"section"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"Transmission Link assets can have different constraints applied to them, and the user can configure them using the following fields:","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"Field Type Description\ntransmission_constraints Dict{String,Bool} List of constraints applied to the transmission edge.","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"Users can refer to the Adding Asset Constraints to a System section of the User Guide for a list of all the constraints that can be applied to a Transmission Link asset.","category":"page"},{"location":"Manual/assets/transmissionlink/#Default-constraints","page":"Transmission Link","title":"Default constraints","text":"","category":"section"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"To simplify the input file and the asset configuration, the following constraints are applied to the Transmission Link asset by default:","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"Capacity constraint (applied to the transmission edge)","category":"page"},{"location":"Manual/assets/transmissionlink/#Investment-Parameters","page":"Transmission Link","title":"Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"Field Type Description Units Default\ncan_retire Boolean Whether capacity can be retired - false\ncan_expand Boolean Whether capacity can be expanded - true\nexisting_capacity Float64 Initial installed capacity MW 0.0\ncapacity_size Float64 Unit size for capacity decisions - 1.0","category":"page"},{"location":"Manual/assets/transmissionlink/#Additional-Investment-Parameters","page":"Transmission Link","title":"Additional Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"Maximum and minimum capacity constraints","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"If MaxCapacityConstraint or MinCapacityConstraint are added to the constraints dictionary for the transmission edge, the following parameters are used by Macro:","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"Field Type Description Units Default\nmax_capacity Float64 Maximum allowed capacity MW Inf\nmin_capacity Float64 Minimum allowed capacity MW 0.0","category":"page"},{"location":"Manual/assets/transmissionlink/#Economic-Parameters","page":"Transmission Link","title":"Economic Parameters","text":"","category":"section"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"Field Type Description Units Default\ninvestment_cost Float64 CAPEX per unit capacity $/MW 0.0\nannualized_investment_cost Union{Nothing,Float64} Annualized CAPEX $/MW/yr calculated\nfixed_om_cost Float64 Fixed O&M costs $/MW/yr 0.0\nvariable_om_cost Float64 Variable O&M costs $/MWh 0.0\nwacc Float64 Weighted average cost of capital fraction 0.0\nlifetime Int Asset lifetime in years years 1\ncapital_recovery_period Int Investment recovery period years 1\nretirement_period Int Retirement period years 0","category":"page"},{"location":"Manual/assets/transmissionlink/#Operational-Parameters","page":"Transmission Link","title":"Operational Parameters","text":"","category":"section"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"Field Type Description Units Default\ndistance Float64 Distance between nodes km 0.0\nloss_fraction Float64 Fraction of power lost during transmission fraction 0.0\nunidirectional Boolean Whether the transmission is unidirectional - false","category":"page"},{"location":"Manual/assets/transmissionlink/#transmissionlink_type_definition","page":"Transmission Link","title":"Types - Asset Structure","text":"","category":"section"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"The TransmissionLink asset is defined as follows:","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"struct TransmissionLink{T} <: AbstractAsset\n    id::AssetId\n    transmission_edge::Edge{<:T}\nend","category":"page"},{"location":"Manual/assets/transmissionlink/#transmissionlink_constructors","page":"Transmission Link","title":"Constructors","text":"","category":"section"},{"location":"Manual/assets/transmissionlink/#Default-constructor","page":"Transmission Link","title":"Default constructor","text":"","category":"section"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"TransmissionLink(id::AssetId, transmission_edge::Edge{<:T})","category":"page"},{"location":"Manual/assets/transmissionlink/#Factory-constructor","page":"Transmission Link","title":"Factory constructor","text":"","category":"section"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"make(asset_type::Type{TransmissionLink}, data::AbstractDict{Symbol,Any}, system::System)","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"Field Type Description\nasset_type Type{TransmissionLink} Macro type of the asset\ndata AbstractDict{Symbol,Any} Dictionary containing the input data for the asset\nsystem System System to which the asset belongs","category":"page"},{"location":"Manual/assets/transmissionlink/#transmissionlink_examples","page":"Transmission Link","title":"Examples","text":"","category":"section"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"This section contains examples of how to use the Transmission Link asset in a Macro model.","category":"page"},{"location":"Manual/assets/transmissionlink/#Multiple-Transmission-Links-between-different-zones","page":"Transmission Link","title":"Multiple Transmission Links between different zones","text":"","category":"section"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"This example shows two transmission links between the SE and MIDAT regions, and the MIDAT and NE regions. Each transmission link has a maximum capacity constraint applied to it.","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"JSON Format:","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"Note that the global_data field is used to set the fields and constraints that are common to all instances of the same asset type.","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"{\n    \"link\": [\n        {\n            \"type\": \"TransmissionLink\",\n            \"global_data\": {\n                \"transmission_constraints\": {\n                    \"MaxCapacityConstraint\": true\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_to_MIDAT\",\n                    \"commodity\": \"Electricity\",\n                    \"transmission_origin\": \"elec_SE\",\n                    \"transmission_dest\": \"elec_MIDAT\",\n                    \"distance\": 491.4512001,\n                    \"existing_capacity\": 5552,\n                    \"max_capacity\": 27760,\n                    \"investment_cost\": 40219,\n                    \"loss_fraction\": 0.04914512\n                },\n                {\n                    \"id\": \"MIDAT_to_NE\",\n                    \"commodity\": \"Electricity\",\n                    \"transmission_origin\": \"elec_MIDAT\",\n                    \"transmission_dest\": \"elec_NE\",\n                    \"distance\": 473.6625536,\n                    \"existing_capacity\": 1915,\n                    \"max_capacity\": 9575,\n                    \"investment_cost\": 62316,\n                    \"loss_fraction\": 0.047366255\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"CSV Format:","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"Type id commodity transmission_origin transmission_dest distance existing_capacity max_capacity investment_cost loss_fraction transmission_constraints–MaxCapacityConstraint\nTransmissionLink SE_to_MIDAT Electricity elec_SE elec_MIDAT 491.4512001 5552 27760 40219 0.04914512 true\nTransmissionLink MIDAT_to_NE Electricity elec_MIDAT elec_NE 473.6625536 1915 9575 62316 0.047366255 true","category":"page"},{"location":"Manual/assets/transmissionlink/#transmissionlink_best_practices","page":"Transmission Link","title":"Best Practices","text":"","category":"section"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"Use global data for common fields and constraints: Use the global_data field to set the fields and constraints that are common to all instances of the same asset type.\nSet realistic transmission losses: Ensure loss fractions reflect actual transmission line characteristics\nUse meaningful IDs: Choose descriptive identifiers that indicate origin and destination nodes\nConsider capacity constraints: Set appropriate maximum capacity limits based on technology and distance\nUse constraints selectively: Only enable constraints that are necessary for your modeling needs\nValidate costs: Ensure investment and O&M costs are in appropriate units\nTest configurations: Start with simple configurations and gradually add complexity","category":"page"},{"location":"Manual/assets/transmissionlink/#transmissionlink_advanced_json_csv_input_format","page":"Transmission Link","title":"Input File (Advanced Format)","text":"","category":"section"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"Macro provides an advanced format for defining Transmission Link assets, offering users and modelers detailed control over asset specifications. This format builds upon the standard format and is ideal for those who need more comprehensive customization.","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"To understand the advanced format, consider the graph representation and the type definition of a Transmission Link asset. The input file mirrors this hierarchical structure.","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"A Transmission Link asset in Macro is composed of a single transmission edge, represented by an Edge object. The input file for a Transmission Link asset is therefore organized as follows:","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"{\n    \"edges\": {\n        \"transmission_edge\": {\n            // ... transmission_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"Each top-level key (e.g., \"edges\") denotes a component type. The second-level keys either specify the attributes of the component (when there is a single instance) or identify the instances of the component (e.g., \"transmission_edge\") when there are multiple instances. For multiple instances, a third-level key details the attributes for each instance.","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"Below is an example of an input file for a Transmission Link asset that sets up two transmission lines between different regions.","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"{\n    \"link\": [\n        {\n            \"type\": \"TransmissionLink\",\n            \"global_data\": {\n                \"edges\": {\n                    \"transmission_edge\": {\n                        \"commodity\": \"Electricity\",\n                        \"has_capacity\": true,\n                        \"unidirectional\": false,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"integer_decisions\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"MaxCapacityConstraint\": true\n                        }\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_to_MIDAT\",\n                    \"edges\": {\n                        \"transmission_edge\": {\n                            \"start_vertex\": \"elec_SE\",\n                            \"end_vertex\": \"elec_MIDAT\",\n                            \"distance\": 491.4512001,\n                            \"existing_capacity\": 5552,\n                            \"max_capacity\": 27760,\n                            \"investment_cost\": 40219,\n                            \"loss_fraction\": 0.04914512\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_to_NE\",\n                    \"edges\": {\n                        \"transmission_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\",\n                            \"end_vertex\": \"elec_NE\",\n                            \"distance\": 473.6625536,\n                            \"existing_capacity\": 1915,\n                            \"max_capacity\": 9575,\n                            \"investment_cost\": 62316,\n                            \"loss_fraction\": 0.047366255\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/transmissionlink/#Key-Points","page":"Transmission Link","title":"Key Points","text":"","category":"section"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"The global_data field is utilized to define attributes and constraints that apply universally to all instances of a particular asset type.\nThe start_vertex and end_vertex fields indicate the nodes to which the transmission edge is connected. These nodes must be defined in the nodes.json file.\nFor a comprehensive list of attributes that can be configured for the edge component, refer to the edges page of the Macro manual.","category":"page"},{"location":"Manual/assets/transmissionlink/","page":"Transmission Link","title":"Transmission Link","text":"","category":"page"},{"location":"table_of_contents/#Table-of-contents","page":"Table of contents","title":"Table of contents","text":"","category":"section"},{"location":"table_of_contents/#[Getting-Started](@ref)","page":"Table of contents","title":"Getting Started","text":"","category":"section"},{"location":"table_of_contents/","page":"Table of contents","title":"Table of contents","text":"Pages = [\n    \"Getting Started/1_overview.md\",\n    \"Getting Started/2_installation.md\",\n    \"Getting Started/3_first_run.md\",\n    \"Getting Started/4_macro_repo_contents.md\"\n]\nDepth = 2","category":"page"},{"location":"table_of_contents/#[User-Guides](@ref)","page":"Table of contents","title":"User Guides","text":"","category":"section"},{"location":"table_of_contents/","page":"Table of contents","title":"Table of contents","text":"Pages = [\n    \"Guides/User Guide/user_build_system.md\",\n    \"Guides/User Guide/user_add_commodity.md\",\n    \"Guides/User Guide/user_add_node.md\",\n    \"Guides/User Guide/user_add_location.md\",\n    \"Guides/User Guide/user_add_asset.md\",\n    \"Guides/User Guide/user_policy_constraints.md\",\n    \"Guides/User Guide/user_asset_constraints.md\",\n    \"Guides/User Guide/user_settings.md\",\n    \"Guides/User Guide/user_run_model.md\",\n    \"Guides/User Guide/user_write_results.md\",\n    \"Guides/User Guide/user_multiperiod.md\",\n    \"Guides/User Guide/user_using_asset_libary.md\"\n]\nDepth = 2","category":"page"},{"location":"table_of_contents/#[Modeler-Guides](@ref)","page":"Table of contents","title":"Modeler Guides","text":"","category":"section"},{"location":"table_of_contents/","page":"Table of contents","title":"Table of contents","text":"Pages = [\n    \"Guides/Modeler Guide/modeler_introduction.md\",\n    \"Guides/Modeler Guide/modeler_build_sectors.md\",\n    \"Guides/Modeler Guide/modeler_build_asset.md\",\n    \"Guides/Modeler Guide/modeler_add_docs_to_asset.md\",\n    \"Guides/Modeler Guide/modeler_create_example_case.md\",\n    \"Guides/Modeler Guide/modeler_debugging_testing.md\",\n    \"Guides/Modeler Guide/modeler_es_graph.md\",\n    \"Guides/Modeler Guide/modeler_workflow.md\"\n]\nDepth = 2","category":"page"},{"location":"table_of_contents/#[Developer-Guides](@ref)","page":"Table of contents","title":"Developer Guides","text":"","category":"section"},{"location":"table_of_contents/","page":"Table of contents","title":"Table of contents","text":"Pages = [\n    \"Guides/Developer Guide/1_introduction.md\",\n    \"Guides/Developer Guide/2_type_hierarchy.md\",\n    \"Guides/Developer Guide/dev_create_constraint.md\",\n    \"Guides/Developer Guide/dev_macro_repo_guide.md\"\n]\nDepth = 2","category":"page"},{"location":"table_of_contents/#[Asset-Documentation](@ref-Assets)","page":"Table of contents","title":"Asset Documentation","text":"","category":"section"},{"location":"table_of_contents/","page":"Table of contents","title":"Table of contents","text":"Pages = [\n    \"Manual/Assets.md\",\n    \"Assets/new_asset.md\",\n    \"Assets/submitting_asset.md\"\n]\nDepth = 2","category":"page"},{"location":"table_of_contents/#[References](@ref)","page":"Table of contents","title":"References","text":"","category":"section"},{"location":"table_of_contents/","page":"Table of contents","title":"Table of contents","text":"Pages = [\n    \"References/1_introduction.md\",\n    \"References/2_reading_input.md\",\n    \"References/3_macro_objects.md\",\n    \"References/4_writing_output.md\",\n    \"References/5_utilities.md\"\n]\nDepth = 2","category":"page"},{"location":"table_of_contents/#[Tutorials](@ref)","page":"Table of contents","title":"Tutorials","text":"","category":"section"},{"location":"table_of_contents/","page":"Table of contents","title":"Table of contents","text":"Pages = [\n    \"Tutorials/0_getting_started.md\",\n    \"Tutorials/1_running_macro.md\",\n    \"Tutorials/2_multisector_modelling.md\",\n    \"Tutorials/3_advanced_features.md\"\n]\nDepth = 2","category":"page"},{"location":"table_of_contents/#[Appendix](@ref-tea)","page":"Table of contents","title":"Appendix","text":"","category":"section"},{"location":"table_of_contents/","page":"Table of contents","title":"Table of contents","text":"Pages = [\n    \"Appendix/TEA.md\"\n]\nDepth = 2","category":"page"},{"location":"table_of_contents/","page":"Table of contents","title":"Table of contents","text":"","category":"page"},{"location":"Manual/Financial_assumptions/#Investment-costs","page":"Financial Assumptions","title":"Investment costs","text":"","category":"section"},{"location":"Manual/Financial_assumptions/","page":"Financial Assumptions","title":"Financial Assumptions","text":"The cost of investment used by the model is the annualized investment cost of a technology, expressed in $/MW-yr. The annualized investment cost represents an annual payment (also referred to as an annuity) made by a developer to debt and equity investors.","category":"page"},{"location":"Manual/Financial_assumptions/","page":"Financial Assumptions","title":"Financial Assumptions","text":"The annualized investment cost is calculated inside Macro. Users input the CAPEX of a technology (as the investment_cost attribute of an edge) and, if desired, a Weighted Average Cost of Capital (WACC) for a given technology y.","category":"page"},{"location":"Manual/Financial_assumptions/#Cost-of-capital-(WACC)-assumptions","page":"Financial Assumptions","title":"Cost of capital (WACC) assumptions","text":"","category":"section"},{"location":"Manual/Financial_assumptions/","page":"Financial Assumptions","title":"Financial Assumptions","text":"The WACC_y input is meant to represent the real weighted average cost of capital. The WACC can be used to represent market-based costs of capital (typically based on a combination of debt and equity financing).\nIf a WACC input is not provided, Macro will default to the general discount rate.","category":"page"},{"location":"Manual/Financial_assumptions/#Annualized-investment-cost-calculation-in-Macro","page":"Financial Assumptions","title":"Annualized investment cost calculation in Macro","text":"","category":"section"},{"location":"Manual/Financial_assumptions/","page":"Financial Assumptions","title":"Financial Assumptions","text":"Macro calculates the annualized investment cost internally using the following expressions.","category":"page"},{"location":"Manual/Financial_assumptions/","page":"Financial Assumptions","title":"Financial Assumptions","text":"textCRF_y = fracWACC_y1-(1+textWACC_y)^-EL_y","category":"page"},{"location":"Manual/Financial_assumptions/","page":"Financial Assumptions","title":"Financial Assumptions","text":"where CRF is the Capital Recovery Factor.","category":"page"},{"location":"Manual/Financial_assumptions/","page":"Financial Assumptions","title":"Financial Assumptions","text":"textAnnualized investment cost_y = textCRF_y textCAPEX_yz","category":"page"},{"location":"Manual/Financial_assumptions/#Single-period-modeling","page":"Financial Assumptions","title":"Single-period modeling","text":"","category":"section"},{"location":"Manual/Financial_assumptions/","page":"Financial Assumptions","title":"Financial Assumptions","text":"The investment cost used in the objective function is based on the annuity paid in the modeled year; i.e. the annuities paid in non-modeled years are ignored.","category":"page"},{"location":"Manual/Financial_assumptions/#Multi-period-modeling","page":"Financial Assumptions","title":"Multi-period modeling","text":"","category":"section"},{"location":"Manual/Financial_assumptions/","page":"Financial Assumptions","title":"Financial Assumptions","text":"End of horizon effects are treated such that annuities are paid in every year from the time of investment until the end of the technology's economic lifetime, or the remainder of the modeling horizon, whichever comes first. Thus the model does not include salvage values at the end of the modeling horizon. As this implies that the model ignores a technology's value after the modeling horizon, the model also ignores costs incurred after the modeling horizon. ","category":"page"},{"location":"Manual/Financial_assumptions/","page":"Financial Assumptions","title":"Financial Assumptions","text":"Each annuity is discounted using the general discount rate, which represents the time value of money from the system planner's perspective (see Multi period accounting for more details). Thus, Technologies with the same CAPEX but different costs of capital (i.e., textWACC_y) will be treated differently by the model.","category":"page"},{"location":"Manual/Financial_assumptions/","page":"Financial Assumptions","title":"Financial Assumptions","text":"","category":"page"},{"location":"Manual/assets/electricdac/#Electric-DAC","page":"Electric DAC","title":"Electric DAC","text":"","category":"section"},{"location":"Manual/assets/electricdac/#Contents","page":"Electric DAC","title":"Contents","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Overview | Asset Structure | Flow Equations | Input File (Standard Format) | Types - Asset Structure | Constructors | Examples | Best Practices | Input File (Advanced Format)","category":"page"},{"location":"Manual/assets/electricdac/#electricdac_overview","page":"Electric DAC","title":"Overview","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Electric DAC (Direct Air Capture) assets in Macro represent carbon capture technologies that use electricity to capture CO₂ directly from the atmosphere. These assets are defined using either JSON or CSV input files placed in the assets directory, typically named electricdac.json or electricdac.csv.","category":"page"},{"location":"Manual/assets/electricdac/#electricdac_asset_structure","page":"Electric DAC","title":"Asset Structure","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"An electric DAC asset consists of one transformation component and three edge components:","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Transformation Component: Balances flows of electricity, CO₂, and CO₂ captured\nElectricity Edge: Incoming edge representing electricity consumption\nCO₂ Edge: Incoming edge representing CO₂ absorption from atmosphere\nCO₂ Captured Edge: Outgoing edge representing captured CO₂","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Here is a graphical representation of the electric DAC asset:","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph ElectricDAC\n    direction LR\n    A((Electricity)) e1@--> C{{..}}\n    B((CO₂)) e2@--> C\n    C e3@--> D((CO₂ Captured))\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n  end\n  \n  style A r:55px,fill:#FFD700,stroke:black,color:black, stroke-dasharray: 3,5;\n  style B r:55px,fill:lightgray,stroke:black,color:black, stroke-dasharray: 3,5;\n  style C fill:black,stroke:black,color:black;\n  style D r:55px,fill:lightgray,stroke:black,color:black, stroke-dasharray: 3,5;\n\n  linkStyle 0 stroke:#FFD700, stroke-width: 2px, stroke-dasharray: 5 5;\n  linkStyle 1 stroke:lightgray, stroke-width: 2px;\n  linkStyle 2 stroke:lightgray, stroke-width: 2px;\n\n","category":"page"},{"location":"Manual/assets/electricdac/#electricdac_flow_equations","page":"Electric DAC","title":"Flow Equations","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"The electric DAC asset follows these stoichiometric relationships:","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"beginaligned\nphi_elec = phi_co2_captured cdot epsilon_elec_consumption \nphi_co2 = phi_co2_captured \nendaligned","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Where:","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"phi represents the flow of each commodity\nepsilon represents the stoichiometric coefficients defined in the table below (see table Conversion Process Parameters)","category":"page"},{"location":"Manual/assets/electricdac/#electricdac_input_file","page":"Electric DAC","title":"Input File (Standard Format)","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"The easiest way to include an electric DAC asset in a model is to create a new file (either JSON or CSV) and place it in the assets directory together with the other assets.","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"your_case/\n├── assets/\n│   ├── electricdac.json    # or electricdac.csv\n│   ├── other_assets.json\n│   └── ...\n├── system/\n├── settings/\n└── ...","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"This file can either be created manually, or using the template_asset function, as shown in the Adding an Asset to a System section of the User Guide. The file will be automatically loaded when you run your Macro model.","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"The following is an example of an electric DAC asset input file:","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"{\n    \"ElectricDAC\": [\n        {\n            \"type\": \"ElectricDAC\",\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Sorbent_DAC\",\n                    \"location\": \"SE\",\n                    \"investment_cost\": 1050000,\n                    \"fixed_om_cost\": 837000,\n                    \"variable_om_cost\": 24.64,\n                    \"electricity_consumption\": 4.38,\n                    \"co2_sink\": \"co2_sink\"\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"tip: Global Data vs Instance Data\nWhen working with JSON input files, the global_data field can be used to group data that is common to all instances of the same asset type. This is useful for setting constraints that are common to all instances of the same asset type and avoid repeating the same data for each instance. See the Examples section below for an example.","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"The following tables outline the attributes that can be set for an electric DAC asset.","category":"page"},{"location":"Manual/assets/electricdac/#Essential-Attributes","page":"Electric DAC","title":"Essential Attributes","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Field Type Description\nType String Asset type identifier: \"ElectricDAC\"\nid String Unique identifier for the electric DAC instance\nlocation String Geographic location/node identifier\nco2_sink String CO₂ sink node identifier","category":"page"},{"location":"Manual/assets/electricdac/#electricdac_conversion_process_parameters","page":"Electric DAC","title":"Conversion Process Parameters","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"The following parameters control the conversion process and stoichiometry of the electricdac asset (see Flow Equations for more details).","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Field Type Description Units Default\nelectricity_consumption Float64 Electricity consumption per unit CO₂ captured MWh_elect_CO₂ 0.0","category":"page"},{"location":"Manual/assets/electricdac/#\"electricdac_constraints\"","page":"Electric DAC","title":"Constraints Configuration","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Electric DAC assets can have different constraints applied to them, and the user can configure them using the following fields:","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Field Type Description\ntransform_constraints Dict{String,Bool} List of constraints applied to the transformation component.\nco2_constraints Dict{String,Bool} List of constraints applied to the CO₂ edge.\nelec_constraints Dict{String,Bool} List of constraints applied to the electricity edge.\nco2_captured_constraints Dict{String,Bool} List of constraints applied to the CO₂ captured edge.","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"For example, if the user wants to apply the BalanceConstraint to the transformation component and the CapacityConstraint to the CO₂ edge, the constraints fields should be set as follows:","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"{\n    \"transform_constraints\": {\n        \"BalanceConstraint\": true\n    },\n    \"co2_constraints\": {\n        \"CapacityConstraint\": true\n    }\n}","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Users can refer to the Adding Asset Constraints to a System section of the User Guide for a list of all the constraints that can be applied to the different components of an electric DAC asset.","category":"page"},{"location":"Manual/assets/electricdac/#Default-constraints","page":"Electric DAC","title":"Default constraints","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"To simplify the input file and the asset configuration, the following constraints are applied to the electric DAC asset by default:","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Balance constraint (applied to the transformation component)\nCapacity constraint (applied to the CO₂ edge)","category":"page"},{"location":"Manual/assets/electricdac/#Investment-Parameters","page":"Electric DAC","title":"Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Field Type Description Units Default\ncan_retire Boolean Whether electric DAC asset capacity can be retired - true\ncan_expand Boolean Whether electric DAC asset capacity can be expanded - true\nexisting_capacity Float64 Initial installed electric DAC asset capacity t_CO₂hr 0.0\ncapacity_size Float64 Unit size for capacity decisions - 1.0","category":"page"},{"location":"Manual/assets/electricdac/#Additional-Investment-Parameters","page":"Electric DAC","title":"Additional Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Maximum and minimum capacity constraints","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"If MaxCapacityConstraint or MinCapacityConstraint are added to the constraints dictionary for the CO₂ edge, the following parameters are used by Macro:","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Field Type Description Units Default\nmax_capacity Float64 Maximum allowed electric DAC asset capacity t_CO₂hr Inf\nmin_capacity Float64 Minimum allowed electric DAC asset capacity t_CO₂hr 0.0","category":"page"},{"location":"Manual/assets/electricdac/#Economic-Parameters","page":"Electric DAC","title":"Economic Parameters","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Field Type Description Units Default\ninvestment_cost Float64 CAPEX per unit electric DAC asset capacity (t_CO₂hr) 0.0\nannualized_investment_cost Union{Nothing,Float64} Annualized CAPEX (t_CO₂hryr) calculated\nfixed_om_cost Float64 Fixed O&M costs of the electric DAC asset (t_CO₂hryr) 0.0\nvariable_om_cost Float64 Variable O&M costs of the electric DAC asset t_CO₂ 0.0","category":"page"},{"location":"Manual/assets/electricdac/#Operational-Parameters","page":"Electric DAC","title":"Operational Parameters","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Field Type Description Units Default\navailability Dict Path to availability file and column name - Empty","category":"page"},{"location":"Manual/assets/electricdac/#Additional-Operational-Parameters","page":"Electric DAC","title":"Additional Operational Parameters","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Minimum flow constraint","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"If MinFlowConstraint is added to the constraints dictionary for the CO₂ edge, the following parameter is used:","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Field Type Description Units Default\nmin_flow_fraction Float64 Minimum flow as fraction of capacity fraction 0.0","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Ramping limit constraint","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"If RampingLimitConstraint is added to the constraints dictionary for the CO₂ edge, the following parameters are used:","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Field Type Description Units Default\nramp_up_fraction Float64 Maximum increase in flow between timesteps fraction 1.0\nramp_down_fraction Float64 Maximum decrease in flow between timesteps fraction 1.0","category":"page"},{"location":"Manual/assets/electricdac/#electricdac_type_definition","page":"Electric DAC","title":"Types - Asset Structure","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"The ElectricDAC asset is defined as follows:","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"struct ElectricDAC <: AbstractAsset\n    id::AssetId\n    electricdac_transform::Transformation\n    co2_edge::Edge{<:CO2}\n    elec_edge::Edge{<:Electricity}\n    co2_captured_edge::Edge{<:CO2Captured}\nend","category":"page"},{"location":"Manual/assets/electricdac/#electricdac_constructors","page":"Electric DAC","title":"Constructors","text":"","category":"section"},{"location":"Manual/assets/electricdac/#Default-constructor","page":"Electric DAC","title":"Default constructor","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"ElectricDAC(id::AssetId, electricdac_transform::Transformation, co2_edge::Edge{<:CO2}, elec_edge::Edge{<:Electricity}, co2_captured_edge::Edge{<:CO2Captured})","category":"page"},{"location":"Manual/assets/electricdac/#Factory-constructor","page":"Electric DAC","title":"Factory constructor","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"make(asset_type::Type{ElectricDAC}, data::AbstractDict{Symbol,Any}, system::System)","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Field Type Description\nasset_type Type{ElectricDAC} Macro type of the asset\ndata AbstractDict{Symbol,Any} Dictionary containing the input data for the asset\nsystem System System to which the asset belongs","category":"page"},{"location":"Manual/assets/electricdac/#electricdac_examples","page":"Electric DAC","title":"Examples","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"This section contains examples of how to use the electric DAC asset in a Macro model.","category":"page"},{"location":"Manual/assets/electricdac/#Simple-Electric-DAC-Asset","page":"Electric DAC","title":"Simple Electric DAC Asset","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"This example shows a single electric DAC asset with ramping limits and availability time series.","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"JSON Format:","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"{\n    \"ElectricDAC\": [\n        {\n            \"type\": \"ElectricDAC\",\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Sorbent_DAC\",\n                    \"location\": \"SE\",\n                    \"investment_cost\": 1050000,\n                    \"fixed_om_cost\": 837000,\n                    \"variable_om_cost\": 24.64,\n                    \"electricity_consumption\": 4.38,\n                    \"co2_sink\": \"co2_sink\",\n                    \"co2_constraints\": {\n                        \"RampingLimitConstraint\": true\n                    },\n                    \"ramp_up_fraction\": 1.0,\n                    \"ramp_down_fraction\": 1.0,\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"SE_Sorbent_DAC\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"CSV Format:","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Type id location investment_cost fixed_om_cost variable_om_cost electricity_consumption co2_sink co2_constraints–RampingLimitConstraint ramp_up_fraction ramp_down_fraction availability–timeseries–path availability–timeseries–header\nElectricDAC SE_Sorbent_DAC SE 1050000 837000 24.64 4.38 co2_sink true 1.0 1.0 system/availability.csv SE_Sorbent_DAC","category":"page"},{"location":"Manual/assets/electricdac/#Multiple-Electric-DAC-Assets-in-Different-Zones","page":"Electric DAC","title":"Multiple Electric DAC Assets in Different Zones","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"JSON Format:","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Note that the global_data field is used to set the fields and constraints that are common to all instances of the same asset type.","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"{\n    \"ElectricDAC\": [\n        {\n            \"type\": \"ElectricDAC\",\n            \"global_data\": {\n                \"electricity_consumption\": 4.38,\n                \"co2_sink\": \"co2_sink\",\n                \"co2_constraints\": {\n                    \"RampingLimitConstraint\": true\n                },\n                \"investment_cost\": 1050000,\n                \"fixed_om_cost\": 837000,\n                \"variable_om_cost\": 24.64,\n                \"ramp_up_fraction\": 1.0,\n                \"ramp_down_fraction\": 1.0\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Sorbent_DAC\",\n                    \"location\": \"SE\",\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"SE_Sorbent_DAC\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_Sorbent_DAC\",\n                    \"location\": \"MIDAT\",\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"MIDAT_Sorbent_DAC\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_Sorbent_DAC\",\n                    \"location\": \"NE\",\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"NE_Sorbent_DAC\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"CSV Format:","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Type id location investment_cost fixed_om_cost variable_om_cost electricity_consumption co2_sink co2_constraints–RampingLimitConstraint ramp_up_fraction ramp_down_fraction availability–timeseries–path availability–timeseries–header\nElectricDAC SE_Sorbent_DAC SE 1050000 837000 24.64 4.38 co2_sink true 1.0 1.0 system/availability.csv SE_Sorbent_DAC\nElectricDAC MIDAT_Sorbent_DAC MIDAT 1050000 837000 24.64 4.38 co2_sink true 1.0 1.0 system/availability.csv MIDAT_Sorbent_DAC\nElectricDAC NE_Sorbent_DAC NE 1050000 837000 24.64 4.38 co2_sink true 1.0 1.0 system/availability.csv NE_Sorbent_DAC","category":"page"},{"location":"Manual/assets/electricdac/#electricdac_best_practices","page":"Electric DAC","title":"Best Practices","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Use global data for common fields and constraints: Use the global_data field to set the fields and constraints that are common to all instances of the same asset type.\nSet realistic electricity consumption: Ensure electricity consumption per unit CO₂ captured reflects actual technology performance\nUse meaningful IDs: Choose descriptive identifiers that indicate location and technology type\nConsider availability profiles: Use availability time series to model operational constraints\nValidate costs: Ensure investment and O&M costs are in appropriate units\nTest configurations: Start with simple configurations and gradually add complexity","category":"page"},{"location":"Manual/assets/electricdac/#electricdac_advanced_json_csv_input_format","page":"Electric DAC","title":"Input File (Advanced Format)","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Macro provides an advanced format for defining electric DAC assets, offering users and modelers detailed control over asset specifications. This format builds upon the standard format and is ideal for those who need more comprehensive customization.","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"To understand the advanced format, consider the graph representation and the type definition of an electric DAC asset. The input file mirrors this hierarchical structure.","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"An electric DAC asset in Macro is composed of a transformation component, represented by a Transformation object, and three edges, each represented by an Edge object. The input file for an electric DAC asset is therefore organized as follows:","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        },\n        \"co2_captured_edge\": {\n            // ... co2_captured_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Each top-level key (e.g., \"transforms\" or \"edges\") denotes a component type. The second-level keys either specify the attributes of the component (when there is a single instance) or identify the instances of the component (e.g., \"elec_edge\", \"co2_edge\", etc.) when there are multiple instances. For multiple instances, a third-level key details the attributes for each instance.","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Below is an example of an input file for an electric DAC asset that sets up a single instance at three different locations, SE, MIDAT, and NE.","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"{\n    \"ElectricDAC\": [\n        {\n            \"type\": \"ElectricDAC\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"Electricity\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"co2_edge\": {\n                        \"commodity\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"start_vertex\": \"co2_sink\",\n                        \"can_retire\": true,\n                        \"can_expand\": true,\n                        \"uc\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true\n                        },\n                        \"integer_decisions\": false\n                    },\n                    \"elec_edge\": {\n                        \"commodity\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"co2_captured_edge\": {\n                        \"commodity\": \"CO2Captured\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Sorbent_DAC\",\n                    \"transforms\": {\n                        \"electricity_consumption\": 4.38\n                    },\n                    \"edges\": {\n                        \"co2_edge\": {\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"system/availability.csv\",\n                                    \"header\": \"SE_Sorbent_DAC\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 1050000,\n                            \"fixed_om_cost\": 837000,\n                            \"variable_om_cost\": 24.64,\n                            \"ramp_up_fraction\": 1.0,\n                            \"ramp_down_fraction\": 1.0\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        },\n                        \"co2_captured_edge\": {\n                            \"end_vertex\": \"co2_captured_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_Sorbent_DAC\",\n                    \"transforms\": {\n                        \"electricity_consumption\": 4.38\n                    },\n                    \"edges\": {\n                        \"co2_edge\": {\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"system/availability.csv\",\n                                    \"header\": \"MIDAT_Sorbent_DAC\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 1050000,\n                            \"fixed_om_cost\": 837000,\n                            \"variable_om_cost\": 24.64,\n                            \"ramp_up_fraction\": 1.0,\n                            \"ramp_down_fraction\": 1.0\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\"\n                        },\n                        \"co2_captured_edge\": {\n                            \"end_vertex\": \"co2_captured_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_Sorbent_DAC\",\n                    \"transforms\": {\n                        \"electricity_consumption\": 4.38\n                    },\n                    \"edges\": {\n                        \"co2_edge\": {\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"system/availability.csv\",\n                                    \"header\": \"NE_Sorbent_DAC\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 1050000,\n                            \"fixed_om_cost\": 837000,\n                            \"variable_om_cost\": 24.64,\n                            \"ramp_up_fraction\": 1.0,\n                            \"ramp_down_fraction\": 1.0\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_NE\"\n                        },\n                        \"co2_captured_edge\": {\n                            \"end_vertex\": \"co2_captured_NE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/electricdac/#Key-Points","page":"Electric DAC","title":"Key Points","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"The global_data field is utilized to define attributes and constraints that apply universally to all instances of a particular asset type.\nThe start_vertex and end_vertex fields indicate the nodes to which the edges are connected. These nodes must be defined in the nodes.json file.\nBy default, only the CO₂ edge is allowed to have capacity variables and constraints, as this represents the main capacity decision for the DAC facility (see note below).\nThe CO₂ edge uses availability time series to model operational constraints.\nFor a comprehensive list of attributes that can be configured for the transformation and edge components, refer to the transformation and edges pages of the Macro manual.","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"note: The `has_capacity` Edge Attribute\nThe has_capacity attribute is a flag that indicates whether a specific edge of an asset has a capacity variable, allowing it to be expanded or retired. Typically, users do not need to manually adjust this flag, as the asset creators in Macro have already configured it correctly for each edge. However, advanced users can use this flag to override the default settings for each edge if needed.","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"tip: Prefixes\nUsers can apply prefixes to adjust parameters for the components of a electric DAC asset, even when using the standard format. For instance, co2_can_retire will adjust the can_retire parameter for the CO₂ edge, and co2_existing_capacity will adjust the existing_capacity parameter for the CO₂ edge. Below are the prefixes available for modifying parameters for the components of a electric DAC asset:transform_ for the transformation component\nco2_ for the CO₂ edge\nco2_captured_ for the CO₂ captured edge\nelec_ for the electricity edge","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"","category":"page"},{"location":"Guides/User Guide/user_add_location/#Adding-a-Location-to-a-System","page":"Adding Locations","title":"Adding a Location to a System","text":"","category":"section"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"Adding a new Location to a System requires two steps:","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"Add the new Location to the list of Locations\nTag any Nodes you wish to assign to the Location","category":"page"},{"location":"Guides/User Guide/user_add_location/#Adding-the-Location-to-the-Location-list","page":"Adding Locations","title":"Adding the Location to the Location list","text":"","category":"section"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"The Location list is a JSON file containing an array of Location names. Each name should be unique.","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"The most straightforward way of adding a new Location is to use the template functions.","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"You can add one or more Locations by providing the Location file as an argument. In this example, we will assume your have created a system called ExampleSystems/template_example and that you have created an assets folder in that directory.","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"julia> template_location(\"ExampleSystems/template_example/system/locations.json\", \"Boston\")\njulia> template_location(\"ExampleSystems/template_example/system/locations.json\", [\"Boston\", \"NYC\", \"Princeton\"])","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"Or by providing the associated System:","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"julia> template_location(system, [\"Boston\", \"NYC\", \"Princeton\"])","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"You can learn how to create or load the System here.","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"With either approach, doing so will leave you with the following Locations file:","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"{\n    \"locations\": [\n        \"Boston\",\n        \"NYC\",\n        \"Princeton\"\n    ]\n}","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"Macro will ignore duplicate Locations. If we next call:","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"julia> template_location(system, [\"Boston\", \"New London\", \"Princeton\"])","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"Our locations file will be:","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"{\n    \"locations\": [\n        \"Boston\",\n        \"NYC\",\n        \"Providence\",\n        \"New London\"\n    ]\n}","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"Alternatively, you can directly add names to the locations.json file. However, in the future, the template functions will take care of additional steps so we recommend using them whenever possible.","category":"page"},{"location":"Guides/User Guide/user_add_location/#Adding-Nodes-to-a-Location","page":"Adding Locations","title":"Adding Nodes to a Location","text":"","category":"section"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"The next step is to let Macro know which Nodes are part of your new Location.  ","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"In your Nodes file (at system/nodes.json by default), add a \"location\" field to the instance data of each Node you would like to include, and the name of the Location. You can find a guide on how to add a Node to a System here.","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"For example, if you have a three-Location system and each Location requires an Electricity Node, you could add the following:","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"{\"nodes\": [\n    {\n        \"type\": \"Electricity\",\n        \"global_data\": {\n            \"time_interval\": \"Electricity\",\n            \"max_nsd\": [\n                1\n            ],\n            \"price_nsd\": [\n                5000.0\n            ],\n            \"constraints\": {\n                \"BalanceConstraint\": true,\n                \"MaxNonServedDemandConstraint\": true,\n                \"MaxNonServedDemandPerSegmentConstraint\": true\n            }\n        },\n        \"instance_data\": [\n            {\n                \"id\": \"elec_SE\",\n                \"location\": \"SE\",\n                \"demand\": {\n                    \"timeseries\": {\n                        \"path\": \"system/demand.csv\",\n                        \"header\": \"Demand_MW_z1\"\n                    }\n                }\n            },\n            {\n                \"id\": \"elec_MIDAT\",\n                \"location\": \"MIDAT\",\n                \"demand\": {\n                    \"timeseries\": {\n                        \"path\": \"system/demand.csv\",\n                        \"header\": \"Demand_MW_z2\"\n                    }\n                }\n            },\n            {\n                \"id\": \"elec_NE\",\n                \"location\": \"NE\",\n                \"demand\": {\n                    \"timeseries\": {\n                        \"path\": \"system/demand.csv\",\n                        \"header\": \"Demand_MW_z3\"\n                    }\n                }\n            }\n        ]\n    }\n]}","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"The Location information must be added to the instance data, not the global data, as you can only have one Node of each Commodity at any given Node.","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"To include two or more Nodes of the same Commodity at a single Node, you must use sub-Commodities to define additional versions of the Commodity.","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"You can learn more about sub-Commodities here.","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"For example, if you wish to differentiate between high and low emission electricity, you could create two sub-Commodities: LowEmissElectricity, and HighEmissElectricity. Now, you can add Electricity, LowEmissElectricity, and HighEmissElectricity to a Location:","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"{\"nodes\": [\n    {\n        \"type\": \"Electricity\",\n        \"instance_data\": {\n            \"id\": \"elec_SE\",\n            \"time_interval\": \"Electricity\",\n            \"location\": \"SE\",\n            \"demand\": {\n                \"timeseries\": {\n                    \"path\": \"system/demand.csv\",\n                    \"header\": \"Demand_MW_z1\"\n                }\n            }\n        }\n    },\n    {\n        \"type\": \"LowEmissElectricity\",\n        \"instance_data\": {\n            \"id\": \"lowemisselec_SE\",\n            \"time_interval\": \"LowEmissElectricity\",\n            \"location\": \"SE\",\n            \"demand\": 0\n        }\n    },\n    {\n        \"type\": \"HighEmissElectricity\",\n        \"instance_data\": {\n            \"id\": \"highemisselec_SE\",\n            \"time_interval\": \"HighEmissElectricity\",\n            \"location\": \"SE\",\n            \"demand\": 0\n        }\n    },\n]}","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"As a reminder, sub-Commodities can flow into Nodes of the same type or one of their supertypes types. This means LowEmissElectricity can flow into LowEmissElectricity Nodes or Electricity Nodes. However, HighEmissElectricity and Electricity cannot flow into LowEmissElectricity Nodes.","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"Also, if you connect an Asset producing LowEmissElectricity to our new \"SE\" Location, it will be connected to the LowEmissElectricity Node. If you want the LowEmissElectricity to be able to meet the Electricity demand then you will have to specify that the Asset be connected to the \"elecSE\" Node, or add an edge connecting the \"lowemisselecSE\" and \"elec_SE\" Nodes.","category":"page"},{"location":"Guides/User Guide/user_add_location/#Important-Settings-for-Locations","page":"Adding Locations","title":"Important Settings for Locations","text":"","category":"section"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"There are two important settings when using Locations in your System:","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"AutoCreateLocations: default = true. When set to true, this feature will automatically create a new Location if Macro comes across a Node which is a assigned to a Location that does not exist. Macro will print an info statement to let the user know that the Location has been created and its name.\nAutoCreateNodes: default = false. When set to true, this feature will automatically create a new Node if Macro is asked to find a Node of a given Commodity at a Location and the Node does not exist. For example, if Macro is asked to find the Electricity Node in \"location 1\", but that Location only has a Hydrogen Node, then a new Electricity Node will be created with the default parameters.","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Adding-an-Asset-to-a-System","page":"Adding Assets","title":"Adding an Asset to a System","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Adding a new Asset to your System requires five steps:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Create a new Asset file in your Assets folder\nDuplicate the instance data for each version of the Asset you would like\nAssign each Asset a unique ID\nAdd instance data to the Assets\nConsolidate some instance data into global data","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Create-a-new-Asset-file","page":"Adding Assets","title":"Create a new Asset file","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/#Adding-a-single-Asset","page":"Adding Assets","title":"Adding a single Asset","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"The best way to create a new Asset file is to use the template functions. If you wanted to add a ThermalPower Asset to your system, you could add it using the template_asset function, called with your System's asset folder.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"In these examples, we will assume your have created a system called ExampleSystems/template_example and that you have created an assets folder in that directory.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"julia> template_asset(\"ExampleSystems/template_example/assets\", ThermalPower; style=\"simple\", format=\"json\")","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Alternatively, you can call template_asset with your system object that you have already created:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"julia> system = template_system(\"ExampleSystems/template_example\")\njulia> template_asset(system, ThermalPower; style=\"simple\", format=\"json\")","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Asset-file-name","page":"Adding Assets","title":"Asset file name","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Each call of the function will create a new ThermalPower Asset file. Successive calls will be numbered, i.e. ThermalPower.json, ThermalPower_001.json, ThermalPower_002.json, etc. The file name can be changed using the asset_name keyword argument. The following example will produce an Asset file called thermalpower_example.json:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"julia> template_asset(system, ThermalPower; style=\"simple\", format=\"json\", asset_name=\"thermalpower_example\")","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Asset-file-format","page":"Adding Assets","title":"Asset file format","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"The format keyword argument determines whether your new Asset file will be a CSV or JSON file. The default is a JSON file. Most of this guide will use JSON examples. This section details how to work with CSV files.","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Asset-file-style","page":"Adding Assets","title":"Asset file style","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"The style keyword argument determines how much detail Macro will include in your new Asset file. The two options arefull and simple. The simple option will return a Asset file which contains the minimum data fields necessary to define the Asset. Most simple description do not have nested dictionaries of inputs so are easy to read, particularly with CSV input files. The full option will return an Asset file with full descriptions of all the components and Constraints. This will include several nested dictionaries of all the options and inputs.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"As an example, the simple version of our new ThermalPower Asset is:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"{\n    \"ThermalPower\": {\n        \"type\": \"ThermalPower\",\n        \"instance_data\": [\n            {\n                \"id\": \"ThermalPower\",\n                \"location\": null,\n                \"can_expand\": true,\n                \"can_retire\": true,\n                \"existing_capacity\": 0,\n                \"capacity_size\": 1,\n                \"timedata\": \"NaturalGas\",\n                \"fuel_commodity\": \"NaturalGas\",\n                \"co2_sink\": null,\n                \"uc\": false,\n                \"investment_cost\": 0,\n                \"fixed_om_cost\": 0,\n                \"variable_om_cost\": 0,\n                \"fuel_consumption\": 0,\n                \"electricity_consumption\": 0,\n                \"emission_rate\": 1,\n                \"startup_cost\": 0,\n                \"startup_fuel_consumption\": 0,\n                \"min_up_time\": 0,\n                \"min_down_time\": 0,\n                \"ramp_up_fraction\": 0,\n                \"ramp_down_fraction\": 0\n            }\n        ]\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"While the full version is:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"{\n    \"ThermalPower\": {\n        \"type\": \"ThermalPower\",\n        \"instance_data\": [\n            {\n                \"id\": \"ThermalPower\",\n                \"transforms\": {\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    },\n                    \"location\": null,\n                    \"fuel_consumption\": 1,\n                    \"emission_rate\": 0,\n                    \"id\": null,\n                    \"timedata\": \"Electricity\",\n                    \"startup_fuel_consumption\": 0\n                },\n                \"edges\": {\n                    \"elec_edge\": {\n                        \"integer_decisions\": false,\n                        \"location\": null,\n                        \"can_retire\": true,\n                        \"timedata\": null,\n                        \"can_expand\": true,\n                        \"min_down_time\": 0,\n                        \"has_capacity\": true,\n                        \"max_capacity\": Infinity,\n                        \"efficiency\": 1,\n                        \"startup_fuel_balance_id\": \"none\",\n                        \"fixed_om_cost\": 0,\n                        \"startup_fuel\": 0,\n                        \"availability\": null,\n                        \"existing_capacity\": 0,\n                        \"commodity\": \"Electricity\",\n                        \"min_up_time\": 0,\n                        \"capacity_size\": 1,\n                        \"ramp_down_fraction\": 1,\n                        \"end_vertex\": null,\n                        \"variable_om_cost\": 0,\n                        \"investment_cost\": 0,\n                        \"unidirectional\": true,\n                        \"start_vertex\": null,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true\n                        },\n                        \"min_capacity\": 0,\n                        \"loss_fraction\": 0,\n                        \"id\": null,\n                        \"startup_fuel_consumption\": 0,\n                        \"ramp_up_fraction\": 1,\n                        \"min_flow_fraction\": 0,\n                        \"distance\": 0,\n                        \"uc\": false,\n                        \"startup_cost\": 0\n                    },\n                    \"fuel_edge\": {\n                        \"integer_decisions\": false,\n                        \"location\": null,\n                        \"can_retire\": false,\n                        \"timedata\": null,\n                        \"can_expand\": false,\n                        \"min_down_time\": 0,\n                        \"has_capacity\": false,\n                        \"max_capacity\": Infinity,\n                        \"efficiency\": 1,\n                        \"startup_fuel_balance_id\": \"none\",\n                        \"fixed_om_cost\": 0,\n                        \"startup_fuel\": 0,\n                        \"availability\": null,\n                        \"existing_capacity\": 0,\n                        \"commodity\": null,\n                        \"min_up_time\": 0,\n                        \"capacity_size\": 1,\n                        \"ramp_down_fraction\": 1,\n                        \"end_vertex\": null,\n                        \"variable_om_cost\": 0,\n                        \"investment_cost\": 0,\n                        \"unidirectional\": true,\n                        \"start_vertex\": null,\n                        \"constraints\": {\n                        },\n                        \"min_capacity\": 0,\n                        \"loss_fraction\": 0,\n                        \"id\": null,\n                        \"startup_fuel_consumption\": 0,\n                        \"ramp_up_fraction\": 1,\n                        \"min_flow_fraction\": 0,\n                        \"distance\": 0,\n                        \"uc\": false,\n                        \"startup_cost\": 0\n                    },\n                    \"co2_edge\": {\n                        \"integer_decisions\": false,\n                        \"location\": null,\n                        \"can_retire\": false,\n                        \"timedata\": null,\n                        \"can_expand\": false,\n                        \"min_down_time\": 0,\n                        \"has_capacity\": false,\n                        \"max_capacity\": Infinity,\n                        \"efficiency\": 1,\n                        \"startup_fuel_balance_id\": \"none\",\n                        \"fixed_om_cost\": 0,\n                        \"startup_fuel\": 0,\n                        \"availability\": null,\n                        \"existing_capacity\": 0,\n                        \"commodity\": \"CO2\",\n                        \"min_up_time\": 0,\n                        \"capacity_size\": 1,\n                        \"ramp_down_fraction\": 1,\n                        \"end_vertex\": null,\n                        \"co2_sink\": null,\n                        \"variable_om_cost\": 0,\n                        \"investment_cost\": 0,\n                        \"unidirectional\": true,\n                        \"start_vertex\": null,\n                        \"constraints\": {\n                        },\n                        \"min_capacity\": 0,\n                        \"loss_fraction\": 0,\n                        \"id\": null,\n                        \"startup_fuel_consumption\": 0,\n                        \"ramp_up_fraction\": 1,\n                        \"min_flow_fraction\": 0,\n                        \"distance\": 0,\n                        \"uc\": false,\n                        \"startup_cost\": 0\n                    }\n                }\n            }\n        ]\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Adding-a-parametric-Asset","page":"Adding Assets","title":"Adding a parametric Asset","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Certain Assets can be parameterized by a Commodity. For example, ThermalPower Assets are parameterized by their fuel, e.g. ThermalPower{NaturalGas} or ThermalPower{Hydrogen}. These can be created directly using the template_asset function:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"julia> template_asset(system, ThermalPower{NaturalGas}; style=\"simple\", format=\"json\")","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"This creates a file called ThermalPower{NaturalGas}.json, with the contents shown below. The Asset type is still ThermalPower, but the fuel_commodity is set automatically. This will ensure Macro creates a ThermalPower{NaturalGas}.json Asset at runtime.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"{\n    \"ThermalPower{NaturalGas}\": {\n        \"type\": \"ThermalPower\",\n        \"instance_data\": [\n            {\n                \"id\": \"ThermalPower{NaturalGas}\",\n                \"location\": null,\n                \"can_expand\": true,\n                \"can_retire\": true,\n                \"existing_capacity\": 0,\n                \"capacity_size\": 1,\n                \"timedata\": \"NaturalGas\",\n                \"fuel_commodity\": \"NaturalGas\",\n                \"co2_sink\": null,\n                \"uc\": false,\n                \"investment_cost\": 0,\n                \"fixed_om_cost\": 0,\n                \"variable_om_cost\": 0,\n                \"fuel_consumption\": 0,\n                \"electricity_consumption\": 0,\n                \"emission_rate\": 1,\n                \"startup_cost\": 0,\n                \"startup_fuel_consumption\": 0,\n                \"min_up_time\": 0,\n                \"min_down_time\": 0,\n                \"ramp_up_fraction\": 0,\n                \"ramp_down_fraction\": 0\n            }\n        ]\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Adding-multiple-Assets","page":"Adding Assets","title":"Adding multiple Assets","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Multiple Assets can be added at once by providing an array of Asset names. The following argument will create three new Asset files:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"julia> template_asset(system, [ThermalPower, VRE, ThermalPower{NaturalGas}]; style=\"simple\", format=\"json\")","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Keyword-arguments-when-adding-multiple-Assets","page":"Adding Assets","title":"Keyword arguments when adding multiple Assets","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"When adding multiple Assets at once, you should provide an array of asset_names if you want to specify any of them. Alternatively, allow the files to be created with the default names and then change them manually.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"julia> template_asset(system, [ThermalPower, VRE, ThermalPower{NaturalGas}]; asset_names=[\"thermalpower_example\", \"vre_example\", \"natgas_thermalpower_example\"] style=\"simple\", format=\"json\")","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Only one option can be chosen for each of the format and style keywork arguments.","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Creating-Instance-Data-for-Each-Asset","page":"Adding Assets","title":"Creating Instance Data for Each Asset","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"You have three options for how to create multiple versions of an Asset, to represent differences in cost, location, or other features:","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Create-an-Asset-file-for-each-version-by-calling","page":"Adding Assets","title":"Create an Asset file for each version by calling","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"This is done be calling template_asset for each one. This keeps each file simple but will quickly make your asset folder hard to manage, so we do not recommend this approach.","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Create-additional-instances-in-one-Asset-file","page":"Adding Assets","title":"Create additional instances in one Asset file","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"This is the recommended appraoch. Each entry in the instance_data field corresponds to a version of the Asset. The type field determines the Asset which will be created. Assets described in this manner can also share global_data, which is discussed in a subsequent section.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"To create additional versions of an Asset in this manner, copy-paste additional entries into the instance_data field of your Asset file.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"{\n    \"ThermalPower\": {\n        \"type\": \"ThermalPower\",\n        \"instance_data\": [\n            {\n                \"id\": \"ThermalPower_1\",\n                ... other fields ...\n            },\n            {\n                \"id\": \"ThermalPower_2\",\n                ... other fields ...\n            }\n        ]\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Create-multiple-Assets-in-one-Asset-file","page":"Adding Assets","title":"Create multiple Assets in one Asset file","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"You can include several Assets in one file by listing them in an array or dictionary.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"To do so with an array, turn the top-level dictionary into an array and copy-paste the Asset description:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"{\n    \"ThermalPower\": [\n        {\n            \"type\": \"ThermalPower\",\n            \"instance_data\": [\n                {\n                    \"id\": \"ThermalPower_1\",\n                    ... other fields ...\n                }\n            ]\n        },\n        {\n            \"type\": \"ThermalPower\",\n            \"instance_data\": [\n                {\n                    \"id\": \"ThermalPower_2\",\n                    ... other fields ...\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"To create a copy using a dictionary, add additional entries to the top-level dictionary:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"{\n    \"ThermalPower_1\": {\n        \"type\": \"ThermalPower\",\n        \"instance_data\": [\n            {\n                \"id\": \"ThermalPower_1\",\n                ... other fields ...\n            }\n        ]\n    },\n    \"ThermalPower_2\": {\n        \"type\": \"ThermalPower\",\n        \"instance_data\": [\n            {\n                \"id\": \"ThermalPower_2\",\n                ... other fields ...\n            }\n        ]\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"You can also use either approach to include Assets of different types. This is especially useful if you are using a computer cluster, which typically prefer to transfer a few large files rather than multiple small ones.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"{\n    \"ThermalPower\": {\n        \"type\": \"ThermalPower\",\n        \"instance_data\": [\n            {\n                \"id\": \"ThermalPower\",\n                ... other fields ...\n            }\n        ]\n    },\n    \"VRE\": {\n        \"type\": \"VRE\",\n        \"instance_data\": [\n            {\n                \"id\": \"VRE\",\n                ... other fields ...\n            }\n        ]\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"The two approaches can also be blended:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"{\n    \"existing_resource\": [\n        {\n            \"type\": \"ThermalPower\",\n            \"instance_data\": [\n                {\n                    \"id\": \"existing_natgas_1\",\n                ... other fields ...\n                }\n            ]\n        },\n        {\n            \"type\": \"VRE\",\n            \"instance_data\": [\n                {\n                    \"id\": \"existing_vre_1\",\n                ... other fields ...\n                }\n            ]\n        }\n    ],\n    \"new_resources\": [\n        {\n            \"type\": \"ThermalPower\",\n            \"instance_data\": [\n                {\n                    \"id\": \"new_natgas_1\",\n                ... other fields ...\n                }\n            ]\n        },\n        {\n            \"type\": \"VRE\",\n            \"instance_data\": [\n                {\n                    \"id\": \"new_vre_1\",\n                ... other fields ...\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Assign-Asset-IDs","page":"Adding Assets","title":"Assign Asset IDs","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Every Asset must have a unique ID as they are how Macro identifies and manages Assets.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"The template_asset function will search your asset folder (either based on the provided filepath or the system_data.json file of your system object) and create a unique, numbered ID based on the Asset type or user-provided Asset name.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"You can change the Asset IDs of your Assets by editing the id field in the instance_data of your Asset files. ","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Listing-existing-Asset-IDs","page":"Adding Assets","title":"Listing existing Asset IDs","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"You can call the asset_ids function to list the existing Asset IDs of your system. If you have attempted to build and run your model, you can use the source keyword argument to have asset_ids check the IDs of the Assets you have already built. This is the default behaviour of asset_ids.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"julia> asset_ids(system)\njulia> asset_ids(system; source=\"assets\")","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"If you have not built your system yet, you can specify the input files as the source:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"julia> asset_ids(system; source=\"inputs\")","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Alternatively, you can use the asset_ids_from_dir function to target the input files directly:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"julia> asset_ids_from_dir(\"ExampleSystems/template_example/assets\")","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Add-Instance-Data","page":"Adding Assets","title":"Add Instance Data","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"The simple and full versions of the template_asset functions will create Assets with Macro's default input data. This data does not represent realistic assumptions, so you must add your own data to the fields. You may delete any fields you do not want to change.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"If you are using the simple version of an Asset file you must define a Location for each Asset, by editing the location field of each Assets instance_data.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Certain Assets have other fields which you must change for them to be correctly included in the model. Please refer to the description of the Asset in the Asset Library.","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Creating-Global-Data","page":"Adding Assets","title":"Creating Global Data","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"In populating the instance_data for your Assets, you may find that multiple instances share the same data. To help reduce repetition, Macro allows you to create a global_data field for each Asset, which will be applied to each Asset. All fields in the instance_data will override the same fields in your global_data.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"As an example, consider a case where you wish to create three ThermalPower Assets in three Locations.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"The Assets share the same:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Initial capacity\nUnit capacity size\nco2_sink (used to track emissions)\nDo not use integer unit commitment\nHave the same investment, fixed and variable costs","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"The Assets have different:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Fuel consumption rates\nEmission rates\nTwo of the Asset are fueled with natural gas, while the third is fueled with hydrogen.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"To represent this, we have moved all the shared properties to the global_data field, leaving the fuel consumption and emission rates in the instance_data. We have moved the fuel_commodity to the global_data too, but override it in the third example by also including that field in its instance_data.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"{\n    \"ThermalPower\": {\n        \"type\": \"ThermalPower\",\n        \"global_data\": {\n            \"can_expand\": true,\n                \"can_retire\": true,\n                \"existing_capacity\": 0,\n                \"capacity_size\": 100,\n                \"timedata\": \"NaturalGas\",\n                \"fuel_commodity\": \"NaturalGas\",\n                \"co2_sink\": \"co2_node_1\",\n                \"uc\": false,\n                \"investment_cost\": 300000,\n                \"fixed_om_cost\": 10000,\n                \"variable_om_cost\": 4,\n        }\n        \"instance_data\": [\n            {\n                \"id\": \"ThermalPower_1\",\n                \"location\": \"Boston\",\n                \"fuel_consumption\": 2.25,\n                \"emission_rate\": 0.18\n            },\n            {\n                \"id\": \"ThermalPower_2\",\n                \"location\": \"Princeton\",\n                \"fuel_consumption\": 2.5,\n                \"emission_rate\": 0.2\n            },\n            {\n                \"id\": \"ThermalPower_Hydrogen_1\",\n                \"location\": \"New York\",\n                \"fuel_commodity\": \"Hydrogen\",\n                \"fuel_consumption\": 3.0,\n                \"emission_rate\": 0.0\n            }\n        ]\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Working-with-CSV-Asset-files","page":"Adding Assets","title":"Working with CSV Asset files","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"All of the steps described above also work for CSV-based input files, with the exception of creating global_data. The CSV-based inputs only have type and instance_data.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"It is also more challenging to include multiple Asset types in the same file, as it will require many empty columns. Therefore, we recommend using separate Asset files for each type.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"For Assets of the same type, each field in the JSON file is replaced with a column. Nested JSON fields have nested CSV headers, with each name separated by a -- character. This makes it much more prefereable to use the simple format for your CSV input files.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"A simple CSV input file will look like:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Type,id,location,can_expand,can_retire,existing_capacity,capacity_size,timedata,fuel_commodity,co2_sink,uc,investment_cost,fixed_om_cost,variable_om_cost,fuel_consumption,electricity_consumption,emission_rate,startup_cost,startup_fuel_consumption,min_up_time,min_down_time,ramp_up_fraction,ramp_down_fraction\nThermalPower,ThermalPower,,true,true,0.0,1.0,NaturalGas,NaturalGas,,false,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0,0,0.0,0.0","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"To add more versions of the Assets, simply add more rows with their own instance data.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"","category":"page"},{"location":"Guides/User Guide/user_introduction/#User-Guides","page":"User Guides","title":"User Guides","text":"","category":"section"},{"location":"Guides/User Guide/user_introduction/","page":"User Guides","title":"User Guides","text":"Topics to cover:","category":"page"},{"location":"Guides/User Guide/user_introduction/","page":"User Guides","title":"User Guides","text":"Sectors","category":"page"},{"location":"Guides/User Guide/user_introduction/","page":"User Guides","title":"User Guides","text":"","category":"page"},{"location":"Manual/assets/thermalhydrogen/#Thermal-Hydrogen-Plant-(with-and-without-CCS)","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/#Contents","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Contents","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Overview | Asset Structure | Input File (Standard Format) | Types - Asset Structure | Constructors | Examples | Best Practices | Input File (Advanced Format)","category":"page"},{"location":"Manual/assets/thermalhydrogen/#thermalhydrogen_overview","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Overview","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Thermal Hydrogen assets in Macro represent hydrogen production technologies that use thermal processes, such as steam methane reforming (SMR) or other thermal conversion methods. These assets are defined using either JSON or CSV input files placed in the assets directory, typically named with descriptive identifiers like thermalhydrogen.json or thermalhydrogen.csv.","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"note: CCS version\nMacro supports both the standard thermal hydrogen plant asset and a CCS version. The only difference between the two is the addition of a CO₂ captured edge.","category":"page"},{"location":"Manual/assets/thermalhydrogen/#thermalhydrogen_asset_structure","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Asset Structure","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"A thermal hydrogen plant asset consists of one transformation component and five edge components:","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Transformation Component: Balances the fuel, electricity, and hydrogen flows\nFuel Edge: Incoming edge representing fuel supply (e.g., natural gas)\nElectricity Edge: Incoming edge representing electricity consumption\nHydrogen Edge: Outgoing edge representing hydrogen production (can have unit commitment operations)\nCO₂ Edge: Outgoing edge representing CO₂ emissions\nCO₂ Captured Edge: Outgoing edge representing captured CO₂ (only if CCS is present)","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Here is a graphical representation of the thermal hydrogen plant asset:","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph ThermalHydrogen\n    direction BT\n    A((Fuel)) e1@--> C{{..}}\n    B((Electricity)) e2@--> C{{..}}\n    C{{..}} e3@--> D((Hydrogen))\n    C{{..}} e4@--> E((CO₂ Emitted))\n    C{{..}} e5@--> F((CO₂ Captured))\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n  end\n  \n  style A r:55px,fill:#005F6A,stroke:black,color:white,stroke-dasharray: 3,5;\n  style B r:55px,fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n  style C r:55px,fill:black,stroke:black,color:black, stroke-dasharray: 3,5;\n  style D font-size:21px,r:55px,fill:lightblue,stroke:black,color:black,stroke-dasharray: 3,5;\n  style E font-size:17px,r:55px,fill:lightgray,stroke:black,color:black,stroke-dasharray: 3,5;\n  style F font-size:15px,r:55px,fill:lightgray,stroke:black,color:black,stroke-dasharray: 3,5;\n\n  linkStyle 0 stroke:#005F6A, stroke-width: 2px;\n  linkStyle 1 stroke:#FFD700, stroke-width: 2px;\n  linkStyle 2 stroke:lightblue, stroke-width: 2px;\n  linkStyle 3,4 stroke:lightgray, stroke-width: 2px;","category":"page"},{"location":"Manual/assets/thermalhydrogen/#thermalhydrogen_flow_equations","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Flow Equations","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"The thermal hydrogen plant asset follows these stoichiometric relationships:","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"beginaligned\nphi_fuel = phi_h2 cdot epsilon_fuel_consumption \nphi_elec = phi_h2 cdot epsilon_elec_consumption \nphi_co2 = phi_fuel cdot epsilon_emission_rate \nphi_co2_captured = phi_fuel cdot epsilon_co2_capture_rate quad text(if CCS) \nendaligned","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Where:","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"phi represents the flow of each commodity\nepsilon represents the stoichiometric coefficients defined in the Conversion Process Parameters section.","category":"page"},{"location":"Manual/assets/thermalhydrogen/#thermalhydrogen_input_file","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Input File (Standard Format)","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"The easiest way to include a thermal hydrogen plant asset in a model is to create a new file (either JSON or CSV) and place it in the assets directory together with the other assets.","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"your_case/\n├── assets/\n│   ├── thermalhydrogen.json    # or thermalhydrogen.csv\n│   ├── other_assets.json\n│   └── ...\n├── system/\n├── settings/\n└── ...","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"This file can either be created manually, or using the template_asset function, as shown in the Adding an Asset to a System section of the User Guide. The file will be automatically loaded when you run your Macro model.","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"The following is an example of a thermal hydrogen plant asset input file:","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"{\n    \"NaturalGasH2SMR\": [\n        {\n            \"type\": \"ThermalHydrogen\",\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Large_SMR_Non_CCS\",\n                    \"location\": \"SE\",\n                    \"fuel_commodity\": \"NaturalGas\",\n                    \"co2_sink\": \"co2_sink\",\n                    \"uc\": true,\n                    \"h2_constraints\": {\n                        \"MinFlowConstraint\": true,\n                        \"MinUpTimeConstraint\": true,\n                        \"MinDownTimeConstraint\": true\n                    },\n                    \"emission_rate\": 0.181048235160161,\n                    \"fuel_consumption\": 1.3009661455954666,\n                    \"electricity_consumption\": 0.016404,\n                    \"investment_cost\": 29902.10236,\n                    \"fixed_om_cost\": 13685.61723,\n                    \"variable_om_cost\": 2.250837989,\n                    \"capacity_size\": 1082.95,\n                    \"startup_cost\": 0.126968004,\n                    \"min_up_time\": 3,\n                    \"min_down_time\": 3,\n                    \"ramp_up_fraction\": 0.5,\n                    \"ramp_down_fraction\": 0.5,\n                    \"min_flow_fraction\": 0.85,\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"SE_Large_SMR_Non_CCS\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"tip: Global Data vs Instance Data\nWhen working with JSON input files, the global_data field can be used to group data that is common to all instances of the same asset type. This is useful for setting constraints that are common to all instances of the same asset type and avoid repeating the same data for each instance. See the Examples section below for an example.","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"The following tables outline the attributes that can be set for a thermal hydrogen plant asset.","category":"page"},{"location":"Manual/assets/thermalhydrogen/#Essential-Attributes","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Essential Attributes","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Field Type Description\nType String Asset type identifier: \"ThermalHydrogen\" or \"ThermalHydrogenCCS\"\nid String Unique identifier for the thermal hydrogen plant instance\nlocation String Geographic location/node identifier\nfuel_commodity String Commodity type of the fuel\ntimedata String Time resolution for time series data (default: \"Hydrogen\")\nuc Boolean Whether the asset has unit commitment operations\nco2_sink String CO₂ sink identifier\nfuel_start_vertex String Fuel start vertex identifier. This is not required if the fuel commodity is present in the location.","category":"page"},{"location":"Manual/assets/thermalhydrogen/#thermalhydrogen_conversion_process_parameters","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Conversion Process Parameters","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"The following set of parameters control the conversion process and stoichiometry of the thermal hydrogen plant asset (see Flow Equations for more details).","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Field Type Description Units Default\nfuel_consumption Float64 Fuel consumption per unit hydrogen MWh_fuelMWh_h2 1.0\nelectricity_consumption Float64 Electricity consumption per unit hydrogen MWh_elecMWh_h2 0.0\nemission_rate Float64 CO₂ emission rate per unit fuel t_CO₂MWh_fuel 0.0\ncapture_rate Float64 CO₂ capture rate per unit fuel t_CO₂MWh_fuel 1.0","category":"page"},{"location":"Manual/assets/thermalhydrogen/#\"thermalhydrogen_constraints\"","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Constraints Configuration","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Thermal hydrogen plant assets can have different constraints applied to them, and the user can configure them using the following fields:","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Field Type Description\ntransform_constraints Dict{String,Bool} List of constraints applied to the transformation component.\nh2_constraints Dict{String,Bool} List of constraints applied to the hydrogen edge.\nfuel_constraints Dict{String,Bool} List of constraints applied to the fuel edge.\nelec_constraints Dict{String,Bool} List of constraints applied to the electricity edge.\nco2_constraints Dict{String,Bool} List of constraints applied to the CO₂ edge.\nco2_captured_constraints Dict{String,Bool} List of constraints applied to the CO₂ captured edge.","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"For example, if the user wants to apply the BalanceConstraint to the transformation component and the CapacityConstraint to the hydrogen edge, the constraints fields should be set as follows:","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"{\n    \"transform_constraints\": {\n        \"BalanceConstraint\": true\n    },\n    \"h2_constraints\": {\n        \"CapacityConstraint\": true\n    }\n}","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Users can refer to the Adding Asset Constraints to a System section of the User Guide for a list of all the constraints that can be applied to the different components of a thermal hydrogen plant asset.","category":"page"},{"location":"Manual/assets/thermalhydrogen/#Default-constraints","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Default constraints","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"To simplify the input file and the asset configuration, the following constraints are applied to the thermal hydrogen plant asset by default:","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Balance constraint (applied to the transformation component)\nCapacity constraint (applied to the hydrogen edge)\nRamping limits constraint (applied to the hydrogen edge)","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Unit commitment constraints (when uc is set to true):","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Minimum up and down time constraint (applied to the hydrogen edge)","category":"page"},{"location":"Manual/assets/thermalhydrogen/#Investment-Parameters","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Field Type Description Units Default\ncan_retire Boolean Whether thermal hydrogen plant capacity can be retired - true\ncan_expand Boolean Whether thermal hydrogen plant capacity can be expanded - true\nexisting_capacity Float64 Initial installed thermal hydrogen plant capacity MW 0.0\ncapacity_size Float64 Unit size for capacity decisions MW 1.0","category":"page"},{"location":"Manual/assets/thermalhydrogen/#Additional-Investment-Parameters","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Additional Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Maximum and minimum capacity constraints","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"If MaxCapacityConstraint or MinCapacityConstraint are added to the constraints dictionary for the hydrogen edge, the following parameters are used by Macro:","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Field Type Description Units Default\nmax_capacity Float64 Maximum allowed thermal hydrogen plant capacity MW Inf\nmin_capacity Float64 Minimum allowed thermal hydrogen plant capacity MW 0.0","category":"page"},{"location":"Manual/assets/thermalhydrogen/#Economic-Parameters","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Economic Parameters","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Field Type Description Units Default\ninvestment_cost Float64 CAPEX per unit thermal hydrogen plant capacity $/MW/yr 0.0\nfixed_om_cost Float64 Fixed O&M costs of the thermal hydrogen plant $/MW/yr 0.0\nvariable_om_cost Float64 Variable O&M costs of the thermal hydrogen plant $/MWh 0.0\nstartup_cost Float64 Cost per MW of capacity to start the plant $/MW per start 0.0","category":"page"},{"location":"Manual/assets/thermalhydrogen/#Operational-Parameters","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Operational Parameters","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Field Type Description Units Default\navailability Dict Path to availability file and column name - Empty","category":"page"},{"location":"Manual/assets/thermalhydrogen/#Additional-Operational-Parameters","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Additional Operational Parameters","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Unit commitment parameters (when uc is set to true):","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Field Type Description Units Default\nstartup_fuel_consumption Float64 Fuel consumption per unit hydrogen to start the plant MWh_fuelMWh_h2 0.0","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Minimum flow constraint","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"If MinFlowConstraint is added to the constraints dictionary for the hydrogen edge, the following parameter is used:","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Field Type Description Units Default\nmin_flow_fraction Float64 Minimum flow as fraction of capacity fraction 0.0","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Ramping limit constraint","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"If RampingLimitConstraint is added to the constraints dictionary for the hydrogen edge, the following parameters are used:","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Field Type Description Units Default\nramp_up_fraction Float64 Maximum increase in flow between timesteps fraction 1.0\nramp_down_fraction Float64 Maximum decrease in flow between timesteps fraction 1.0","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Minimum up and down time constraints","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"If MinUpTimeConstraint or MinDownTimeConstraint are added to the constraints dictionary for the hydrogen edge, the following parameters are used:","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Field Type Description Units Default\nmin_up_time Int64 Minimum time the plant must remain committed hours 0\nmin_down_time Int64 Minimum time the plant must remain shutdown hours 0","category":"page"},{"location":"Manual/assets/thermalhydrogen/#thermalhydrogen_type_definition","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Types - Asset Structure","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"The ThermalHydrogen and ThermalHydrogenCCS assets are defined as follows:","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"struct ThermalHydrogen{T} <: AbstractAsset\n    id::AssetId\n    thermalhydrogen_transform::Transformation\n    h2_edge::Union{Edge{<:Hydrogen},EdgeWithUC{<:Hydrogen}}\n    elec_edge::Edge{<:Electricity}\n    fuel_edge::Edge{<:T}\n    co2_edge::Edge{<:CO2}\nend\n\nstruct ThermalHydrogenCCS{T} <: AbstractAsset\n    id::AssetId\n    thermalhydrogenccs_transform::Transformation\n    h2_edge::Union{Edge{<:Hydrogen},EdgeWithUC{<:Hydrogen}}\n    elec_edge::Edge{<:Electricity}\n    fuel_edge::Edge{<:T}\n    co2_edge::Edge{<:CO2}\n    co2_captured_edge::Edge{<:CO2Captured}\nend","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"where T is the type of the fuel commodity.","category":"page"},{"location":"Manual/assets/thermalhydrogen/#thermalhydrogen_constructors","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Constructors","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/#Default-constructor","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Default constructor","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"ThermalHydrogen(id::AssetId, thermalhydrogen_transform::Transformation, h2_edge::Union{Edge{<:Hydrogen},EdgeWithUC{<:Hydrogen}}, elec_edge::Edge{<:Electricity}, fuel_edge::Edge{<:T}, co2_edge::Edge{<:CO2})\n\nThermalHydrogenCCS(id::AssetId, thermalhydrogenccs_transform::Transformation, h2_edge::Union{Edge{<:Hydrogen},EdgeWithUC{<:Hydrogen}}, elec_edge::Edge{<:Electricity}, fuel_edge::Edge{<:T}, co2_edge::Edge{<:CO2}, co2_captured_edge::Edge{<:CO2Captured})","category":"page"},{"location":"Manual/assets/thermalhydrogen/#Factory-constructor","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Factory constructor","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"make(asset_type::Type{ThermalHydrogen}, data::AbstractDict{Symbol,Any}, system::System)\nmake(asset_type::Type{ThermalHydrogenCCS}, data::AbstractDict{Symbol,Any}, system::System)","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Field Type Description\nasset_type Type{ThermalHydrogen} or Type{ThermalHydrogenCCS} Macro type of the asset\ndata AbstractDict{Symbol,Any} Dictionary containing the input data for the asset\nsystem System System to which the asset belongs","category":"page"},{"location":"Manual/assets/thermalhydrogen/#thermalhydrogen_examples","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Examples","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"This section contains examples of how to use the thermal hydrogen plant asset in a Macro model.","category":"page"},{"location":"Manual/assets/thermalhydrogen/#Simple-Thermal-Hydrogen-Plant-with-CCS","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Simple Thermal Hydrogen Plant with CCS","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"This example shows a thermal hydrogen plant with CCS capabilities, burning natural gas, and with unit commitment. A MinFlowConstraint constraint is applied to the hydrogen edge with a minimum flow fraction of 0.85. A MinUpTimeConstraint and MinDownTimeConstraint constraint is applied to the hydrogen edge with a minimum up and down time of 3 hours. A RampingLimitConstraint constraint is applied to the hydrogen edge with a ramping limit of 0.5. The asset has an availability time series loaded from a CSV file.","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"JSON Format:","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"{\n    \"NaturalGasH2SMR\": [\n        {\n            \"type\": \"ThermalHydrogenCCS\",\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Large_SMR\",\n                    \"location\": \"SE\",\n                    \"fuel_commodity\": \"NaturalGas\",\n                    \"co2_sink\": \"co2_sink\",\n                    \"uc\": true,\n                    \"h2_constraints\": {\n                        \"MinFlowConstraint\": true,\n                        \"MinUpTimeConstraint\": true,\n                        \"MinDownTimeConstraint\": true\n                    },\n                    \"emission_rate\": 0.006879832936086124,\n                    \"fuel_consumption\": 1.300184721664035,\n                    \"electricity_consumption\": 0.051727,\n                    \"capture_rate\": 0.17416840222407487,\n                    \"investment_cost\": 72729.17926,\n                    \"fixed_om_cost\": 30021.9427,\n                    \"variable_om_cost\": 6.942084285,\n                    \"capacity_size\": 791.739,\n                    \"startup_cost\": 0.253871541,\n                    \"min_up_time\": 3,\n                    \"min_down_time\": 3,\n                    \"ramp_up_fraction\": 0.5,\n                    \"ramp_down_fraction\": 0.5,\n                    \"min_flow_fraction\": 0.85,\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"SE_Large_SMR\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"CSV Format:","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Type id location timedata uc h2_constraints–MinFlowConstraint h2_constraints–MinUpTimeConstraint h2_constraints–MinDownTimeConstraint emission_rate fuel_consumption electricity_consumption capture_rate investment_cost fixed_om_cost variable_om_cost capacity_size startup_cost min_up_time min_down_time ramp_up_fraction ramp_down_fraction min_flow_fraction\nThermalHydrogenCCS SE_Large_SMR SE Hydrogen true true true true 0.006879832936086124 1.300184721664035 0.051727 0.17416840222407487 72729.17926 30021.9427 6.942084285 791.739 0.253871541 3 3 0.5 0.5 0.85","category":"page"},{"location":"Manual/assets/thermalhydrogen/#Multiple-Thermal-Hydrogen-withoutCCS-Assets-in-Different-Zones","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Multiple Thermal Hydrogen withoutCCS Assets in Different Zones","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"This example shows three thermal hydrogen plant assets located in the SE, MIDAT, and NE regions. Each asset is burning natural gas, and has unit commitment enabled. A MinFlowConstraint constraint is applied to the hydrogen edge with a minimum flow fraction of 0.85. A MinUpTimeConstraint and MinDownTimeConstraint constraint is applied to the hydrogen edge with a minimum up and down time of 3 hours. A RampingLimitConstraint constraint is applied to the hydrogen edge with a ramping limit of 0.5. The asset has an availability time series loaded from a CSV file.","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"JSON Format:","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Note that the global_data field is used to set the fields and constraints that are common to all instances of the same asset type.","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"{\n    \"NaturalGasH2SMR\": [\n        {\n            \"type\": \"ThermalHydrogen\",\n            \"global_data\": {\n                \"fuel_commodity\": \"NaturalGas\",\n                \"co2_sink\": \"co2_sink\",\n                \"uc\": true,\n                \"h2_constraints\": {\n                    \"MinFlowConstraint\": true,\n                    \"MinUpTimeConstraint\": true,\n                    \"MinDownTimeConstraint\": true\n                },\n                \"emission_rate\": 0.181048235160161,\n                \"fuel_consumption\": 1.3009661455954666,\n                \"electricity_consumption\": 0.016404,\n                \"investment_cost\": 29902.10236,\n                \"fixed_om_cost\": 13685.61723,\n                \"variable_om_cost\": 2.250837989,\n                \"capacity_size\": 1082.95,\n                \"startup_cost\": 0.126968004,\n                \"min_up_time\": 3,\n                \"min_down_time\": 3,\n                \"ramp_up_fraction\": 0.5,\n                \"ramp_down_fraction\": 0.5,\n                \"min_flow_fraction\": 0.85\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Large_SMR_Non_CCS\",\n                    \"location\": \"SE\",\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"SE_Large_SMR_Non_CCS\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_Large_SMR_Non_CCS\",\n                    \"location\": \"MIDAT\",\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"MIDAT_Large_SMR_Non_CCS\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_Large_SMR_Non_CCS\",\n                    \"location\": \"NE\",\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"NE_Large_SMR_Non_CCS\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"CSV Format:","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Type id location timedata uc h2_constraints–MinFlowConstraint h2_constraints–MinUpTimeConstraint h2_constraints–MinDownTimeConstraint emission_rate fuel_consumption electricity_consumption capture_rate investment_cost fixed_om_cost variable_om_cost capacity_size startup_cost min_up_time min_down_time ramp_up_fraction ramp_down_fraction min_flow_fraction\nThermalHydrogen SE_Large_SMR_Non_CCS SE Hydrogen true true true true 0.181048235160161 1.3009661455954666 0.016404 0.0 29902.10236 13685.61723 2.250837989 1082.95 0.126968004 3 3 0.5 0.5 0.85","category":"page"},{"location":"Manual/assets/thermalhydrogen/#thermalhydrogen_best_practices","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Best Practices","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Use global data for common fields and constraints: Use the global_data field to set the fields and constraints that are common to all instances of the same asset type.\nSet realistic stoichiometric coefficients: Ensure the transformation parameters reflect actual technology performance\nUse meaningful IDs: Choose descriptive identifiers that indicate location and technology type\nConsider unit commitment carefully: Enable unit commitment only when detailed operational modeling is needed\nSet appropriate minimum up/down times: These should reflect the actual thermal characteristics of the plant\nValidate costs: Ensure investment and O&M costs are in appropriate units and time periods\nTest configurations: Start with simple configurations and gradually add complexity","category":"page"},{"location":"Manual/assets/thermalhydrogen/#thermalhydrogen_advanced_json_csv_input_format","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Input File (Advanced Format)","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Macro provides an advanced format for defining thermal hydrogen plant assets, offering users and modelers detailed control over asset specifications. This format builds upon the standard format and is ideal for those who need more comprehensive customization.","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"To understand the advanced format, consider the graph representation and the type definition of a thermal hydrogen plant asset. The input file mirrors this hierarchical structure.","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"A thermal hydrogen plant asset in Macro is composed of a transformation component, represented by a Transformation object, and five edges, each represented by an Edge object. The input file for a thermal hydrogen plant asset is therefore organized as follows:","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"fuel_edge\": {\n            // ... fuel_edge-specific attributes ...\n        },\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"h2_edge\": {\n            // ... h2_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        },\n        \"co2_captured_edge\": {\n            // ... co2_captured_edge-specific attributes, only if CCS is present ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Each top-level key (e.g., \"transforms\" or \"edges\") denotes a component type. The second-level keys either specify the attributes of the component (when there is a single instance) or identify the instances of the component (e.g., \"fuel_edge\", \"h2_edge\", etc.) when there are multiple instances. For multiple instances, a third-level key details the attributes for each instance.","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Below is an example of an input file for a thermal hydrogen with CCS asset that sets up multiple thermal plants across different regions. ","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"{\n    \"NaturalGasH2ATRCCS\": [\n        {\n            \"type\": \"ThermalHydrogenCCS\",\n            \"global_data\": {\n                \"nodes\": {},\n                \"transforms\": {\n                    \"timedata\": \"Hydrogen\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"h2_edge\": {\n                        \"commodity\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_retire\": true,\n                        \"can_expand\": true,\n                        \"integer_decisions\": false,\n                        \"uc\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true,\n                            \"MinFlowConstraint\": true,\n                            \"MinUpTimeConstraint\": true,\n                            \"MinDownTimeConstraint\": true\n                        }\n                    },\n                    \"fuel_edge\": {\n                        \"commodity\": \"NaturalGas\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"co2_edge\": {\n                        \"commodity\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_sink\"\n                    },\n                    \"co2_captured_edge\": {\n                        \"commodity\": \"CO2Captured\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"elec_edge\": {\n                        \"commodity\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Large_SMR_wCCS_96pct\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.006879832936086124,\n                        \"fuel_consumption\": 1.300184721664035,\n                        \"electricity_consumption\": 0.051727,\n                        \"capture_rate\": 0.17416840222407487\n                    },\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"system/availability.csv\",\n                                    \"header\": \"SE_Large_SMR_wCCS_96pct\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 72729.17926,\n                            \"fixed_om_cost\": 30021.9427,\n                            \"variable_om_cost\": 6.942084285,\n                            \"capacity_size\": 791.739,\n                            \"startup_cost\": 0.253871541,\n                            \"min_up_time\": 3,\n                            \"min_down_time\": 3,\n                            \"ramp_up_fraction\": 0.5,\n                            \"ramp_down_fraction\": 0.5,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"fuel_edge\": {\n                            \"start_vertex\": \"natgas_SE\"\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        },\n                        \"co2_captured_edge\": {\n                            \"end_vertex\": \"co2_captured_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_Large_SMR_wCCS_96pct\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.006879832936086124,\n                        \"fuel_consumption\": 1.300184721664035,\n                        \"electricity_consumption\": 0.051727,\n                        \"capture_rate\": 0.17416840222407487\n                    },\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_MIDAT\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"system/availability.csv\",\n                                    \"header\": \"MIDAT_Large_SMR_wCCS_96pct\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 72729.17926,\n                            \"fixed_om_cost\": 30021.9427,\n                            \"variable_om_cost\": 6.942084285,\n                            \"capacity_size\": 791.739,\n                            \"startup_cost\": 0.253871541,\n                            \"min_up_time\": 3,\n                            \"min_down_time\": 3,\n                            \"ramp_up_fraction\": 0.5,\n                            \"ramp_down_fraction\": 0.5,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"fuel_edge\": {\n                            \"start_vertex\": \"natgas_MIDAT\"\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\"\n                        },\n                        \"co2_captured_edge\": {\n                            \"end_vertex\": \"co2_captured_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_Large_SMR_wCCS_96pct\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.006879832936086124,\n                        \"fuel_consumption\": 1.300184721664035,\n                        \"electricity_consumption\": 0.051727,\n                        \"capture_rate\": 0.17416840222407487\n                    },\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"system/availability.csv\",\n                                    \"header\": \"NE_Large_SMR_wCCS_96pct\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 72729.17926,\n                            \"fixed_om_cost\": 30021.9427,\n                            \"variable_om_cost\": 6.942084285,\n                            \"capacity_size\": 791.739,\n                            \"startup_cost\": 0.253871541,\n                            \"min_up_time\": 3,\n                            \"min_down_time\": 3,\n                            \"ramp_up_fraction\": 0.5,\n                            \"ramp_down_fraction\": 0.5,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"fuel_edge\": {\n                            \"start_vertex\": \"natgas_NE\"\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_NE\"\n                        },\n                        \"co2_captured_edge\": {\n                            \"end_vertex\": \"co2_captured_NE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/thermalhydrogen/#Key-Points","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Key Points","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"The global_data field is utilized to define attributes and constraints that apply universally to all instances of a particular asset type.\nThe start_vertex and end_vertex fields indicate the nodes to which the edges are connected. These nodes must be defined in the nodes.json file.\nBy default, only the hydrogen edge is allowed to have capacity variables and constraints, as this represents the main capacity decision for the hydrogen production facility (see note below).\nUnit commitment operations can be enabled for the hydrogen edge to model detailed operational constraints.\nFor a comprehensive list of attributes that can be configured for the transformation and edge components, refer to the transformation and edges pages of the Macro manual. ","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"note: The `has_capacity` Edge Attribute\nThe has_capacity attribute is a flag that indicates whether a specific edge of an asset has a capacity variable, allowing it to be expanded or retired. Typically, users do not need to manually adjust this flag, as the asset creators in Macro have already configured it correctly for each edge. However, advanced users can use this flag to override the default settings for each edge if needed.","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"tip: Prefixes\nUsers can apply prefixes to adjust parameters for the components of a thermal hydrogen plant asset, even when using the standard format. For instance, co2_can_retire will adjust the can_retire parameter for the CO2 edge, and co2_existing_capacity will adjust the existing_capacity parameter for the CO2 edge. Below are the prefixes available for modifying parameters for the components of a thermal hydrogen plant asset:transform_ for the transformation component\nh2_ for the hydrogen edge\nco2_ for the CO2 edge\nco2_captured_ for the CO2 captured edge\nelec_ for the electricity edge\nfuel_ for the fuel edge","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"","category":"page"},{"location":"Tutorials/1_running_macro/#Tutorial:-Running-Macro","page":"Running Macro","title":"Tutorial: Running Macro","text":"","category":"section"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"note: Interactive Notebook\nThe interactive version of this tutorial can be found here.","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"In this tutorial, we start from a single zone electricity system with four resource clusters: utility scale solar PV, land-based wind power generation, natural gas combined cycle power plants, and electricity storage. ","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"We consider three commodities: electricity, natural gas, and textCO_2. ","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"Initially, hydrogen is modeled exogenously, adding a constant electricity demand for hydrogen production to the electricity demand time series. In other words, we assume the existence of an electrolyzer that continuously consumes electricity to meet the hydrogen demand.","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"We model a greenfield scenario with a carbon price of 200 USD/ton, i.e., we allow textCO_2 emissions with a penalty cost.","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"Note: We use the default units in Macro: MWh for energy vectors, metric tons for other commodities (e.g., textCO_2) and dollars for costs","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"using Pkg; Pkg.add(\"VegaLite\")","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"using MacroEnergy\nusing HiGHS\nusing CSV\nusing DataFrames\nusing JSON3\nusing VegaLite","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"We first load the inputs:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"system = MacroEnergy.load_system(\"one_zone_electricity_only\");","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"We are now ready to generate the Macro capacity expansion model. Because Macro is designed to be solved by high performance decomposition algorithms, the model formulation has a specific block structure that can be exploited by these schemes. In the case of 3 operational sub-periods, the block structure looks like this:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"(Image: model_structure)","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"model = MacroEnergy.generate_model(system)","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"Next, we set the optimizer. Note that we are using the open-source LP solver HiGHS, alternatives include the commercial solvers Gurobi, CPLEX, COPT.","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"MacroEnergy.set_optimizer(model, HiGHS.Optimizer);","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"Finally, we solve the capacity expansion model:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"MacroEnergy.optimize!(model)","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"To output the results in a csv file, we can use the following functions:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"result_dir = joinpath(@__DIR__, \"results\")\nmkpath(result_dir)\n\nwrite_capacity(joinpath(result_dir, \"capacity.csv\"), system)\nwrite_costs(joinpath(result_dir, \"costs.csv\"), system, model)\nwrite_flow(joinpath(result_dir, \"flow.csv\"), system)\n\n# Alternative: Write all results at once (legacy function)\n# Creates multiple files: results_capacity.csv.gz, results_flow.csv.gz, etc.\nwrite_results(result_dir, system, model, settings)","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"To only view the results, we can use the following functions:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"get_optimal_capacity(system)\nget_optimal_retired_capacity(system)\nget_optimal_flows(system)\nget_optimal_undiscounted_costs(model)\nget_optimal_flows(system)","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"The total system cost (in dollars) is:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"MacroEnergy.objective_value(model)","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"and the total emissions (in metric tonnes) are:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"co2_node = MacroEnergy.get_nodes_sametype(system.locations, CO2)[1]\nMacroEnergy.value(sum(co2_node.operation_expr[:emissions]))","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"We can also plot the electricity generation results using VegaLite.jl:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"plot_time_interval = 3600:3624\nnatgas_power = MacroEnergy.value.(MacroEnergy.flow(system.assets[2].elec_edge)).data[plot_time_interval] / 1e3;\nsolar_power = MacroEnergy.value.(MacroEnergy.flow(system.assets[3].edge)).data[plot_time_interval] / 1e3;\nwind_power = MacroEnergy.value.(MacroEnergy.flow(system.assets[4].edge)).data[plot_time_interval] / 1e3;\n\nelec_gen = DataFrame(hours=plot_time_interval,\n    solar_photovoltaic=solar_power,\n    wind_turbine=wind_power,\n    natural_gas_fired_combined_cycle=natgas_power,\n)\n\nstack_elec_gen = stack(elec_gen, [:natural_gas_fired_combined_cycle, :wind_turbine, :solar_photovoltaic], variable_name=:resource, value_name=:generation);\n\nelc_plot = stack_elec_gen |>\n           @vlplot(\n    :area,\n    x = {:hours, title = \"Hours\"},\n    y = {:generation, title = \"Electricity generation (GWh)\", stack = :zero},\n    color = {\"resource:n\", scale = {scheme = :category10}},\n    width = 400,\n    height = 300\n)","category":"page"},{"location":"Tutorials/1_running_macro/#Exercise-1","page":"Running Macro","title":"Exercise 1","text":"","category":"section"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"Set a strict net-zero textCO_2 cap by removing the slack allowing constraint violation for a penalty. This can be done by deleting the field price_unmet_policy from the textCO_2 node in file one_zone_electricity_only/system/nodes.json","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"Then, re-run the model with these new inputs and show the capacity results, total system cost, emissions, and plot the generation profiles.","category":"page"},{"location":"Tutorials/1_running_macro/#Solution","page":"Running Macro","title":"Solution","text":"","category":"section"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"Open file one_zone_electricity_only/system/nodes.json, go to the bottom of the file where the textCO_2 node is defined. Remove the lines related to the field price_unmet_policy, so that the node definition looks like this:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":" {\n    \"type\": \"CO2\",\n    \"global_data\": {\n        \"time_interval\": \"CO2\"\n    },\n    \"instance_data\": [\n        {\n            \"id\": \"co2_sink\",\n            \"constraints\": {\n                \"CO2CapConstraint\": true\n            },\n            \"rhs_policy\": {\n                \"CO2CapConstraint\": 0\n            }   \n        }\n    ]\n}","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"Then, you need to re-load the inputs:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"system = MacroEnergy.load_system(\"one_zone_electricity_only\");","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"generate the Macro model:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"model = MacroEnergy.generate_model(system);","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"and solve it:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"MacroEnergy.set_optimizer(model, HiGHS.Optimizer);\nMacroEnergy.optimize!(model)","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"We can check the results by printing the total system cost:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"MacroEnergy.objective_value(model)","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"and the new emissions (which should be zero):","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"co2_node = MacroEnergy.get_nodes_sametype(system.locations, CO2)[1]\nMacroEnergy.value(sum(co2_node.operation_expr[:emissions]))","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"Finally, we plot the generation results:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"plot_time_interval = 3600:3624\nnatgas_power =  MacroEnergy.value.(MacroEnergy.flow(system.assets[2].elec_edge)).data[plot_time_interval]/1e3;\nsolar_power = MacroEnergy.value.(MacroEnergy.flow(system.assets[3].edge)).data[plot_time_interval]/1e3;\nwind_power = MacroEnergy.value.(MacroEnergy.flow(system.assets[4].edge)).data[plot_time_interval]/1e3;\n\nelec_gen =  DataFrame( hours = plot_time_interval, \n                solar_photovoltaic = solar_power,\n                wind_turbine = wind_power,\n                natural_gas_fired_combined_cycle = natgas_power,\n                )\n\nstack_elec_gen = stack(elec_gen, [:natural_gas_fired_combined_cycle,:wind_turbine,:solar_photovoltaic], variable_name=:resource, value_name=:generation);\n\nelc_plot = stack_elec_gen |> \n@vlplot(\n    :area,\n    x={:hours, title=\"Hours\"},\n    y={:generation, title=\"Electricity generation (GWh)\",stack=:zero},\n    color={\"resource:n\", scale={scheme=:category10}},\n    width=400,\n    height=300\n)","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"","category":"page"},{"location":"Manual/Assets/#Assets","page":"Assets","title":"Assets","text":"","category":"section"},{"location":"Manual/Assets/#Overview","page":"Assets","title":"Overview","text":"","category":"section"},{"location":"Manual/Assets/","page":"Assets","title":"Assets","text":"Macro is designed to be a flexible and modular model that can adapt to various energy system representations. The model provides a rich library of pre-defined assets, enabling a \"plug-and-play\" approach for users building their own energy system.","category":"page"},{"location":"Manual/Assets/","page":"Assets","title":"Assets","text":"Each asset is defined by a combination of transformations, edges, and storage units that represent the physical and operational characteristics of a technology. These assets can be combined to create a detailed representation of the energy system, capturing the interactions between technologies and sectors.","category":"page"},{"location":"Manual/Assets/","page":"Assets","title":"Assets","text":"In the following sections, we will introduce each asset type and show the attributes that can be set for each of them as well as the equations that define the conversion processes. We will also provide a graphical representation of the asset in terms of transformations, edges, and storages to help the user understand the structure of the asset.","category":"page"},{"location":"Manual/Assets/","page":"Assets","title":"Assets","text":"Each asset page follows a consistent structure with the following sections:","category":"page"},{"location":"Manual/Assets/","page":"Assets","title":"Assets","text":"Overview: A brief description of what the asset represents and its role in energy systems\nAsset Structure: A graphical representation showing the transformations, edges, and storages present in the asset\nFlow Equations (where applicable): Mathematical relationships governing the asset's conversion processes\nInput File (Standard Format): How to create and configure the asset using JSON or CSV files\nTypes - Asset Structure: The Julia type definition and internal structure\nConstructors: The Julia constructors for the asset\nExamples: Practical examples showing different configurations and use cases\nBest Practices: Guidelines for effective asset configuration and usage\nInput File (Advanced Format): Advanced configuration options and formats","category":"page"},{"location":"Manual/Assets/#Macro-Asset-Library","page":"Assets","title":"Macro Asset Library","text":"","category":"section"},{"location":"Manual/Assets/","page":"Assets","title":"Assets","text":"The current library includes the following assets:","category":"page"},{"location":"Manual/Assets/#[Battery](@ref)","page":"Assets","title":"Battery","text":"","category":"section"},{"location":"Manual/Assets/","page":"Assets","title":"Assets","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph Battery\n  direction BT\n    A((Electricity)) e1@-->|Charge| B[Storage]\n    B e2@-->|Discharge| A\n    e1@{ animate: true }\n    e2@{ animate: true }\n end\n    style A font-size:19px,r:55px,fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n    style B fill:#FFD700,stroke:black,color:black;\n    linkStyle 0,1 stroke:#FFD700, stroke-width: 2px;","category":"page"},{"location":"Manual/Assets/#[BECCS-Electricity](@ref)","page":"Assets","title":"BECCS Electricity","text":"","category":"section"},{"location":"Manual/Assets/","page":"Assets","title":"Assets","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph BECCSElectricity\n  direction BT\n    B((Biomass)) e1@--> A{{..}}\n    C((CO₂ Source)) e2@--> A\n    A e5@--> D((Electricity))\n    A e3@--> E((CO₂ Emitted))\n    A e4@--> F((CO₂ Captured))\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n end\n    style A fill:black,stroke:black,color:black;\n    style B r:55px,fill:palegreen,stroke:black,color:black, stroke-dasharray: 3,5;\n    style C r:55px,fill:lightgray,stroke:black,color:black, stroke-dasharray: 3,5;\n    style D font-size:21px,r:55px,fill:#FFD700,stroke:black,color:black, stroke-dasharray: 3,5;\n    style E font-size:17px,r:55px,fill:lightgray,stroke:black,color:black, stroke-dasharray: 3,5;\n    style F font-size:15px,r:55px,fill:lightgray,stroke:black,color:black, stroke-dasharray: 3,5;\n\n    linkStyle 0 stroke:palegreen, stroke-width: 2px;\n    linkStyle 1,3,4 stroke:lightgray, stroke-width: 2px;\n    linkStyle 2 stroke:#FFD700, stroke-width: 2px;","category":"page"},{"location":"Manual/Assets/#[BECCS-Hydrogen](@ref)","page":"Assets","title":"BECCS Hydrogen","text":"","category":"section"},{"location":"Manual/Assets/","page":"Assets","title":"Assets","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph BECCSHydrogen\n  direction BT\n    B((Biomass)) e1@--> A{{..}}\n    C((CO₂ Source)) e2@--> A\n    D((Electricity)) e3@--> A\n    A e4@--> E((Hydrogen))\n    A e5@--> F((Emitted CO₂))\n    A e6@--> G((Captured CO₂))\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n    e6@{ animate: true }\n end\n    style A fill:black,stroke:black,color:black;\n    style B r:55px,fill:palegreen,stroke:black,color:black, stroke-dasharray: 3,5;\n    style C r:55px,fill:lightgray,stroke:black,color:black, stroke-dasharray: 3,5;\n    style D r:55px,fill:#FFD700,stroke:black,color:black, stroke-dasharray: 3,5;\n    style E font-size:21px,r:55px,fill:lightblue,stroke:black,color:black, stroke-dasharray: 3,5;\n    style F font-size:17px,r:55px,fill:lightgray,stroke:black,color:black, stroke-dasharray: 3,5;\n    style G font-size:15px,r:55px,fill:lightgray,stroke:black,color:black, stroke-dasharray: 3,5;\n\n    linkStyle 0 stroke:palegreen, stroke-width: 2px;\n    linkStyle 1 stroke:lightgray, stroke-width: 2px;\n    linkStyle 2 stroke:#FFD700, stroke-width: 2px;\n    linkStyle 3 stroke:lightblue, stroke-width: 2px;\n    linkStyle 4 stroke:lightgray, stroke-width: 2px;\n    linkStyle 5 stroke:lightgray, stroke-width: 2px;","category":"page"},{"location":"Manual/Assets/#[Electric-DAC](@ref)","page":"Assets","title":"Electric DAC","text":"","category":"section"},{"location":"Manual/Assets/","page":"Assets","title":"Assets","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph ElectricDAC\n    direction LR\n    A((Electricity)) e1@--> C{{..}}\n    B((CO₂)) e2@--> C\n    C e3@--> D((CO₂ Captured))\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n  end\n  \n  style A r:55px,fill:#FFD700,stroke:black,color:black, stroke-dasharray: 3,5;\n  style B r:55px,fill:lightgray,stroke:black,color:black, stroke-dasharray: 3,5;\n  style C fill:black,stroke:black,color:black;\n  style D r:55px,fill:lightgray,stroke:black,color:black, stroke-dasharray: 3,5;\n\n  linkStyle 0 stroke:#FFD700, stroke-width: 2px, stroke-dasharray: 5 5;\n  linkStyle 1 stroke:lightgray, stroke-width: 2px;\n  linkStyle 2 stroke:lightgray, stroke-width: 2px;","category":"page"},{"location":"Manual/Assets/#[Electrolyzer](@ref)","page":"Assets","title":"Electrolyzer","text":"","category":"section"},{"location":"Manual/Assets/","page":"Assets","title":"Assets","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph Electrolyzer\n  direction LR\n  A((Electricity)) e1@--> B{{..}}\n  B e2@--> C((Hydrogen))\n  e1@{ animate: true }\n  e2@{ animate: true }\n end\n    style A font-size:19px,r:55px,fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n    style B fill:black,stroke:black,color:black;\n    style C font-size:21px,r:55px,fill:lightblue,stroke:black,color:black,stroke-dasharray: 3,5;\n\n    linkStyle 0 stroke:#FFD700, stroke-width: 2px, stroke-dasharray: 5 5;\n    linkStyle 1 stroke:lightblue, stroke-width: 2px, stroke-dasharray: 5 5;","category":"page"},{"location":"Manual/Assets/#[Fuel-Cell](@ref)","page":"Assets","title":"Fuel Cell","text":"","category":"section"},{"location":"Manual/Assets/","page":"Assets","title":"Assets","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph FuelCell\n  direction LR\n  A((Hydrogen)) e1@--> B{{..}}\n  B e2@--> C((Electricity))\n  e1@{ animate: true }\n  e2@{ animate: true }\n end\n    style A r:48px,fill:lightblue,stroke:black,color:black,stroke-dasharray: 3,5;\n    style B fill:black,stroke:black,color:black;\n    style C r:48px,fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n    linkStyle 0 stroke:lightblue, stroke-width: 2px, stroke-dasharray: 5 5;\n    linkStyle 1 stroke:#FFD700, stroke-width: 2px, stroke-dasharray: 5 5;","category":"page"},{"location":"Manual/Assets/#[Gas-Storage](@ref)","page":"Assets","title":"Gas Storage","text":"","category":"section"},{"location":"Manual/Assets/","page":"Assets","title":"Assets","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph GasStorage\n  direction LR\n    A((Electricity)) e1@--> C{{..}} e2@--> A((Electricity))\n    B((Gas Type)) e3@--> C{{..}} e4@--> B((Gas Type))\n    C e5@--> D[Storage] e6@--> C\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n    e6@{ animate: true }\n end\n    style A font-size:19px,r:55px,fill:#FFD700,stroke:black,color:black, stroke-dasharray: 3,5;\n    style B r:44px,fill:lightblue,stroke:black,color:black, stroke-dasharray: 3,5;\n    style C fill:black,stroke:black,color:black;\n    style D fill:lightblue,stroke:black,color:black;\n\n    linkStyle 0,1 stroke:#FFD700, stroke-width: 3px;\n    linkStyle 2,3 stroke:lightblue, stroke-width: 3px;\n    linkStyle 4,5 stroke:lightblue, stroke-width: 3px;","category":"page"},{"location":"Manual/Assets/#[Hydro-Reservoir](@ref)","page":"Assets","title":"Hydro Reservoir","text":"","category":"section"},{"location":"Manual/Assets/","page":"Assets","title":"Assets","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph HydroRes\n    direction LR\n    A((Hydro Source)) e1@--> B[Storage] e2@--> C((Electricity))\n    B e3@--> A\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n  end\n  \n  style A r:55px,fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n  style B fill:#FFD700,stroke:black,color:black;\n  style C r:48px,fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n\n  linkStyle 0 stroke:#FFD700, stroke-width: 2px;\n  linkStyle 1 stroke:#FFD700, stroke-width: 2px;\n  linkStyle 2 stroke:#FFD700, stroke-width: 2px;","category":"page"},{"location":"Manual/Assets/#[Must-Run](@ref)","page":"Assets","title":"Must Run","text":"","category":"section"},{"location":"Manual/Assets/","page":"Assets","title":"Assets","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph MustRun\n  direction LR\n  A{{..}} e1@--> B((Electricity))\n  e1@{ animate: true }\n end\n    style A fill:black,stroke:black,color:black;\n    style B fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n    \n    linkStyle 0 stroke:#FFD700, stroke-width: 2px, stroke-dasharray: 5 5;","category":"page"},{"location":"Manual/Assets/#[Natural-Gas-DAC](@ref)","page":"Assets","title":"Natural Gas DAC","text":"","category":"section"},{"location":"Manual/Assets/","page":"Assets","title":"Assets","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph NaturalGasDAC\n    direction BT\n    A((Natural Gas)) e1@--> C{{..}}\n    B((CO₂)) e2@--> C{{..}}\n    C{{..}} e3@--> D((Electricity))\n    C{{..}} e4@--> E((CO₂ Emitted))\n    C{{..}} e5@--> F((CO₂ Captured))\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n  end\n    style A r:55px,fill:#005F6A,stroke:black,color:white, stroke-dasharray: 3,5;\n    style B r:55px,fill:lightgray,stroke:black,color:black, stroke-dasharray: 3,5;\n    style C r:55px,fill:black,stroke:black,color:black, stroke-dasharray: 3,5;\n    style D font-size:19px,r:55px,fill:#FFD700,stroke:black,color:black, stroke-dasharray: 3,5;\n    style E font-size:17px,r:55px,fill:lightgray,stroke:black,color:black, stroke-dasharray: 3,5;\n    style F font-size:15px,r:55px,fill:lightgray,stroke:black,color:black, stroke-dasharray: 3,5;\n\n    linkStyle 0 stroke:#005F6A, stroke-width: 2px;\n    linkStyle 1 stroke:lightgray, stroke-width: 2px;\n    linkStyle 2 stroke:#FFD700, stroke-width: 2px;\n    linkStyle 3 stroke:lightgray, stroke-width: 2px;\n    linkStyle 4 stroke:lightgray, stroke-width: 2px;","category":"page"},{"location":"Manual/Assets/#[Transmission-Link](@ref)","page":"Assets","title":"Transmission Link","text":"","category":"section"},{"location":"Manual/Assets/","page":"Assets","title":"Assets","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph TransmissionLink\n  direction LR\n    A((Commodity)) e1@-->|Transmission| B((Commodity))\n    e1@{ animate: true }\n end\n    style A r:40,fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n    style B r:40,fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n    linkStyle 0 stroke:#FFD700, stroke-width: 2px;","category":"page"},{"location":"Manual/Assets/#[Thermal-Hydrogen-Plant-(with-and-without-CCS)](@ref)","page":"Assets","title":"Thermal Hydrogen Plant (with and without CCS)","text":"","category":"section"},{"location":"Manual/Assets/","page":"Assets","title":"Assets","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph ThermalHydrogen\n    direction BT\n    A((Fuel)) e1@--> C{{..}}\n    B((Electricity)) e2@--> C{{..}}\n    C{{..}} e3@--> D((Hydrogen))\n    C{{..}} e4@--> E((CO₂ Emitted))\n    C{{..}} e5@--> F((CO₂ Captured))\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n  end\n  \n  style A r:55px,fill:#005F6A,stroke:black,color:white,stroke-dasharray: 3,5;\n  style B r:55px,fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n  style C r:55px,fill:black,stroke:black,color:black, stroke-dasharray: 3,5;\n  style D font-size:21px,r:55px,fill:lightblue,stroke:black,color:black,stroke-dasharray: 3,5;\n  style E font-size:17px,r:55px,fill:lightgray,stroke:black,color:black,stroke-dasharray: 3,5;\n  style F font-size:15px,r:55px,fill:lightgray,stroke:black,color:black,stroke-dasharray: 3,5;\n\n  linkStyle 0 stroke:#005F6A, stroke-width: 2px;\n  linkStyle 1 stroke:#FFD700, stroke-width: 2px;\n  linkStyle 2 stroke:lightblue, stroke-width: 2px;\n  linkStyle 3,4 stroke:lightgray, stroke-width: 2px;","category":"page"},{"location":"Manual/Assets/#[Thermal-Power-Plant-(with-and-without-CCS)](@ref)","page":"Assets","title":"Thermal Power Plant (with and without CCS)","text":"","category":"section"},{"location":"Manual/Assets/","page":"Assets","title":"Assets","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph ThermalPower\n  direction BT\n  A((Fuel)) e1@ --> B{{..}}\n  B e2@ --> C((Electricity))\n  B e3@ --> D((CO₂ Emitted))\n  B e4@ --> E((CO₂ Captured))\n  e1@{animate: true}\n  e2@{animate: true}\n  e3@{animate: true}\n  e4@{animate: true}\n end\n    style A r:55px,fill:#005F6A,stroke:black,color:white,stroke-dasharray: 3,5;\n    style B r:55px,fill:black,stroke:black,color:black,stroke-dasharray: 3,5;\n    style C font-size:19px,r:55px,fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n    style D font-size:17px,r:55px,fill:lightgray,stroke:black,color:black,stroke-dasharray: 3,5;\n    style E font-size:15px,r:55px,fill:lightgray,stroke:black,color:black,stroke-dasharray: 3,5;\n\n  linkStyle 0 stroke:#005F6A, stroke-width: 2px;\n  linkStyle 1 stroke:#FFD700, stroke-width: 2px;\n  linkStyle 2 stroke:lightgray, stroke-width: 2px;\n  linkStyle 3 stroke:lightgray, stroke-width: 2px;","category":"page"},{"location":"Manual/Assets/#[Variable-Renewable-Energy-resources-(VRE)](@ref-vre)","page":"Assets","title":"Variable Renewable Energy resources (VRE)","text":"","category":"section"},{"location":"Manual/Assets/","page":"Assets","title":"Assets","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph VRE\n  direction LR\n  A((Energy Source)) e1@--> B{{..}}\n  B e2@--> C((Electricity))\n  e1@{ animate: true }\n  e2@{ animate: true }\n end\n    style A r:55px,fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n    style B r:55px,fill:black,stroke:black,color:black,stroke-dasharray: 3,5;\n    style C font-size:20px,r:55px,fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n    linkStyle 0 stroke:#FFD700, stroke-width: 2px;\n    linkStyle 1 stroke:#FFD700, stroke-width: 2px;","category":"page"},{"location":"Manual/Assets/","page":"Assets","title":"Assets","text":"","category":"page"},{"location":"References/3_macro_objects/#Macro-Objects","page":"Macro Objects","title":"Macro Objects","text":"","category":"section"},{"location":"References/3_macro_objects/","page":"Macro Objects","title":"Macro Objects","text":"Pages = [\"2_macro_objects.md\"]","category":"page"},{"location":"References/3_macro_objects/#Edge-(with-and-without-UC)","page":"Macro Objects","title":"Edge (with and without UC)","text":"","category":"section"},{"location":"References/3_macro_objects/#MacroEnergy.Edge","page":"Macro Objects","title":"MacroEnergy.Edge","text":"Edge{T} <: AbstractEdge{T}\n\nA mutable struct representing an edge in a network model, parameterized by commodity type T.\n\n# Fields\n- id::Symbol: Unique identifier for the edge\n- timedata::TimeData: Time-related data for the edge\n- start_vertex::AbstractVertex: Starting vertex of the edge\n- end_vertex::AbstractVertex: Ending vertex of the edge\n- availability::Vector{Float64}: Time series of availability factors\n- can_expand::Bool: Whether edge capacity can be expanded\n- can_retire::Bool: Whether edge capacity can be retired\n- capacity::Union{AffExpr,Float64}: Total available capacity\n- capacity_size::Float64: Size factor for resource cluster\n- constraints::Vector{AbstractTypeConstraint}: List of constraints applied to the edge\n- distance::Float64: Physical distance of the edge\n- existing_capacity::Float64: Initial installed capacity\n- fixed_om_cost::Float64: Fixed operation and maintenance costs\n- flow::Union{JuMPVariable,Vector{Float64}}: Flow of commodity `T` through the edge at each timestep\n- has_capacity::Bool: Whether the edge has capacity variables\n- integer_decisions::Bool: Whether capacity decisions must be integer\n- investment_cost::Float64: CAPEX per unit of new capacity\n- loss_fraction::Vector{Float64}: Fraction of flow lost during transmission, it can be time-dependent.\n- max_capacity::Float64: Maximum allowed capacity\n- min_capacity::Float64: Minimum required capacity\n- min_flow_fraction::Float64: Minimum flow as fraction of capacity\n- new_capacity::Union{JuMPVariable,Float64}: JuMP variable representing new capacity built\n- ramp_down_fraction::Float64: Maximum ramp-down rate as fraction of capacity\n- ramp_up_fraction::Float64: Maximum ramp-up rate as fraction of capacity\n- ret_capacity::Union{JuMPVariable,Float64}: JuMP variable representing capacity to be retired\n- unidirectional::Bool: Whether flow is restricted to one direction\n- variable_om_cost::Float64: Variable operation and maintenance costs per unit flow\n\nEdges represent connections between vertices that allow commodities to flow between them. \nThey can model physical infrastructure like pipelines, transmission lines, or logical \nconnections with associated costs, capacities, and operational constraints.\n\n\n\n\n\n","category":"type"},{"location":"References/3_macro_objects/#EdgeWithUC","page":"Macro Objects","title":"EdgeWithUC","text":"","category":"section"},{"location":"References/3_macro_objects/#MacroEnergy.EdgeWithUC","page":"Macro Objects","title":"MacroEnergy.EdgeWithUC","text":"EdgeWithUC{T} <: AbstractEdge{T}\n\nA mutable struct representing an edge with unit commitment constraints in a network model, parameterized by commodity type T.\n\n# Inherited Attributes from Edge\n- id::Symbol: Unique identifier for the edge\n- timedata::TimeData: Time-related data for the edge\n- start_vertex::AbstractVertex: Starting vertex of the edge\n- end_vertex::AbstractVertex: Ending vertex of the edge\n- availability::Vector{Float64}: Time series of availability factors\n- can_expand::Bool: Whether edge capacity can be expanded\n- can_retire::Bool: Whether edge capacity can be retired\n- capacity::Union{AffExpr,Float64}: Total available capacity\n- capacity_size::Float64: Size factor for resource cluster\n- constraints::Vector{AbstractTypeConstraint}: List of constraints applied to the edge\n- distance::Float64: Physical distance of the edge\n- existing_capacity::Float64: Initial installed capacity\n- fixed_om_cost::Float64: Fixed operation and maintenance costs\n- flow::Union{JuMPVariable,Vector{Float64}}: Flow of commodity through the edge at each timestep\n- has_capacity::Bool: Whether the edge has capacity variables\n- integer_decisions::Bool: Whether capacity decisions must be integer\n- investment_cost::Float64: CAPEX per unit of new capacity\n- loss_fraction::Float64: Fraction of flow lost during transmission\n- max_capacity::Float64: Maximum allowed capacity\n- min_capacity::Float64: Minimum required capacity\n- min_flow_fraction::Float64: Minimum flow as fraction of capacity\n- new_capacity::Union{JuMPVariable,Float64}: JuMP variable representing new capacity built\n- ramp_down_fraction::Float64: Maximum ramp-down rate as fraction of capacity\n- ramp_up_fraction::Float64: Maximum ramp-up rate as fraction of capacity\n- ret_capacity::Union{JuMPVariable,Float64}: JuMP variable representing capacity to be retired\n- unidirectional::Bool: Whether flow is restricted to one direction\n- variable_om_cost::Float64: Variable operation and maintenance costs per unit flow\n\n# Fields specific to EdgeWithUC\n- min_down_time::Int64: Minimum time units that must elapse between shutting down and starting up\n- min_up_time::Int64: Minimum time units that must elapse between starting up and shutting down\n- startup_cost::Float64: Cost incurred when starting up the unit\n- startup_fuel::Float64: Amount of fuel consumed during startup\n- startup_fuel_balance_id::Symbol: Identifier for the balance constraint tracking startup fuel\n- ucommit::Union{JuMPVariable,Vector{Float64}}: Binary commitment state variables\n- ushut::Union{JuMPVariable,Vector{Float64}}: Binary shutdown decision variables\n- ustart::Union{JuMPVariable,Vector{Float64}}: Binary startup decision variables\n\nEdgeWithUC extends Edge to model units that have operational constraints related to their on/off status. It includes variables and parameters\nfor tracking unit commitment decisions and associated costs/constraints.\n\n\n\n\n\n","category":"type"},{"location":"References/3_macro_objects/#Node","page":"Macro Objects","title":"Node","text":"","category":"section"},{"location":"References/3_macro_objects/#MacroEnergy.Node","page":"Macro Objects","title":"MacroEnergy.Node","text":"Node{T} <: AbstractVertex\n\nA mutable struct representing a node in a network, parameterized by commodity type T.\n\n# Inherited Attributes\n- id::Symbol: Unique identifier for the node\n- timedata::TimeData: Time-related data for the node\n- balance_data::Dict{Symbol,Dict{Symbol,Float64}}: Balance equations data\n- constraints::Vector{AbstractTypeConstraint}: List of constraints applied to the node\n- operation_expr::Dict: Operational JuMP expressions for the node\n\n# Fields\n- demand::Union{Vector{Float64},Dict{Int64,Float64}}: Time series of demand values\n- max_nsd::Vector{Float64}: Maximum allowed non-served demand for each segment\n- max_supply::Vector{Float64}: Maximum supply for each segment\n- non_served_demand::Union{JuMPVariable,Matrix{Float64}}: JuMP variables or matrix representing unmet demand\n- policy_budgeting_vars::Dict: Policy budgeting variables for constraints\n- policy_slack_vars::Dict: Policy slack variables for constraints\n- price::Union{Vector{Float64},Dict{Int64,Float64}}: Time series of prices\n- price_nsd::Vector{Float64}: Penalties for non-served demand by segment\n- price_supply::Vector{Float64}: Supply costs by segment\n- price_unmet_policy::Dict{DataType,Float64}: Mapping of policy types to penalty costs\n- rhs_policy::Dict{DataType,Float64}: Mapping of policy types to right-hand side values\n- supply_flow::Union{JuMPVariable,Matrix{Float64}}: JuMP variables or matrix representing supply flows\n\nNote: Base attributes are inherited from AbstractVertex via @AbstractVertexBaseAttributes macro.\n\n\n\n\n\n","category":"type"},{"location":"References/3_macro_objects/#Storage","page":"Macro Objects","title":"Storage","text":"","category":"section"},{"location":"References/3_macro_objects/#MacroEnergy.Storage","page":"Macro Objects","title":"MacroEnergy.Storage","text":"Storage{T} <: AbstractVertex\n\nA mutable struct representing a storage vertex in a network model, parameterized by commodity type T.\n\n# Inherited Attributes\n- id::Symbol: Unique identifier for the storage\n- timedata::TimeData: Time-related data for the storage\n- balance_data::Dict{Symbol,Dict{Symbol,Float64}}: Dictionary mapping balance equation IDs to coefficients\n- constraints::Vector{AbstractTypeConstraint}: List of constraints applied to the storage\n- operation_expr::Dict: Dictionary storing operational JuMP expressions for the storage\n\n# Fields\n- can_expand::Bool: Whether storage capacity can be expanded\n- can_retire::Bool: Whether storage capacity can be retired\n- capacity::AffExpr: Total available storage capacity\n- capacity_size::Float64: Size of each storage unit\n- charge_edge::Union{Nothing,AbstractEdge}: `Edge` representing charging flow\n- charge_discharge_ratio::Float64: Ratio between charging and discharging rates\n- discharge_edge::Union{Nothing,AbstractEdge}: `Edge` representing discharging flow\n- existing_capacity::Float64: Initial installed storage capacity\n- fixed_om_cost::Float64: Fixed operation and maintenance costs\n- investment_cost::Float64: CAPEX per unit of new storage capacity\n- loss_fraction::Float64: Fraction of stored commodity lost at each timestep\n- loss_fraction::Vector{Float64}: Fraction of stored commodity lost at each timestep\n- max_capacity::Float64: Maximum allowed storage capacity\n- max_duration::Float64: Maximum storage duration in hours\n- max_storage_level::Float64: Maximum storage level as fraction of capacity\n- min_capacity::Float64: Minimum required storage capacity\n- min_duration::Float64: Minimum storage duration in hours\n- min_outflow_fraction::Float64: Minimum discharge rate as fraction of capacity\n- min_storage_level::Float64: Minimum storage level as fraction of capacity\n- new_capacity::AffExpr: New storage capacity to be built\n- new_units::Union{Missing, JuMPVariable}: New storage units to be built\n- retired_capacity::AffExpr: Storage capacity to be retired\n- retired_units::Union{Missing, JuMPVariable}: Storage units to be retired\n- spillage_edge::Union{Nothing,AbstractEdge}: Edge representing spillage/losses (e.g. hydro reservoirs)\n- storage_level::Vector{VariableRef}: Storage level at each timestep\n\nStorage vertices represent facilities that can store commodities over time, such as batteries, \npumped hydro, or gas storage. They can charge (store) and discharge (release) commodities, \nsubject to capacity and operational constraints.\n\n\n\n\n\n","category":"type"},{"location":"References/3_macro_objects/#Transformation","page":"Macro Objects","title":"Transformation","text":"","category":"section"},{"location":"References/3_macro_objects/#MacroEnergy.Transformation","page":"Macro Objects","title":"MacroEnergy.Transformation","text":"Transformation <: AbstractVertex\n\nA mutable struct representing a transformation vertex in a network model, which models a conversion process between different commodities or energy forms.\n\n# Inherited Attributes\n- id::Symbol: Unique identifier for the transformation\n- timedata::TimeData: Time-related data for the transformation\n- balance_data::Dict{Symbol,Dict{Symbol,Float64}}: Dictionary mapping stoichiometric equation IDs to coefficients\n- constraints::Vector{AbstractTypeConstraint}: List of constraints applied to the transformation\n- operation_expr::Dict: Dictionary storing operational JuMP expressions for the transformation\n\nTransformations are used to model conversion processes between different commodities, such as power plants \nconverting fuel to electricity or electrolyzers converting electricity to hydrogen. The `balance_data` field \ntypically contains conversion efficiencies and other relationships between input and output flows.\n\n\n\n\n\n","category":"type"},{"location":"References/3_macro_objects/#@AbstractVertexBaseAttributes","page":"Macro Objects","title":"@AbstractVertexBaseAttributes","text":"","category":"section"},{"location":"References/3_macro_objects/#MacroEnergy.@AbstractVertexBaseAttributes","page":"Macro Objects","title":"MacroEnergy.@AbstractVertexBaseAttributes","text":"@AbstractVertexBaseAttributes()\n\nA macro that defines the base attributes for all vertex types in the network model.\n\n# Generated Fields\n- id::Symbol: Unique identifier for the vertex\n- timedata::TimeData: Time-related data for the vertex\n- balance_data::Dict{Symbol,Dict{Symbol,Float64}}: Dictionary mapping balance equation IDs to coefficients\n- constraints::Vector{AbstractTypeConstraint}: List of constraints applied to the vertex\n- operation_expr::Dict: Dictionary storing operational JuMP expressions for the vertex\n\nThis macro is used to ensure consistent base attributes across all vertex types in the network.\n\n\n\n\n\n","category":"macro"},{"location":"References/3_macro_objects/","page":"Macro Objects","title":"Macro Objects","text":"","category":"page"},{"location":"Getting Started/1_overview/#Getting-Started","page":"Overview","title":"Getting Started","text":"","category":"section"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"This getting started guides aims to help you:","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"Understand how you can use Macro\nGet a high-level understanding of how real-world systems are modeled in Macro\nInstall Macro\nExpore the files included with Macro\nRun your first case","category":"page"},{"location":"Getting Started/1_overview/#How-can-I-use-Macro?","page":"Overview","title":"How can I use Macro?","text":"","category":"section"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"Macro can be used in a variety of ways to optimize the design and operation of energy and industrial systems, investigate the value of new technologies or polices, optimize investments in an energy system over multiple years, and many more. Some example workflows are given below:","category":"page"},{"location":"Getting Started/1_overview/#Optimizing-an-energy-system","page":"Overview","title":"Optimizing an energy system","text":"","category":"section"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"Creating and running a model with Macro can be done without knowing Julia programming. A typical workflow with Macro consists of the following:","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"Collect the data required for your model, including supply and demand of different commodities, and cost and performance data for available production and storage Assets.\nCreate a Macro System and add the Assets and Locations required to represent your real-world system. Import your data into your System.\nAdd policy constraints to your System.\nConfigure the settings for your System.\nRun your case, to optimize the design and operation of your System.\nAnalyze the results.","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"From there you might run a sensitivity study on your results by changing some of your input data, adding or removing an Asset, or changing one of System policies.","category":"page"},{"location":"Getting Started/1_overview/#Adding-a-new-sector","page":"Overview","title":"Adding a new sector","text":"","category":"section"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"While Macro includes a variety of sector models and Assets; representing real-world production, storage, and transport technologies; you may want to create new Assets or sectors for your project. Doing so will require some Julia programming, but no detailed knowledge of the packages underlying Macro.","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"To create a new sector, you will need to:","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"Create any new Commodities that your sector will require. These Comodities can be energy, material, data, or flows which are important in your new sector.\nCreate new Assets to represent production, storage, transport, and end-use technologies in your sector. At least some of these should produce, store, transport, and consume your new Commodities.\nAssign default inputs for your Assets and specifiy which inputs are optional vs. required.","category":"page"},{"location":"Getting Started/1_overview/#Helpful-packages","page":"Overview","title":"Helpful packages","text":"","category":"section"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"There are several packages we recommend to improve the speed and quality of your work with Macro.","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"MacroEnergySolvers.jl : includes several advanced algorithms for solving Macro models. This includes decompositions, multi-stage models, and sensitivity studies.","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"MacroEnergyScaling.jl : can be used to improve the numerical stability of Macro models, improving runtime and the accuracy of your results.","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"The manual includes more details on these and other useful packages.","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"Please let us know if you are working on something (Julia-based or otherwise) which could be included in this list!","category":"page"},{"location":"Getting Started/1_overview/#How-are-real-world-systems-represented-in-Macro?","page":"Overview","title":"How are real-world systems represented in Macro?","text":"","category":"section"},{"location":"Getting Started/1_overview/#Multi-commodity-flow-network","page":"Overview","title":"Multi-commodity flow network","text":"","category":"section"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"Macro Systems are multi-commodity flow networks. Commodities can be energy, material, data, or other products of interest. Macro Systems consist of Vertices, where Commodities are produced, stored, and consumed; and Edges, which Commodities can flow along. With just these few elements, you can model complex real-world systems using Macro.","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"While you could describe your real-world system in terms of Macro Vertices and Edges, such a system would be quite abstract and may not be intuitive. Therefore, Macro allows you to build your System from Locations and Assets. These are collections of Vertices and Edges which correspond more closely to elements of read-world systems.","category":"page"},{"location":"Getting Started/1_overview/#1.-Locations","page":"Overview","title":"1. Locations","text":"","category":"section"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"Locations represent geographic places or areas. They are made up of Nodes, which each carry one Commodity and can be used to define external supply and/or demand of that Commodity. Each location can only contain a single Node for each Commodity.","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"To add a Locations to a System, you must define the constituent Nodes and add the Location to list of Locations.. These two links will take you to the Guides on how to do both tasks.","category":"page"},{"location":"Getting Started/1_overview/#2.-Assets","page":"Overview","title":"2. Assets","text":"","category":"section"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"Assets in Macro represent means of producing, storing, transporting, and consuming one or more Commodities. Assets can be sited at a Location, so your Macro System will intuitively represent real-world systems. For example, an Asset can define a power plant that converts a fuel into electricity, which is then assigned to a Location, linking it to the electricity and fuel Nodes at that Location. Each Asset is characterized by a list of Commodities they take as input and output and technical and a range of economic and techical parameters.","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"Macro has a rich library of Assets already designed and implemented. You can also create your own Assets. These can be used just for your project or you can add it to Macro for others to use.","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"Some examples of of assets are:","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"Pipelines or power lines\nThermal power plants (e.g. natural gas/coal/nuclear power plants with and without carbon capture)\nBatteries and hydrogen storage\nHydroelectric reservoirs\nVariable renewable energy sources (e.g. wind turbines, solar panels)\nElectrolyzers\nSteam methane reformers\nRun-of-river, reservoir storage and pumped storage hydro-electric facilities\nBiorefineries","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"note: Note\nPipelines and power lines connecting locations are also considered assets as they can transport, store and transform/compress commodities.","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"The Macro Asset Library contains the list of all Assets available in Macro.","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"","category":"page"},{"location":"Manual/constraints/constraints_introduction/#Constraints-Library","page":"Constraints Library","title":"Constraints Library","text":"","category":"section"},{"location":"Manual/constraints/constraints_introduction/","page":"Constraints Library","title":"Constraints Library","text":"","category":"page"},{"location":"Guides/User Guide/user_multiperiod/","page":"Using Multi-Period Models","title":"Using Multi-Period Models","text":"","category":"page"},{"location":"Guides/Developer Guide/dev_macro_repo_guide/#Finding-your-way-around-the-Macro-repo","page":"Finding your way around the Macro repo","title":"Finding your way around the Macro repo","text":"","category":"section"},{"location":"Guides/Developer Guide/dev_macro_repo_guide/","page":"Finding your way around the Macro repo","title":"Finding your way around the Macro repo","text":"","category":"page"},{"location":"Manual/assets/thermalpower/#Thermal-Power-Plant-(with-and-without-CCS)","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"","category":"section"},{"location":"Manual/assets/thermalpower/#Contents","page":"Thermal Power Plant (with and without CCS)","title":"Contents","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Overview | Asset Structure | Flow Equations | Input File (Standard Format) | Types - Asset Structure | Constructors | Examples | Best Practices | Input File (Advanced Format)","category":"page"},{"location":"Manual/assets/thermalpower/#thermalpower_overview","page":"Thermal Power Plant (with and without CCS)","title":"Overview","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Thermal power plant assets in Macro represent electricity generation technologies that convert fuel into electricity through combustion or other thermal processes. These assets can include conventional thermal plants (coal, natural gas) and those with carbon capture and storage (CCS) capabilities. They are defined using either JSON or CSV input files placed in the assets directory, typically named with descriptive identifiers like natgas_power.json, nuclear_power.json, or coal_power.json.","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"note: CCS version\nMacro supports both the standard thermal power plant asset and a CCS version. The only difference between the two is the addition of a CO₂ captured edge.","category":"page"},{"location":"Manual/assets/thermalpower/#thermalpower_asset_structure","page":"Thermal Power Plant (with and without CCS)","title":"Asset Structure","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"A thermal power plant asset consists of five main components:","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Transformation Component: Balances the fuel and electricity flows\nFuel Edge: Represents the fuel supply to the plant\nElectricity Edge: Represents the electricity production (can have unit commitment operations)\nCO₂ Edge: Represents the CO₂ emissions\nCO₂ Captured Edge: Represents the CO₂ captured (only if CCS is present)","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Here is a graphical representation of the thermal power plant asset:","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph ThermalPower\n  direction BT\n  A((Fuel)) e1@ --> B{{..}}\n  B e2@ --> C((Electricity))\n  B e3@ --> D((CO₂ Emitted))\n  B e4@ --> E((CO₂ Captured))\n  e1@{animate: true}\n  e2@{animate: true}\n  e3@{animate: true}\n  e4@{animate: true}\n end\n    style A r:55px,fill:#005F6A,stroke:black,color:white,stroke-dasharray: 3,5;\n    style B r:55px,fill:black,stroke:black,color:black,stroke-dasharray: 3,5;\n    style C font-size:19px,r:55px,fill:#FFD700,stroke:black,color:black,stroke-dasharray: 3,5;\n    style D font-size:17px,r:55px,fill:lightgray,stroke:black,color:black,stroke-dasharray: 3,5;\n    style E font-size:15px,r:55px,fill:lightgray,stroke:black,color:black,stroke-dasharray: 3,5;\n\n  linkStyle 0 stroke:#005F6A, stroke-width: 2px;\n  linkStyle 1 stroke:#FFD700, stroke-width: 2px;\n  linkStyle 2 stroke:lightgray, stroke-width: 2px;\n  linkStyle 3 stroke:lightgray, stroke-width: 2px;","category":"page"},{"location":"Manual/assets/thermalpower/#thermalpower_flow_equations","page":"Thermal Power Plant (with and without CCS)","title":"Flow Equations","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"The thermal power plant asset follows these stoichiometric relationships:","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"beginaligned\nphi_fuel = phi_elec cdot epsilon_fuel_consumption \nphi_co2 = phi_fuel cdot epsilon_emission_rate \nphi_co2_captured = phi_fuel cdot epsilon_co2_capture_rate quad text(if CCS) \nendaligned","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Where:","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"phi represents the flow of each commodity\nepsilon represents the stoichiometric coefficients defined in the Conversion Process Parameters section.","category":"page"},{"location":"Manual/assets/thermalpower/#thermalpower_input_file","page":"Thermal Power Plant (with and without CCS)","title":"Input File (Standard Format)","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"note: Techno-Economic Analysis\nTechno-economic analysis background is recommended for updating or adding conversion process parameters. For users not familiar with TEA, they can refer to this guide. ","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"The easiest way to include a thermal power plant asset in a model is to create a new file (either JSON or CSV) and place it in the assets directory together with the other assets. ","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"your_case/\n├── assets/\n│   ├── thermal_power.json    # or thermal_power.csv\n│   ├── other_assets.json\n│   └── ...\n├── system/\n├── settings/\n└── ...","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"This file can either be created manually, or using the template_asset function, as shown in the Adding an Asset to a System section of the User Guide. The file will be automatically loaded when you run your Macro model. ","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"The following is an example of a thermal power plant asset input file with unit commitment enabled and burning natural gas:","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"{\n    \"NaturalGasPowerCCS\": [\n        {\n            \"type\": \"ThermalPowerCCS\",\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_naturalgas_ccccsavgcf_conservative_0\",\n                    \"location\": \"SE\",\n                    \"fuel_commodity\": \"NaturalGas\",\n                    \"uc\": true,\n                    \"co2_sink\": \"co2_sink\",\n                    \"elec_constraints\": {\n                        \"MinFlowConstraint\": true,\n                        \"MinUpTimeConstraint\": true,\n                        \"MinDownTimeConstraint\": true\n                    },\n                    \"capacity_size\": 377,\n                    \"fuel_consumption\": 2.09809579,\n                    \"emission_rate\": 0.018104824,\n                    \"capture_rate\": 0.162943412,\n                    \"investment_cost\": 105122.0711,\n                    \"fixed_om_cost\": 47800,\n                    \"variable_om_cost\": 3.76,\n                    \"startup_cost\": 97,\n                    \"startup_fuel_consumption\": 0.058614214,\n                    \"min_up_time\": 4,\n                    \"min_down_time\": 4,\n                    \"ramp_up_fraction\": 1,\n                    \"ramp_down_fraction\": 1,\n                    \"min_flow_fraction\": 0.5\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"tip: Global Data vs Instance Data\nWhen working with JSON input files, the global_data field can be used to group data that is common to all instances of the same asset type. This is useful for setting constraints that are common to all instances of the same asset type and avoid repeating the same data for each instance. See the Examples section below for an example.","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"The following tables outline the attributes that can be set for a thermal power plant asset.","category":"page"},{"location":"Manual/assets/thermalpower/#Essential-Attributes","page":"Thermal Power Plant (with and without CCS)","title":"Essential Attributes","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Field Type Description\nType String Asset type identifier: \"ThermalPower\" or \"ThermalPowerCCS\"\nid String Unique identifier for the thermal power plant instance\nlocation String Geographic location/node identifier\nfuel_commodity String Fuel commodity identifier\nuc Boolean Whether unit commitment is enabled (default: false)\ntimedata String Time resolution for time series data (default: \"Electricity\")\nco2_sink String CO₂ sink identifier\nfuel_start_vertex String Fuel start vertex identifier. This is not required if the fuel commodity is present in the location.","category":"page"},{"location":"Manual/assets/thermalpower/#thermalpower_conversion_process_parameters","page":"Thermal Power Plant (with and without CCS)","title":"Conversion Process Parameters","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"The following set of parameters control the conversion process and stoichiometry of the thermal power plant asset (see Flow Equations for more details).","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Field Type Description Units Default\nfuel_consumption Float64 Fuel consumption rate MWh_fuelMWh_elec 1.0\nemission_rate Float64 CO₂ emission rate t_CO₂MWh_fuel 0.0\ncapture_rate Float64 CO₂ capture rate (CCS only) t_CO₂MWh_fuel 1.0","category":"page"},{"location":"Manual/assets/thermalpower/#\"thermalpower_constraints\"","page":"Thermal Power Plant (with and without CCS)","title":"Constraints Configuration","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Thermal power plant assets can have different constraints applied to them, and the user can configure them using the following fields:","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Field Type Description\ntransform_constraints Dict{String,Bool} List of constraints applied to the transformation component.\nelec_constraints Dict{String,Bool} List of constraints applied to the electricity edge.\nfuel_constraints Dict{String,Bool} List of constraints applied to the fuel edge.\nco2_constraints Dict{String,Bool} List of constraints applied to the CO₂ edge.\nco2_captured_constraints Dict{String,Bool} List of constraints applied to the CO₂ captured edge (CCS only).","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"For example, if the user wants to apply the BalanceConstraint to the transformation component and the CapacityConstraint to the electricity edge, the constraints fields should be set as follows:","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"{\n    \"transform_constraints\": {\n        \"BalanceConstraint\": true\n    },\n    \"elec_constraints\": {\n        \"CapacityConstraint\": true\n    }\n}","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Users can refer to the Adding Asset Constraints to a System section of the User Guide for a list of all the constraints that can be applied to the different components of a thermal power plant asset.","category":"page"},{"location":"Manual/assets/thermalpower/#Default-constraints","page":"Thermal Power Plant (with and without CCS)","title":"Default constraints","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"To simplify the input file and the asset configuration, the following constraints are applied to the thermal power plant asset by default:","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Balance constraint (applied to the transformation component)\nCapacity constraint (applied to the electricity edge)\nRamping limits constraint (applied to the electricity edge)","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Unit commitment constraints (when uc is set to true):","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Minimum up and down time constraint (applied to the electricity edge)","category":"page"},{"location":"Manual/assets/thermalpower/#Investment-Parameters","page":"Thermal Power Plant (with and without CCS)","title":"Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Field Type Description Units Default\ncan_retire Boolean Whether capacity can be retired - true\ncan_expand Boolean Whether capacity can be expanded - true\nexisting_capacity Float64 Initial installed capacity MW 0.0\ncapacity_size Float64 Unit size for capacity decisions - 1.0","category":"page"},{"location":"Manual/assets/thermalpower/#Additional-Investment-Parameters","page":"Thermal Power Plant (with and without CCS)","title":"Additional Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Maximum and minimum capacity constraints","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"If MaxCapacityConstraint or MinCapacityConstraint are added to the constraints dictionary for the electricity edge, the following parameters are used by Macro:","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Field Type Description Units Default\nmax_capacity Float64 Maximum allowed capacity MW Inf\nmin_capacity Float64 Minimum allowed capacity MW 0.0","category":"page"},{"location":"Manual/assets/thermalpower/#Economic-Parameters","page":"Thermal Power Plant (with and without CCS)","title":"Economic Parameters","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Field Type Description Units Default\ninvestment_cost Float64 CAPEX per unit capacity $/MW 0.0\nannualized_investment_cost Union{Nothing,Float64} Annualized CAPEX $/MW/yr calculated\nfixed_om_cost Float64 Fixed O&M costs $/MW/yr 0.0\nvariable_om_cost Float64 Variable O&M costs $/MWh 0.0\nstartup_cost Float64 Cost per MW of capacity to start a generator $/MW per start 0.0\nwacc Float64 Weighted average cost of capital fraction 0.0\nlifetime Int Asset lifetime in years years 1\ncapital_recovery_period Int Investment recovery period years 1\nretirement_period Int Retirement period years 0","category":"page"},{"location":"Manual/assets/thermalpower/#Operational-Parameters","page":"Thermal Power Plant (with and without CCS)","title":"Operational Parameters","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Field Type Description Units Default\navailability Dict Availability file path and header - Empty","category":"page"},{"location":"Manual/assets/thermalpower/#Additional-Operational-Parameters","page":"Thermal Power Plant (with and without CCS)","title":"Additional Operational Parameters","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Unit commitment parameters (when uc is set to true)","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Field Type Description Units Default\nstartup_fuel_consumption Float64 Fuel consumption per unit electricity to start the plant MWh_fuelMWh_elec 0.0","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Minimum flow constraint","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"If MinFlowConstraint is added to the constraints dictionary for the electricity edge, the following parameter is used:","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Field Type Description Units Default\nmin_flow_fraction Float64 Minimum flow as fraction of capacity fraction 0.0","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Ramping limit constraint","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"If RampingLimitConstraint is added to the constraints dictionary for the electricity edge, the following parameters are used:","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Field Type Description Units Default\nramp_up_fraction Float64 Maximum increase in flow between timesteps fraction 1.0\nramp_down_fraction Float64 Maximum decrease in flow between timesteps fraction 1.0","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Minimum up and down time constraints","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"If MinUpTimeConstraint or MinDownTimeConstraint are added to the constraints dictionary for the electricity edge, the following parameters are used:","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Field Type Description Units Default\nmin_up_time Int64 Minimum time the plant must remain committed hours 0\nmin_down_time Int64 Minimum time the plant must remain shutdown hours 0","category":"page"},{"location":"Manual/assets/thermalpower/#thermalpower_type_definition","page":"Thermal Power Plant (with and without CCS)","title":"Types - Asset Structure","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"The ThermalPower and ThermalPowerCCS assets are defined as follows:","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"struct ThermalPower{T} <: AbstractAsset\n    id::AssetId\n    thermal_transform::Transformation\n    elec_edge::Union{Edge{<:Electricity},EdgeWithUC{<:Electricity}}\n    fuel_edge::Edge{<:T}\n    co2_edge::Edge{<:CO2}\nend\n\nstruct ThermalPowerCCS{T} <: AbstractAsset\n    id::AssetId\n    thermalpowerccs_transform::Transformation\n    elec_edge::Union{Edge{<:Electricity},EdgeWithUC{<:Electricity}}\n    fuel_edge::Edge{<:T}\n    co2_edge::Edge{<:CO2}\n    co2_captured_edge::Edge{<:CO2Captured}\nend","category":"page"},{"location":"Manual/assets/thermalpower/#thermalpower_constructors","page":"Thermal Power Plant (with and without CCS)","title":"Constructors","text":"","category":"section"},{"location":"Manual/assets/thermalpower/#Default-constructor","page":"Thermal Power Plant (with and without CCS)","title":"Default constructor","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"ThermalPower(id::AssetId, thermal_transform::Transformation, elec_edge::Union{Edge{<:Electricity},EdgeWithUC{<:Electricity}}, fuel_edge::Edge{<:Fuel}, co2_edge::Edge{<:CO2})\n\nThermalPowerCCS(id::AssetId, thermalpowerccs_transform::Transformation, elec_edge::Union{Edge{<:Electricity},EdgeWithUC{<:Electricity}}, fuel_edge::Edge{<:Fuel}, co2_edge::Edge{<:CO2}, co2_captured_edge::Edge{<:CO2Captured})","category":"page"},{"location":"Manual/assets/thermalpower/#Factory-constructor","page":"Thermal Power Plant (with and without CCS)","title":"Factory constructor","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"make(asset_type::Type{ThermalPower}, data::AbstractDict{Symbol,Any}, system::System)\nmake(asset_type::Type{ThermalPowerCCS}, data::AbstractDict{Symbol,Any}, system::System)","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Field Type Description\nasset_type Type{ThermalPower} or Type{ThermalPowerCCS} Macro type of the asset\ndata AbstractDict{Symbol,Any} Dictionary containing the input data for the asset\nsystem System System to which the asset belongs","category":"page"},{"location":"Manual/assets/thermalpower/#thermalpower_examples","page":"Thermal Power Plant (with and without CCS)","title":"Examples","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"This section contains examples of how to use the thermal power plant asset in a Macro model.","category":"page"},{"location":"Manual/assets/thermalpower/#Nuclear-Power-Plant","page":"Thermal Power Plant (with and without CCS)","title":"Nuclear Power Plant","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"This example shows a nuclear power plant with unit commitment enabled and using uranium as fuel. The asset has an existing capacity that is only allowed to be retired. A MinFlowConstraint constraint is applied to the electricity edge with a minimum flow fraction of 0.5. A MinUpTimeConstraint and MinDownTimeConstraint constraint is applied to the electricity edge with a minimum up and down time of 36 hours. A RampingLimitConstraint constraint is applied to the electricity edge with a ramping limit of 0.25. The asset has an availability time series loaded from a CSV file.","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"JSON Format:","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Note that the global_data field is used to set the fields and constraints that are common to all instances of the same asset type.","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"{\n    \"NuclearPower\": [\n        {\n            \"type\": \"ThermalPower\",\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_nuclear_1\",\n                    \"location\": \"SE\",\n                    \"timedata\": \"Uranium\",\n                    \"fuel_commodity\": \"Uranium\",\n                    \"fuel_start_vertex\": \"uranium_source\",\n                    \"co2_sink\": \"co2_sink\",\n                    \"uc\": true,\n                    \"can_retire\": true,\n                    \"can_expand\": false,\n                    \"existing_capacity\": 33632.288,\n                    \"capacity_size\": 1051.009,\n                    \"elec_constraints\": {\n                        \"MinFlowConstraint\": true,\n                        \"MinUpTimeConstraint\": true,\n                        \"MinDownTimeConstraint\": true\n                    },\n                    \"fuel_consumption\": 3.064351108,\n                    \"fixed_om_cost\": 199087.824,\n                    \"variable_om_cost\": 2.34,\n                    \"min_flow_fraction\": 0.5,\n                    \"startup_cost\": 1000,\n                    \"min_up_time\": 36,\n                    \"min_down_time\": 36,\n                    \"ramp_up_fraction\": 0.25,\n                    \"ramp_down_fraction\": 0.25,\n                    \"startup_fuel_consumption\": 0.0\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"CSV Format:","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Type id location timedata fuel_commodity fuel_start_vertex co2_sink uc can_retire can_expand existing_capacity capacity_size elec_constraints–MinFlowConstraint elec_constraints–MinUpTimeConstraint elec_constraints–MinDownTimeConstraint fuel_consumption fixed_om_cost variable_om_cost startup_cost startup_fuel_consumption min_up_time min_down_time ramp_up_fraction ramp_down_fraction min_flow_fraction\nThermalPower SE_nuclear_1 SE Uranium Uranium uranium_source co2_sink true true true 33632.288 1051.009 true true true 3.064351108 199087.824 2.34 1000 0.0 36 36 0.25 0.25 0.5","category":"page"},{"location":"Manual/assets/thermalpower/#Multiple-Natural-Gas-Fired-Combined-Cycle-Plants-in-Different-Zones-with-CCS","page":"Thermal Power Plant (with and without CCS)","title":"Multiple Natural Gas Fired Combined Cycle Plants in Different Zones with CCS","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"This example shows three natural gas fired combined cycle plants with unit commitment enabled and using natural gas as fuel. Each asset has an existing capacity that is only allowed to be retired. A MinFlowConstraint constraint is applied to the electricity edge with a minimum flow fraction of 0.444, 0.526, and 0.41. A MinUpTimeConstraint and MinDownTimeConstraint constraint is applied to the electricity edge with a minimum up and down time of 6 hours. A RampingLimitConstraint constraint is applied to the electricity edge with a ramping limit of 0.64. The asset has an availability time series loaded from a CSV file.","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"JSON Format:","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"{\n    \"NaturalGasPower\": [\n        {\n            \"type\": \"ThermalPower\",\n            \"global_data\": {\n                \"timedata\": \"NaturalGas\",\n                \"fuel_commodity\": \"NaturalGas\",\n                \"co2_sink\": \"co2_sink\",\n                \"uc\": true,\n                \"elec_constraints\": {\n                    \"MinFlowConstraint\": true,\n                    \"MinUpTimeConstraint\": true,\n                    \"MinDownTimeConstraint\": true\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"MIDAT_natural_gas_fired_combined_cycle_1\",\n                    \"location\": \"MIDAT\",\n                    \"emission_rate\": 0.181048235160161,\n                    \"fuel_consumption\": 2.249613533,\n                    \"can_retire\": true,\n                    \"can_expand\": false,\n                    \"existing_capacity\": 4026.4,\n                    \"investment_cost\": 0.0,\n                    \"fixed_om_cost\": 16001,\n                    \"variable_om_cost\": 4.415,\n                    \"capacity_size\": 125.825,\n                    \"startup_cost\": 89.34,\n                    \"startup_fuel_consumption\": 0.58614214,\n                    \"min_up_time\": 6,\n                    \"min_down_time\": 6,\n                    \"ramp_up_fraction\": 0.64,\n                    \"ramp_down_fraction\": 0.64,\n                    \"min_flow_fraction\": 0.444\n                },\n                {\n                    \"id\": \"NE_natural_gas_fired_combined_cycle_1\",\n                    \"location\": \"NE\",\n                    \"emission_rate\": 0.181048235160161,\n                    \"fuel_consumption\": 2.511912141,\n                    \"can_retire\": true,\n                    \"can_expand\": false,\n                    \"existing_capacity\": 6119.616,\n                    \"investment_cost\": 0.0,\n                    \"fixed_om_cost\": 16001,\n                    \"variable_om_cost\": 4.415,\n                    \"capacity_size\": 127.492,\n                    \"startup_cost\": 89.34,\n                    \"startup_fuel_consumption\": 0.58614214,\n                    \"min_up_time\": 6,\n                    \"min_down_time\": 6,\n                    \"ramp_up_fraction\": 0.64,\n                    \"ramp_down_fraction\": 0.64,\n                    \"min_flow_fraction\": 0.526\n                },\n                {\n                    \"id\": \"SE_natural_gas_fired_combined_cycle_1\",\n                    \"location\": \"SE\",\n                    \"emission_rate\": 0.181048235160161,\n                    \"fuel_consumption\": 2.132092034,\n                    \"can_retire\": true,\n                    \"can_expand\": false,\n                    \"existing_capacity\": 26218.712,\n                    \"investment_cost\": 0.0,\n                    \"fixed_om_cost\": 9496,\n                    \"variable_om_cost\": 3.504,\n                    \"capacity_size\": 504.206,\n                    \"startup_cost\": 89.34,\n                    \"startup_fuel_consumption\": 0.58614214,\n                    \"min_up_time\": 6,\n                    \"min_down_time\": 6,\n                    \"ramp_up_fraction\": 0.64,\n                    \"ramp_down_fraction\": 0.64,\n                    \"min_flow_fraction\": 0.41\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"CSV Format:","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Type id location timedata fuel_commodity co2_sink uc can_retire can_expand existing_capacity capacity_size elec_constraints–MinFlowConstraint elec_constraints–MinUpTimeConstraint elec_constraints–MinDownTimeConstraint fuel_consumption fixed_om_cost variable_om_cost startup_cost startup_fuel_consumption min_up_time min_down_time ramp_up_fraction ramp_down_fraction min_flow_fraction\nThermalPower MIDAT_natural_gas_fired_combined_cycle_1 MIDAT NaturalGas NaturalGas co2_sink true true false 4026.4 125.825 true true true 2.249613533 16001 4.415 89.34 0.58614214 6 6 0.64 0.64 0.444\nThermalPower NE_natural_gas_fired_combined_cycle_1 NE NaturalGas NaturalGas co2_sink true true false 6119.616 127.492 true true true 2.511912141 16001 4.415 89.34 0.58614214 6 6 0.64 0.64 0.526\nThermalPower SE_natural_gas_fired_combined_cycle_1 SE NaturalGas NaturalGas co2_sink true true false 26218.712 504.206 true true true 2.132092034 9496 3.504 89.34 0.58614214 6 6 0.64 0.64 0.41","category":"page"},{"location":"Manual/assets/thermalpower/#thermalpower_best_practices","page":"Thermal Power Plant (with and without CCS)","title":"Best Practices","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Use global data for common parameters: Use the global_data field to set the fields and constraints that are common to all instances of the same asset type.\nSet realistic efficiency parameters: Ensure fuel consumption, emission rates, and capture rates are accurate for the technology being modeled\nUse meaningful IDs: Choose descriptive identifiers that indicate location and technology type\nConsider unit commitment carefully: Enable unit commitment only when detailed operational modeling is needed\nUse constraints selectively: Only enable constraints that are necessary for your modeling needs\nValidate costs: Ensure investment and O&M costs are in appropriate units and time periods\nTest configurations: Start with simple configurations and gradually add complexity\nSeparate conventional vs CCS plants: Use different asset types for conventional and CCS thermal plants\nSet appropriate ramp rates: Consider the actual operational characteristics of the technology","category":"page"},{"location":"Manual/assets/thermalpower/#thermalpower_advanced_json_csv_input_format","page":"Thermal Power Plant (with and without CCS)","title":"Input File (Advanced Format)","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Macro provides an advanced format for defining thermal power plant assets, offering users and modelers detailed control over asset specifications. This format builds upon the standard format and is ideal for those who need more comprehensive customization.","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"To understand the advanced format, consider the graph representation and the type definition of a thermal power plant asset. The input file mirrors this hierarchical structure.","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"A thermal power plant asset in Macro is composed of a transformation component, represented by a Transformation object, and multiple edges (fuel, electricity, CO2, and optionally CO2 captured), each represented by an Edge object. The input file for a thermal power plant asset is therefore organized as follows:","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"fuel_edge\": {\n            // ... fuel_edge-specific attributes ...\n        },\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        },\n        \"co2_captured_edge\": {\n            // ... co2_captured_edge-specific attributes, only if CCS is present ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Each top-level key (e.g., \"transforms\" or \"edges\") denotes a component type. The second-level keys either specify the attributes of the component (when there is a single instance) or identify the instances of the component when there are multiple instances.","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Below is an example of an input file for a thermal power plant asset that sets up multiple thermal plants across different regions:","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"{\n    \"NaturalGasPower\": [\n        {\n            \"type\": \"ThermalPower\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"NaturalGas\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"elec_edge\": {\n                        \"commodity\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"uc\": true,\n                        \"integer_decisions\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true,\n                            \"MinFlowConstraint\": true,\n                            \"MinUpTimeConstraint\": true,\n                            \"MinDownTimeConstraint\": true\n                        }\n                    },\n                    \"fuel_edge\": {\n                        \"commodity\": \"NaturalGas\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"co2_edge\": {\n                        \"commodity\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_sink\"\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"MIDAT_natural_gas_fired_combined_cycle_1\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.181048235160161,\n                        \"fuel_consumption\": 2.249613533\n                    },\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_MIDAT\",\n                            \"can_retire\": true,\n                            \"can_expand\": false,\n                            \"existing_capacity\": 4026.4,\n                            \"investment_cost\": 0.0,\n                            \"fixed_om_cost\": 16001,\n                            \"variable_om_cost\": 4.415,\n                            \"capacity_size\": 125.825,\n                            \"startup_cost\": 89.34,\n                            \"startup_fuel_consumption\": 0.58614214,\n                            \"min_up_time\": 6,\n                            \"min_down_time\": 6,\n                            \"ramp_up_fraction\": 0.64,\n                            \"ramp_down_fraction\": 0.64,\n                            \"min_flow_fraction\": 0.444\n                        },\n                        \"fuel_edge\": {\n                            \"start_vertex\": \"natgas_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_natural_gas_fired_combined_cycle_1\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.181048235160161,\n                        \"fuel_consumption\": 2.511912141\n                    },\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_NE\",\n                            \"can_retire\": true,\n                            \"can_expand\": false,\n                            \"existing_capacity\": 6119.616,\n                            \"investment_cost\": 0.0,\n                            \"fixed_om_cost\": 16001,\n                            \"variable_om_cost\": 4.415,\n                            \"capacity_size\": 127.492,\n                            \"startup_cost\": 89.34,\n                            \"startup_fuel_consumption\": 0.58614214,\n                            \"min_up_time\": 6,\n                            \"min_down_time\": 6,\n                            \"ramp_up_fraction\": 0.64,\n                            \"ramp_down_fraction\": 0.64,\n                            \"min_flow_fraction\": 0.526\n                        },\n                        \"fuel_edge\": {\n                            \"start_vertex\": \"natgas_NE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"SE_natural_gas_fired_combined_cycle_1\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.181048235160161,\n                        \"fuel_consumption\": 2.132092034\n                    },\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"can_retire\": true,\n                            \"can_expand\": false,\n                            \"existing_capacity\": 26218.712,\n                            \"investment_cost\": 0.0,\n                            \"fixed_om_cost\": 9496,\n                            \"variable_om_cost\": 3.504,\n                            \"capacity_size\": 504.206,\n                            \"startup_cost\": 89.34,\n                            \"startup_fuel_consumption\": 0.58614214,\n                            \"min_up_time\": 6,\n                            \"min_down_time\": 6,\n                            \"ramp_up_fraction\": 0.64,\n                            \"ramp_down_fraction\": 0.64,\n                            \"min_flow_fraction\": 0.41\n                        },\n                        \"fuel_edge\": {\n                            \"start_vertex\": \"natgas_SE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/thermalpower/#Key-Points","page":"Thermal Power Plant (with and without CCS)","title":"Key Points","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"The global_data field is utilized to define attributes and constraints that apply universally to all instances of a particular asset type.\nThe start_vertex and end_vertex fields indicate the nodes to which the edges are connected. These nodes must be defined in the nodes.json file.\nBy default, only the electricity edge is allowed to expand as a modeling decision (see note below)\nThe electricity edge can have unit commitment operations enabled by setting the uc attribute to true.\nFor a comprehensive list of attributes that can be configured for the transformation and edge components, refer to the transformation and edges pages of the Macro manual. ","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"note: The `has_capacity` Edge Attribute\nThe has_capacity attribute is a flag that indicates whether a specific edge of an asset has a capacity variable, allowing it to be expanded or retired. Typically, users do not need to manually adjust this flag, as the asset creators in Macro have already configured it correctly for each edge. However, advanced users can use this flag to override the default settings for each edge if needed.","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"tip: Prefixes\nUsers can apply prefixes to adjust parameters for the components of a thermal power plant asset, even when using the standard format. For instance, co2_can_retire will adjust the can_retire parameter for the CO2 edge, and co2_existing_capacity will adjust the existing_capacity parameter for the CO2 edge. Below are the prefixes available for modifying parameters for the components of a thermal power plant asset:transform_ for the transformation component\nelec_ for the electricity edge\nco2_ for the CO2 edge\nco2_captured_ for the CO2 captured edge\nfuel_ for the fuel edge","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"","category":"page"},{"location":"Manual/assets/beccshydrogen/#BECCS-Hydrogen","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/#Contents","page":"BECCS Hydrogen","title":"Contents","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Overview | Asset Structure | Flow Equations | Input File (Standard Format) | Types - Asset Structure | Constructors | Examples | Best Practices | Input File (Advanced Format)","category":"page"},{"location":"Manual/assets/beccshydrogen/#beccshydrogen_overview","page":"BECCS Hydrogen","title":"Overview","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"BECCS Hydrogen assets in Macro represent Bioenergy with Carbon Capture and Storage (BECCS) technologies that produce hydrogen from biomass while capturing CO₂. These assets are defined using either JSON or CSV input files placed in the assets directory, typically named beccs_hydrogen.json or beccs_hydrogen.csv.","category":"page"},{"location":"Manual/assets/beccshydrogen/#beccshydrogen_asset_structure","page":"BECCS Hydrogen","title":"Asset Structure","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"A BECCS hydrogen asset consists of one transformation component and six edge components:","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Biomass Edge: Incoming edge representing biomass supply\nCO₂ Edge: Incoming edge representing CO₂ absorption from atmosphere\nElectricity Edge: Incoming edge representing electricity consumption\nTransformation Component: Balances flows of biomass, CO₂, electricity, hydrogen, and CO₂ captured\nHydrogen Edge: Outgoing edge representing hydrogen production\nCO₂ Emission Edge: Outgoing edge representing CO₂ emissions from the process\nCO₂ Captured Edge: Outgoing edge representing captured CO₂","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Here is a graphical representation of the BECCS hydrogen asset:","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph BECCSHydrogen\n  direction BT\n    B((Biomass)) e1@--> A{{..}}\n    C((CO₂ Source)) e2@--> A\n    D((Electricity)) e3@--> A\n    A e4@--> E((Hydrogen))\n    A e5@--> F((CO₂ Emitted))\n    A e6@--> G((CO₂ Captured))\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n    e6@{ animate: true }\n end\n    style A fill:black,stroke:black,color:black;\n    style B r:55px,fill:palegreen,stroke:black,color:black, stroke-dasharray: 3,5;\n    style C r:55px,fill:lightgray,stroke:black,color:black, stroke-dasharray: 3,5;\n    style D r:55px,fill:#FFD700,stroke:black,color:black, stroke-dasharray: 3,5;\n    style E font-size:21px,r:55px,fill:lightblue,stroke:black,color:black, stroke-dasharray: 3,5;\n    style F font-size:17px,r:55px,fill:lightgray,stroke:black,color:black, stroke-dasharray: 3,5;\n    style G font-size:15px,r:55px,fill:lightgray,stroke:black,color:black, stroke-dasharray: 3,5;\n\n    linkStyle 0 stroke:palegreen, stroke-width: 2px;\n    linkStyle 1 stroke:lightgray, stroke-width: 2px;\n    linkStyle 2 stroke:#FFD700, stroke-width: 2px;\n    linkStyle 3 stroke:lightblue, stroke-width: 2px;\n    linkStyle 4 stroke:lightgray, stroke-width: 2px;\n    linkStyle 5 stroke:lightgray, stroke-width: 2px;","category":"page"},{"location":"Manual/assets/beccshydrogen/#beccshydrogen_flow_equations","page":"BECCS Hydrogen","title":"Flow Equations","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"The BECCS hydrogen asset follows these stoichiometric relationships:","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"beginaligned\nphi_h2 = phi_biomass cdot epsilon_h2_prod \nphi_elec = -phi_biomass cdot epsilon_elec_cons \nphi_co2 = -phi_biomass cdot epsilon_co2_content \nphi_co2_emitted = phi_biomass cdot epsilon_emission_rate \nphi_co2_captured = phi_biomass cdot epsilon_capture_rate \nendaligned","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Where:","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"phi represents the flow of each commodity\nepsilon represents the stoichiometric coefficients defined in the table below (see table Conversion Process Parameters)","category":"page"},{"location":"Manual/assets/beccshydrogen/#beccshydrogen_input_file","page":"BECCS Hydrogen","title":"Input File (Standard Format)","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"The easiest way to include a BECCS hydrogen asset in a model is to create a new file (either JSON or CSV) and place it in the assets directory together with the other assets.","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"your_case/\n├── assets/\n│   ├── beccs_hydrogen.json    # or beccs_hydrogen.csv\n│   ├── other_assets.json\n│   └── ...\n├── system/\n├── settings/\n└── ...","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"This file can either be created manually, or using the template_asset function, as shown in the Adding an Asset to a System section of the User Guide. The file will be automatically loaded when you run your Macro model.","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"The following is an example of a BECCS hydrogen asset input file:","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"{\n    \"BECCS_H2\": [\n        {\n            \"type\": \"BECCSHydrogen\",\n            \"global_data\": {\n                \"biomass_constraints\": {\n                    \"MinFlowConstraint\": true\n                },\n                \"capacity_size\": 400,\n                \"investment_cost\": 585304,\n                \"fixed_om_cost\": 66030,\n                \"variable_om_cost\": 42.26,\n                \"hydrogen_production\": 2.996580638,\n                \"electricity_consumption\": 0.0834,\n                \"co2_content\": 1.717,\n                \"emission_rate\": 0.252399,\n                \"capture_rate\": 1.464601,\n                \"min_flow_fraction\": 0.85,\n                \"co2_sink\": \"co2_sink\"\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_BECCS_H2_Herb\",\n                    \"location\": \"SE\",\n                    \"biomass_commodity\": \"Biomass_Herb\",\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"SE_BECCS_H2_Herb\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"SE_BECCS_H2_Wood\",\n                    \"location\": \"SE\",\n                    \"biomass_commodity\": \"Biomass_Wood\",\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"SE_BECCS_H2_Wood\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"tip: Global Data vs Instance Data\nWhen working with JSON input files, the global_data field can be used to group data that is common to all instances of the same asset type. This is useful for setting constraints that are common to all instances of the same asset type and avoid repeating the same data for each instance. See the Examples section below for an example.","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"The following tables outline the attributes that can be set for a BECCS hydrogen asset.","category":"page"},{"location":"Manual/assets/beccshydrogen/#Essential-Attributes","page":"BECCS Hydrogen","title":"Essential Attributes","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Field Type Description\nType String Asset type identifier: \"BECCSHydrogen\"\nid String Unique identifier for the BECCS hydrogen instance\nlocation String Geographic location/node identifier\nbiomass_commodity String Commodity identifier for the biomass supply (can be a sub-commodity of Biomass)\nco2_sink String ID of a CO₂ sink vertex (must be defined in the nodes input file)","category":"page"},{"location":"Manual/assets/beccshydrogen/#beccshydrogen_conversion_process_parameters","page":"BECCS Hydrogen","title":"Conversion Process Parameters","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"The following set of parameters control the converssion process and stoichiometry of the BECCS hydrogen asset (see Flow Equations for more details).","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Field Type Description Units Default\nhydrogen_production Float64 Hydrogen production per unit biomass MWh_H₂t_Biomass 0.0\nelectricity_consumption Float64 Electricity consumption per unit biomass MWht_Biomass 0.0\ncapture_rate Float64 CO₂ capture rate per unit biomass t_CO₂t_Biomass 1.0\nco2_content Float64 CO₂ content in biomass t_CO₂t_Biomass 0.0\nemission_rate Float64 CO₂ emission rate per unit biomass t_CO₂t_Biomass 1.0","category":"page"},{"location":"Manual/assets/beccshydrogen/#\"beccshydrogen_constraints\"","page":"BECCS Hydrogen","title":"Constraints Configuration","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"BECCS hydrogen assets can have different constraints applied to them, and the user can configure them using the following fields:","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Field Type Description\ntransform_constraints Dict{String,Bool} List of constraints applied to the transformation component.\nbiomass_constraints Dict{String,Bool} List of constraints applied to the biomass edge.\nco2_constraints Dict{String,Bool} List of constraints applied to the CO₂ edge.\nelec_constraints Dict{String,Bool} List of constraints applied to the electricity edge.\nh2_constraints Dict{String,Bool} List of constraints applied to the hydrogen edge.\nco2_captured_constraints Dict{String,Bool} List of constraints applied to the CO₂ captured edge.\nco2_emission_constraints Dict{String,Bool} List of constraints applied to the CO₂ emission edge.","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"For example, if the user wants to apply the BalanceConstraint to the transformation component and the CapacityConstraint to the biomass edge, the constraints fields should be set as follows:","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"{\n    \"transform_constraints\": {\n        \"BalanceConstraint\": true\n    },\n    \"biomass_constraints\": {\n        \"CapacityConstraint\": true\n    }\n}","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Users can refer to the Adding Asset Constraints to a System section of the User Guide for a list of all the constraints that can be applied to the different components of a BECCS hydrogen asset.","category":"page"},{"location":"Manual/assets/beccshydrogen/#Default-constraints","page":"BECCS Hydrogen","title":"Default constraints","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"To simplify the input file and the asset configuration, the following constraints are applied to the BECCS hydrogen asset by default:","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Balance constraint (applied to the transformation component)\nCapacity constraint (applied to the biomass edge)","category":"page"},{"location":"Manual/assets/beccshydrogen/#Investment-Parameters","page":"BECCS Hydrogen","title":"Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Field Type Description Units Default\ncan_retire Boolean Whether BECCS hydrogen asset capacity can be retired - true\ncan_expand Boolean Whether BECCS hydrogen asset capacity can be expanded - true\nexisting_capacity Float64 Initial installed BECCS hydrogen asset capacity t_Biomasshr 0.0\ncapacity_size Float64 Unit size for capacity decisions - 1.0","category":"page"},{"location":"Manual/assets/beccshydrogen/#Additional-Investment-Parameters","page":"BECCS Hydrogen","title":"Additional Investment Parameters","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Maximum and minimum capacity constraints","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"If MaxCapacityConstraint or MinCapacityConstraint are added to the constraints dictionary for the biomass edge, the following parameters are used by Macro:","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Field Type Description Units Default\nmax_capacity Float64 Maximum allowed BECCS hydrogen asset capacity t_Biomasshr Inf\nmin_capacity Float64 Minimum allowed BECCS hydrogen asset capacity t_Biomasshr 0.0","category":"page"},{"location":"Manual/assets/beccshydrogen/#Economic-Parameters","page":"BECCS Hydrogen","title":"Economic Parameters","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Field Type Description Units Default\ninvestment_cost Float64 CAPEX per unit BECCS hydrogen asset capacity (t_Biomasshr) 0.0\nannualized_investment_cost Union{Nothing,Float64} Annualized CAPEX (t_Biomasshryr) calculated\nfixed_om_cost Float64 Fixed O&M costs of the BECCS hydrogen asset (t_Biomasshryr) 0.0\nvariable_om_cost Float64 Variable O&M costs of the BECCS hydrogen asset t_Biomass 0.0","category":"page"},{"location":"Manual/assets/beccshydrogen/#Operational-Parameters","page":"BECCS Hydrogen","title":"Operational Parameters","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Field Type Description Units Default\navailability Dict Path to availability file and column name - Empty","category":"page"},{"location":"Manual/assets/beccshydrogen/#Additional-Operational-Parameters","page":"BECCS Hydrogen","title":"Additional Operational Parameters","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Minimum flow constraint","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"If MinFlowConstraint is added to the constraints dictionary for the biomass edge, the following parameter is used:","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Field Type Description Units Default\nmin_flow_fraction Float64 Minimum flow as fraction of capacity fraction 0.0","category":"page"},{"location":"Manual/assets/beccshydrogen/#beccshydrogen_type_definition","page":"BECCS Hydrogen","title":"Types - Asset Structure","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"The BECCSHydrogen asset is defined as follows:","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"struct BECCSHydrogen <: AbstractAsset\n    id::AssetId\n    beccs_transform::Transformation\n    biomass_edge::Edge{<:Biomass}\n    h2_edge::Edge{<:Hydrogen}\n    elec_edge::Edge{<:Electricity}\n    co2_edge::Edge{<:CO2}\n    co2_emission_edge::Edge{<:CO2}\n    co2_captured_edge::Edge{<:CO2Captured}\nend","category":"page"},{"location":"Manual/assets/beccshydrogen/#beccshydrogen_constructors","page":"BECCS Hydrogen","title":"Constructors","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/#Default-constructor","page":"BECCS Hydrogen","title":"Default constructor","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"BECCSHydrogen(id::AssetId, beccs_transform::Transformation, biomass_edge::Edge{<:Biomass}, h2_edge::Edge{<:Hydrogen}, elec_edge::Edge{<:Electricity}, co2_edge::Edge{<:CO2}, co2_captured_edge::Edge{<:CO2Captured}, co2_emission_edge::Edge{<:CO2})","category":"page"},{"location":"Manual/assets/beccshydrogen/#Factory-constructor","page":"BECCS Hydrogen","title":"Factory constructor","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"make(asset_type::Type{BECCSHydrogen}, data::AbstractDict{Symbol,Any}, system::System)","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Field Type Description\nasset_type Type{BECCSHydrogen} Macro type of the asset\ndata AbstractDict{Symbol,Any} Dictionary containing the input data for the asset\nsystem System System to which the asset belongs","category":"page"},{"location":"Manual/assets/beccshydrogen/#beccshydrogen_examples","page":"BECCS Hydrogen","title":"Examples","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"This section contains examples of how to use the BECCS hydrogen asset in a Macro model.","category":"page"},{"location":"Manual/assets/beccshydrogen/#Simple-BECCS-Hydrogen-Asset","page":"BECCS Hydrogen","title":"Simple BECCS Hydrogen Asset","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"This example shows a single BECCS hydrogen asset with existing capacity using Biomass_Herb as the biomass commodity.","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"JSON Format:","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"{\n    \"BECCS_H2\": [\n        {\n            \"type\": \"BECCSHydrogen\",\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_BECCS_H2_Herb\",\n                    \"location\": \"SE\",\n                    \"biomass_commodity\": \"Biomass_Herb\",\n                    \"hydrogen_production\": 2.996580638,\n                    \"electricity_consumption\": 0.0834,\n                    \"capture_rate\": 1.464601,\n                    \"co2_content\": 1.717,\n                    \"emission_rate\": 0.252399,\n                    \"investment_cost\": 585304,\n                    \"fixed_om_cost\": 66030,\n                    \"variable_om_cost\": 42.26,\n                    \"existing_capacity\": 400,\n                    \"co2_sink\": \"co2_sink\",\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"SE_BECCS_H2_Herb\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"CSV Format:","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Type id location biomass_commodity hydrogen_production electricity_consumption capture_rate co2_content emission_rate investment_cost fixed_om_cost variable_om_cost existing_capacity co2_sink availability–timeseries–path availability–timeseries–header\nBECCSHydrogen SE_BECCS_H2_Herb SE Biomass_Herb 2.996580638 0.0834 1.464601 1.717 0.252399 585304 66030 42.26 400 co2_sink system/availability.csv SE_BECCS_H2_Herb","category":"page"},{"location":"Manual/assets/beccshydrogen/#Multiple-BECCS-Hydrogen-Assets-in-Different-Zones","page":"BECCS Hydrogen","title":"Multiple BECCS Hydrogen Assets in Different Zones","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"This example shows how to create a set of BECCS hydrogen assets in different zones, with different biomass commodities (herb and wood). The biomass constraints are set to the MinFlowConstraint constraint with a minimum flow fraction of 0.85, and the availability time series are set to the SE_BECCS_H2_Herb, MIDAT_BECCS_H2_Herb, NE_BECCS_H2_Herb, SE_BECCS_H2_Wood, MIDAT_BECCS_H2_Wood, and NE_BECCS_H2_Wood time series read from the system/availability.csv file.","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"JSON Format:","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Note that the global_data field is used to set the fields and constraints that are common to all instances of the same asset type.","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"{\n    \"BECCS_H2\": [\n        {\n            \"type\": \"BECCSHydrogen\",\n            \"global_data\": {\n                \"biomass_constraints\": {\n                    \"MinFlowConstraint\": true\n                },\n                \"hydrogen_production\": 2.996580638,\n                \"electricity_consumption\": 0.0834,\n                \"capture_rate\": 1.464601,\n                \"co2_content\": 1.717,\n                \"emission_rate\": 0.252399,\n                \"investment_cost\": 585304,\n                \"fixed_om_cost\": 66030,\n                \"variable_om_cost\": 42.26,\n                \"capacity_size\": 400,\n                \"min_flow_fraction\": 0.85,\n                \"co2_sink\": \"co2_sink\"\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_BECCS_H2_Herb\",\n                    \"location\": \"SE\",\n                    \"biomass_commodity\": \"Biomass_Herb\",\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"SE_BECCS_H2_Herb\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_BECCS_H2_Herb\",\n                    \"location\": \"MIDAT\",\n                    \"biomass_commodity\": \"Biomass_Herb\",\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"MIDAT_BECCS_H2_Herb\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_BECCS_H2_Herb\",\n                    \"location\": \"NE\",\n                    \"biomass_commodity\": \"Biomass_Herb\",\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"NE_BECCS_H2_Herb\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"SE_BECCS_H2_Wood\",\n                    \"location\": \"SE\",\n                    \"biomass_commodity\": \"Biomass_Wood\",\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"SE_BECCS_H2_Wood\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_BECCS_H2_Wood\",\n                    \"location\": \"MIDAT\",\n                    \"biomass_commodity\": \"Biomass_Wood\",\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"MIDAT_BECCS_H2_Wood\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_BECCS_H2_Wood\",\n                    \"location\": \"NE\",\n                    \"biomass_commodity\": \"Biomass_Wood\",\n                    \"availability\": {\n                        \"timeseries\": {\n                            \"path\": \"system/availability.csv\",\n                            \"header\": \"NE_BECCS_H2_Wood\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"CSV Format:","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Type id location biomass_commodity hydrogen_production electricity_consumption capture_rate co2_content emission_rate investment_cost fixed_om_cost variable_om_cost existing_capacity co2_sink availability–timeseries–path availability–timeseries–header\nBECCSHydrogen SE_BECCS_H2_Herb SE Biomass_Herb 2.996580638 0.0834 1.464601 1.717 0.252399 585304 66030 42.26 400 co2_sink system/availability.csv SE_BECCS_H2_Herb\nBECCSHydrogen MIDAT_BECCS_H2_Herb MIDAT Biomass_Herb 2.996580638 0.0834 1.464601 1.717 0.252399 585304 66030 42.26 400 co2_sink system/availability.csv MIDAT_BECCS_H2_Herb\nBECCSHydrogen NE_BECCS_H2_Herb NE Biomass_Herb 2.996580638 0.0834 1.464601 1.717 0.252399 585304 66030 42.26 400 co2_sink system/availability.csv NE_BECCS_H2_Herb\nBECCSHydrogen SE_BECCS_H2_Wood SE Biomass_Wood 2.996580638 0.0834 1.464601 1.717 0.252399 585304 66030 42.26 400 co2_sink system/availability.csv SE_BECCS_H2_Wood\nBECCSHydrogen MIDAT_BECCS_H2_Wood MIDAT Biomass_Wood 2.996580638 0.0834 1.464601 1.717 0.252399 585304 66030 42.26 400 co2_sink system/availability.csv MIDAT_BECCS_H2_Wood\nBECCSHydrogen NE_BECCS_H2_Wood NE Biomass_Wood 2.996580638 0.0834 1.464601 1.717 0.252399 585304 66030 42.26 400 co2_sink system/availability.csv NE_BECCS_H2_Wood","category":"page"},{"location":"Manual/assets/beccshydrogen/#beccshydrogen_best_practices","page":"BECCS Hydrogen","title":"Best Practices","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Use global data for common fields and constraints: Use the global_data field to set the fields and constraints that are common to all instances of the same asset type.\nSet realistic stoichiometric coefficients: Ensure the transformation parameters reflect actual technology performance\nUse meaningful IDs: Choose descriptive identifiers that indicate location and biomass type\nConsider availability profiles: Use availability time series to model seasonal variations in biomass supply\nValidate costs: Ensure investment and O&M costs are in appropriate units\nTest configurations: Start with simple configurations and gradually add complexity\nMonitor CO₂ balance: Ensure the CO₂ capture and emission rates are consistent with the overall system CO₂ balance","category":"page"},{"location":"Manual/assets/beccshydrogen/#beccshydrogen_advanced_json_csv_input_format","page":"BECCS Hydrogen","title":"Input File (Advanced Format)","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Macro provides an advanced format for defining BECCS hydrogen assets, offering users and modelers detailed control over asset specifications. This format builds upon the standard format and is ideal for those who need more comprehensive customization.","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"To understand the advanced format, consider the graph representation and the type definition of a BECCS hydrogen asset. The input file mirrors this hierarchical structure.","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"A BECCS hydrogen asset in Macro is composed of a transformation component, represented by a Transformation object, and six edges, each represented by an Edge object. The input file for a BECCS hydrogen asset is therefore organized as follows:","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"biomass_edge\": {\n            // ... biomass_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        },\n        \"h2_edge\": {\n            // ... h2_edge-specific attributes ...\n        },\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"co2_emission_edge\": {\n            // ... co2_emission_edge-specific attributes ...\n        },\n        \"co2_captured_edge\": {\n            // ... co2_captured_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Each top-level key (e.g., \"transforms\" or \"edges\") denotes a component type. The second-level keys either specify the attributes of the component (when there is a single instance) or identify the instances of the component (e.g., \"biomass_edge\", \"h2_edge\", etc.) when there are multiple instances. For multiple instances, a third-level key details the attributes for each instance.","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Below is an example of an input file for a BECCS hydrogen asset that sets up a pair of assets (one with Biomass_Herb and one with Biomass_Wood) in the SE, MIDAT, and NE regions.","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"{\n    \"BECCS_Hydrogen\": [\n        {\n            \"type\": \"BECCSHydrogen\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"Biomass\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"elec_edge\": {\n                        \"commodity\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"h2_edge\": {\n                        \"commodity\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"biomass_edge\": {\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": true,\n                        \"integer_decisions\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"MinFlowConstraint\": true\n                        }\n                    },\n                    \"co2_edge\": {\n                        \"commodity\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"start_vertex\": \"co2_sink\"\n                    },\n                    \"co2_emission_edge\": {\n                        \"commodity\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_sink\"\n                    },\n                    \"co2_captured_edge\": {\n                        \"commodity\": \"CO2Captured\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_BECCS_H2_Herb\",\n                    \"transforms\": {\n                        \"hydrogen_production\": 2.996580638,\n                        \"electricity_consumption\": 0.0834,\n                        \"capture_rate\": 1.464601,\n                        \"co2_content\": 1.717,\n                        \"emission_rate\": 0.252399\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"commodity\": \"Biomass_Herb\",\n                            \"start_vertex\": \"bioherb_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"system/availability.csv\",\n                                    \"header\": \"SE_BECCS_H2_Herb\"\n                                }\n                            },\n                            \"investment_cost\": 585304,\n                            \"fixed_om_cost\": 66030,\n                            \"variable_om_cost\": 42.26,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_SE\"\n                        },\n                        \"co2_captured_edge\": {\n                            \"end_vertex\": \"co2_captured_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_BECCS_H2_Herb\",\n                    \"transforms\": {\n                        \"hydrogen_production\": 2.996580638,\n                        \"electricity_consumption\": 0.0834,\n                        \"capture_rate\": 1.464601,\n                        \"co2_content\": 1.717,\n                        \"emission_rate\": 0.252399\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"commodity\": \"Biomass_Herb\",\n                            \"start_vertex\": \"bioherb_MIDAT\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"system/availability.csv\",\n                                    \"header\": \"MIDAT_BECCS_H2_Herb\"\n                                }\n                            },\n                            \"investment_cost\": 585304,\n                            \"fixed_om_cost\": 66030,\n                            \"variable_om_cost\": 42.26,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_MIDAT\"\n                        },\n                        \"co2_captured_edge\": {\n                            \"end_vertex\": \"co2_captured_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_BECCS_H2_Herb\",\n                    \"transforms\": {\n                        \"hydrogen_production\": 2.996580638,\n                        \"electricity_consumption\": 0.0834,\n                        \"capture_rate\": 1.464601,\n                        \"co2_content\": 1.717,\n                        \"emission_rate\": 0.252399\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"commodity\": \"Biomass_Herb\",\n                            \"start_vertex\": \"bioherb_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"system/availability.csv\",\n                                    \"header\": \"NE_BECCS_H2_Herb\"\n                                }\n                            },\n                            \"investment_cost\": 585304,\n                            \"fixed_om_cost\": 66030,\n                            \"variable_om_cost\": 42.26,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_NE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_NE\"\n                        },\n                        \"co2_captured_edge\": {\n                            \"end_vertex\": \"co2_captured_NE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"SE_BECCS_H2_Wood\",\n                    \"transforms\": {\n                        \"hydrogen_production\": 2.996580638,\n                        \"electricity_consumption\": 0.0834,\n                        \"capture_rate\": 1.464601,\n                        \"co2_content\": 1.717,\n                        \"emission_rate\": 0.252399\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"commodity\": \"Biomass_Wood\",\n                            \"start_vertex\": \"biowood_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"system/availability.csv\",\n                                    \"header\": \"SE_BECCS_H2_Wood\"\n                                }\n                            },\n                            \"investment_cost\": 585304,\n                            \"fixed_om_cost\": 66030,\n                            \"variable_om_cost\": 42.26,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_SE\"\n                        },\n                        \"co2_captured_edge\": {\n                            \"end_vertex\": \"co2_captured_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_BECCS_H2_Wood\",\n                    \"transforms\": {\n                        \"hydrogen_production\": 2.996580638,\n                        \"electricity_consumption\": 0.0834,\n                        \"capture_rate\": 1.464601,\n                        \"co2_content\": 1.717,\n                        \"emission_rate\": 0.252399\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"commodity\": \"Biomass_Wood\",\n                            \"start_vertex\": \"biowood_MIDAT\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"system/availability.csv\",\n                                    \"header\": \"MIDAT_BECCS_H2_Wood\"\n                                }\n                            },\n                            \"investment_cost\": 585304,\n                            \"fixed_om_cost\": 66030,\n                            \"variable_om_cost\": 42.26,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_MIDAT\"\n                        },\n                        \"co2_captured_edge\": {\n                            \"end_vertex\": \"co2_captured_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_BECCS_H2_Wood\",\n                    \"transforms\": {\n                        \"hydrogen_production\": 2.996580638,\n                        \"electricity_consumption\": 0.0834,\n                        \"capture_rate\": 1.464601,\n                        \"co2_content\": 1.717,\n                        \"emission_rate\": 0.252399\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"commodity\": \"Biomass_Wood\",\n                            \"start_vertex\": \"biowood_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"system/availability.csv\",\n                                    \"header\": \"NE_BECCS_H2_Wood\"\n                                }\n                            },\n                            \"investment_cost\": 585304,\n                            \"fixed_om_cost\": 66030,\n                            \"variable_om_cost\": 42.26,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_NE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_NE\"\n                        },\n                        \"co2_captured_edge\": {\n                            \"end_vertex\": \"co2_captured_NE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/beccshydrogen/#Key-Points","page":"BECCS Hydrogen","title":"Key Points","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"The global_data field is utilized to define attributes and constraints that apply universally to all instances of a particular asset type.\nThe start_vertex and end_vertex fields indicate the nodes to which the edges are connected. These nodes must be defined in the nodes.json file.\nBy default, only the biomass edge is allowed to have capacity variables and constraints, as this represents the main capacity decision for the BECCS facility (see note below).\nThe biomass edge uses availability time series to model seasonal variations in biomass supply.\nFor a comprehensive list of attributes that can be configured for the transformation and edge components, refer to the transformation and edges pages of the Macro manual.","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"note: The `has_capacity` Edge Attribute\nThe has_capacity attribute is a flag that indicates whether a specific edge of an asset has a capacity variable, allowing it to be expanded or retired. Typically, users do not need to manually adjust this flag, as the asset creators in Macro have already configured it correctly for each edge. However, advanced users can use this flag to override the default settings for each edge if needed.","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"tip: Prefixes\nUsers can apply prefixes to adjust parameters for the components of a BECCS hydrogen asset, even when using the standard format. For instance, co2_can_retire will adjust the can_retire parameter for the CO2 edge, and co2_existing_capacity will adjust the existing_capacity parameter for the CO2 edge. Below are the prefixes available for modifying parameters for the components of a BECCS hydrogen asset:transform_ for the transformation component\nbiomass_ for the biomass edge\nco2_ for the CO2 edge\nco2_emission_ for the CO2 emission edge\nco2_captured_ for the CO2 captured edge\nh2_ for the hydrogen edge\nelec_ for the electricity edge","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"","category":"page"},{"location":"Guides/guides_introduction/#Guides","page":"Introduction","title":"Guides","text":"","category":"section"},{"location":"Guides/guides_introduction/","page":"Introduction","title":"Introduction","text":"The guides in this section are short instructions for how to complete specific tasks with Macro. They are intended as a reference for your day-to-day work. In them, you will find descriptions of how to use Macro's features and components but detailed descriptions of each are left to the Manual.","category":"page"},{"location":"Guides/guides_introduction/","page":"Introduction","title":"Introduction","text":"We have organized the guides into three sections, one for each of our user profiles:","category":"page"},{"location":"Guides/guides_introduction/","page":"Introduction","title":"Introduction","text":"Users: Want to create and optimize a real-world system using Macro. They will be able to do this with little or no coding, and not have knowledge of Macro's components or internal structure.\nModelers: Want to add new Assets, Commodities or public policies to Macro. They will need to be able to code in Julia and understand some of Macro's components, but not have knowledge of the internal structure or underlying packages.\nDevelopers: Want to change or add new features, model formulations or Constraints to Macro. They will require detailed knowledge of Macro's components, internal structure, and underlying packages.","category":"page"},{"location":"Guides/guides_introduction/","page":"Introduction","title":"Introduction","text":"You can use the navigation panel to the left of your screen to find the task you are looking to accomplish.","category":"page"},{"location":"Guides/guides_introduction/","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"Manual/Edges/#Edges","page":"Edges","title":"Edges","text":"","category":"section"},{"location":"Manual/Edges/#Contents","page":"Edges","title":"Contents","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Overview | Fields | Types | Constructors | Methods | Examples","category":"page"},{"location":"Manual/Edges/#manual-edges-overview","page":"Edges","title":"Overview","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Edges are connections between components, allowing for one or two-way flows of Commodities. They are one of the four primary components in Macro, alongside Nodes, Storage, and Transformations.","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Each Edge can only carry one Commodity so they are usually described with reference to that Commodity, e.g. as Edge{Electricity}, Edge{Hydrogen}, or Edge{CO2}. The general description is an Edge{T}, where T can be any Commodity or sub-Commodity.","category":"page"},{"location":"Manual/Edges/#Edges-in-Assets","page":"Edges","title":"Edges in Assets","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Most Edges{T} are incorporated into Assets, representing the ability of those Assets to transfer Commodities. This is intuitive in some instances but it must be remembered that Edges and other primary components within an Asset do not represent physical components. Instead, they represent the capabilities of the Asset as a whole.","category":"page"},{"location":"Manual/Edges/#Electricity-Edges-in-a-transmission-line","page":"Edges","title":"Electricity Edges in a transmission line","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"A simple transmission line Asset has a strong correspondance between the physical component and its representation in Macro. A transmission line Asset can be defined as an Edge{Electricity} between two Electricity Nodes (aka. two Node{Electricty}). The transmission of electricity is represented by the operational variables of the Edge{Electricity}, and those variables are limited by its investment variables. The costs which come with those operations and investments are associated with the Edge{Electricity}.","category":"page"},{"location":"Manual/Edges/#Electricity-Edges-in-a-natural-gas-power-plant","page":"Edges","title":"Electricity Edges in a natural gas power plant","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"An Edge{Electricity} could also represent the ability of a natural gas power plant (aka. ThermalPower{NaturalGas}) to transfer Electricity to a grid. The ThermalPower{NaturalGas} will be made up of Edges carrying NaturalGas fuel, Electricity, and CO2 emissions. These Edges will all meet at a Transformation which regulates the relationship between the three.","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"It might be intuitive to think of the Transformation as the power plant and the three Edges as the fuel lines, power lines, and flue-gas stack respectively. However, this is not correct with Macro. The combination of the three Edges and Transform represent the entire natural gas power plant. This is discussed in more detail in the Assets documentation.","category":"page"},{"location":"Manual/Edges/#Edges-outside-of-Assets","page":"Edges","title":"Edges outside of Assets","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"It is not currently possible to define Edges outside of Assets using the standard input files. We believe most users will be better served using a simple Asset to represent a connection. However, it is possible to define Edges directly in the Julia script you use to build and solve your model. Please feel free to reach out to the developemnt team via a GitHub issue if you have a use case for this.","category":"page"},{"location":"Manual/Edges/#Key-Concepts","page":"Edges","title":"Key Concepts","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Flow Direction: Edges can be unidirectional or bidirectional\nCommodity Types: Each Edge carries flows of a single Commodity type\nCapacity: Edges can have capacity limits which limit flows along them. Capacity can be fixed or expandable via investment.\nInvestment: Edges can have investment costs associated with investments and operation\nTime Dependence: Support time-varying parameters and constraints","category":"page"},{"location":"Manual/Edges/#manual-edges-fields","page":"Edges","title":"Edge Fields","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Edges have the following fields. When running a model, the fields are set by the input files. When creating an Asset, the defaults below can can be altered using the @edge_data macro. The internal fields are used by Macro and are not intended to be set by users in most circumstances.","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"note: Units in Macro\nWe have assumed that your System is using units of MWh for energy, tonnes for mass, and hour-long time steps. You can use any set of units as long as they are consistent across your operations and investment inputs.","category":"page"},{"location":"Manual/Edges/#Network-Structure","page":"Edges","title":"Network Structure","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Field Type Description Default\nid Symbol Unique identifier -\nstart_vertex AbstractVertex Origin vertex -\nend_vertex AbstractVertex Destination vertex -\ncommodity Type Commodity type -\nunidirectional Bool Flow direction constraint true","category":"page"},{"location":"Manual/Edges/#Investment-Parameters","page":"Edges","title":"Investment Parameters","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Field Type Description Units Default\nhas_capacity Bool Whether edge has capacity limits - false\ncan_expand Bool Whether capacity can be expanded - false\ncan_retire Bool Whether capacity can be retired - false\nexisting_capacity Float64 Initial installed capacity MWh/hr 0.0\nmax_capacity Float64 Maximum total capacity MWh/hr Inf\nmin_capacity Float64 Minimum total capacity MWh/hr 0.0\nmax_new_capacity Float64 Maximum new capacity additions MWh/hr Inf\ncapacity_size Float64 Unit size for capacity decisions MWh/hr 1.0\ninteger_decisions Bool Whether to use integer capacity vars - false","category":"page"},{"location":"Manual/Edges/#Economic-Parameters","page":"Edges","title":"Economic Parameters","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Field Type Description Units Default\ninvestment_cost Float64 CAPEX per unit capacity $/MW 0.0\nannualized_investment_cost Float64 Annualized CAPEX $/MW/yr calculated\nfixed_om_cost Float64 Fixed O&M costs $/MW/yr 0.0\nvariable_om_cost Float64 Variable O&M costs $/MWh 0.0\nwacc Float64 Weighted average cost of capital fraction 0.0\nlifetime Int Asset lifetime in years years 1\ncapital_recovery_period Int Investment recovery period years 1\nretirement_period Int Retirement period years 0","category":"page"},{"location":"Manual/Edges/#Unit-Commitment-Economic-Parameters-(EdgeWithUC-only)","page":"Edges","title":"Unit Commitment Economic Parameters (EdgeWithUC only)","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Field Type Description Units Default\nstartup_cost Float64 Cost per startup $ 0.0\nstartup_fuel_consumption Float64 Fuel consumed during startup MWh 0.0\nmin_up_time Float64 Minimum up time hours 0.0\nmin_down_time Float64 Minimum down time hours 0.0","category":"page"},{"location":"Manual/Edges/#Operational-Parameters","page":"Edges","title":"Operational Parameters","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Field Type Description Units Default\navailability Vector{Float64} Time-varying availability factors fraction 1.0\nloss_fraction Vector{Float64} Flow losses fraction Float64[]\nmin_flow_fraction Float64 Minimum operating level fraction 0.0\nramp_up_fraction Float64 Maximum ramp-up rate fraction/step 1.0\nramp_down_fraction Float64 Maximum ramp-down rate fraction/step 1.0\ndistance Float64 Connection distance km 0.0","category":"page"},{"location":"Manual/Edges/#Investment-and-Operations-Tracking-(Internal)","page":"Edges","title":"Investment and Operations Tracking (Internal)","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Field Type Description Units Default\nflow Union{JuMPVariable,Vector{Float64}} Commodity flow through edge MWh/hr -\ncapacity Union{AffExpr,Float64} Total available capacity MWh/hr -\nnew_capacity JuMPVariable New capacity investments MWh/hr -\nnew_capacity_track Dict{Int,Float64} Capacity additions by period MWh/hr -\nretired_capacity JuMPVariable Capacity retirements MWh/hr -\nretired_capacity_track Dict{Int,Float64} Retirements by period MWh/hr -\nnew_units JuMPVariable New unit installations units -\nretired_units JuMPVariable Unit retirements units -\nconstraints Vector{AbstractTypeConstraint} Additional constraints - []","category":"page"},{"location":"Manual/Edges/#Unit-Commitment-Tracking-(EdgeWithUC-only,-Internal)","page":"Edges","title":"Unit Commitment Tracking (EdgeWithUC only, Internal)","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Field Type Description Units Default\nucommit JuMPVariable Commitment status variables - -\nustart JuMPVariable Startup decision variables - -\nushut JuMPVariable Shutdown decision variables - -\nstartup_fuel_balance_id Symbol ID of the balance used to track start-up fuel consumption - -","category":"page"},{"location":"Manual/Edges/#manual-edges-types","page":"Edges","title":"Types","text":"","category":"section"},{"location":"Manual/Edges/#Type-Hierarchy","page":"Edges","title":"Type Hierarchy","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"AbstractEdge{T}\n├── Edge{T}\n└── EdgeWithUC{T}","category":"page"},{"location":"Manual/Edges/#AbstractEdge{T}","page":"Edges","title":"AbstractEdge{T}","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Abstract base type for all edges,parameterized by commodity type T.","category":"page"},{"location":"Manual/Edges/#Edge{T}","page":"Edges","title":"Edge{T}","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Standard edge implementation, without unit commitment constraints. It is parameterized by commodity type T","category":"page"},{"location":"Manual/Edges/#EdgeWithUC{T}","page":"Edges","title":"EdgeWithUC{T}","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Edge with unit commitment constraints for modeling assets with startup/shutdown dynamics. It is parameterized by commodity type T","category":"page"},{"location":"Manual/Edges/#manual-edges-constructors","page":"Edges","title":"Constructors","text":"","category":"section"},{"location":"Manual/Edges/#Keyword-Constructors","page":"Edges","title":"Keyword Constructors","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Edge{T}(; id::Symbol, start_vertex::AbstractVertex, end_vertex::AbstractVertex, \n        time_data::TimeData, commodity::Type{T}, [additional_fields...])\n\nEdgeWithUC{T}(; id::Symbol, start_vertex::AbstractVertex, end_vertex::AbstractVertex, \n              time_data::TimeData, commodity::Type{T}, [additional_fields...])","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Direct constructors using keyword arguments for all fields, where T is the type of commodity flowing through the edge, e.g. Electricity, NaturalGas, etc.","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Parameter Type Description Required\nid Symbol Unique identifier Yes\nstart_vertex AbstractVertex Origin vertex Yes\nend_vertex AbstractVertex Destination vertex Yes\ntime_data TimeData Time-related data structure Yes\ncommodity Type{T} Commodity type flowing through edge Yes\nunidirectional Bool Flow direction constraint No\nhas_capacity Bool Whether edge has capacity limits No\nexisting_capacity Float64 Initial installed capacity No\nmax_capacity Float64 Maximum total capacity No\ninvestment_cost Float64 CAPEX per unit capacity No\nvariable_om_cost Float64 Variable O&M costs No\n... Various Additional edge-specific fields No","category":"page"},{"location":"Manual/Edges/#Primary-Constructors","page":"Edges","title":"Primary Constructors","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Edge(id::Symbol, data::AbstractDict{Symbol,Any}, time_data::TimeData, \n     commodity::Type, start_vertex::AbstractVertex, end_vertex::AbstractVertex)\n\nEdgeWithUC(id::Symbol, data::AbstractDict{Symbol,Any}, time_data::TimeData, \n           commodity::Type, start_vertex::AbstractVertex, end_vertex::AbstractVertex)","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Creates Edge components from input data dictionary, time data, commodity type, and vertices.","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Parameter Type Description\nid Symbol Unique identifier of the Edge\ndata AbstractDict{Symbol,Any} Configuration data\ntime_data TimeData Temporal data on the representative periods being modelled\ncommodity Type Commodity type flowing through Edge\nstart_vertex AbstractVertex Origin vertex of the Edge\nend_vertex AbstractVertex Destination vertex of the Edge","category":"page"},{"location":"Manual/Edges/#Factory-Constructors","page":"Edges","title":"Factory Constructors","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"make_edge(id::Symbol, data::AbstractDict{Symbol,Any}, time_data::TimeData, \n          commodity::Type, start_vertex::AbstractVertex, end_vertex::AbstractVertex)\n\nmake_edge_with_uc(id::Symbol, data::AbstractDict{Symbol,Any}, time_data::TimeData, \n                  commodity::Type, start_vertex::AbstractVertex, end_vertex::AbstractVertex)","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Internal factory methods for creating Edge components with data processing and validation.","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Parameter Type Description\nid Symbol Unique identifier for the edge\ndata AbstractDict{Symbol,Any} Configuration data for the edge\ntime_data TimeData Time-related data structure\ncommodity Type Commodity type for the edge\nstart_vertex AbstractVertex Origin vertex of the edge\nend_vertex AbstractVertex Destination vertex of the edge","category":"page"},{"location":"Manual/Edges/#manual-edges-methods","page":"Edges","title":"Methods","text":"","category":"section"},{"location":"Manual/Edges/#Accessor-Functions","page":"Edges","title":"Accessor Functions","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Function Description Returns\nid(edge) Get edge ID Symbol\nflow(edge) Get flow variable/values Union{JuMPVariable,Vector{Float64}}\nflow(edge, t) Get flow at timestep t Float64\ncapacity(edge) Get total capacity Union{AffExpr,Float64}\nexisting_capacity(edge) Get existing capacity Float64\nnew_capacity(edge) Get new capacity variable JuMPVariable\navailability(edge) Get availability profile Vector{Float64}\navailability(edge, t) Get availability at timestep t Float64\nloss_fraction(edge) Get loss profile Vector{Float64}\nloss_fraction(edge, t) Get loss at timestep t Float64\ncommodity_type(edge) Get commodity type Type\nstart_vertex(edge) Get origin vertex AbstractVertex\nend_vertex(edge) Get destination vertex AbstractVertex","category":"page"},{"location":"Manual/Edges/#Capacity-and-Investment","page":"Edges","title":"Capacity and Investment","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Function Description Returns\ncan_expand(edge) Check if expandable Bool\ncan_retire(edge) Check if retirable Bool\nhas_capacity(edge) Check if capacity-constrained Bool\nmax_capacity(edge) Get maximum capacity Float64\nmin_capacity(edge) Get minimum capacity Float64\ninvestment_cost(edge) Get investment cost Float64\nannualized_investment_cost(edge) Get annualized cost Float64","category":"page"},{"location":"Manual/Edges/#Unit-Commitment-Methods-(EdgeWithUC-only)","page":"Edges","title":"Unit Commitment Methods (EdgeWithUC only)","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Function Description Returns\nmin_up_time(edge) Get minimum up time Float64\nmin_down_time(edge) Get minimum down time Float64\nstartup_cost(edge) Get startup cost Float64\nstartup_fuel_consumption(edge) Get startup fuel consumption Float64","category":"page"},{"location":"Manual/Edges/#Asset-Creation","page":"Edges","title":"Asset Creation","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Function Description Returns\n@edge_data(new_defaults) Macro to set new default fields for an Asset Dict{Symbol,Any}","category":"page"},{"location":"Manual/Edges/#Model-Creation","page":"Edges","title":"Model Creation","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Function Description Returns\noperation_model!(edge, model) Create operational variables and constraints for the Edge and add to model Nothing\nplanning_model!(edge, model) Create investment variables and constraints for the Edge and add to model Nothing\ncompute_investment_costs!(edge, model) Calculate annualized, discounted investment costs Nothing\ncompute_om_fixed_costs!(edge, model) Calculate discounted fixed OM costs Nothing\ncompute_fixed_costs!(edge, model) Calculate annualized, discounted fixed costs Nothing\nadd_linking_variables!(edge, model) Add linking variables between the planning and operational models Nothing\ndefine_available_capacity!(edge, model) Calculate and fix available capacity Nothing","category":"page"},{"location":"Manual/Edges/#Constraint-Management","page":"Edges","title":"Constraint Management","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Function Description Returns\nall_constraints(edge) Get all constraints Vector{AbstractTypeConstraint}\nall_constraints_types(edge) Get constraint types Vector{Type}\nget_constraint_by_type(edge, type) Get specific constraint type Union{AbstractTypeConstraint,Nothing}","category":"page"},{"location":"Manual/Edges/#Utility-Functions","page":"Edges","title":"Utility Functions","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Function Description Returns\nedges_with_capacity_variables(edges) Filter edges with capacity variables Vector{AbstractEdge}\ntarget_is_valid(edge, target) Validate edge-vertex compatibility Bool\nedge_default_data() Get default edge data values Dict{Symbol,Any}","category":"page"},{"location":"Manual/Edges/#manual-edges-examples","page":"Edges","title":"Examples","text":"","category":"section"},{"location":"Manual/Edges/#Transmission-Line","page":"Edges","title":"Transmission Line","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Transmission lines can be represented as TransmissionLink{Electricity} Assets. These are made up of an Edge{Electricity} between two Node{Electricity} vertices.","category":"page"},{"location":"Manual/Edges/#Transmission-Line-Inputs","page":"Edges","title":"Transmission Line Inputs","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Assets can be defined using the standard or advanced JSON input formats, or a blend of the two. The standard format is simpler and more concise, while the advanced format allows for more flexibility and additional fields.","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Macro also supports CSV inputs. These will usually use the standard input format. Please refer to the CSV Input documentation for more details on how to use CSV files.","category":"page"},{"location":"Manual/Edges/#Standard-JSON-Input-Format","page":"Edges","title":"Standard JSON Input Format","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Using the simplified, standard JSON input format, a transmission line can be defined as shown below.","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"{\n    \"type\": \"TransmissionLink\",\n    \"instance_data\": {\n        \"id\": \"TransmissionLine_SE_MIDAT\",\n        \"commodity\": \"Electricity\",\n        \"location\": \"elec_SE\",\n        \"transmission_destination\": \"elec_MIDAT\",\n        \"unidirectional\": false,\n        \"distance\": 491.4512001,\n        \"existing_capacity\": 5552,\n        \"max_capacity\": 27760,\n        \"investment_cost\": 40219,\n        \"loss_fraction\": 0.04914512,\n        \"constraints\": {\n            \"MaxCapacityConstraint\": true\n        }\n    }\n}","category":"page"},{"location":"Manual/Edges/#Advanced-JSON-Input-Format","page":"Edges","title":"Advanced JSON Input Format","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"A transmission line can also be defined using the full, advanced JSON input format. This more closely mirrors the fields of the Assets components. Note that some fields are set to their default values, such as can_expand, can_retire, and integer_decisions. These could be omitted but are often included to make the inputs more explicit or facilitate future changes.","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"The commodity input is not a field of the Edge{Electricity}. Here, it is one of the additional inputs required by the TransmissionLink Asset. It is used to decide the commodity type of the Edge and Asset, in this instance Electricity.","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Additional inputs like this are set when defining an Asset and its make() function. They will not be made fields of the Asset's components, but will be used when creating the Asset. Other common examples are the location input, which is used to connect an Asset to multiple Nodes with the same location field, and the uc input which is used to specify whether an Asset should use a regular Edge or an EdgeWithUC.","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"{\n    \"type\": \"TransmissionLink\",\n    \"instance_data\": {\n        \"id\": \"TransmissionLine_SE_MIDAT\",\n        \"edges\": {\n            \"transmission_edge\": {\n                \"commodity\": \"Electricity\",\n                \"start_vertex\": \"elec_SE\",\n                \"end_vertex\": \"elec_MIDAT\",\n                \"unidirectional\": false,\n                \"has_capacity\": true,\n                \"can_expand\": true,\n                \"can_retire\": false,\n                \"integer_decisions\": false,\n                \"distance\": 491.4512001,\n                \"existing_capacity\": 5552,\n                \"max_capacity\": 27760,\n                \"investment_cost\": 40219,\n                \"loss_fraction\": 0.04914512,\n                \"constraints\": {\n                    \"CapacityConstraint\": true,\n                    \"MaxCapacityConstraint\": true\n                }\n            }\n        }\n    }\n}","category":"page"},{"location":"Manual/Edges/#Creating-the-Transmission-Line-Asset","page":"Edges","title":"Creating the Transmission Line Asset","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"A full guide on how to create Assets can be found in the Creating a New Asset section. Further discussion of Assets and the @edge_data macro can be found in the Assets documentation.","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"First, we add an Edge to the TransmissionLink Asset struct. TransmissionLinks are generalized connections meant to represent transmission lines, pipelines without linepack, data connections, etc. Therefore, we parameterized the Asset by the commodity its Edge carries, e.g. TransmissionLink{Electricity} or TransmissionLink{NaturalGas}.","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"struct TransmissionLink{T} <: AbstractAsset\n    id::AssetId\n    transmission_edge::Edge{<:T}\nend","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"The next step is to define how the TransmissionLink Asset inputs should be parsed into the data required to create the Edge{Electricity}. This is done as part of the TransmissionLink Assets make() function.","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"We will break down the steps of the make() function but the entire function is shown below to put the code snippet in context:","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"function make(asset_type::Type{<:TransmissionLink}, data::AbstractDict{Symbol,Any}, system::System)\n    id = AssetId(data[:id]) \n\n    @setup_data(asset_type, data, id)\n\n    transmission_edge_key = :transmission_edge\n    @process_data(\n        transmission_edge_data,\n        data[:edges][transmission_edge_key],\n        [\n            (data[:edges][transmission_edge_key], key),\n            (data[:edges][transmission_edge_key], Symbol(\"transmission_\", key)),\n            (data, Symbol(\"transmission_\", key)),\n            (data, key), \n        ]\n    )\n\n    commodity_symbol = Symbol(transmission_edge_data[:commodity])\n    commodity = commodity_types()[commodity_symbol]\n    \n    @start_vertex(\n        t_start_node,\n        transmission_edge_data,\n        commodity,\n        [(transmission_edge_data, :start_vertex), (data, :transmission_origin), (data, :location)],\n    )\n    @end_vertex(\n        t_end_node,\n        transmission_edge_data,\n        commodity,\n        [(transmission_edge_data, :end_vertex), (data, :transmission_dest), (data, :location)],\n    )\n\n    transmission_edge = Edge(\n        Symbol(id, \"_\", transmission_edge_key),\n        transmission_edge_data,\n        system.time_data[commodity_symbol],\n        commodity,\n        t_start_node,\n        t_end_node,\n    )\n    return TransmissionLink(id, transmission_edge)\nend","category":"page"},{"location":"Manual/Edges/#Assign-the-Asset-ID-and-setup-the-defaults","page":"Edges","title":"Assign the Asset ID and setup the defaults","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"id = AssetId(data[:id])\n@setup_data(asset_type, data, id)","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"The first step is to assign the Asset an ID, using on the id field in the input data. The AssetId type is currently just an alias for a Symbol but may be extended in the future to include additional metadata about the Asset.","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"The @setup_data macro is used to configure the default values for the Asset, based on the generic defaults of each component and the specific defaults for the Asset. The latter are set using the default_data() functions, which is described in the Assets documentation.","category":"page"},{"location":"Manual/Edges/#Process-the-Edge-data","page":"Edges","title":"Process the Edge data","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"transmission_edge_key = :transmission_edge\n@process_data(\n    transmission_edge_data,\n    data[:edges][transmission_edge_key],\n    [\n        (data[:edges][transmission_edge_key], key),\n        (data[:edges][transmission_edge_key], Symbol(\"transmission_\", key)),\n        (data, Symbol(\"transmission_\", key)),\n        (data, key), \n    ]\n)","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"The next step is to parse the input data for the Edge into the format required by the Edge constructor. This could be done with a simple dictionary lookup between the input data and the Edge fields. However, that would limit the input data to being formatted in a very specific way.","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"To allow for more flexibility, and simpler input files, we can use the @process_data macro to extract the relevant data from multiple possible locations in the input dictionary. This gives the user many options for how to structure their input files, at the cost of making the Asset modellers job a bit more complex.","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"The core idea of the @process_data macro is that it gives Macro a list of locations to look for each piece of data. This is explained in more detail in the Assets documentation. However, the intuition is that the macro will loop through the Edges fields, searching for each field in the options listed in the third argument to the macro.","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"For example, when searching for the has_capacity field, it will look in:","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"data[:edges][transmission_edge_key][:has_capacity] first. If it is not found, it will look in:\ndata[:edges][transmission_edge_key][:transmission_has_capacity], then:\ndata[:transmission_has_capacity], and finally:\ndata[:has_capacity].","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"You will note that the search progresses from the most nested / specific location to the least. This makes it easier to mix global and instance input data for Assets.","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Ultimately, the @process_data macro will extract the relevant data from the input dictionary and store it in the transmission_edge_data variable. This variable will then be used to create the Edge{Electricity}.","category":"page"},{"location":"Manual/Edges/#Set-the-commodity-type","page":"Edges","title":"Set the commodity type","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"commodity_symbol = Symbol(transmission_edge_data[:commodity])\ncommodity = commodity_types()[commodity_symbol]","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"TransmissionLink Assets require a commodity field in their inputs. This will be a String, which we first convert into a Symbol and then look up in the list of available commodity types. This list is accessed using the commodity_types() function, which returns a dictionary mapping commodity symbols to their types.","category":"page"},{"location":"Manual/Edges/#Define-the-start-and-end-vertices","page":"Edges","title":"Define the start and end vertices","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"@start_vertex(\n    t_start_node,\n    transmission_edge_data,\n    commodity,\n    [(transmission_edge_data, :start_vertex), (data, :transmission_origin), (data, :location)],\n)\n@end_vertex(\n    t_end_node,\n    transmission_edge_data,\n    commodity,\n    [(transmission_edge_data, :end_vertex), (data, :transmission_dest), (data, :location)],\n)","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"The next step is to find the start and end vertices of the Edge{Electricity}. In our example these are the Node{Electricity}. However, they can be other Vertices.","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"The @start_vertex and @end_vertex macros are similar to the @process_data macro in that they allow for flexibility in how the input data is structured. They will search for the ids given in the start_vertex and end_vertex fields of the input data. They will first look in the most specific location before moving to the more general locations.","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"If the two Vertices are found, they will be assigned to the t_start_node and t_end_node variables.","category":"page"},{"location":"Manual/Edges/#Create-the-Electricity-Edge-and-TransmissionLink-Asset","page":"Edges","title":"Create the Electricity Edge and TransmissionLink Asset","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"transmission_edge = Edge(\n    Symbol(id, \"_\", transmission_edge_key),\n    transmission_edge_data,\n    system.time_data[commodity_symbol],\n    commodity,\n    t_start_node,\n    t_end_node,\n)\nreturn TransmissionLink(id, transmission_edge)","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"The final step is to create the Edge{Electricity} using the Edge constructor. This requires:","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"A new ID, derived from the Assets unique ID.\nThe transmission_edge_data dictionary, which contains the data for the Edge.\nThe temporal data for the Edge based on its Commodity. This data is found in the System-wide time_data dictionary.\nThe Commodity type, which was looked up earlier.\nThe start and end vertices, which were found using the @start_vertex and @end_vertex macros.","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"The make() function then returns a new TransmissionLink Asset, which contains the Edge{Electricity} as one of its components.","category":"page"},{"location":"Manual/Edges/#Define-TransmissionLink-Asset-Defaults","page":"Edges","title":"Define TransmissionLink Asset Defaults","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Modellers can define Asset-specific default values for the TransmissionLink Asset using the full_default_data() and simple_default_data() functions. These allow Users to provide much shorter and simpler input files than are otherwise required. The two functions are described in the Assets documentation.","category":"page"},{"location":"Manual/Edges/#Solar-PV-Power-Plant","page":"Edges","title":"Solar PV Power Plant","text":"","category":"section"},{"location":"Manual/Edges/#Solar-PV,-Standard-JSON-Input-Format","page":"Edges","title":"Solar PV, Standard JSON Input Format","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"{\n    \"type\": \"VRE\",\n    \"global_data\": {},\n    \"instance_data\": {\n        \"id\": \"example_solar_pv\",\n        \"location\": \"boston\",\n        \"fixed_om_cost\": 13510.19684,\n        \"investment_cost\": 41245.37889,\n        \"max_capacity\": 989513,\n        \"availability\": {\n            \"timeseries\": {\n                \"path\": \"system/availability.csv\",\n                \"header\": \"boston_solar_pv\",\n            }\n        },\n        \"elec_can_expand\": true,\n        \"elec_can_retire\": false,\n        \"elec_constraints\": {\n            \"MaxCapacityConstraint\": true\n        }\n    }\n}","category":"page"},{"location":"Manual/Edges/#Solar-PV,-Advanced-JSON-Input-Format","page":"Edges","title":"Solar PV, Advanced JSON Input Format","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"{\n    \"type\": \"VRE\",\n    \"global_data\": {},\n    \"instance_data\": {\n        \"id\": \"example_solar_pv\",\n        \"transforms\": {\n            \"timedata\": \"Electricity\"\n        },\n        \"edges\": {\n            \"edge\": {\n                \"commodity\": \"Electricity\",\n                \"unidirectional\": true,\n                \"can_expand\": true,\n                \"can_retire\": false,\n                \"has_capacity\": true,\n                \"constraints\": {\n                    \"CapacityConstraint\": true,\n                    \"MaxCapacityConstraint\": true\n                },\n                \"fixed_om_cost\": 13510.19684,\n                \"investment_cost\": 41245.37889,\n                \"max_capacity\": 989513,\n                \"end_vertex\": \"boston_elec\",\n                \"availability\": {\n                    \"timeseries\": {\n                        \"path\": \"system/availability.csv\",\n                        \"header\": \"boston_solar_pv\",\n                    }\n                },\n            }\n        }\n    }\n}","category":"page"},{"location":"Manual/Edges/#Natural-Gas-Power-Plant","page":"Edges","title":"Natural Gas Power Plant","text":"","category":"section"},{"location":"Manual/Edges/#Nat-Gas,-Standard-JSON-Input-Format","page":"Edges","title":"Nat Gas, Standard JSON Input Format","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"{\n    \"type\": \"ThermalPower\",\n    \"global_data\": {},\n    \"instance_data\": {\n        \"id\": \"example_natural_gas_power_plant\",\n        \"location\": \"boston\",\n        \"timedata\": \"NaturalGas\",\n        \"fuel_commodity\": \"NaturalGas\",\n        \"co2_sink\": \"co2_sink\",\n        \"uc\": true,\n        \"elec_constraints\": {\n            \"CapacityConstraint\": true,\n            \"RampingLimitConstraint\": true,\n            \"MinFlowConstraint\": true,\n            \"MinUpTimeConstraint\": true,\n            \"MinDownTimeConstraint\": true,\n        },\n        \"emission_rate\": 0.181048235160161,\n        \"fuel_consumption\": 2.249613533,\n        \"can_expand\": false,\n        \"existing_capacity\": 4026.4,\n        \"investment_cost\": 0.0,\n        \"fixed_om_cost\": 16001,\n        \"variable_om_cost\": 4.415,\n        \"capacity_size\": 125.825,\n        \"startup_cost\": 89.34,\n        \"startup_fuel_consumption\": 0.58614214,\n        \"min_up_time\": 6,\n        \"min_down_time\": 6,\n        \"ramp_up_fraction\": 0.64,\n        \"ramp_down_fraction\": 0.64,\n        \"min_flow_fraction\": 0.444\n    }\n}","category":"page"},{"location":"Manual/Edges/#Nat-Gas,-Advanced-JSON-Input-Format","page":"Edges","title":"Nat Gas, Advanced JSON Input Format","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"{\n    \"type\": \"ThermalPower\",\n    \"global_data\": {},\n    \"instance_data\": {\n        \"id\": \"example_natural_gas_power_plant\",\n        \"transforms\": {\n            \"emission_rate\": 0.181048235160161,\n            \"fuel_consumption\": 2.249613533\n        },\n        \"edges\": {\n            \"elec_edge\": {\n                \"commodity\": \"Electricity\",\n                \"unidirectional\": true,\n                \"has_capacity\": true,\n                \"uc\": true,\n                \"integer_decisions\": false,\n                \"constraints\": {\n                    \"CapacityConstraint\": true,\n                    \"RampingLimitConstraint\": true,\n                    \"MinFlowConstraint\": true,\n                    \"MinUpTimeConstraint\": true,\n                    \"MinDownTimeConstraint\": true\n                },\n               \"end_vertex\": \"boston_elec\",\n                \"can_retire\": true,\n                \"can_expand\": false,\n                \"existing_capacity\": 4026.4,\n                \"investment_cost\": 0.0,\n                \"fixed_om_cost\": 16001,\n                \"variable_om_cost\": 4.415,\n                \"capacity_size\": 125.825,\n                \"startup_cost\": 89.34,\n                \"startup_fuel_consumption\": 0.58614214,\n                \"min_up_time\": 6,\n                \"min_down_time\": 6,\n                \"ramp_up_fraction\": 0.64,\n                \"ramp_down_fraction\": 0.64,\n                \"min_flow_fraction\": 0.444\n            },\n            \"fuel_edge\": {\n                \"commodity\": \"NaturalGas\",\n                \"unidirectional\": true,\n                \"has_capacity\": false,\n                \"start_vertex\": \"boston_natgas\"\n            },\n            \"co2_edge\": {\n                \"commodity\": \"CO2\",\n                \"unidirectional\": true,\n                \"has_capacity\": false,\n                \"end_vertex\": \"co2_sink\"\n            }\n        }\n    }\n}","category":"page"},{"location":"Manual/Edges/#See-Also","page":"Edges","title":"See Also","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"Nodes - Network nodes that edges connect to\nTransformations - Processes that transform flows between edges\nStorage - Energy storage components that can be connected to edges\nVertices - Network nodes that edges connect\nAssets - Higher-level components made from edges, nodes,\nCommodities - Types of resources flowing through edges  \nTime Data - Temporal modeling framework\nConstraints - Additional constraints for edges","category":"page"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"","category":"page"},{"location":"Guides/User Guide/user_build_system/#Creating-a-new-System","page":"Create a System","title":"Creating a new System","text":"","category":"section"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"Creating a new System requires several steps:","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"Create a new System\nAdd Commodities and sub-Commodities\nAdd Locations and Nodes\nAdd Assets\nAdd policy Constraints\nAdd asset Constraints","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"This guide will walk you through the first step and then link to other guides for the subsequent steps.","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"In these guides, we will discuss building a \"System\", not a \"Model\". As a reminder, in Macro the term \"System\" refers to the real-world system being modelled and optimized while \"Model\" refers to the mathematical problem which must be solved to optimize the system. Correspondingly, the System object in Macro represents the set of real-world Assets and Locations, while a Model object is the optimization problem handed to the mathematical solver.","category":"page"},{"location":"Guides/User Guide/user_build_system/#Creating-a-System","page":"Create a System","title":"Creating a System","text":"","category":"section"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"You can create a new System using Macro's template functions. The following function call will create a new System in the ExampleSystems/template_example directory, if no such directory exists:","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"julia> system = template_system(\"ExampleSystems/template_example\")","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"This function return a System object which can be used to conveniently add more objects, such as Nodes, Assets, and Locations to your System.","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"If the path provided is already a directory, then the new System will be created at: ExampleSystems/template_example/new_system. You can specify a different name for the System folder using a second argument:","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"julia> system = template_system(\"ExampleSystems/template_example\", \"preferred_system_name\")","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"This will create a new System at ExampleSystems/template_example/preferred_system_name.","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"The template System has the following folder structure:","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"ExampleSystems/template_example\n├─ system_data.json\n├─ run.jl\n├─ assets\n├─ settings\n|  └─ macro_settings.json\n└─ system\n   ├─ commodities.json\n   ├─ locations.json\n   ├─ nodes.json\n   └─ time_data.json","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"system_data.json tells Macro where to find the data necessary to build the System and Model. The default version matches the template System folder structure. More information about the system_data.json can be found here.","category":"page"},{"location":"Guides/User Guide/user_build_system/#Next-steps-to-creating-a-System","page":"Create a System","title":"Next steps to creating a System","text":"","category":"section"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"You now need to populate you System with Locations, Assets, Policies, and other features. These guides will walk you through how to do so:","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"Adding a Commodity to a System\nAdding a Node to a System\nAdding a Location to a System\nAdding an Asset to a System\nAdding Policy Constraints to a System\nAdding Asset Constraints to a System","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"","category":"page"},{"location":"Manual/Vertices/#Vertices","page":"Vertices","title":"Vertices","text":"","category":"section"},{"location":"Manual/Vertices/","page":"Vertices","title":"Vertices","text":"","category":"page"},{"location":"Manual/Storage/#Storage","page":"Storage","title":"Storage","text":"","category":"section"},{"location":"Manual/Storage/#Contents","page":"Storage","title":"Contents","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Overview | Fields | Types | Constructors | Methods | Examples","category":"page"},{"location":"Manual/Storage/#manual-storage-overview","page":"Storage","title":"Overview","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Storage components store commodities over time, allowing for intertemporal energy management and system flexibility. They are one of the four primary components in Macro, alongside Nodes, Edges, and Transformations. They are sub-types of the Vertex type.","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Each Storage can only handle flows of one Commodity so they are usually described with reference to that Commodity, e.g. as Storage{Electricity}, Storage{Hydrogen}, or Storage{Heat}. The general description is a Storage{T}, where T can be any Commodity or sub-Commodity.","category":"page"},{"location":"Manual/Storage/#Storage-in-Assets","page":"Storage","title":"Storage in Assets","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Storage{T} components are incorporated into Assets, representing the ability of those Assets to store and release Commodities over time. This is particularly important for modeling :","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Battery Storage: Electricity storage with charging and discharging capabilities\nPumped Hydro: Large-scale electricity storage using water reservoirs\nCompressed Air Energy Storage (CAES): Mechanical energy storage systems\nHydrogen Storage: Chemical energy storage for fuel cells and industrial processes\nHeat Storage: Thermal energy storage for district heating systems","category":"page"},{"location":"Manual/Storage/#Battery-Storage-Asset","page":"Storage","title":"Battery Storage Asset","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"A battery storage Asset can be modeled as a Storage{Electricity} component connected to the other Electricity components through charging and discharging Edges. The Storage component tracks the state of charge of the system, including losses, while the Edges handle the power flows in and out of the battery, each potentially with different efficiencies and capacity limits.","category":"page"},{"location":"Manual/Storage/#Hydrogen-Storage-Asset","page":"Storage","title":"Hydrogen Storage Asset","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"A hydrogen storage Asset is a more complex Asset, as it requires Electricity flows to run the pumps and compressors necessary to charge and discharge the Storage{Hydrogen}.  This is achieved by connecting the Storage{Hydrogen} to Electricity and Hydrogen flows via Transformation components that convert between the two commodities. The Storage{Hydrogen} component itself manages the state of charge, losses, and capacity limits for hydrogen storage.","category":"page"},{"location":"Manual/Storage/#Long-Duration-Storage","page":"Storage","title":"Long Duration Storage","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Many Macro models make use of representative periods to reduce the computational burden of modeling long time horizons. Under their ordinary balance Constraints, the state of charge of Storage components will be cyclic across each representative period, i.e. there will be zero net change in the state of charge. This ensures that the System does not have access to \"free\" mass or energy by preventing situations where the initial state of charge is greater than zero and the final state of charge is allowed to be zero.","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"While single period cycles are fine for storage which usually discharge within those periods, for example grid-scale Li-ion batteries with one week representative periods, they are not suitable for long duration storage systems that may discharge over multiple representative periods, such as seasonal storage systems. LongDurationStorage components are used to represent storage systems that operate across these representative periods, allowing for seasonal energy storage and inter-period coordination. The state of charge of LongDurationStorage components is tracked across the representative periods, ensuring that the energy balance is maintained over the entire modeling horizon.","category":"page"},{"location":"Manual/Storage/#Storage-Outside-of-Assets","page":"Storage","title":"Storage Outside of Assets","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Storage components can be used outside of Assets but there is no standard inputs file to do so currently. Most Users will be better served by using Storage components within Assets, as this allows for more complex interactions and configurations. However, it is possible to define Storages directly in the Julia script you use to build and solve your model. Please feel free to reach out to the developemnt team via a GitHub issue if you have a use case for this.","category":"page"},{"location":"Manual/Storage/#Key-Concepts","page":"Storage","title":"Key Concepts","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Single Commodity Storage: Each Storage component handles one Commodity type\nTemporal Energy Management: Storage enables shifting energy demand and supply across time\nState of Charge Tracking: Storage track their time-dependent state of charge\nCapacity Limits: Unlike Nodes and Transformations, Storage have capacity limits on the energy and mass they can hold. They do not have charge and discharge limits. Those are handled by the Edges that connect to the Storage.\nCapacity Investment: Storage capacity can be fixed or expandable through investment\nLoss Modeling: Storage losses are typically modelled as a percentage of the energy or mass stored, impacting the state of charge over time\nCyclic Operation: Storage state loops across modeling periods to ensure conservation of energy and mass\nLong Duration Storage: Storage can be configured to track state of charge across multiple representative periods, enabling seasonal storage within Systems using representative periods","category":"page"},{"location":"Manual/Storage/#manual-storage-fields","page":"Storage","title":"Storage Fields","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Storage components have the following fields. When running a model, the fields are set by the input files. When creating an Asset, the defaults below can be altered using the @storage_data macro. The internal fields are used by Macro and are not intended to be set by users in most circumstances.","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"note: Units in Macro\nIn the tables below, we have assumed that the Storage component compoent in question is storing energy, such as electricity or heat. Therefore the unit of storage is MWh. Please swap these for tonnes or other units as appropriate for your use case. We have also assumed that your System is using hour-long time steps. You can use any set of units as long as they are consistent across your operations and investment inputs.","category":"page"},{"location":"Manual/Storage/#Network-Structure","page":"Storage","title":"Network Structure","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Field Type Description Default\nid Symbol Unique identifier -\nlocation Union{Missing,Symbol} Location where storage is placed missing\ncommodity Type Commodity type being stored -","category":"page"},{"location":"Manual/Storage/#Storage-Configuration","page":"Storage","title":"Storage Configuration","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Field Type Description Units Default\ncharge_edge Union{Nothing,AbstractEdge} Edge representing charging flow - missing\ndischarge_edge Union{Nothing,AbstractEdge} Edge representing discharging flow - missing\nspillage_edge Union{Nothing,AbstractEdge} Edge for spillage/waste flows - missing\ncharge_discharge_ratio Float64 Ratio between charge and discharge rates - 1.0\nlong_duration Bool Whether to use long duration storage - false","category":"page"},{"location":"Manual/Storage/#Investment-Parameters","page":"Storage","title":"Investment Parameters","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Field Type Description Units Default\ncan_expand Bool Whether capacity can be expanded - true\ncan_retire Bool Whether capacity can be retired - true\nexisting_capacity Float64 Initial installed capacity MWh 0.0\nmax_capacity Float64 Maximum total capacity MWh Inf\nmin_capacity Float64 Minimum total capacity MWh 0.0\nmax_new_capacity Float64 Maximum new capacity additions MWh Inf\ncapacity_size Float64 Unit size for capacity decisions MWh 1.0","category":"page"},{"location":"Manual/Storage/#Economic-Parameters","page":"Storage","title":"Economic Parameters","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Field Type Description Units Default\ninvestment_cost Float64 CAPEX per unit capacity $/MWh 0.0\nannualized_investment_cost Union{Nothing,Float64} Annualized CAPEX $/MWh/yr calculated\nfixed_om_cost Float64 Fixed O&M costs $/MWh/yr 0.0\nvariable_om_cost Float64 Variable O&M costs $/MWh 0.0\nwacc Float64 Weighted average cost of capital fraction 0.0\nlifetime Int Asset lifetime in years years 1\ncapital_recovery_period Int Investment recovery period years 1\nretirement_period Int Retirement period years 0","category":"page"},{"location":"Manual/Storage/#Operational-Parameters","page":"Storage","title":"Operational Parameters","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Field Type Description Units Default\nmin_duration Float64 Minimum storage duration hours 0.0\nmax_duration Float64 Maximum storage duration hours 0.0\nmin_storage_level Float64 Minimum storage level (fraction) fraction 0.0\nmax_storage_level Float64 Maximum storage level (fraction) fraction 0.0\nmin_outflow_fraction Float64 Minimum discharge rate (fraction) fraction 0.0\nloss_fraction Vector{Float64} Storage losses per timestep fraction Float64[]","category":"page"},{"location":"Manual/Storage/#Balance-and-Constraint-Tracking-(Internal)","page":"Storage","title":"Balance and Constraint Tracking (Internal)","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Field Type Description Units Default\nbalance_data Dict{Symbol,Dict{Symbol,Float64}} Balance equation coefficients - Dict{Symbol,Dict{Symbol,Float64}}()\nconstraints Vector{AbstractTypeConstraint} Additional constraints - Vector{AbstractTypeConstraint}()\noperation_expr Dict Operational JuMP expressions - Dict()","category":"page"},{"location":"Manual/Storage/#Investment-and-Operations-Tracking-(Internal)","page":"Storage","title":"Investment and Operations Tracking (Internal)","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Field Type Description Units Default\ncapacity Union{AffExpr,Float64} Total available capacity MWh -\nnew_capacity JuMPVariable New capacity investments MWh -\nnew_capacity_track Dict{Int,Float64} Capacity additions by period MWh -\nretired_capacity JuMPVariable Capacity retirements MWh -\nretired_capacity_track Dict{Int,Float64} Retirements by period MWh -\nnew_units Union{Missing,JuMPVariable} New unit installations units -\nretired_units Union{Missing,JuMPVariable} Unit retirements units -\nstorage_level Vector{VariableRef} Storage level at each timestep MWh -","category":"page"},{"location":"Manual/Storage/#Long-Duration-Storage-Tracking-(LongDurationStorage-only,-Internal)","page":"Storage","title":"Long Duration Storage Tracking (LongDurationStorage only, Internal)","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Field Type Description Units Default\nstorage_initial Union{JuMPVariable,Dict{Int64,Float64}} Initial storage level by period MWh Vector{VariableRef}()\nstorage_change Union{JuMPVariable,Dict{Int64,Float64}} Storage change by period MWh Vector{VariableRef}()","category":"page"},{"location":"Manual/Storage/#manual-storage-types","page":"Storage","title":"Types","text":"","category":"section"},{"location":"Manual/Storage/#Type-Hierarchy","page":"Storage","title":"Type Hierarchy","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Storage types follow a hierarchical structure rooted in the abstract AbstractVertex type:","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"AbstractVertex\n├── Node{T}\n├── AbstractStorage{T}\n│   ├── Storage{T}\n│   └── LongDurationStorage{T}\n└── Transformation{T}","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Where T is a Commodity type parameter that specifies which commodity the Storage handles.","category":"page"},{"location":"Manual/Storage/#AbstractStorage{T}","page":"Storage","title":"AbstractStorage{T}","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Abstract supertype for all storage types, parameterized by commodity type T. Provides common functionality for:","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Unique identification (id)\nTime-based data management (timedata)\nBalance equation handling (balance_data)\nConstraint management (constraints)\nOperational expressions (operation_expr)\nStorage-specific operations (charging, discharging, capacity management)","category":"page"},{"location":"Manual/Storage/#Storage{T}","page":"Storage","title":"Storage{T}","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Standard storage implementation for short-term storage that operates within representative periods.","category":"page"},{"location":"Manual/Storage/#LongDurationStorage{T}","page":"Storage","title":"LongDurationStorage{T}","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Extended storage implementation for long-term storage that operates across multiple representative periods.","category":"page"},{"location":"Manual/Storage/#manual-storage-constructors","page":"Storage","title":"Constructors","text":"","category":"section"},{"location":"Manual/Storage/#Keyword-Constructors","page":"Storage","title":"Keyword Constructors","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Storage{T}(; id::Symbol, timedata::TimeData, [additional_fields...])\n\nLongDurationStorage{T}(; id::Symbol, timedata::TimeData, [additional_fields...])","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Direct constructors using keyword arguments for all fields.","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Parameter Type Description Required\nid Symbol Unique identifier Yes\ntimedata TimeData Time-related data structure Yes\ncharge_edge Union{Nothing,AbstractEdge} Edge for charging flows No\ndischarge_edge Union{Nothing,AbstractEdge} Edge for discharging flows No\nexisting_capacity Float64 Initial installed capacity No\nmax_capacity Float64 Maximum storage capacity No\nloss_fraction Vector{Float64} Storage loss rates No\n... Various Additional storage-specific fields No","category":"page"},{"location":"Manual/Storage/#Primary-Constructors","page":"Storage","title":"Primary Constructors","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Storage(id::Symbol, data::Dict{Symbol,Any}, time_data::TimeData, commodity::DataType)\n\nLongDurationStorage(id::Symbol, data::Dict{Symbol,Any}, time_data::TimeData, commodity::DataType)","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Creates Storage components from input data dictionary, time data, and commodity type.","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Parameter Type Description\nid Symbol Unique identifier for the storage\ndata Dict{Symbol,Any} Dictionary of storage configuration data\ntime_data TimeData Time-related data structure\ncommodity DataType Commodity type for the storage","category":"page"},{"location":"Manual/Storage/#Factory-Constructors","page":"Storage","title":"Factory Constructors","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"make_storage(id::Symbol, data::Dict{Symbol,Any}, time_data::TimeData, commodity::DataType)\n\nmake_long_duration_storage(id::Symbol, data::Dict{Symbol,Any}, time_data::TimeData, commodity::DataType)","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Internal factory methods for creating Storage components with data processing.","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Parameter Type Description\nid Symbol Unique identifier for the storage\ndata Dict{Symbol,Any} Configuration data for the storage\ntime_data TimeData Time-related data structure\ncommodity DataType Commodity type for the storage","category":"page"},{"location":"Manual/Storage/#manual-storage-methods","page":"Storage","title":"Methods","text":"","category":"section"},{"location":"Manual/Storage/#Accessor-Methods","page":"Storage","title":"Accessor Methods","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Methods for accessing storage data and properties.","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Method Description Return Type\nid(storage) Get storage identifier Symbol\ncommodity_type(storage) Get commodity type parameter DataType\ncharge_edge(storage) Get charging edge Union{Nothing,AbstractEdge}\ndischarge_edge(storage) Get discharging edge Union{Nothing,AbstractEdge}\nspillage_edge(storage) Get spillage edge Union{Nothing,AbstractEdge}\nstorage_level(storage) Get storage level variables Vector{VariableRef}\nstorage_level(storage, t) Get storage level at timestep t VariableRef","category":"page"},{"location":"Manual/Storage/#Capacity-and-Investment-Methods","page":"Storage","title":"Capacity and Investment Methods","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Methods for managing storage capacity and investment decisions.","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Method Description Return Type\ncan_expand(storage) Check if storage can be expanded Bool\ncan_retire(storage) Check if storage can be retired Bool\nhas_capacity(storage) Check if storage has capacity constraints Bool\ncapacity(storage) Get total available capacity Union{AffExpr,Float64}\nexisting_capacity(storage) Get existing capacity Float64\nnew_capacity(storage) Get new capacity variable Union{AffExpr,Float64}\nretired_capacity(storage) Get retired capacity variable Union{AffExpr,Float64}\nmax_capacity(storage) Get maximum capacity Float64\nmin_capacity(storage) Get minimum capacity Float64\nmax_new_capacity(storage) Get maximum new capacity Float64\ncapacity_size(storage) Get capacity unit size Float64\nnew_capacity_track(storage) Get capacity additions by period Dict{Int64,AffExpr}\nnew_capacity_track(storage, s) Get capacity additions for period s Float64\nretired_capacity_track(storage) Get retirements by period Dict{Int64,AffExpr}\nretired_capacity_track(storage, s) Get retirements for period s Float64\nnew_units(storage) Get new unit variables Union{Missing,JuMPVariable}\nretired_units(storage) Get retired unit variables Union{Missing,JuMPVariable}","category":"page"},{"location":"Manual/Storage/#Economic-Parameters-Methods","page":"Storage","title":"Economic Parameters Methods","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Methods for accessing economic parameters and costs.","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Method Description Return Type\ninvestment_cost(storage) Get investment cost per unit capacity Float64\nannualized_investment_cost(storage) Get annualized investment cost Union{Nothing,Float64}\nfixed_om_cost(storage) Get fixed O&M cost Float64\nwacc(storage) Get weighted average cost of capital Union{Missing,Float64}\nlifetime(storage) Get asset lifetime Int64\ncapital_recovery_period(storage) Get capital recovery period Int64\nretirement_period(storage) Get retirement period Int64","category":"page"},{"location":"Manual/Storage/#Operational-Parameters-Methods","page":"Storage","title":"Operational Parameters Methods","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Methods for accessing operational constraints and characteristics.","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Method Description Return Type\nloss_fraction(storage) Get storage loss profile Vector{Float64}\nloss_fraction(storage, t) Get storage loss at timestep t Float64\nmin_storage_level(storage) Get minimum storage level Float64\nmax_storage_level(storage) Get maximum storage level Float64\nmin_duration(storage) Get minimum storage duration Float64\nmax_duration(storage) Get maximum storage duration Float64\nmin_outflow_fraction(storage) Get minimum discharge rate Float64\ncharge_discharge_ratio(storage) Get charge/discharge ratio Float64","category":"page"},{"location":"Manual/Storage/#Long-Duration-Storage-Methods-(LongDurationStorage-only)","page":"Storage","title":"Long Duration Storage Methods (LongDurationStorage only)","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Additional methods specific to long duration storage.","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Method Description Return Type\nstorage_initial(storage) Get initial storage level variables Union{JuMPVariable,Dict{Int64,Float64}}\nstorage_change(storage) Get storage change variables Union{JuMPVariable,Dict{Int64,Float64}}","category":"page"},{"location":"Manual/Storage/#Balance-and-Constraint-Methods-(Inherited-from-AbstractVertex)","page":"Storage","title":"Balance and Constraint Methods (Inherited from AbstractVertex)","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Methods for managing balance equations and constraints.","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Method Description Return Type\nbalance_ids(storage) Get IDs of all balance equations Vector{Symbol}\nbalance_data(storage, i) Get input data for balance equation i Dict{Symbol,Float64}\nget_balance(storage, i) Get balance equation expression for i JuMP.Expression\nget_balance(storage, i, t) Get balance equation expression for i at time t JuMP.Expression\nall_constraints(storage) Get all constraints applied to the storage Vector{AbstractTypeConstraint}\nall_constraints_types(storage) Get types of all constraints Vector{DataType}\nget_constraint_by_type(storage, constraint_type) Get constraint of specified type AbstractTypeConstraint","category":"page"},{"location":"Manual/Storage/#Model-Building-Methods","page":"Storage","title":"Model Building Methods","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Methods used internally during model construction.","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Method Description Return Type\nadd_linking_variables!(storage, model) Add linking variables to JuMP model Nothing\ndefine_available_capacity!(storage, model) Define available capacity constraints Nothing\nplanning_model!(storage, model) Add planning model constraints Nothing\noperation_model!(storage, model) Add operational model constraints Nothing\ncompute_investment_costs!(storage, model) Calculate annualized investment costs Nothing\ncompute_om_fixed_costs!(storage, model) Calculate fixed O&M costs Nothing\ncompute_fixed_costs!(storage, model) Calculate total fixed costs Nothing","category":"page"},{"location":"Manual/Storage/#Factory-Methods","page":"Storage","title":"Factory Methods","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Methods for creating storage components.","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Method Description Return Type\nmake_storage(id, data, time_data, commodity) Create standard storage component Storage{T}\nmake_long_duration_storage(id, data, time_data, commodity) Create long duration storage component LongDurationStorage{T}","category":"page"},{"location":"Manual/Storage/#manual-storage-examples","page":"Storage","title":"Examples","text":"","category":"section"},{"location":"Manual/Storage/#Battery-Storage","page":"Storage","title":"Battery Storage","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Battery Assets are modeled as a Storage{Electricity} component with charging and discharging Edge{Electricity}.","category":"page"},{"location":"Manual/Storage/#Battery-Asset,-Standard-JSON-Input-Format","page":"Storage","title":"Battery Asset, Standard JSON Input Format","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"As Assets with two Edges with capacity, the standard JSON inputs for Battery Assets are more complex to ensure Macro can parse similar fields for the charging and discharging Edges. As shown below, these Assets make greater use of prefixes to differentiate the Edge and Storage fields.","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"{\n    \"type\": \"Battery\",\n    \"global_data\": {\n        \n    },\n    \"instance_data\": [\n        {\n            \"id\": \"battery_boston\",\n            \"location\": \"boston\",\n            \"storage_can_retire\": false,\n            \"storage_investment_cost\": 17013.88552,\n            \"storage_fixed_om_cost\": 4477.587766,\n            \"storage_max_duration\": 10,\n            \"storage_min_duration\": 1,\n            \"discharge_can_retire\": false,\n            \"discharge_investment_cost\": 26886.40679,\n            \"discharge_fixed_om_cost\": 7075.764437,\n            \"discharge_variable_om_cost\": 1,\n            \"discharge_efficiency\": 0.92,\n            \"charge_variable_om_cost\": 1,\n            \"charge_efficiency\": 0.92,\n            \"storage_constraints\": {\n                \"StorageCapacityConstraint\": true,\n                \"StorageSymmetricCapacityConstraint\": true,\n                \"StorageMinDurationConstraint\": true,\n                \"StorageMaxDurationConstraint\": true,\n                \"BalanceConstraint\": true\n            },\n            \"discharge_constraints\": {\n                \"CapacityConstraint\": true,\n                \"StorageDischargeLimitConstraint\": true\n            }\n        }\n    ]\n}","category":"page"},{"location":"Manual/Storage/#Battery-Asset,-Advanced-JSON-Input-Format","page":"Storage","title":"Battery Asset, Advanced JSON Input Format","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Using the advanced input format makes it easier to understand the structure of the Battery. This format still makes use of well-chosen defaults to reduce the number of fields which must be specified for each Edge.","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"{\n    \"type\": \"Battery\",\n    \"global_data\": {},\n    \"instance_data\": [\n        {\n            \"id\": \"battery_boston\",            \n            \"edges\": {\n                \"discharge_edge\": {\n                    \"end_vertex\": \"boston_elec\",\n                    \"existing_capacity\" : 0.0,\n                    \"fixed_om_cost\" : 7075.764437,\n                    \"investment_cost\": 26886.40679,\n                    \"variable_om_cost\": 1,\n                    \"efficiency\": 0.92,\n                    \"commodity\": \"Electricity\",\n                    \"unidirectional\": true,\n                    \"has_capacity\": true,\n                    \"can_expand\": true,\n                    \"can_retire\": false,\n                    \"constraints\": {\n                        \"CapacityConstraint\": true,\n                        \"StorageDischargeLimitConstraint\": true\n                    }\n                },\n                \"charge_edge\": {\n                    \"start_vertex\": \"boston_elec\",\n                    \"efficiency\": 0.92,\n                    \"variable_om_cost\": 1,\n                    \"commodity\": \"Electricity\",\n                    \"unidirectional\": true,\n                    \"has_capacity\": false\n                }\n            },\n            \"storage\":{\n                \"existing_capacity\": 0.0,\n                \"fixed_om_cost\": 4477.587766,\n                \"investment_cost\": 17013.88552,\n                \"max_duration\": 10,\n                \"min_duration\": 1,\n                \"commodity\": \"Electricity\",\n                \"can_expand\": true,\n                \"can_retire\": false,\n                \"constraints\": {\n                    \"StorageCapacityConstraint\": true,\n                    \"StorageSymmetricCapacityConstraint\": true,\n                    \"StorageMinDurationConstraint\": true,\n                    \"StorageMaxDurationConstraint\": true,\n                    \"BalanceConstraint\": true\n                }\n            }\n        },\n    ]\n}","category":"page"},{"location":"Manual/Storage/#Battery-Asset,-Mixed-JSON-Input-Format","page":"Storage","title":"Battery Asset, Mixed JSON Input Format","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Some users may find it more straightforward to use some elements of the advanced format with the standard format. This works very well with JSON input files but can make CSV inputs difficult to read.","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"{\n    \"type\": \"Battery\",\n    \"global_data\": {},\n    \"instance_data\": [\n        {\n            \"id\": \"battery_boston\",\n            \"location\": \"boston\",\n            \"storage_can_retire\": false,\n            \"storage_investment_cost\": 17013.88552,\n            \"storage_fixed_om_cost\": 4477.587766,\n            \"storage_max_duration\": 10,\n            \"storage_min_duration\": 1,\n            \"storage_constraints\": {\n                \"StorageCapacityConstraint\": true,\n                \"StorageSymmetricCapacityConstraint\": true,\n                \"StorageMinDurationConstraint\": true,\n                \"StorageMaxDurationConstraint\": true,\n                \"BalanceConstraint\": true\n            },\n            \"edges\": {\n                \"discharge_edge\": {\n                    \"existing_capacity\" : 0.0,\n                    \"fixed_om_cost\" : 7075.764437,\n                    \"investment_cost\": 26886.40679,\n                    \"variable_om_cost\": 1,\n                    \"efficiency\": 0.92,\n                    \"constraints\": {\n                        \"CapacityConstraint\": true,\n                        \"StorageDischargeLimitConstraint\": true\n                    }\n                },\n                \"charge_edge\": {\n                    \"efficiency\": 0.92,\n                    \"variable_om_cost\": 1,\n                }\n            }\n        }\n    ]\n}","category":"page"},{"location":"Manual/Storage/#Hydrogen-Storage","page":"Storage","title":"Hydrogen Storage","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Hydrogen storage Assets use the GasStorage Asset, which consists of a sequence of Edges and Transforms which allow a Storage{Hydrogen} to be charged and discharged, with the equipment powered by Electricity.","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"flowchart TD\n    H((H2 Node))\n    E((Electricity Node))\n    subgraph GasStorage\n        T1{{Charging Transformation}}\n        S[H2 Storage]\n        T2{{Discharging Transformation}}\n        T1 --H2 Charge--> S\n        S --H2 Discharge--> T2\n    end\n    H --H2 Charge--> T1\n    E --Charge Power--> T1\n    E --Discharge Power--> T2\n    T2 --H2 Discharge--> H","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Constructing this Asset requires internal and external Edges. Under our formulation, we have set the internal charge and discharge Edges to have capacity. The external Edges do not have capacities but their flows are limited by that of the internal Edges and the stoichiometric balances of the Transformations. We have also merged the two Transformations in the figure above and instead added a second balance constraint.","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"struct GasStorage{T} <: AbstractAsset\n    id::AssetId\n    pump_transform::Transformation\n    gas_storage::AbstractStorage{<:T}\n    charge_edge::Edge{<:T}\n    discharge_edge::Edge{<:T}\n    external_charge_edge::Edge{<:T}\n    external_discharge_edge::Edge{<:T}\n    charge_elec_edge::Edge{<:Electricity}\n    discharge_elec_edge::Edge{<:Electricity}\nend","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"The following code snippets from the GasStorage make() function show part of how this Asset is implemented. We recommend reading the guide on constructing Assets for more details on how to create Assets in Macro.","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"function make(asset_type::Type{GasStorage}, data::AbstractDict{Symbol,Any}, system::System)\n    # Assign an ID and setup the data handling\n    id = AssetId(data[:id])\n    @setup_data(asset_type, data, id)\n\n    # Create the single Transformation\n    pump_transform_key = :transforms\n    @process_data(\n        transform_data,\n        data[pump_transform_key],\n        [\n            (data[pump_transform_key], key),\n            (data[pump_transform_key], Symbol(\"transform_\", key)),\n            (data, Symbol(\"transform_\", key)),\n            (data, key),\n        ],\n    )\n    pump_transform = Transformation(;\n        id = Symbol(id, \"_\", pump_transform_key),\n        timedata = system.time_data[Symbol(transform_data[:timedata])],\n        constraints = transform_data[:constraints],\n    )\n\n    # Process and create the Storage component\n    gas_storage_key = :storage\n    @process_data(\n        storage_data,\n        data[gas_storage_key],\n        [\n            (data[gas_storage_key], key),\n            (data[gas_storage_key], Symbol(\"storage_\", key)),\n            (data, Symbol(\"storage_\", key)),\n        ],\n    )\n\n    # GasStorage is a parameterized type, so we need to define the commodity type\n    commodity_symbol = Symbol(storage_data[:commodity])\n    commodity = commodity_types()[commodity_symbol]\n\n    # We will check whether the storage is long duration or not\n    long_duration = get(storage_data, :long_duration, false)\n    StorageType = long_duration ? LongDurationStorage : Storage\n    \n    # We will then create a Storage or LongDurationStorage component\n    gas_storage = StorageType(\n        Symbol(id, \"_\", gas_storage_key),\n        storage_data,\n        system.time_data[commodity_symbol],\n        commodity,\n    )\n    if long_duration\n        lds_constraints = [LongDurationStorageImplicitMinMaxConstraint()]\n        for c in lds_constraints\n            if !(c in gas_storage.constraints)\n                push!(gas_storage.constraints, c)\n            end\n        end\n    end\n\n    ## Electricity consumption of the gas storage\n\n    # Create the Electricity edges for charging and discharging of the gas storage\n    charge_elec_edge_key = :charge_elec_edge\n    # ...\n    charge_elec_edge = Edge(\n        Symbol(id, \"_\", charge_elec_edge_key),\n        charge_elec_edge_data,\n        system.time_data[:Electricity],\n        Electricity,\n        charge_elec_start_node,\n        charge_elec_end_node,\n    )\n\n    discharge_elec_edge_key = :discharge_elec_edge\n    # ...\n    discharge_elec_edge = Edge(\n        Symbol(id, \"_\", discharge_elec_edge_key),\n        discharge_elec_edge_data,\n        system.time_data[:Electricity],\n        Electricity,\n        discharge_elec_start_node,\n        discharge_elec_end_node,\n    )\n\n    ## Gas edges\n\n    # We now create the internal and external gas charge and discharge edges\n    charge_edge_key = :charge_edge\n    # ...\n    gas_storage_charge = Edge(\n        Symbol(id, \"_\", charge_edge_key),\n        charge_edge_data,\n        system.time_data[commodity_symbol],\n        commodity,\n        charge_start_node,\n        charge_end_node,\n    )\n\n    discharge_edge_key = :discharge_edge\n    # ...\n    gas_storage_discharge = Edge(\n        Symbol(id, \"_\", discharge_edge_key),\n        discharge_edge_data,\n        system.time_data[commodity_symbol],\n        commodity,\n        discharge_start_node,\n        discharge_end_node,\n    )\n\n    external_charge_edge_key = :external_charge_edge\n    # ...\n    external_charge_edge = Edge(\n        Symbol(id, \"_\", external_charge_edge_key),\n        external_charge_edge_data,\n        system.time_data[commodity_symbol],\n        commodity,\n        external_charge_start_node,\n        external_charge_end_node,\n    )\n\n    external_discharge_edge_key = :external_discharge_edge\n    # ...\n    external_discharge_edge = Edge(\n        Symbol(id, \"_\", external_discharge_edge_key),\n        external_discharge_edge_data,\n        system.time_data[commodity_symbol],\n        commodity,\n        external_discharge_start_node,\n        external_discharge_end_node,\n    )\n\n    # We specify the direct charge and discharge edges of the gas storage component\n    gas_storage.discharge_edge = gas_storage_discharge\n    gas_storage.charge_edge = gas_storage_charge\n    \n    # Set the gas balance across the gas storage, including any losses.\n    gas_storage.balance_data = Dict(\n        :storage => Dict(\n            gas_storage_discharge.id => 1 / get(discharge_edge_data, :efficiency, 1.0),\n            gas_storage_charge.id => get(charge_edge_data, :efficiency, 1.0),\n        )\n    )\n\n    # Set the charging and discharging balances on the pump transformation.\n    pump_transform.balance_data = Dict(\n        :charge_electricity_consumption => Dict(\n            #This is multiplied by -1 because they are both edges that enters storage, \n            #so we need to get one of them on the right side of the equality balance constraint    \n            charge_elec_edge.id => -1.0,\n            external_charge_edge.id => get(transform_data, :charge_electricity_consumption, 0.0), \n        ),\n        :discharge_electricity_consumption => Dict(\n            discharge_elec_edge.id => 1.0,\n            external_discharge_edge.id => get(transform_data, :discharge_electricity_consumption, 0.0),\n        ),\n        :external_charge_balance => Dict(\n            external_charge_edge.id => 1.0,\n            gas_storage_charge.id => 1.0,\n        ),\n        :external_discharge_balance => Dict(\n            external_discharge_edge.id => 1.0,\n            gas_storage_discharge.id => 1.0,\n        ),\n    )\n\n    # Create the GasStorage Asset using the constructed components\n    return GasStorage(\n        id,\n        pump_transform,\n        gas_storage,\n        gas_storage_charge,\n        gas_storage_discharge,\n        external_charge_edge,\n        external_discharge_edge,\n        charge_elec_edge,\n        discharge_elec_edge\n    )\nend","category":"page"},{"location":"Manual/Storage/#Hydrogen-Storage-Asset,-Standard-JSON-Input-Format","page":"Storage","title":"Hydrogen Storage Asset, Standard JSON Input Format","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"{\n    \"type\": \"GasStorage\",\n    \"global_data\": {},\n    \"instance_data\": {\n        \"id\": \"above_ground_storage_boston\",\n        \"location\": \"boston\",\n        \"timedata\": \"Hydrogen\",\n        \"charge_electricity_consumption\": 0.01,\n        \"discharge_electricity_consumption\": 0.02,\n        \"storage_commodity\": \"Hydrogen\",\n        \"storage_long_duration\": true,\n        \"discharge_can_retire\": false,\n        \"discharge_existing_capacity\": 0,\n        \"discharge_investment_cost\": 0.0,\n        \"discharge_efficiency\": 1.0,\n        \"discharge_ramp_up_fraction\": 1,\n        \"discharge_ramp_down_fraction\": 1,\n        \"charge_can_retire\": false,\n        \"charge_existing_capacity\": 0,\n        \"charge_investment_cost\": 3219.24,\n        \"charge_efficiency\": 1.0,\n        \"storage_can_retire\": false,\n        \"storage_investment_cost\": 873.01,\n        \"storage_fixed_om_cost\": 28.76,\n        \"storage_loss_fraction\": 0.0,\n        \"storage_min_storage_level\": 0.3,\n        \"storage_constraints\": {\n            \"BalanceConstraint\": true,\n            \"StorageCapacityConstraint\": true,\n            \"MinStorageLevelConstraint\": true\n        },\n        \"discharge_constraints\": {\n            \"RampingLimitConstraint\": true\n        }\n    }\n}","category":"page"},{"location":"Manual/Storage/#Hydrogen-Storage-Asset,-Advanced-JSON-Input-Format","page":"Storage","title":"Hydrogen Storage Asset, Advanced JSON Input Format","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"{\n    \"type\": \"GasStorage\",\n    \"global_data\": {},\n    \"instance_data\": [\n        {\n            \"id\": \"SE_Above_ground_storage\",\n            \"transforms\": {\n                \"timedata\": \"Hydrogen\",\n                \"charge_electricity_consumption\": 0.01,\n                \"discharge_electricity_consumption\": 0.02\n            },\n            \"storage\": {\n                \"commodity\": \"Hydrogen\",\n                \"can_expand\": true,\n                \"can_retire\": false,\n                \"long_duration\": true,\n                \"investment_cost\": 873.01,\n                \"fixed_om_cost\": 28.76,\n                \"loss_fraction\": 0.0,\n                \"min_storage_level\": 0.3,\n                \"constraints\": {\n                    \"StorageCapacityConstraint\": true,\n                    \"BalanceConstraint\": true,\n                    \"MinStorageLevelConstraint\": true,\n                    \"LongDurationStorageImplicitMinMaxConstraint\": true\n                }\n            },\n            \"edges\": {\n                \"discharge_edge\": {\n                    \"type\": \"Hydrogen\",\n                    \"unidirectional\": true,\n                    \"can_expand\": true,\n                    \"can_retire\": false,\n                    \"has_capacity\": true,\n                    \"efficiency\": 1.0,\n                    \"ramp_up_fraction\": 1,\n                    \"ramp_down_fraction\": 1,\n                    \"constraints\": {\n                        \"CapacityConstraint\": true,\n                        \"RampingLimitConstraint\": true\n                    }\n                },\n                \"charge_edge\": {\n                    \"type\": \"Hydrogen\",\n                    \"unidirectional\": true,\n                    \"has_capacity\": true,\n                    \"can_expand\": true,\n                    \"can_retire\": false,\n                    \"investment_cost\": 3219.24,\n                    \"efficiency\": 1.0,\n                    \"constraints\": {\n                        \"CapacityConstraint\": true\n                    }\n                },\n                \"external_discharge_edge\": {\n                    \"end_vertex\": \"boston_h2\",\n                    \"type\": \"Hydrogen\",\n                    \"unidirectional\": true,\n                    \"has_capacity\": false\n                },\n                \"external_charge_edge\":{\n                    \"start_vertex\": \"boston_h2\",\n                    \"type\": \"Hydrogen\",\n                    \"unidirectional\": true,\n                    \"has_capacity\": false\n                },\n                \"discharge_elec_edge\": {\n                    \"start_vertex\": \"boston_elec\",\n                    \"type\": \"Electricity\",\n                    \"unidirectional\": true,\n                    \"has_capacity\": false\n                },\n                \"charge_elec_edge\": {\n                    \"start_vertex\": \"boston_elec\",\n                    \"type\": \"Electricity\",\n                    \"unidirectional\": true,\n                    \"has_capacity\": false\n                }\n            }\n        }\n    ]\n}","category":"page"},{"location":"Manual/Storage/#See-Also","page":"Storage","title":"See Also","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"Edges - Components that connect Vertices and carry flows\nTransformations - Processes that transform flows of several Commodities\nNodes - Network nodes that allow for import and export of commodities\nVertices - Network nodes that edges connect\nAssets - Higher-level components made from edges, nodes, storage, and transformations\nCommodities - Types of resources stored by Commodities\nTime Data - Temporal modeling framework\nConstraints - Additional constraints for Storage and other components","category":"page"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"","category":"page"},{"location":"how_to_contribute/#how_to_contribute","page":"How to contribute","title":"How to contribute guide","text":"","category":"section"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"MacroEnergy.jl is an open-source software project and contributions are welcome! This guide is a quickstart guide to help you contribute to the project.","category":"page"},{"location":"how_to_contribute/#Opening-an-issue","page":"How to contribute","title":"Opening an issue","text":"","category":"section"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"The most straightforward way to contribute to MacroEnergy.jl is to provide feedback directly on the issues page. By clicking on the New issue button, you will see four types of issues you can open:","category":"page"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"Bug Report - for reporting bugs and errors\nQuestion - for asking questions: \"How do I do ...?\"\nFeature Request - for requesting new features\nOther - for other types of contributions","category":"page"},{"location":"how_to_contribute/#opening_a_pr","page":"How to contribute","title":"Opening a PR","text":"","category":"section"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"The second way to contribute to MacroEnergy.jl is to open a pull request. This allows you to implement changes and new features and propose them to the repository. Below are some guidelines for opening a PR (for reference, check the official GitHub guide).","category":"page"},{"location":"how_to_contribute/#Before-opening-a-PR","page":"How to contribute","title":"Before opening a PR","text":"","category":"section"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"We recommend opening an issue before opening a PR. This will allow us to discuss the changes you want to make and provide feedback.\nFork the repository (if you don't have already done so):\nClick the \"Fork\" button in the top-right corner of the MacroEnergy.jl repository.\nThis creates your own copy of the repository where you can make changes.\nClone your fork:\n# Replace YOUR-USERNAME with your GitHub username\ngit clone https://github.com/YOUR-USERNAME/MacroEnergy.jl.git\ncd MacroEnergy.jl\nAdd the original repository as upstream:\n# This allows you to keep your fork in sync with the main repository\ngit remote add upstream https://github.com/macroenergy/MacroEnergy.jl.git\n# Verify the remotes are set up correctly\ngit remote -v\nCreate a new branch for your changes:\n# Get the latest changes from the main repository\ngit checkout main\ngit pull upstream main\n\n# Create and switch to a new branch\n# Replace your-branch-name with a descriptive name\ngit checkout -b your-branch-name","category":"page"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"note: Branch name\nThe recommended name for the branch is <user_id>/<short_description>, where <user_id> can be a short version of your name or a nickname, and <short_description> is a short description of the changes you are making.","category":"page"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"Make your changes and commit them (this step can be done multiple times, each for a different change):\n# Stage your changes\ngit add .\n\n# Commit with a descriptive message\ngit commit -m \"Description of your changes\"\n\n# If you need to make more changes, repeat the process\nPush to your fork:\n# Push your branch to your fork\ngit push origin your-branch-name\n\n# If this is the first time pushing this branch, use:\ngit push -u origin your-branch-name","category":"page"},{"location":"how_to_contribute/#How-to-open-a-PR-(once-the-changes-are-in-a-good-state)","page":"How to contribute","title":"How to open a PR (once the changes are in a good state)","text":"","category":"section"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"Create a Pull Request:\nGo to your fork on GitHub\nClick \"New Pull Request\"\nSelect your branch\nSelect the base repository as macroenergy/MacroEnergy.jl and the base branch as main (or the correct target branch)\nFill out the PR template\nSubmit the PR\nKeep your fork up to date (every time a PR is merged into the upstream repository):\n# Fetch the latest changes from the main repository\ngit fetch upstream\n\n# Switch to main branch\ngit checkout main\n\n# Merge the changes from upstream\ngit merge upstream/main\n\n# Push the updated main branch to your fork\ngit push origin main","category":"page"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"Alternatively, use the Sync fork button in the GitHub website.","category":"page"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"note: Updating a PR\nOnce a PR is created, you can still make changes to your code. You can do this by committing new changes to your branch and pushing them to your fork. The PR will automatically update to reflect the new changes.","category":"page"},{"location":"how_to_contribute/#PR-review-process","page":"How to contribute","title":"PR review process","text":"","category":"section"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"Your PR will be reviewed by maintainers who will provide feedback on the PR.\nIf any changes are requested, you can push a new commit to your branch, which will update the PR.\nIf any conflicts arise, you can resolve them by pulling the latest changes from the upstream repository and merging them into your branch (you can use the conflict resolution tool provided by GitHub).\nOnce the PR is approved, it will be merged into the upstream repository.\nYou can delete the branch from your fork to clean up.","category":"page"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"warning: Recommendations for a good PR\nMake sure to have reviewed your code before opening a PR.\nMake sure to have added comments to your code, in particular in hard-to-understand places.\nMake sure to have updated the docs if you added new functions or changed existing ones, to help other users use your code.\nMake sure to have tested your code, and to provide an example case that the reviewer can use to test the code + how to interpret the results (set of json + csv + julia files).\nTry to write a good PR description, including the motivation for the changes you made.\nTry to make small PRs, ideally each one focusing on a single change.\nHelp review your PR, for instance by highlighting places where you would particularly like reviewer feedback.","category":"page"},{"location":"how_to_contribute/#Some-useful-links","page":"How to contribute","title":"Some useful links","text":"","category":"section"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"Creating an issue (GitHub)\nCreating a pull request (GitHub)\nCreating a pull request from a fork (GitHub)\nGit guide\nColPrac: Contributor's Guide on Collaborative Practices for Community Packages\nJulia Style Guide","category":"page"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"","category":"page"}]
}
