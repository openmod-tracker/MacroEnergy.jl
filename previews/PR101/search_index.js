var documenterSearchIndex = {"docs":
[{"location":"Guides/Developer Guide/1_introduction/#Developer-Guides","page":"Developer Guides","title":"Developer Guides","text":"","category":"section"},{"location":"Guides/Developer Guide/1_introduction/","page":"Developer Guides","title":"Developer Guides","text":"This section provides an overview of the package’s internal structure, development workflow, and best practices for contributing. Whether you’re fixing a bug, adding a new feature, or improving documentation, this guide will help you navigate the codebase efficiently.","category":"page"},{"location":"Guides/Developer Guide/1_introduction/","page":"Developer Guides","title":"Developer Guides","text":"","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/#Creating-a-New-Asset","page":"Creating a New Asset","title":"Creating a New Asset","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"#TODO: update this section","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Once the new commodity type is added to Macro, the modeler can create new assets that use this commodity type. For instance, a modeler may want to create a new asset that converts a commodity MyNewSector into two other commodities, Electricity and CO2. ","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"tip: Tip\nBefore creating a new asset, we recommend the modeler to have a look at the existing assets in the src/assets folder. All the asset files follow a same structure to streamline the creation of new assets.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"As for the case of the commodity type, each asset in Macro is defined as a subtype of the AbstractAsset type (the user can find some examples by checking the struct definition in the .jl files in the src/assets folder):","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"src/assets/electrolyzer.jl","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"struct Electrolyzer <: AbstractAsset\n    id::AssetId\n    electrolyzer_transform::Transformation\n    h2_edge::Edge{Hydrogen}\n    elec_edge::Edge{Electricity}\nend","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The steps to create a new asset MyNewAsset are:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Design the new asset in terms of transformations, edges, and storage units for each commodity type used in the asset.\nCreate a new Julia file in the src/assets folder called mynewasset.jl.\nAt the top of the file, define the asset type as a subtype of AbstractAsset.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"struct MyNewAsset <: AbstractAsset\n    # ... asset structure will go here ...\nend","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Define the fields of the asset type as transformations, edges, and storage units with the appropriate commodity types.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"struct MyNewAsset <: AbstractAsset\n    transform::Transformation\n    edge1::Edge{CommodityType1}\n    edge2::Edge{CommodityType2}\n    # ... rest of the asset structure will go here ...\nend","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Define a make function in the same file with the steps to create an instance of the asset. The function should have the following signature:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"function make(::Type{MyNewAsset}, data::AbstractDict{Symbol,Any}, system::System)\n    # ... make function will go here ...\n    return MyNewAsset(transform, edge1, edge2, # ... rest of the asset structure will go here ...)\nend","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"note: Make function\nThe make function should include the steps to create the asset structure, including:Creation of each component of the asset: transformations, edges, and storage units.\nDefault constraints for each component.\nStoichiometric equations/coefficients for the transformation processes.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"(Optional) Create a new JSON data file to test the new assets.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"warning: Include the new files in the MacroEnergy.jl file\nRemember to include the new files in the MacroEnergy.jl file, so that they are available when the package is loaded.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The following section provides an example of how to create a new sector and assets in Macro.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/#Example","page":"Creating a New Asset","title":"Example","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"For example, let's create a new sector called MyNewSector with two assets: MyAsset1, and MyAsset2. ","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The first asset will be a technology that converts a commodity MyNewSector, into two other commodities, Electricity and CO2, while the second asset will be a technology with a storage unit that stores the commodity MyNewSector.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"As seen in the previous section, the steps to create a new sector and assets are as follows:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Add the following line to the MacroEnergy.jl file:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"abstract type MyNewSector <: Commodity end","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"(try to add this line right after the definition of the Commodity type). ","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"Create a new file called MyAsset1.jl in the src/assets folder with the following content:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"# Structure of the asset\nstruct MyAsset1 <: AbstractAsset\n    id::AssetId\n    myasset1_transform::Transformation\n    mynewsector_edge::Edge{MyNewSector}\n    e_edge::Edge{Electricity}\n    co2_edge::Edge{CO2}\nend\n\n# Make function to create an instance of the asset\n# The function takes as input the data and the system, and returns an instance of the asset\n# The data is a dictionary with the asset data, and the system is the system object containing the locations, time data, and other relevant information\nfunction make(::Type{MyAsset1}, data::AbstractDict{Symbol,Any}, system::System)\n\n    # asset id\n    id = AssetId(data[:id])\n\n    # transformation\n    transform_data = process_data(data[:transforms])\n    myasset1_transform_default_constraints = [BalanceConstraint()]\n    myasset1_transform = Transformation(;\n        id = Symbol(transform_data[:id]),\n        timedata = system.time_data[Symbol(transform_data[:timedata])],\n        constraints = get(transform_data, :constraints, myasset1_transform_default_constraints),\n    )\n\n    # edges\n    mynewsector_edge_data = process_data(data[:edges][:mynewsector_edge])\n    mynewsector_edge_default_constraints = Vector{AbstractTypeConstraint}()\n    mynewsector_start_node = find_node(system.locations, Symbol(mynewsector_edge_data[:start_vertex]))\n    mynewsector_end_node = myasset1_transform\n    mynewsector_edge = Edge(\n        Symbol(String(id) * \"_\" * mynewsector_edge_data[:id]),\n        mynewsector_edge_data,\n        system.time_data[:MyNewSector],\n        MyNewSector,\n        mynewsector_start_node,\n        mynewsector_end_node,\n    )\n    mynewsector_edge.constraints = get(mynewsector_edge_data, :constraints, mynewsector_edge_default_constraints)\n    mynewsector_edge.unidirectional = get(mynewsector_edge_data, :unidirectional, true)\n\n    elec_edge_data = process_data(data[:edges][:e_edge])\n    elec_start_node = myasset1_transform\n    elec_end_node = find_node(system.locations, Symbol(elec_edge_data[:end_vertex]))\n    elec_edge = EdgeWithUC(\n        Symbol(String(id) * \"_\" * elec_edge_data[:id]),\n        elec_edge_data,\n        system.time_data[:Electricity],\n        Electricity,\n        elec_start_node,\n        elec_end_node,\n    )\n    elec_edge.constraints = get(\n        elec_edge_data,\n        :constraints,\n        [\n            CapacityConstraint(),\n            RampingLimitConstraint(),\n            MinUpTimeConstraint(),\n            MinDownTimeConstraint(),\n        ],\n    )\n    elec_edge.unidirectional = get(elec_edge_data, :unidirectional, true)\n    elec_edge.startup_fuel_balance_id = :energy\n\n    co2_edge_data = process_data(data[:edges][:co2_edge])\n    co2_start_node = myasset1_transform\n    co2_end_node = find_node(system.locations, Symbol(co2_edge_data[:end_vertex]))\n    co2_edge = Edge(\n        Symbol(String(id) * \"_\" * co2_edge_data[:id]),\n        co2_edge_data,\n        system.time_data[:CO2],\n        CO2,\n        co2_start_node,\n        co2_end_node,\n    )\n    co2_edge.constraints =\n        get(co2_edge_data, :constraints, Vector{AbstractTypeConstraint}())\n    co2_edge.unidirectional = get(co2_edge_data, :unidirectional, true)\n\n    myasset1_transform.balance_data = Dict(\n        # Edit this part to include the stoichiometric equations for the transformation process \n        ),\n    )\n\n    return MyAsset1(id, myasset1_transform, mynewsector_edge, elec_edge, co2_edge)\nend","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"From the code above, you can see that the modeler needs to provide the asset structure as a Julia struct, along with the default constraints for transformations and edges (myasset1_transform_default_constraints, mynewsector_edge_default_constraints), and the stoichiometric coefficients for the transformation process being modeled (myasset1_transform.balance_data).","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"tip: Tip\nChecking out other asset files in the src/assets folder is a good place to start adding new assets. ","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"The creation of the second asset, MyAsset2, follows very similar steps to the creation of MyAsset1. The main difference is that MyAsset2 has a storage unit:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"struct MyAsset2 <: AbstractAsset\n    id::AssetId\n    myasset2_storage::AbstractStorage{MyNewSector}  # <--- Storage unit\n    discharge_edge::Edge{MyNewSector}\n    charge_edge::Edge{MyNewSector}\nend\n\nfunction make(::Type{MyAsset2}, data::AbstractDict{Symbol,Any}, system::System)\n\n    # asset id\n    id = AssetId(data[:id])\n\n    # storage\n    storage_data = process_data(data[:storage])\n    myasset2_storage_default_constraints = [\n            BalanceConstraint(),\n            StorageCapacityConstraint(),\n            StorageMaxDurationConstraint(),\n            StorageMinDurationConstraint(),\n            StorageSymmetricCapacityConstraint(),\n        ]\n    myasset2_storage = Storage(id, \n        storage_data, \n        system.time_data[Symbol(storage_data[:commodity])], \n        MyNewSector, \n        myasset2_storage_default_constraints\n    )\n\n    # edges\n    discharge_edge_data = process_data(data[:edges][:discharge_edge])\n    discharge_edge_default_constraints = [CapacityConstraint()]\n    discharge_start_node = myasset2_storage\n    discharge_end_node = find_node(system.locations, Symbol(discharge_edge_data[:end_vertex]))\n    discharge_edge = Edge(\n        Symbol(String(id) * \"_\" * discharge_edge_data[:id]),\n        discharge_edge_data,\n        system.time_data[:MyNewSector],\n        MyNewSector,\n        discharge_start_node,\n        discharge_end_node,\n    )\n    discharge_edge.constraints = get(discharge_edge_data, :constraints, discharge_edge_default_constraints)\n    discharge_edge.unidirectional = get(discharge_edge_data, :unidirectional, true)\n\n    charge_edge_data = process_data(data[:edges][:charge_edge])\n    charge_start_node = find_node(system.locations, Symbol(charge_edge_data[:start_vertex]))\n    charge_end_node = myasset2_storage\n    charge_edge = Edge(\n        Symbol(String(id) * \"_\" * charge_edge_data[:id]),\n        charge_edge_data,\n        system.time_data[:MyNewSector],\n        MyNewSector,\n        charge_start_node,\n        charge_end_node,\n    )\n    charge_edge.constraints = get(charge_edge_data, :constraints, Vector{AbstractTypeConstraint}())\n    charge_edge.unidirectional = get(charge_edge_data, :unidirectional, true)\n\n    myasset2_storage.discharge_edge = discharge_edge\n    myasset2_storage.charge_edge = charge_edge\n\n    myasset2_storage.balance_data = Dict(\n        # Edit this part to include the energy efficiency of the storage unit or any other stoichiometric equations\n        ),\n    )\n\n    return MyAsset2(id, myasset2_storage, discharge_edge, charge_edge)\nend","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_asset/","page":"Creating a New Asset","title":"Creating a New Asset","text":"","category":"page"},{"location":"Guides/User Guide/user_using_asset_libary/","page":"Exploring the Asset library","title":"Exploring the Asset library","text":"","category":"page"},{"location":"Manual/Commodities/#Commodities","page":"Commodities","title":"Commodities","text":"","category":"section"},{"location":"Manual/Commodities/#Sub-Commodities","page":"Commodities","title":"Sub-Commodities","text":"","category":"section"},{"location":"Manual/Commodities/","page":"Commodities","title":"Commodities","text":"","category":"page"},{"location":"Manual/Nodes/#Nodes","page":"Nodes","title":"Nodes","text":"","category":"section"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"Required information:","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"They include exogeneous inputs, NSD, demand\nThey are parameterized for one Commodity\nThey are a balance for that commodity\nTypes of constraints which can be applied to them\nHow they are gathered into Locations\nParameters, variables, expressions\nHow to define the inputs\nHow to add one or more to a model","category":"page"},{"location":"Manual/Nodes/","page":"Nodes","title":"Nodes","text":"","category":"page"},{"location":"Guides/User Guide/user_settings/#Configuring-Settings","page":"Configuring Settings","title":"Configuring Settings","text":"","category":"section"},{"location":"Guides/User Guide/user_settings/","page":"Configuring Settings","title":"Configuring Settings","text":"Macro provides various settings that allow the user to customize model runs and control specific features.","category":"page"},{"location":"Guides/User Guide/user_settings/","page":"Configuring Settings","title":"Configuring Settings","text":"These are the steps to configure settings:","category":"page"},{"location":"Guides/User Guide/user_settings/","page":"Configuring Settings","title":"Configuring Settings","text":"Create a new settings JSON file (e.g., macro_settings.json) in the preferred location (we recommend creating a settings folder in the case directory).\nCustomize the JSON file to enable or disable features as needed.\nAdd the path to the settings JSON file in the system_data.json file. The user can use either a relative path (from the system_data.json location) or an absolute path.","category":"page"},{"location":"Guides/User Guide/user_settings/","page":"Configuring Settings","title":"Configuring Settings","text":"note: system_data.json\nFor more information about the system_data.json file, please see the Inputs section.","category":"page"},{"location":"Guides/User Guide/user_settings/","page":"Configuring Settings","title":"Configuring Settings","text":"Here's an example of a macro_settings.json file:","category":"page"},{"location":"Guides/User Guide/user_settings/","page":"Configuring Settings","title":"Configuring Settings","text":"{\n    \"ConstraintScaling\": true,\n    \"OverwriteResults\": true,\n    \"AutoCreateNodes\": true,\n    \"OutputLayout\": {\n        \"Capacity\": \"wide\",\n        \"Costs\": \"long\",\n        \"Flow\": \"long\"\n  }\n}","category":"page"},{"location":"Guides/User Guide/user_settings/","page":"Configuring Settings","title":"Configuring Settings","text":"If the user created the macro_settings.json file in a settings folder, the system_data.json file should include this entry:","category":"page"},{"location":"Guides/User Guide/user_settings/","page":"Configuring Settings","title":"Configuring Settings","text":"{\n    \"settings\": {\n        \"path\": \"settings/macro_settings.json\"\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_settings/","page":"Configuring Settings","title":"Configuring Settings","text":"In this example, the user has enabled:","category":"page"},{"location":"Guides/User Guide/user_settings/","page":"Configuring Settings","title":"Configuring Settings","text":"scaling the constraints in the model during the optimization.\noverwriting the results folder if it already exists.\ncreating nodes automatically from locations.\nsetting the layout for the results files to \"wide\" for the capacity variables, and to \"long\" for costs and flow variables.","category":"page"},{"location":"Guides/User Guide/user_settings/","page":"Configuring Settings","title":"Configuring Settings","text":"For a complete list of available settings, their default values, and detailed descriptions, please refer to the Inputs section.","category":"page"},{"location":"Guides/User Guide/user_settings/","page":"Configuring Settings","title":"Configuring Settings","text":"","category":"page"},{"location":"Manual/assets/fuelcell/#Fuel-Cell","page":"Fuel Cell","title":"Fuel Cell","text":"","category":"section"},{"location":"Manual/assets/fuelcell/#Graph-structure","page":"Fuel Cell","title":"Graph structure","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"A fuel cell is represented in Macro using the following graph structure:","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"<img width=\"400\" src=\"../../images/fuelcell.png\" />","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"A fuel cell asset is made of:","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"1 Transformation component, representing the fuel cell process.\n2 Edge components:\n1 incoming Hydrogen Edge, representing the hydrogen supply.\n1 outgoing Electricity Edge, representing the electricity production.","category":"page"},{"location":"Manual/assets/fuelcell/#Attributes","page":"Fuel Cell","title":"Attributes","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"The structure of the input file for a fuel cell asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"h2_edge\": {\n            // ... h2_edge-specific attributes ...\n        },\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/fuelcell/#Transformation","page":"Fuel Cell","title":"Transformation","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"The definition of the transformation object can be found here MacroEnergy.Transformation.","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Attribute Type Values Default Description/Units\ntimedata String String Required Time resolution for the time series data linked to the transformation. E.g. \"Hydrogen\".\nconstraints Dict{String,Bool} Any Macro constraint type for vertices BalanceConstraint List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\nefficiency_rate epsilon_efficiency Float64 Float64 1.0 MWh_elecMWh_h2","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"tip: Default constraints\nThe default constraint for the transformation part of the fuel cell asset is the following:Balance constraint","category":"page"},{"location":"Manual/assets/fuelcell/#Flow-equations","page":"Fuel Cell","title":"Flow equations","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"note: Fuel Cell\nbeginaligned\nphi_elec = phi_h2 cdot epsilon_efficiency \nendaligned","category":"page"},{"location":"Manual/assets/fuelcell/#Edges","page":"Fuel Cell","title":"Edges","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Both the electricity and hydrogen edges are represented by the same set of attributes. The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"Attribute Type Values Default Description\ntype String Any Macro commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges Check box below List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"assets/availability.csv\", \"header\": \"SE_FuelCell_H2\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool false Whether the edge is unidirectional.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"tip: Default constraints\nThe only default constraint for the edges of the fuel cell asset is the Capacity constraint applied to the electricity edge. ","category":"page"},{"location":"Manual/assets/fuelcell/#Example","page":"Fuel Cell","title":"Example","text":"","category":"section"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"The following is an example of the input file for a fuel cell asset that creates three fuel cells, each for each of the SE, MIDAT and NE regions.","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"{\n    \"fuelcell\": [\n        {\n            \"type\": \"FuelCell\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"Electricity\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_retire\": true,\n                        \"can_expand\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true,\n                            \"MinFlowConstraint\": true\n                        }\n                    },\n                    \"h2_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_FuelCell\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.875111139\n                    },\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"start_vertex\": \"h2_SE\"\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 41112.53426,\n                            \"fixed_om_cost\": 1052.480877,\n                            \"variable_om_cost\": 0.0,\n                            \"capacity_size\": 1.5752,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.1\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_FuelCell\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.875111139\n                    },\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"start_vertex\": \"h2_MIDAT\"\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_MIDAT\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 41112.53426,\n                            \"fixed_om_cost\": 1052.480877,\n                            \"variable_om_cost\": 0.0,\n                            \"capacity_size\": 1.5752,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.1\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_FuelCell\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.875111139\n                    },\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"start_vertex\": \"h2_NE\"\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_NE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 41112.53426,\n                            \"fixed_om_cost\": 1052.480877,\n                            \"variable_om_cost\": 0.0,\n                            \"capacity_size\": 1.5752,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.1\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/fuelcell/","page":"Fuel Cell","title":"Fuel Cell","text":"","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/#Creating-a-New-Sector","page":"Creating a New Sector","title":"Creating a New Sector","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"Creating new sectors in Macro involves two main steps:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"Choose a unique name for the new sector.\nAdd the new sector to the MacroEnergy.jl file.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/#The-Commodity-Julia-Type","page":"Creating a New Sector","title":"The Commodity Julia Type","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"tip: Types in Julia\nIf you're not familiar with Julia's type system, we recommend this section of the Julia documentation. In particular, for more information on abstract types, see the Abstract Types section.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"In Macro, the Commodity type is an abstract type which defines a generic type used to represent all commodities in the package. Each specific commodity (e.g., electricity, hydrogen) is then defined as a subtype of Commodity:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"MacroEnergy.jl","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"## Commodity types\nabstract type Commodity end\nabstract type Electricity <: Commodity end\nabstract type Hydrogen <: Commodity end\nabstract type NaturalGas <: Commodity end","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"Here, the operator <: means is-a-subtype-of. In this example, both Electricity and Hydrogen are subtypes of the abstract Commodity type.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"flowchart LR\n  %%{init: {'theme': 'base'}}%%\n  subgraph Macro commodity types\n    A[Commodity]\n    A --> B[Electricity]\n    A --> C[Hydrogen]\n    A --> D[NaturalGas]\n    end","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"This diagram shows the type hierarchy in Macro where:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"Commodity is the base (abstract) type\nElectricity, Hydrogen, and NaturalGas are all subtypes of Commodity\nThe arrows show the \"is-a-subtype-of\" relationship using the <: operator","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/#Adding-a-new-sector-to-Macro","page":"Creating a New Sector","title":"Adding a new sector to Macro","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"To define a new sector in Macro, simply add a new line in the MacroEnergy.jl file:","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"MacroEnergy.jl","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"# ... existing code ...\nabstract type MyNewSector <: Commodity end\n# ... existing code ...","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"This line defines MyNewSector as a new subtype of Commodity. Once added, you can create nodes and edges in the energy system graph that correspond to this new sector.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/#Next-Steps","page":"Creating a New Sector","title":"Next Steps","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"After defining the new commodity type, you can proceed to build new assets and transformation processes using nodes and edges associated with any Commodity type defined in Macro.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"Creating a New Asset: Step-by-step instructions for developing a new asset.\nCreating a New Example Case: A guide to developing a new example case.","category":"page"},{"location":"Guides/Modeler Guide/modeler_build_sectors/","page":"Creating a New Sector","title":"Creating a New Sector","text":"","category":"page"},{"location":"Manual/assets/gasstorage/#Gas-Storage","page":"Gas Storage","title":"Gas Storage","text":"","category":"section"},{"location":"Manual/assets/gasstorage/#Graph-structure","page":"Gas Storage","title":"Graph structure","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"A storage for a gas commodity is represented in Macro using the following graph structure:","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"%%{init: {\n    'theme': 'base', \n    \"themeCSS\": \".node circle { radius: 40 !important; }\",\n    'themeVariables': { 'background': '#D1EBDE' }\n}}%%\nflowchart LR\n  subgraph GasStorage\n  direction BT\n    B((Gas)) --Charge--> A{{..}}\n    A --Discharge--> B\n    C((Electricity)) --Charge--> A\n    C --Discharge--> A\n    A --Charge--> D[Storage]\n    D --Discharge--> A\n\n end\n legend@{img: \"../../images/battery.png\", w: 120, h: 100, constraint: \"off\"}\n       GasStorage ~~~ legend\n    style A fill:black,stroke:black,color:black;\n    style B r:40,fill:lightblue,stroke:black,color:black,stroke-dasharray: 3,5;\n    style C r:40,fill:orange,stroke:black,color:black,font-size: 12, stroke-dasharray: 3,5;\n    style D fill:lightblue,stroke:black,color:black, font-size: 12;\n\n    linkStyle 0,1 stroke:lightblue, stroke-width: 3px;\n    linkStyle 2,3 stroke:orange, stroke-width: 3px;\n    linkStyle 4,5 stroke:lightblue, stroke-width: 3px;\n\n    style legend fill:white","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"%%{init: {\n    'theme': 'base', \n    \"themeCSS\": \".node circle { r: 100 !important; }\",\n    'themeVariables': { 'background': '#D1EBDE' }\n}}%%\nflowchart LR\n  subgraph GasPipeline\n  direction BT\n    B((Gas)) --Charge--> A{{..}}\n    A --Discharge--> E((Gas))\n    C((Electricity)) --Charge--> A\n    F((Electricity)) --Discharge--> A\n    A --Charge--> D[Storage]\n    D --Discharge--> A\n    subgraph \"Source location\"\n    B ~~~ C\n    end\n    subgraph \"Dest location\"\n    E ~~~ F\n    end\n end\n legend@{img: \"../../images/battery.png\", w: 120, h: 100, constraint: \"off\"}\n       GasPipeline ~~~ legend\n    style A fill:black,stroke:black,color:black;\n    style B radius:50,fill:lightblue,stroke:black,color:black,font-size: 12, stroke-dasharray: 3,5;\n    style C r:40,fill:orange,stroke:black,color:black,font-size: 12, stroke-dasharray: 3,5;\n    style D r:40,fill:lightblue,stroke:black,color:black, font-size: 12;\n    style E r:40,fill:lightblue,stroke:black,color:black, font-size: 12,stroke-dasharray: 3,5;\n    style F r:40,fill:orange,stroke:black,color:black, font-size: 12,stroke-dasharray: 3,5;\n\n    linkStyle 0,1 stroke:lightblue, stroke-width: 3px;\n    linkStyle 2,3 stroke:orange, stroke-width: 3px;\n    linkStyle 4,5 stroke:lightblue, stroke-width: 3px;\n\n    style legend fill:white","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"<img width=\"400\" src=\"../../images/gas_storage.png\" />","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"A gas storage asset is made of:","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"1 Storage component, representing the gas storage process. The gas type is set using the commodity attribute (see table below).\n1 Transformation component, representing the gas compressor.\n4 Edge components:\n1 incoming Electricity Edge, representing the electricity consumption for powering the compressor.\n1 incoming Gas Edge, representing the gas flow into the storage asset through the compressor.\n1 internal Gas Edge, representing the gas flow between the compressor and the storage. This can be seen as a charge edge for the storage component.\n1 outgoing Gas Edge, representing the discharged edge of the gas storage.","category":"page"},{"location":"Manual/assets/gasstorage/#Attributes","page":"Gas Storage","title":"Attributes","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"The structure of the input file for a gas storage asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"compressor_elec_edge\": {\n            // ... compressor_elec_edge-specific attributes ...\n        },\n        \"compressor_gas_edge\": {\n            // ... compressor_gas_edge-specific attributes ...\n        },\n        \"charge_edge\": {\n            // ... storage_gas_edge-specific attributes ...\n        },\n        \"discharge_edge\": {\n            // ... discharge_gas_edge-specific attributes ...\n        }\n    },\n    \"storage\":{\n        // ... storage-specific attributes ...\n    }\n}","category":"page"},{"location":"Manual/assets/gasstorage/#Transformation","page":"Gas Storage","title":"Transformation","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"The definition of the transformation object can be found here MacroEnergy.Transformation.","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Attribute Type Values Default Description\ntimedata String String Required Time resolution for the time series data linked to the transformation. E.g. \"Hydrogen\".\nconstraints Dict{String,Bool} Any Macro constraint type for vertices BalanceConstraint List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\nelectricity_consumption epsilon_elec_consumption Float64 Float64 0.0 MWh_elecMWh_gas","category":"page"},{"location":"Manual/assets/gasstorage/#Flow-equations","page":"Gas Storage","title":"Flow equations","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"note: GasStorage\nNote: c is the type of the commodity being stored. The following equation is related to the compressor.beginaligned\nphi_elec = phi_c cdot epsilon_elec_consumption \nendalignedLook also at the \"Efficiency\" tip below for more information on the efficiency of charging/discharging process.","category":"page"},{"location":"Manual/assets/gasstorage/#Edges","page":"Gas Storage","title":"Edges","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"All the edges are represented by the same set of attributes. The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Attribute Type Values Default Description\ntype String Any Macro commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges Check box below List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"assets/availability.csv\", \"header\": \"SE_Above_ground_storage\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nefficiency Float64 Number in [0,1] 1.0 Efficiency of the charging/discharging process.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"tip: Efficiency\nThe efficiency of the charging/discharging process can be set in the charge_edge and discharge_edge parts of the input file. These parameters are used, for example, in the Balance constraint to balance the charge and discharge flows. ","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"tip: Default constraints\nThe only default constraint for the edges of the gas storage asset is the Capacity constraint applied to both the charge and discharge edges.","category":"page"},{"location":"Manual/assets/gasstorage/#Storage-component","page":"Gas Storage","title":"Storage component","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"The definition of the Storage object can be found here MacroEnergy.Storage.","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"Attribute Type Values Default Description\ncommodity String Any Macro commodity type Required Commodity being stored. E.g. \"Hydrogen\".\nconstraints Dict{String,Bool} Any Macro constraint type for storage BalanceConstraint, StorageCapacityConstraint List of constraints applied to the storage. E.g. {\"BalanceConstraint\": true}.\ncan_expand Bool Bool false Whether the storage is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the storage is eligible for capacity retirement.\ncharge_discharge_ratio Float64 Float64 1.0 Ratio between charging and discharging rates.\nexisting_capacity_storage Float64 Float64 0.0 Initial installed storage capacity (MWh).\nfixed_om_cost_storage Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MWh-year).\ninvestment_cost_storage Float64 Float64 0.0 Annualized investment cost of the energy capacity for a storage technology (USD/MWh-year).\nlong_duration Bool Bool false Whether the storage is a long-duration storage. Note: if true, the long-duration storage constraint will be applied.\nmax_capacity_storage Float64 Float64 Inf Maximum allowed storage capacity (MWh).\nmax_duration Float64 Float64 0.0 Maximum ratio of installed energy to discharged capacity that can be installed (hours).\nmin_capacity_storage Float64 Float64 0.0 Minimum allowed storage capacity (MWh).\nmin_duration Float64 Float64 0.0 Minimum ratio of installed energy to discharged capacity that can be installed (hours).\nmin_outflow_fraction Float64 Float64 0.0 Minimum outflow as a fraction of capacity.\nmin_storage_level Float64 Float64 0.0 Minimum storage level as a fraction of capacity.\nmax_storage_level Float64 Float64 1.0 Maximum storage level as a fraction of capacity.\nstorage_loss_fraction Float64 Number in [0,1] 0.0 Fraction of stored commodity lost per timestep.","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"tip: Default constraints\nAs noted in the above table, the default constraints for the storage component of the gas storage are the following:Balance constraint\nStorage capacity constraintIf the storage is a long-duration storage, the following additional constraints are applied:Long-duration storage constraints","category":"page"},{"location":"Manual/assets/gasstorage/#Example","page":"Gas Storage","title":"Example","text":"","category":"section"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"The following input file example shows how to create a hydrogen storage asset in each of the three zones SE, MIDAT and NE.","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"{\n    \"h2stor\": [\n        {\n            \"type\": \"GasStorage\",\n            \"global_data\": {\n                \"nodes\": {},\n                \"transforms\": {\n                    \"timedata\": \"Hydrogen\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"discharge_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"has_capacity\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true\n                        }\n                    },\n                    \"charge_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true\n                        }\n                    },\n                    \"compressor_elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"compressor_gas_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                },\n                \"storage\": {\n                    \"commodity\": \"Hydrogen\",\n                    \"can_expand\": true,\n                    \"can_retire\": false,\n                    \"constraints\": {\n                        \"StorageCapacityConstraint\": true,\n                        \"BalanceConstraint\": true,\n                        \"MinStorageLevelConstraint\": true\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Above_ground_storage\",\n                    \"transforms\": {\n                        \"electricity_consumption\": 0.018029457\n                    },\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"h2_SE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 0.0,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1\n                        },\n                        \"charge_edge\": {\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 3219.236569,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0\n                        },\n                        \"compressor_gas_edge\": {\n                            \"start_vertex\": \"h2_SE\"\n                        },\n                        \"compressor_elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        }\n                    },\n                    \"storage\": {\n                        \"investment_cost_storage\": 873.013307,\n                        \"fixed_om_cost_storage\": 28.75810056,\n                        \"storage_loss_fraction\": 0.0,\n                        \"min_storage_level\": 0.3\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_Above_ground_storage\",\n                    \"transforms\": {\n                        \"electricity_consumption\": 0.018029457\n                    },\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"h2_MIDAT\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 0.0,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1\n                        },\n                        \"charge_edge\": {\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 3219.236569,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0\n                        },\n                        \"compressor_gas_edge\": {\n                            \"start_vertex\": \"h2_MIDAT\"\n                        },\n                        \"compressor_elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\"\n                        }\n                    },\n                    \"storage\": {\n                        \"investment_cost_storage\": 873.013307,\n                        \"fixed_om_cost_storage\": 28.75810056,\n                        \"storage_loss_fraction\": 0.0,\n                        \"min_storage_level\": 0.3\n                    }\n                },\n                {\n                    \"id\": \"NE_Above_ground_storage\",\n                    \"transforms\": {\n                        \"electricity_consumption\": 0.018029457\n                    },\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"h2_NE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 0.0,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1\n                        },\n                        \"charge_edge\": {\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 3219.236569,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0\n                        },\n                        \"compressor_gas_edge\": {\n                            \"start_vertex\": \"h2_NE\"\n                        },\n                        \"compressor_elec_edge\": {\n                            \"start_vertex\": \"elec_NE\"\n                        }\n                    },\n                    \"storage\": {\n                        \"investment_cost_storage\": 873.013307,\n                        \"fixed_om_cost_storage\": 28.75810056,\n                        \"storage_loss_fraction\": 0.0,\n                        \"min_storage_level\": 0.3\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/gasstorage/","page":"Gas Storage","title":"Gas Storage","text":"","category":"page"},{"location":"Manual/Transforms/#Transformations","page":"Transforms","title":"Transformations","text":"","category":"section"},{"location":"Manual/Transforms/","page":"Transforms","title":"Transforms","text":"","category":"page"},{"location":"Manual/related_packages/#Related-Packages","page":"Related Packages","title":"Related Packages","text":"","category":"section"},{"location":"Manual/related_packages/","page":"Related Packages","title":"Related Packages","text":"","category":"page"},{"location":"Tutorials/2_multisector_modelling/#Multisector-modelling-with-Macro","page":"Multisector Modelling","title":"Multisector modelling with Macro","text":"","category":"section"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"note: Interactive Notebook\nThe interactive version of this tutorial can be found here.","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"In this tutorial, we extend the electricity-only model considered in Tutorial 2 to build a multisector model for joint capacity expansion in electricity and hydrogen sectors. ","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"To do this, we incorporate hydrogen and electricity demand from Tutorial 2, and endogenously model hydrogen production and storage in Macro.","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"using Pkg; Pkg.add([\"VegaLite\", \"Plots\"])","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"using Macro\nusing HiGHS\nusing CSV\nusing DataFrames\nusing JSON3\nusing Plots\nusing VegaLite","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Create a new case folder named \"one_zone_multisector\"","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"if !isdir(\"one_zone_multisector\")\n    mkdir(\"one_zone_multisector\")\n    cp(\"one_zone_electricity_only/assets\",\"one_zone_multisector/assets\", force=true)\n    cp(\"one_zone_electricity_only/settings\",\"one_zone_multisector/settings\", force=true)\n    cp(\"one_zone_electricity_only/system\",\"one_zone_multisector/system\", force=true)\n    cp(\"one_zone_electricity_only/system_data.json\",\"one_zone_multisector/system_data.json\", force=true)\nend","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Note: If you have previously run Tutorial 2, make sure that file one_zone_multisector/system/nodes.json is restored to the original version with a textCO_2 price. The definition of the textCO_2 node should look like this:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"{\n    \"type\": \"CO2\",\n    \"global_data\": {\n        \"time_interval\": \"CO2\"\n    },\n    \"instance_data\": [\n        {\n            \"id\": \"co2_sink\",\n            \"constraints\": {\n                \"CO2CapConstraint\": true\n            },\n            \"rhs_policy\": {\n                \"CO2CapConstraint\": 0\n            },\n            \"price_unmet_policy\":{\n                \"CO2CapConstraint\": 200\n            }    \n        }\n    ]\n}","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Add Hydrogen to the list of modeled commodities, modifying file one_zone_multisector/system/commodities.json:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"new_macro_commodities = Dict(\"commodities\"=> [\"Electricity\", \"NaturalGas\", \"CO2\", \"Hydrogen\"])\n\nopen(\"one_zone_multisector/system/commodities.json\", \"w\") do io\n    JSON3.pretty(io, new_macro_commodities)\nend","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Update file one_zone_multisector/system/time_data.json accordingly:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"new_time_data = Dict(\n    \"PeriodLength\"=>8760,\n    \"HoursPerTimeStep\" => Dict(\n        \"Electricity\" => 1, \n        \"NaturalGas\" => 1, \n        \"CO2\" => 1, \n        \"Hydrogen\" => 1),\n    \"HoursPerSubperiod\" => Dict(\n        \"Electricity\" => 8760, \n        \"NaturalGas\" => 8760, \n        \"CO2\" => 8760, \n        \"Hydrogen\"=>8760)\n)\n\nopen(\"one_zone_multisector/system/time_data.json\", \"w\") do io\n    JSON3.pretty(io, new_time_data)\nend","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Move separate electricity and hydrogen demand timeseries into the system folder","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"cp(\"demand_timeseries/electricity_demand.csv\",\"one_zone_multisector/system/demand.csv\"; force=true)","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"cp(\"demand_timeseries/hydrogen_demand.csv\",\"one_zone_multisector/system/hydrogen_demand.csv\"; force=true)","category":"page"},{"location":"Tutorials/2_multisector_modelling/#Exercise-1","page":"Multisector Modelling","title":"Exercise 1","text":"","category":"section"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Using the existing electricity nodes in one_zone_multisector/system/nodes.json as template, add an Hydrogen demand node, linking it to the hydrogen_demand.csv timeseries.","category":"page"},{"location":"Tutorials/2_multisector_modelling/#Solution","page":"Multisector Modelling","title":"Solution","text":"","category":"section"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"The definition of the new Hydrogen node in one_zone_multisector/system/nodes.json should look like this:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"    {\n        \"type\": \"Hydrogen\",\n        \"global_data\": {\n            \"time_interval\": \"Hydrogen\",\n            \"constraints\": {\n                \"BalanceConstraint\": true\n            }\n        },\n        \"instance_data\": [\n            {\n                \"id\": \"h2_SE\",\n                \"demand\": {\n                    \"timeseries\": {\n                        \"path\": \"system/hydrogen_demand.csv\",\n                        \"header\": \"Demand_H2_z1\"\n                    }\n                }\n            }\n        ]\n    },","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Next, add an electrolyzer asset represented in Macro as a transformation connecting electricity and hydrogen nodes:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"<a href=\"electrolyzer.html\"><img width=\"400\" src=\"../images/electrolyzer.png\" /></a>","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"To include the electrolyzer, create a file one_zone_multisector/assets/electrolyzer.json based on the asset definition in src/model/assets/electrolyzer.jl:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"{\n   \"electrolyzer\": [\n        {   \n            \"type\": \"Electrolyzer\",\n            \"global_data\":{\n                \"transforms\": {\n                    \"timedata\": \"Electricity\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"h2_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_retire\": true,\n                        \"can_expand\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true,\n                            \"MinFlowConstraint\": true\n                        }\n                    },\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\":[\n                {\n                    \"id\": \"SE_Electrolyzer\",\n                    \"transforms\":{\n                        \"efficiency_rate\": 0.875111139 // units: # MWh of H2 / MWh of electricity\n                    },\n                    \"edges\":{\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_SE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 41112.53426,\n                            \"fixed_om_cost\": 1052.480877,\n                            \"variable_om_cost\": 0.0,\n                            \"capacity_size\": 1.5752,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\":0.1\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Include an hydrogen storage resource cluster, represented in Macro as combination of a compressor transformation (consuming electricity to compress the gas) and a storage node:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"<a href=\"gas_storage.html\"><img width=\"400\" src=\"../images/gas_storage.png\" /></a>","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Add a file one_zone_multisector/assets/h2_storage.json based on the asset definition in  src/model/assets/gasstorage.jlthat should look like this:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"{\n    \"h2stor\": [\n        {\n            \"type\": \"GasStorage\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"Hydrogen\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"discharge_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"has_capacity\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true\n                        }\n                    },\n                    \"charge_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true\n                        }\n                    },\n                    \"compressor_elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"compressor_gas_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                },\n                \"storage\": {\n                    \"commodity\": \"Hydrogen\",\n                    \"can_expand\": true,\n                    \"can_retire\": false,\n                    \"constraints\": {\n                        \"StorageCapacityConstraint\": true,\n                        \"BalanceConstraint\": true,\n                        \"MinStorageLevelConstraint\": true\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Above_ground_storage\",\n                    \"transforms\": {\n                        \"electricity_consumption\": 0.018029457\n                    },\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"h2_SE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 0.0,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1\n                        },\n                        \"charge_edge\":{\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 3219.236569,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0\n                        },\n                        \"compressor_gas_edge\": {\n                            \"start_vertex\": \"h2_SE\"\n                        },\n                        \"compressor_elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        }\n                    },\n                    \"storage\":{\n                        \"investment_cost\": 873.013307,\n                        \"fixed_om_cost\":28.75810056,\n                        \"loss_fraction\": 0.0,\n                        \"min_storage_level\": 0.3\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Tutorials/2_multisector_modelling/#Exercise-2","page":"Multisector Modelling","title":"Exercise 2","text":"","category":"section"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Following the same steps taken in Tutorial 2, load the input files, generate Macro model, and solve it using the open-source solver HiGHS.","category":"page"},{"location":"Tutorials/2_multisector_modelling/#Solution-2","page":"Multisector Modelling","title":"Solution","text":"","category":"section"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"First, load the inputs:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"system = MacroEnergy.load_system(\"one_zone_multisector\");","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Then, generate the model:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"model = MacroEnergy.generate_model(system)","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Finally, solve it using the HiGHS solver:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"MacroEnergy.set_optimizer(model, HiGHS.Optimizer);\nMacroEnergy.optimize!(model)","category":"page"},{"location":"Tutorials/2_multisector_modelling/#Exercise-3","page":"Multisector Modelling","title":"Exercise 3","text":"","category":"section"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"As in Tutorial 2, print optimized capacity for each asset, the system total cost, and the total emissions. ","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"What do you observe?","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"To explain the results, plot both the electricity generation and hydrogen supply results as done in Tutorial 2 using VegaLite.jl.","category":"page"},{"location":"Tutorials/2_multisector_modelling/#Solution-3","page":"Multisector Modelling","title":"Solution","text":"","category":"section"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Optimized capacities are retrieved as follows:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"capacity_results = get_optimal_capacity(system)\nnew_capacity_results = get_optimal_new_capacity(system)\nretired_capacity_results = get_optimal_retired_capacity(system)","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Total system cost is:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"MacroEnergy.objective_value(model)","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Total textCO_2 emissions are:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"co2_node = MacroEnergy.get_nodes_sametype(system.locations, CO2)[1]\nMacroEnergy.value(sum(co2_node.operation_expr[:emissions]))","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Note that we have achieved lower costs and emissions when able to co-optimize capacity and operation of electricity and hydrogen sectors. In the following, we further investigate these","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"plot_time_interval = 3600:3624","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Here is the electricity generation profile:","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"natgas_power =  MacroEnergy.value.(MacroEnergy.flow(system.assets[4].elec_edge)).data[plot_time_interval]/1e3;\nsolar_power = MacroEnergy.value.(MacroEnergy.flow(system.assets[5].edge)).data[plot_time_interval]/1e3;\nwind_power = MacroEnergy.value.(MacroEnergy.flow(system.assets[6].edge)).data[plot_time_interval]/1e3;\n\nelec_gen =  DataFrame( hours = plot_time_interval, \n                solar_photovoltaic = solar_power,\n                wind_turbine = wind_power,\n                natural_gas_fired_combined_cycle = natgas_power,\n                )\n\nstack_elec_gen = stack(elec_gen, [:natural_gas_fired_combined_cycle,:wind_turbine,:solar_photovoltaic], variable_name=:resource, value_name=:generation);\n\nelc_plot = stack_elec_gen |> \n@vlplot(\n    :area,\n    x={:hours, title=\"Hours\"},\n    y={:generation, title=\"Electricity generation (GWh)\",stack=:zero},\n    color={\"resource:n\", scale={scheme=:category10}},\n    width=400,\n    height=300\n)","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"(Image: elec_generation)","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"During the day, when solar photovoltaic is available, almost all of the electricity generation comes from VREs.","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"Because hydrogen storage is cheaper than batteries, we expect the system to use the electricity generated during the day to operate the electrolyzers to meet the hydrogen demand, storing the excess hydrogen to be used when solar photovoltaics can not generate electricity.","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"We verify our assumption by making a stacked area plot of the hydrogen supply (hydrogen generation net of the hydrogen stored):","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"electrolyzer_idx = findfirst(isa.(system.assets,Electrolyzer).==1)\nh2stor_idx = findfirst(isa.(system.assets,GasStorage{Hydrogen}).==1)\n\nelectrolyzer_gen =  MacroEnergy.value.(MacroEnergy.flow(system.assets[electrolyzer_idx].h2_edge)).data[plot_time_interval]/1e3;\nh2stor_charge =  MacroEnergy.value.(MacroEnergy.flow(system.assets[h2stor_idx].charge_edge)).data[plot_time_interval]/1e3;\nh2stor_discharge = MacroEnergy.value.(MacroEnergy.flow(system.assets[h2stor_idx].discharge_edge)).data[plot_time_interval]/1e3;\n\nh2_gen = DataFrame( hours = plot_time_interval, \n                    electrolyzer = electrolyzer_gen - h2stor_charge,\n                    storage =  h2stor_discharge)\n\nstack_h2_gen = stack(h2_gen, [:electrolyzer, :storage], variable_name=:resource, value_name=:supply);\n\nh2plot = stack_h2_gen |> \n    @vlplot(\n        :area,\n        x={:hours, title=\"Hours\"},\n        y={:supply, title=\"Hydrogen supply (GWh)\",stack=:zero},\n        color={\"resource:n\", scale={scheme=:category20}},\n        width=400,\n        height=300\n    )","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"(Image: h2_generation)","category":"page"},{"location":"Tutorials/2_multisector_modelling/","page":"Multisector Modelling","title":"Multisector Modelling","text":"","category":"page"},{"location":"Guides/User Guide/1_sectors/#User-Guide","page":"User Guide","title":"User Guide","text":"","category":"section"},{"location":"Guides/User Guide/1_sectors/","page":"User Guide","title":"User Guide","text":"Macro version 0.1.0","category":"page"},{"location":"Guides/User Guide/1_sectors/#Introduction:-Energy-System-in-Macro","page":"User Guide","title":"Introduction: Energy System in Macro","text":"","category":"section"},{"location":"Guides/User Guide/1_sectors/","page":"User Guide","title":"User Guide","text":"The Macro model is designed to represent the energy system in a detailed manner, with various sectors and technologies interacting. Each sector is characterized by a commodity, a type of energy carrier. The current model includes the following sectors:","category":"page"},{"location":"Guides/User Guide/1_sectors/","page":"User Guide","title":"User Guide","text":"Electricity\nNatural Gas\nCO2 and CO2 Capture\nHydrogen\nCoal\nBiomass\nUranium","category":"page"},{"location":"Guides/User Guide/1_sectors/","page":"User Guide","title":"User Guide","text":"As seen in the High-level Macro Design, the energy system is modeled as a multi-plex network — a multi-layered network that connects different sectors, and the key components that this network are:","category":"page"},{"location":"Guides/User Guide/1_sectors/","page":"User Guide","title":"User Guide","text":"Locations: Represent geographical locations, each associated with a commodity type.\nDemand and supply nodes: Represent the demand or supply of a commodity at a specific location.\nAssets: Defined as a collection of edges and vertices. See Macro Asset Library for a list of all the assets available in Macro.","category":"page"},{"location":"Guides/User Guide/1_sectors/","page":"User Guide","title":"User Guide","text":"In the following sections, we will see how to define the energy system in Macro using the different input files, then we will see what are the different assets and constraints available in Macro, and finally we will see how to run the model and analyze the results.","category":"page"},{"location":"Guides/User Guide/1_sectors/","page":"User Guide","title":"User Guide","text":"","category":"page"},{"location":"Guides/User Guide/2_input_data/#Macro-Input-Data","page":"Macro Input Data","title":"Macro Input Data","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Macro version 0.1.0","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Macro input files are organized into three main directories:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Settings folder: Contains all the settings for the run and the solver.\nSystem folder: Contains all files related to the system, such as sectors, time resolution, nodes, demand, etc.\nAssets folder: Contains all the files that define the assets, such as transmission lines, power plants, storage units, etc.","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"In addition to these folders, the user should provide a system_data.json file that contains the paths to the input folders and files. ","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"As a result, the folder structure for a Macro case should be as follows:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"MacroCase\n│ \n├── 📁 settings\n│   └── macro_settings.yml      \n│ \n├── 📁 system\n│   ├── commodities.json \n│   ├── time_data.json\n│   ├── nodes.json\n│   ├── demand.csv\n│   └── fuel_prices.csv\n│ \n├── 📁 assets\n│   ├──battery.json\n│   ├──electrolyzers.json\n│   ├──fuel_prices.csv\n│   ├──fuelcell.json\n│   ├──h2storage.json\n│   ├──power_lines.json\n│   ├──thermal_h2.json\n│   ├──thermal_power.json\n│   ├──vre.json\n| [...other asset types...]\n│   └──availability.csv\n│ \n└── system_data.json","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"note: Units in Macro\nMacro is agnostic to the units of the input data. Special attention should be paid to the units of the transformation parameters (e.g., conversion efficiency, fuel-to-energy production, etc.). It is the user's responsibility to ensure that the units are consistent across the system input data.The following table shows the default units of the input data that are used, for instance, in the example system provided with the package:Sector/Quantity Units\nElectricity MWh\nHydrogen MWh\nNaturalGas MWh\nUranium MWh\nCoal MWh\nCO2 ton\nCO2Captured ton\nBiomass ton\nTime hours\nPrice USDCommodities that require only an energy representation (e.g., Hydrogen) have units of MWh. Commodities that require a physical representation (e.g., Biomass, where regional supply curve is important) have units of metric tonnes. The recommended convention is MWh on a higher heating value basis for transformations where hydrogen is involved, and tonnes on a dry basis for transformations where biomass is involved.","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"warning: Comments in JSON files\nThe comments (e.g. //) in the JSON file examples are for illustrative purposes only. They should be removed before using these lines as input, as JSON does not support comments.","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"In the following section, we will go through each folder and file in detail.","category":"page"},{"location":"Guides/User Guide/2_input_data/#Settings-folder","page":"Macro Input Data","title":"Settings folder","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"The settings folder currently contains only one file, macro_settings.yml, which contains the settings for the run.","category":"page"},{"location":"Guides/User Guide/2_input_data/#macro_settings.json","page":"Macro Input Data","title":"macro_settings.json","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Format: JSON","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Attribute Values Default Description\nConstraintScaling True, False False If true, the model will scale the optimization model constraints to make it more numerically stable.\nWriteSubcommodities True, False False If true, the model will write the subcommodities created by the user in the results.\nOverwriteResults True, False False If true, the model will overwrite the results file if it already exists.\nOutputDir String \"results\" The directory where the results will be saved.","category":"page"},{"location":"Guides/User Guide/2_input_data/#System-folder","page":"Macro Input Data","title":"System folder","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"The system folder currently contains five main files:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"commodities.json: Defines the sectors/commodities used in the system.\ntime_data.json: Defines the time resolution data for each sector.\nnodes.json: Defines the nodes in the system.\ndemand.csv: Contains the demand data.\nfuel_prices.csv: Contains the prices of fuels.","category":"page"},{"location":"Guides/User Guide/2_input_data/#commodities.json","page":"Macro Input Data","title":"commodities.json","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Format: JSON","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"This file contains a list of sectors/commodities used in the system. The file is a list of string for each sector/commodity:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"{\n    \"commodities\": [\n        \"Sector_1\",\n        \"Sector_2\",\n        ...\n    ]\n}","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Example: Energy system with electricity, hydrogen, natural gas, CO2, uranium, and coal sectors:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"{\n    \"commodities\": [\n        \"Electricity\",\n        \"Hydrogen\",\n        \"NaturalGas\",\n        \"CO2\", \n        \"Uranium\",\n        \"Coal\"\n    ]\n}","category":"page"},{"location":"Guides/User Guide/2_input_data/#time_data.json","page":"Macro Input Data","title":"time_data.json","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Format: JSON","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"This file contains the data related to the time resolution for each sector. The file is structured as follows:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"{\n    \"PeriodLength\": <Integer>,  // units: hours\n    \"HoursPerTimeStep\": {\n        \"Sector_1\": <Integer>,  // units: hours\n        \"Sector_2\": <Integer>,  // units: hours\n        ...\n    },\n    \"HoursPerSubperiod\": {\n        \"Sector_1\": <Integer>,\n        \"Sector_2\": <Integer>,\n        ...\n    },\n    \"SubPeriodMap\": {\n        \"path\": <String>, // relative path to the period map file\n    },\n    \"TotalHoursModeled\": <Integer> // units: hours\n}","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Attribute Values Description\nPeriodLength Integer Total number of hours in the simulation.\nHoursPerTimeStep Integer Number of hours in each time step for each sector.\nHoursPerSubperiod Integer Number of hours in each subperiod for each sector.\nSubPeriodMap String Relative path to the period map file. For an example of the period map file, see Period_map.csv.\nTotalHoursModeled Integer Total number of hours modeled. Note: When using representative periods, this parameter is used to compute the weight of each subperiod.","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"note: Subperiods\nSubperiods represent the time slices of the simulation used to perform time wrapping for time-coupling constraints (see, for example, MacroEnergy.timestepbefore).","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Example: Energy system modeled for three weeks, with one hour per time step, and one week per subperiod:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"{\n    \"PeriodLength\": 504,  // 3 weeks\n    \"HoursPerTimeStep\": {\n        \"Electricity\": 1,\n        \"Hydrogen\": 1,\n        \"NaturalGas\": 1,\n        \"CO2\": 1,\n        \"Uranium\": 1,\n        \"Coal\": 1\n    },\n    \"HoursPerSubperiod\": {\n        \"Electricity\": 168,  // 1 week\n        \"Hydrogen\": 168,\n        \"NaturalGas\": 168,\n        \"CO2\": 168,\n        \"Uranium\": 168,\n        \"Coal\": 168\n    },\n    \"SubPeriodMap\": {\n        \"path\": \"three_weeks/Period_map.csv\"\n    },\n    \"TotalHoursModeled\": 8760\n}","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Period_map.csv:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"| Period_Index | Rep_Period | Rep_Period_Index |\n|--------------|------------|------------------|\n| 1            | 6          | 1                |\n| 2            | 6          | 1                |\n| 3            | 6          | 1                |\n| 4            | 6          | 1                |\n| 5            | 6          | 1                |\n| 6            | 6          | 1                |\n| 7            | 6          | 1                |\n| 8            | 6          | 1                |\n| 9            | 6          | 1                |\n| 10           | 17         | 2                |\n| ...          | ...        | ...              |","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"In this example, Macro uses the above input files to create the following parameters:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Total time interval: [1:PeriodLength] = [1:504]\nHoursPerTimeStep: 1 for all sectors\nSubperiods:\n[1:168]: first week\n[169:336]: second week\n[337:504]: third week\nPeriod map:    This file assigns each week of the TotalHoursModeled to one of the representative periods.    For instance: \nweek 1 -> 6th representative period\nweek 2 -> 6th representative period\nweek 3 -> 6th representative period\nweek 10 -> 17th representative period\netc.\nWeight of each subperiod: \n[1:168] -> 18.0495\n[169:336] -> 21.0577\n[337:504] -> 13.0357\nThis value is used to 'weight' each hour of the subperiods in the operational model.","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"The formula used to compute the weight of each subperiod is:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"w_i = alpha * n_i","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"where alpha is a scaling factor defined as:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"alpha = fracTotalHoursModeledsum_i=1^N HoursPerSubperiod * n_i","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"and n_i is the number of times the i-th representative period is used in the period map to model periods, and N is the total number of representative periods.","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"note: Weights without period map\nIf the period map is not provided, the weights are set to 1 for each representative period.","category":"page"},{"location":"Guides/User Guide/2_input_data/#nodes.json","page":"Macro Input Data","title":"nodes.json","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Format: JSON","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"This file defines the regions/nodes for each sector. It is structured as a list of dictionaries, where each dictionary defines a network for a given sector. ","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Each dictionary has three main attributes:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"type: The type of the network (e.g. \"NaturalGas\", \"Electricity\", etc.).\nglobal_data: attributes that are the same for all the nodes in the network.\ninstance_data: attributes that are different for each node in the network.","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"This structure for the network has the advantage of grouping the common attributes for all the nodes in a single place, avoiding to repeat the same attribute for all the nodes.","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"This is the structure of the nodes.json file:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"{\n    \"nodes\": [\n        {\n            \"type\": \"NaturalGas\", // NaturalGas network\n            \"global_data\": {},    // attributes that are the same for all the nodes in the network\n            \"instance_data\": [\n                // NaturalGas node 1 ...\n                // NaturalGas node 2 ...\n                // ...\n            ]\n        },\n        {\n            \"type\": \"Electricity\", // Electricity network\n            \"global_data\": {},     // attributes that are the same for all the nodes in the network\n            \"instance_data\": [\n                // Electricity node 1 ...\n                // Electricity node 2 ...\n                // ...\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"The attributes that can be set for each node (either in global_data or instance_data) are the following:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Attribute Type Values Default Description\nid String String Required Unique identifier for the node. E.g. \"elec_node_1\".\ntype String Any Macro commodity type Required Commodity type. E.g. \"Electricity\".\ntime_interval String Any Macro commodity type Required Time resolution for the time series data linked to the node. E.g. \"Electricity\".\nconstraints Dict{String,Bool} Any Macro constraint type Empty List of constraints applied to the node. E.g. {\"BalanceConstraint\": true, \"MaxNonServedDemandConstraint\": true}.\ndemand Dict Demand file path and header Empty Path to the demand file and column name for the demand time series to link to the node. E.g. {\"timeseries\": {\"path\": \"system/demand.csv\", \"header\": \"Demand_MW_z1\"}}.\nmax_nsd Vector{Float64} Vector of numbers in [0,1] [0.0] Maximum allowed non-served demand for each demand segment as a fraction of the total demand. E.g. [1.0] for a single segment.\nmax_supply Vector{Float64} Vector of numbers [0.0] Maximum allowed supply for each supply segment. E.g. [1000.0] for a single segment.\nprice Dict Price file path and header Empty Path to the price file and column name for the price time series to link to the node. E.g. {\"timeseries\": {\"path\": \"system/fuel_prices.csv\", \"header\": \"natgas_SE\"}}.\nprice_nsd Vector{Float64} Vector of numbers [0.0] Price/penalty for non-served demand by segment. E.g. [5000.0] for a single segment.\nprice_supply Vector{Float64} Vector of numbers [0.0] Piecewise linear price for supply curves. E.g. [0.0, 100.0, 200.0].\nprice_unmet_policy Dict{DataType,Float64} Dict of Macro policy types and numbers Empty Price/penalty for unmet policy constraints.\nrhs_policy Dict{DataType,Float64} Dict of Macro constraint types and numbers Empty Right hand side of the policy constraints. E.g. {\"CO2CapConstraint\": 200}, carbon price of 200 USD/ton.","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"tip: Constraints\nOne of the main features of Macro is the ability to include constraints on the system from a pre-defined library of constraints (see Macro Constraint Library for more details). To include a constraint to a node, the user needs to add the constraint name to the constraints attribute of the node. The example below will show how to include constraints to node instances. ","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Example: the following is an example of a nodes.json file with both electricity, natural gas, CO2 and biomass sectors covering most of the attributes present above. The (multiplex)-network in the system is made of the following sub-networks:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"NaturalGas (three nodes)\nnatgas_SE\nnatgas_MIDAT\nnatgas_NE\nElectricity (three nodes)\nelec_SE\nelec_MIDAT\nelec_NE\nCO2 (one node)\nco2_sink\nBiomass (one node)\nbioherb_SE","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Therefore, the system has 4 networks and 8 nodes in total.","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"{\n    \"nodes\": [\n        {\n            \"type\": \"NaturalGas\",\n            \"global_data\": {\n                \"time_interval\": \"NaturalGas\" // time resolution as defined in the time_data.json file\n            },\n            \"instance_data\": [\n                {   // NaturalGas node 1\n                    \"id\": \"natgas_SE\",\n                    \"price\": {\n                        \"timeseries\": {\n                            \"path\": \"system/fuel_prices.csv\", // path to the price file\n                            \"header\": \"natgas_SE\" // column name in the price file for the price time series\n                        }\n                    }\n                },  // End of NaturalGas node 1\n                {   // NaturalGas node 2\n                    \"id\": \"natgas_MIDAT\",\n                    \"price\": {\n                        \"timeseries\": {\n                            \"path\": \"system/fuel_prices.csv\",\n                            \"header\": \"natgas_MIDAT\"\n                        }\n                    }\n                },  // End of NaturalGas node 2\n                {   // NaturalGas node 3\n                    \"id\": \"natgas_NE\",\n                    \"price\": {\n                        \"timeseries\": {\n                            \"path\": \"system/fuel_prices.csv\",\n                            \"header\": \"natgas_NE\"\n                        }\n                    }\n                },  // End of NaturalGas node 3\n            ]\n        },\n        {\n            \"type\": \"Electricity\",\n            \"global_data\": {\n                \"time_interval\": \"Electricity\",\n                \"max_nsd\": [  // maximum allowed non-served demand for each demand segment as a fraction of the total demand\n                    1\n                ],\n                \"price_nsd\": [  // price/penalty for non-served demand by segment\n                    5000.0\n                ],\n                \"constraints\": {    // constraints applied to the nodes\n                    \"BalanceConstraint\": true,\n                    \"MaxNonServedDemandConstraint\": true,\n                    \"MaxNonServedDemandPerSegmentConstraint\": true\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"elec_SE\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\", // path to the demand file\n                            \"header\": \"Demand_MW_z1\" // column name in the demand file for the demand time series\n                        }\n                    }\n                },\n                {\n                    \"id\": \"elec_MIDAT\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\",\n                            \"header\": \"Demand_MW_z2\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"elec_NE\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\",\n                            \"header\": \"Demand_MW_z3\"\n                        }\n                    }\n                }\n            ]\n        },\n        {\n            \"type\": \"CO2\",\n            \"global_data\": {\n                \"time_interval\": \"CO2\"\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"co2_sink\",\n                    \"constraints\": {\n                        \"CO2CapConstraint\": true\n                    },\n                    \"rhs_policy\": {  // right hand side of the policy constraints\n                        \"CO2CapConstraint\": 0\n                    },\n                    \"price_unmet_policy\": {  // price/penalty for unmet policy constraints\n                        \"CO2CapConstraint\": 250.0\n                    }\n                }\n            ]\n        },\n        {\n            \"type\": \"Biomass\",\n            \"global_data\": {\n                \"time_interval\": \"Biomass\",\n                \"constraints\": {\n                    \"BalanceConstraint\": true\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"bioherb_SE\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\",\n                            \"header\": \"Demand_Zero\"\n                        }\n                    },\n                    \"max_supply\": [  // maximum allowed supply for each supply segment\n                        10000,\n                        20000,\n                        30000\n                    ],\n                    \"price_supply\": [  // piecewise linear price for supply curves\n                        40,\n                        60,\n                        80\n                    ]\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"In this example, BalanceConstraint, MaxNonServedDemandConstraint, and MaxNonServedDemandPerSegmentConstraint are applied to all the nodes in the electricity network. In particular, the MaxNonServedDemandConstraint limits the maximum amount of demand that can be unmet in a given time step, and the MaxNonServedDemandPerSegmentConstraint limits the maximum amount of demand that can be unmet in each demand segment. In addition, the CO2CapConstraint is applied to the textCO_2 node to model a greenfield scenario with a carbon price of 250 USD/ton.","category":"page"},{"location":"Guides/User Guide/2_input_data/#demand.csv","page":"Macro Input Data","title":"demand.csv","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Format: CSV","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"This file contains the demand data for each region/node. ","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"First column: Time step.\nRemaining columns: Demand for each region/node (units: MWh).","category":"page"},{"location":"Guides/User Guide/2_input_data/#Example:","page":"Macro Input Data","title":"Example:","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"TimeStep DemandMWz1 DemandMWz2 DemandMWz3\n1 100 200 300\n2 110 210 310\n... ... ... ...","category":"page"},{"location":"Guides/User Guide/2_input_data/#fuel_prices.csv","page":"Macro Input Data","title":"fuel_prices.csv","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Format: CSV","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"This file contains the prices for each fuel for each region/node.","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"First column: Time step.\nRemaining columns: Prices for each region/node (units: USD/MWh).","category":"page"},{"location":"Guides/User Guide/2_input_data/#Example:-2","page":"Macro Input Data","title":"Example:","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"TimeStep natgas_SE natgas_MIDAT natgas_NE\n1 100 110 120\n2 110 120 130\n... ... ... ...","category":"page"},{"location":"Guides/User Guide/2_input_data/#Assets-folder","page":"Macro Input Data","title":"Assets folder","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"The assets folder contains all the files that define the resources and technologies that are included in the system. As a general rule, each asset type has its own file, where each file is structured in a similar way to the nodes.json file. ","category":"page"},{"location":"Guides/User Guide/2_input_data/#Asset-files","page":"Macro Input Data","title":"Asset files","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Format: JSON","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Similar to the nodes.json file, each asset file has the following three main parameters:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"type: The type of the asset (e.g. \"Battery\", \"FuelCell\", \"PowerLine\", etc.).\nglobal_data: attributes that are the same for all the assets of the same type (e.g., unit commitment constraints applied to all the power plants).\ninstance_data: attributes that are different for each asset of the same type (e.g., investment costs, lifetime, etc.).","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Depending on the graph structure of the asset, both global_data and instance_data can have different attributes, one for each transformation, edge, and storage present in the asset. ","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"tip: Example: natural gas power plant\nFor example, a natural gas combined cycle power plant is represented by an asset made of: 1 transformation (combustion and electricity generation)\n3 edges \nnatural gas flow\nelectricity flow\nCO2 flowThen, both global_data and instance_data will have the following structure:{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"fuel_edge\": {\n            // ... fuel_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"In the following sections, we will go through each asset type and show the attributes that can be set for each of them. Each section will contain the following three parts:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Graph structure: a graphical representation of the asset, showing the transformations, edges, and storages present in the asset.\nAttributes: a table with the attributes that can be set for each asset type.\nExample: an example of the asset type file (.json).","category":"page"},{"location":"Guides/User Guide/2_input_data/#system_data.json","page":"Macro Input Data","title":"system_data.json","text":"","category":"section"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"Format: JSON","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"This file contains the paths to the input folders and files, and is structured as follows:","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"{\n    \"commodities\": {\n        \"path\": \"system/commodities.json\"\n    },\n    \"locations\": {\n        \"path\": \"locations\"\n    },\n    \"settings\": {\n        \"path\": \"settings/macro_settings.json\"\n    },\n    \"assets\": {\n        \"path\": \"assets\"\n    },\n    \"time_data\": {\n        \"path\": \"system/time_data.json\"\n    },\n    \"nodes\": {\n        \"path\": \"system/nodes.json\"\n    }\n}","category":"page"},{"location":"Guides/User Guide/2_input_data/","page":"Macro Input Data","title":"Macro Input Data","text":"","category":"page"},{"location":"Getting Started/3_first_run/#Running-Macro","page":"First Run","title":"Running Macro","text":"","category":"section"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"Once Macro is installed, the simplest way to get started is to run the example system provided in the ExampleSystems folder. It is a system with 3 zones in the eastern US, with the following sectors:","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"Electricity\nNatural Gas\nCO2\nHydrogen\nBiomass\nUranium\nCarbon Capture","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"tip: Macro Input Data Description\nThe section Macro Input Data in the User Guide provides a detailed description of all the input files present in the example folder.","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"To run the example, navigate to the MacroEnergy.jl folder and execute the run.jl file present in the example folder. On a Unix-based machine, this will look like:","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"julia --project=. ExampleSystems/eastern_us_three_zones/run.jl","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"On Windows, it will be:","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"julia --project=. ExampleSystems\\eastern_us_three_zones\\run.jl","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"This will use Macro to solve the example system and save the results in the results directory. By default, Macro writes three files:","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"capacity.csv: a csv file containing the capacity results for each asset (final, newly installed, and retired capacity for each technology).\ncosts.csv: a csv file containing fixed, variable and total costs for the energy system.\nflow.csv: a csv file containing the flow results for each commodity through each edge.","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"Congratulations, you just ran your first Macro model! 🎉","category":"page"},{"location":"Getting Started/3_first_run/#Running-Macro-with-user-defined-cases","page":"First Run","title":"Running Macro with user-defined cases","text":"","category":"section"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"To run Macro with a user-defined case, you need to create a folder MyCase with a minimum of the following structure (customized cases can have additional files and folders (refer to the example cases, for specific details)):","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"MyCase\n├── assets/\n├── settings/\n├── system/\n├── run.jl\n├── run_HiGHS.jl\n├── run_with_env.jl\n└── system_data.json","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"where the assets folder consists of the details of the configurations of the different resources modeled as assets within Macro (e.g. the location of the nodes, edges, types of resources, such as BECCS, electrolyzers, hydrostorage units etc.). The settings folder contains the configuration files for the constraint scaling and writing subcommodities, the system folder contains the .csv and .json input files related to timeseries data and the system under study.","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"For instance, one case could have the following structure:","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"MyCase\n│ \n├── settings\n│   └── macro_settings.yml           # Macro settings\n│ \n├── system\n│   ├── Period_map.csv\n│   ├──availability.csv\n│   ├──commodities.json\n│   ├──demand fuel.csv\n│   ├──demand nofuel.csv\n│   ├──demand.csv\n│   ├──fuel_prices.csv\n│   ├──nodes.csv\n│   ├──nodes.json\n│   └──time_data.json\n│ \n├── assets\n│   ├──beccs_electricity.json\n│   ├──beccs_gasoline.json\n│   ├──beccs_hydrogen.json\n│   ├──beccs_liquid_fuels.json\n│   ├──beccs_naturalgas.json\n│   ├──co2_injection.json\n│   ├──electricdac.json\n│   ├──electricity_stor.json\n│   ├──electrolyzer.json\n│   ├──h2gas_power_ccgt.json\n│   ├──h2gas_power_ocgt.json\n│   ├──h2pipelines.json\n│   ├──h2storage.json\n│   ├──hydropower.json\n│   ├──liquid_fuels_end_use.json\n│   ├──liquid_fuels_fossil_upstream.json\n│   ├──mustrun.json\n│   ├──natgasdac.json\n│   ├──naturalgas_end_use.json\n│   ├──naturalgas_fossil_upstream.json\n│   ├──naturalgas_h2.json\n│   ├──naturalgas_h2_ccs.json\n│   ├──naturalgas_power.json\n│   ├──naturalgas_power_ccs.json\n│   ├──nuclear_power.json\n│   ├──powerlines.json\n│   ├──synthetic_liquid_fuels.json\n│   ├──synthetic_naturalgas.json\n│   └──vre.json\n├── run.jl\n├── run_HiGHS.jl\n├── run_with_env.jl\n└── system_data.json","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"In this example, MyCase will define a case with assets like  beccs_electricity, electrolyzer, naturalgas_power etc. resources, the system folder will provide the data for the demand, fuel prices, network etc., and the settings folder will contain the configuration files for the model.","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"The run_HiGHS.jl file should contain the following code:","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"using MacroEnergy\n\n(system, model) = run_case(@__DIR__);","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"which will run the case using the HiGHS solver. To use a different solver, you can pass the Optimizer object as an argument to run_case! function. For example, to use Gurobi as the solver, you can use the following code (which is what the run.jl has):","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"using MacroEnergy\nusing Gurobi\n\n(system, model) = run_case(@__DIR__; optimizer=Gurobi.Optimizer);","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"To run the case, open a terminal and run the following command:","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"$ julia --project=\"/path/to/env\"\njulia> include(\"/path/to/MyCase/run.jl\")","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"where /path/to/env is the path to the environment with Macro installed, and /path/to/MyCase is the path to the folder of the MyCase case. Alternatively, you can run the case directly from the terminal using the following command:","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"$ julia --project=\"/path/to/env\" /path/to/MyCase/run.jl","category":"page"},{"location":"Getting Started/3_first_run/","page":"First Run","title":"First Run","text":"","category":"page"},{"location":"Manual/assets/electrolyzer/#Electrolyzer","page":"Electrolyzer","title":"Electrolyzer","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/#Graph-structure","page":"Electrolyzer","title":"Graph structure","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"An electrolyzer asset is represented in Macro using the following graph structure:","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"<img width=\"400\" src=\"../../images/electrolyzer.png\" />","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"An electrolyzer asset is made of:","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"1 Transformation component, representing the electrolysis process.\n2 Edge components:\n1 incoming Electricity Edge, representing the electricity consumption.\n1 outgoing Hydrogen Edge, representing the hydrogen production.","category":"page"},{"location":"Manual/assets/electrolyzer/#Attributes","page":"Electrolyzer","title":"Attributes","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"The structure of the input file for an electrolyzer asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"h2_edge\": {\n            // ... co2_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/electrolyzer/#Transformation","page":"Electrolyzer","title":"Transformation","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"The definition of the transformation object can be found here MacroEnergy.Transformation.","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Attribute Type Values Default Description/Units\ntimedata String String Required Time resolution for the time series data linked to the transformation. E.g. \"Hydrogen\".\nconstraints Dict{String,Bool} Any Macro constraint type for vertices BalanceConstraint List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\nefficiency_rate epsilon_efficiency Float64 Float64 1.0 MWh_h2MWh_elec","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"tip: Default constraints\nThe default constraint for the transformation part of the electrolyzer asset is the following:Balance constraint","category":"page"},{"location":"Manual/assets/electrolyzer/#Flow-equations","page":"Electrolyzer","title":"Flow equations","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"note: Electrolyzer\nbeginaligned\nphi_h2 = phi_elec cdot epsilon_efficiency \nendaligned","category":"page"},{"location":"Manual/assets/electrolyzer/#Edges","page":"Electrolyzer","title":"Edges","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Both the electricity and hydrogen edges are represented by the same set of attributes. The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"Attribute Type Values Default Description\ntype String Any Macro commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges Check box below List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"assets/availability.csv\", \"header\": \"SE_Electrolyzer\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool false Whether the edge is unidirectional.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"tip: Default constraints\nThe only default constraint for the edges of the electrolyzer asset is the Capacity constraint applied to the hydrogen edge. ","category":"page"},{"location":"Manual/assets/electrolyzer/#Example","page":"Electrolyzer","title":"Example","text":"","category":"section"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"The following is an example of the input file for an electrolyzer asset that creates three electrolyzers, each for each of the SE, MIDAT and NE regions.","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"{\n    \"electrolyzer\": [\n        {\n            \"type\": \"Electrolyzer\",\n            \"global_data\": {\n                \"nodes\": {},\n                \"transforms\": {\n                    \"timedata\": \"Electricity\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"h2_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_retire\": true,\n                        \"can_expand\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true,\n                            \"MinFlowConstraint\": true\n                        }\n                    },\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Electrolyzer\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.875111139\n                    },\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_SE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 41112.53426,\n                            \"fixed_om_cost\": 1052.480877,\n                            \"variable_om_cost\": 0.0,\n                            \"capacity_size\": 1.5752,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.1\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_Electrolyzer\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.875111139\n                    },\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_MIDAT\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 41112.53426,\n                            \"fixed_om_cost\": 1052.480877,\n                            \"variable_om_cost\": 0.0,\n                            \"capacity_size\": 1.5752,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.1\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_Electrolyzer\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.875111139\n                    },\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_NE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_NE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 41112.53426,\n                            \"fixed_om_cost\": 1052.480877,\n                            \"variable_om_cost\": 0.0,\n                            \"capacity_size\": 1.5752,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.1\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/electrolyzer/","page":"Electrolyzer","title":"Electrolyzer","text":"","category":"page"},{"location":"Guides/User Guide/user_asset_constraints/#Adding-Asset-Constraints-to-a-System","page":"Adding Assets constraints","title":"Adding Asset Constraints to a System","text":"","category":"section"},{"location":"Guides/User Guide/user_asset_constraints/","page":"Adding Assets constraints","title":"Adding Assets constraints","text":"","category":"page"},{"location":"Guides/User Guide/user_add_node/#Adding-a-Node-to-a-System","page":"Adding Nodes","title":"Adding a Node to a System","text":"","category":"section"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"Adding a new Node to a System requires a few steps:","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"Add the new Node to the Nodes file\nGive the Node a unique ID\nAdd data and constraints\n(optionally) Add the Node to a Location","category":"page"},{"location":"Guides/User Guide/user_add_node/#Adding-the-Node-to-the-Nodes-file","page":"Adding Nodes","title":"Adding the Node to the Nodes file","text":"","category":"section"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"The Nodes file is a JSON file containing an array of Nodes. Single Nodes should be defined by their Commodity (in the \"type\" field) and instance data. Nodes of the same Commodity with shared attributes can be described using global data.","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"As an example, this Node file (at system/nodes.json, by default) describes a Hydrogen Node, and three Electricity Nodes. The three Electricity Nodes have the same non-served demand (NSD) constraints and prices, so those elements are moved to the global data field to reduce duplicate data.","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"{\"nodes\": [\n    {\n        \"type\": \"Hydrogen\",\n        \"instance_data\": {\n            \"id\": \"single_h2_node\",\n            \"time_interval\": \"Hydrogen\",\n            \"location\": \"SE\",\n            \"demand\": {\n                \"timeseries\": {\n                    \"path\": \"system/demand.csv\",\n                    \"header\": \"H2_demand_se\"\n                }\n            }\n        }\n    },\n    {\n        \"type\": \"Electricity\",\n        \"global_data\": {\n            \"time_interval\": \"Electricity\",\n            \"max_nsd\": [\n                1\n            ],\n            \"price_nsd\": [\n                5000.0\n            ],\n            \"constraints\": {\n                \"BalanceConstraint\": true,\n                \"MaxNonServedDemandConstraint\": true,\n                \"MaxNonServedDemandPerSegmentConstraint\": true\n            }\n        },\n        \"instance_data\": [\n            {\n                \"id\": \"elec_SE\",\n                \"location\": \"SE\",\n                \"demand\": {\n                    \"timeseries\": {\n                        \"path\": \"system/demand.csv\",\n                        \"header\": \"Demand_MW_z1\"\n                    }\n                }\n            },\n            {\n                \"id\": \"elec_MIDAT\",\n                \"location\": \"MIDAT\",\n                \"demand\": {\n                    \"timeseries\": {\n                        \"path\": \"system/demand.csv\",\n                        \"header\": \"Demand_MW_z2\"\n                    }\n                }\n            },\n            {\n                \"id\": \"elec_NE\",\n                \"location\": \"NE\",\n                \"demand\": {\n                    \"timeseries\": {\n                        \"path\": \"system/demand.csv\",\n                        \"header\": \"Demand_MW_z3\"\n                    }\n                }\n            }\n        ]\n    }\n]}","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"The most straightforward way of adding a new Node is to use the template functions.","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"You can add one or more Node by providing the Nodes file as an argument:","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"julia> template_location(\"ExampleSystems/template_example/system/nodes.json\", Electricity)\njulia> template_location(\"ExampleSystems/template_example/system/nodes.json\", [Electricity, Hydrogen])","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"Or by providing the associated System:","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"julia> template_location(system, [Electricity, Hydrogen])","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"You can learn how to create or load the System here.","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"Each new Node will be added to the end of the existing Nodes in the Nodes file. For example, adding a new Hydrogen Node to the previous Nodes file will result in:","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"{\n    \"nodes\": [\n        {\n            \"type\": \"Hydrogen\",\n            \"instance_data\": {\n                \"location\": \"SE\",\n                \"id\": \"single_h2_node\",\n                \"demand\": {\n                    \"timeseries\": {\n                        \"path\": \"system/demand.csv\",\n                        \"header\": \"H2_demand_se\"\n                    }\n                },\n                \"time_interval\": \"Hydrogen\"\n            }\n        },\n        {\n            \"global_data\": {\n                \"constraints\": {\n                    \"MaxNonServedDemandPerSegmentConstraint\": true,\n                    \"MaxNonServedDemandConstraint\": true,\n                    \"BalanceConstraint\": true\n                },\n                \"max_nsd\": [\n                    1\n                ],\n                \"price_nsd\": [\n                    5000\n                ],\n                \"time_interval\": \"Electricity\"\n            },\n            \"type\": \"Electricity\",\n            \"instance_data\": [\n                {\n                    \"location\": \"SE\",\n                    \"id\": \"elec_SE\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\",\n                            \"header\": \"Demand_MW_z1\"\n                        }\n                    }\n                },\n                {\n                    \"location\": \"MIDAT\",\n                    \"id\": \"elec_MIDAT\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\",\n                            \"header\": \"Demand_MW_z2\"\n                        }\n                    }\n                },\n                {\n                    \"location\": \"NE\",\n                    \"id\": \"elec_NE\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\",\n                            \"header\": \"Demand_MW_z3\"\n                        }\n                    }\n                }\n            ]\n        },\n        {\n            \"type\": \"Hydrogen\",\n            \"instance_data\": [\n                {\n                    \"location\": null,\n                    \"min_nsd\": [\n                        0\n                    ],\n                    \"timedata\": null,\n                    \"max_nsd\": [\n                        0\n                    ],\n                    \"price\": [\n                    ],\n                    \"price_nsd\": [\n                        0\n                    ],\n                    \"max_supply\": [\n                        0\n                    ],\n                    \"price_supply\": [\n                        0\n                    ],\n                    \"price_unmet_policy\": {\n                    },\n                    \"constraints\": {\n                    },\n                    \"rhs_policy\": {\n                    },\n                    \"id\": null,\n                    \"demand\": [\n                    ]\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"Macro will add all default fields to the new Node. Details on each of these fields can be found here. Most fields can be deleted if you do not want to assign a non-default value. The only field which should not be deleted is the \"id\" field.","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"In the future we will add features to allow several Nodes of the same Commodity to be added at once with global data, as well as tools to automatically group Nodes with the same parameters.","category":"page"},{"location":"Guides/User Guide/user_add_node/#Giving-a-Node-an-ID","page":"Adding Nodes","title":"Giving a Node an ID","text":"","category":"section"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"Each Node must have a unique ID. This can be assigned by entering a name / identifier as a string in the Nodes file (system/nodes.json, by default).","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"Macro does not currently have a way to check if an ID is already in use. This is something we are investigating as a future feature. In the meantime, we recommend using your code editors search features to see if a preferred ID is already in use.","category":"page"},{"location":"Guides/User Guide/user_add_node/#Adding-data-and-constraints","page":"Adding Nodes","title":"Adding data and constraints","text":"","category":"section"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"You should parameterize your new Node by adding data and constraints to the relevant fields of the JSON file.","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"Details on the Node fields can be found in the Nodes page of the manual.","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"Details on adding timeseries data can be found here.","category":"page"},{"location":"Guides/User Guide/user_add_node/#Assing-the-Node-to-a-Location","page":"Adding Nodes","title":"Assing the Node to a Location","text":"","category":"section"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"It is recommended to add Nodes to a Location whenever the design of your System allows. This will allow you to use several features which simplify the process of connecting a Node to Assets and other Nodes.","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"To assign a Node to a Location, input the Location name as a string in the \"location\" field of the Node.","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"Adding a Location to a System details how to add new Locations.","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"In the future, we will add additional features to allow Locations and their constituent Nodes to be added with one template function call.","category":"page"},{"location":"Guides/User Guide/user_add_node/","page":"Adding Nodes","title":"Adding Nodes","text":"","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/#Adding-Policy-Constraints-to-a-System","page":"Adding Policy constraints","title":"Adding Policy Constraints to a System","text":"","category":"section"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"Currently, Macro supports two types of policy constraints:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"CO₂ cap constraint\nCO₂ storage annual constraint","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"The units of both constraints are determined by the stoichiometric balances used in assets with CO₂ emissions or injection to a CO₂ capture node.","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"The following sections describe the steps to add these constraints to a system:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"Adding a CO₂ cap constraint\nAdding a CO₂ storage annual constraint","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"note: Nodes file\nTo add a policy constraint to a node, the user needs to edit the nodes file in the system (typically located at system/nodes.json). For more information about the nodes file, please refer to the Adding a Node to a System page.","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/#Adding-a-CO-cap-constraint","page":"Adding Policy constraints","title":"Adding a CO₂ cap constraint","text":"","category":"section"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"To add a CO₂ cap constraint to a CO₂ node in a system, the user needs to:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"1. Activate the constraint by setting CO2CapConstraint to true in the constraints field of a node of type CO2 in the nodes file:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"{\n    \"constraints\": {\n        \"CO2CapConstraint\": true\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"2. Set the CO₂ cap value using the CO2CapConstraint key in the rhs_policy field:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"{\n    \"rhs_policy\": {\n        \"CO2CapConstraint\": 0   // e.g. zero emissions\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"3. (Optional) Add a carbon price penalty using the price_unmet_policy field:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"{\n    \"price_unmet_policy\": {\n        \"CO2CapConstraint\": 200  // e.g. 200 USD/tonne penalty cost\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"As a result, to add a CO₂ cap constraint to a CO2 node in a system, the nodes file should have a CO2 node with the following structure:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"{\n    \"type\": \"CO2\",\n    \"instance_data\": [\n        {\n            \"id\": \"co2_sink\",\n            \"constraints\": {\n                \"CO2CapConstraint\": true\n            },\n            \"rhs_policy\": {\n                \"CO2CapConstraint\": 0\n            },\n            \"price_unmet_policy\": {\n                \"CO2CapConstraint\": 200\n            }\n        },\n        // other CO2 nodes\n    ],\n    \"global_data\": {\n        // other attributes\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"4. Link the CO₂ node's id to the co2_sink key of assets in the system that have CO₂ emissions to track their CO₂ output:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"{\n    \"type\": \"ThermalPower\",\n    \"instance_data\": [\n        {\n            \"co2_sink\": \"co2_sink\",\n            // other attributes\n        }\n    ],\n    \"global_data\": {\n        // other attributes\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"Macro will automatically track all CO₂ emissions from assets connected to the co2_sink node and will constrain total emissions to the value specified in the rhs_policy key (unless a carbon price penalty is applied using the price_unmet_policy field).","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/#Adding-a-CO-storage-annual-constraint","page":"Adding Policy constraints","title":"Adding a CO₂ storage annual constraint","text":"","category":"section"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"The CO₂ storage annual constraint limits the amount of CO₂ that can be injected and stored in a CO2Captured node. ","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"To add a CO₂ storage annual constraint to a CO2Captured node in a system, the user needs to:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"1. Activate the constraint by setting CO2StorageConstraint to true in the constraints key of a node of type CO2Captured:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"{\n    \"constraints\": {\n        \"CO2StorageConstraint\": true\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"2. Set the CO₂ storage annual constraint value using the CO2StorageConstraint key in the rhs_policy field:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"{\n    \"rhs_policy\": {\n        \"CO2StorageConstraint\": 4753600\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"Consequently, the nodes.json file should have a CO2Captured node with the following structure:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"{\n    \"type\": \"CO2Captured\",\n    \"instance_data\": [\n        {\n            \"id\": \"co2_storage_1\",\n            \"constraints\": {\n                \"CO2StorageConstraint\": true\n            },\n            \"rhs_policy\": {\n                \"CO2StorageConstraint\": 4753600\n            }\n        },\n        // other CO2Captured nodes\n    ],\n    \"global_data\": {\n        // other attributes\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"3. Link the CO2Captured node's id to the co2_storage key of assets in the system with CO₂ storage edges to track their CO₂ storage:","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"{\n    \"type\": \"CO2Injection\",\n    \"instance_data\": [\n        {\n            \"co2_storage\": \"co2_storage_1\",\n            // other attributes\n        }\n    ],\n    \"global_data\": {\n        // other attributes\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"Macro will automatically track all CO₂ injection from assets linked to the co2_storage node and constrain the total injection to the value set in the rhs_policy key.","category":"page"},{"location":"Guides/User Guide/user_policy_constraints/","page":"Adding Policy constraints","title":"Adding Policy constraints","text":"","category":"page"},{"location":"Tutorials/0_getting_started/#Tutorial-0:-Getting-Started-with-Macro","page":"Getting Started","title":"Tutorial 0: Getting Started with Macro","text":"","category":"section"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"note: Interactive Notebook\nThe interactive version of this tutorial can be found here.","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"This tutorial will guide you through the steps to install Macro, a solver, and all the necessary dependencies.","category":"page"},{"location":"Tutorials/0_getting_started/#Installing-Macro","page":"Getting Started","title":"Installing Macro","text":"","category":"section"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"Before installing Macro, make sure you have the following requirements installed:","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"Julia: you can download it here. \nGit: you can download it here.\n(optional) Jupyter Notebook: you can install it using the following command:","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"pip install notebook","category":"page"},{"location":"Tutorials/0_getting_started/#Download-Macro","page":"Getting Started","title":"Download Macro","text":"","category":"section"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"Since Macro is a public repository, you can simply clone it using:","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"git clone https://github.com/macroenergy/MacroEnergy.jl.git","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"If you want to clone a specific branch, you can use:","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"git clone -b <branch-name> https://github.com/macroenergy/MacroEnergy.jl.git","category":"page"},{"location":"Tutorials/0_getting_started/#Installation-steps","page":"Getting Started","title":"Installation steps","text":"","category":"section"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"Navigate to the repository:","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"cd MacroEnergy.jl","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"Install Macro and all the dependencies:","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"julia --project -e 'using Pkg; Pkg.instantiate(); Pkg.precompile()'","category":"page"},{"location":"Tutorials/0_getting_started/#Setting-up-Jupyter-Notebook","page":"Getting Started","title":"Setting up Jupyter Notebook","text":"","category":"section"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"Once Macro is installed, to enable Jupyter Notebook support, you can run the following command:","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"julia --project -e 'using IJulia; IJulia.installkernel(\"Macro\", \"--project=@.\")'","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"Once the kernel is installed, you can run Jupyter Notebook with one of the following commands:","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"jupyter lab","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"or ","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"jupyter notebook","category":"page"},{"location":"Tutorials/0_getting_started/#Testing-the-installation","page":"Getting Started","title":"Testing the installation","text":"","category":"section"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"To test the installation, you can run the following command:","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"using MacroEnergy","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"in a Jupyter Notebook cell or in a Julia terminal. If everything is set up correctly, you should see no errors and the package should load without any issues.","category":"page"},{"location":"Tutorials/0_getting_started/","page":"Getting Started","title":"Getting Started","text":"","category":"page"},{"location":"Guides/User Guide/user_write_results/#Writing-Results-to-Files","page":"Writing Results","title":"Writing Results to Files","text":"","category":"section"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Currently, Macro supports the following types of outputs:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Capacity Results: final capacity, new capacity and retired capacity for each technology.\nCosts: fixed, variable and total system costs.\nFlow Results: flow for each commodity through each edge in the system.\nCombined Results: all results (capacity, costs, flows, non-served demand, storage level) in a single file.","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"For detailed information about output formats and layouts, please refer to the Output Format and Output Files Layout sections below.","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"note: Output Files Location\nBy default, output files are written to a results directory created in the same location as your input data. For more details about output file locations, see the Output Files Location section below.","category":"page"},{"location":"Guides/User Guide/user_write_results/#Capacity-Results","page":"Writing Results","title":"Capacity Results","text":"","category":"section"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"To export system-level capacity results to a file, users can use the write_capacity function:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"write_capacity(\"capacity.csv\", system)","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"This function exports capacity results for all commodities and asset types defined in your case inputs. ","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"You can filter the results by commodity, asset type, or both using the commodity and asset_type parameters:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"# Filter results by commodity\nwrite_capacity(\"capacity.csv\", system, commodity=\"Electricity\")\n# Filter results by asset type\nwrite_capacity(\"capacity.csv\", system, asset_type=\"ThermalPower\")\n# Filter results by commodity and asset type\nwrite_capacity(\"capacity.csv\", system, commodity=\"Electricity\", asset_type=[\"VRE\", \"Battery\"])","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"The * wildcard character enables pattern matching for asset types. For example, the following command exports results for all asset types beginning with ThermalPower (e.g., ThermalPower, ThermalPowerCCS):","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"# Filter using wildcard matching for asset types\nwrite_capacity(\"capacity.csv\", system, commodity=\"Electricity\", asset_type=\"ThermalPower*\")","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Similarly, you can use wildcard matching for commodities:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"# Filter using wildcard matching for commodities\nwrite_capacity(\"capacity.csv\", system, commodity=\"CO2*\")","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"note: Output Layout\nResults are written in long format by default. To use wide format, configure the OutputLayout: {\"Capacity\": \"wide\"} setting in your Macro settings JSON file (see Output Files Layout for details).","category":"page"},{"location":"Guides/User Guide/user_write_results/#Costs","page":"Writing Results","title":"Costs","text":"","category":"section"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Export system-wide cost results using the write_costs function:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"write_costs(\"costs.csv\", system, model)","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Note that the write_costs function requires both the system and model arguments, unlike the write_capacity function.","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"note: Output Layout\nResults are written in long format by default. To use wide format, configure the OutputLayout: {\"Costs\": \"wide\"} setting in your Macro settings JSON file (see Output Files Layout for details).","category":"page"},{"location":"Guides/User Guide/user_write_results/#Flow-Results","page":"Writing Results","title":"Flow Results","text":"","category":"section"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Export system-level flow results using the write_flow function:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"write_flow(\"flows.csv\", system)","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Filter results by commodity, asset type, or both using the commodity and asset_type parameters:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"# Filter by commodity\nwrite_flow(\"flows.csv\", system, commodity=\"Electricity\")\n\n# Filter by asset type using parameter-free matching\nwrite_flow(\"flows.csv\", system, asset_type=\"ThermalPower\")\n\n# Filter by asset type using wildcard matching\nwrite_flow(\"flows.csv\", system, asset_type=\"ThermalPower*\")","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"note: Output Layout\nResults are written in long format by default. To use wide format, configure the OutputLayout: {\"Flow\": \"wide\"} setting in your Macro settings JSON file (see Output Files Layout for details).","category":"page"},{"location":"Guides/User Guide/user_write_results/#Combined-Results","page":"Writing Results","title":"Combined Results","text":"","category":"section"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Export all results at once using the write_results function:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"write_results(\"results.csv.gz\", system, model) # CSV.GZ format\nwrite_results(\"results.parquet\", system, model) # Parquet format","category":"page"},{"location":"Guides/User Guide/user_write_results/#Output-Format","page":"Writing Results","title":"Output Format","text":"","category":"section"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Macro supports multiple output formats to suit different needs:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"CSV: Comma-separated values\nIdeal for small datasets and human-readable output\nDirectly compatible with spreadsheet software\nLess efficient for large datasets\nCSV.GZ: Compressed CSV\nBalances readability and file size\nReduces storage requirements while maintaining CSV format\nRequires decompression for reading\nParquet: Column-based data store\nOptimal for large datasets\nSuperior compression and faster read/write operations\nRequires specialized tools for reading","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"The output format is determined by the file extension. For example, to export results in Parquet format:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"write_results(\"results.parquet\", system, model)","category":"page"},{"location":"Guides/User Guide/user_write_results/#Output-Files-Layout","page":"Writing Results","title":"Output Files Layout","text":"","category":"section"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"By default, all results are written in long format for optimal storage efficiency and performance, particularly for large systems. The wide format is also available for easier reading and visualization.","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Configure the output layout using the OutputLayout setting in your Macro settings JSON file:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"{\n  \"OutputLayout\": \"wide\"\n}","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"or","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"{\n  \"OutputLayout\": {\n    \"Capacity\": \"wide\",\n    \"Costs\": \"long\",\n    \"Flow\": \"long\"\n  }\n}","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Available options:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"\"OutputLayout\": \"long\" (applies to all outputs)\n\"OutputLayout\": \"wide\" (applies to all outputs)\n\"OutputLayout\": {\"Capacity\": \"wide\", \"Costs\": \"long\", \"Flow\": \"long\"} (individual layout settings)","category":"page"},{"location":"Guides/User Guide/user_write_results/#Output-Files-Location","page":"Writing Results","title":"Output Files Location","text":"","category":"section"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Macro provides two settings to control output file locations:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"OutputDir: Specifies the output directory name\nOverwriteResults: Controls whether to overwrite existing files","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"For example:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"{\n  \"OutputDir\": \"results\",\n  \"OverwriteResults\": true\n}","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Users can obtain the output directory path programmatically using the create_output_path function:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"output_path = create_output_path(system)","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"and then pass this path to the write functions:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"write_capacity(joinpath(output_path, \"capacity.csv\"), system)","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"By default, the create_output_path function creates a results directory in the same location as your input data (i.e., the directory containing system_data.json). For more information about the input folder structure, refer to the Creating a new System guide.","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"If OverwriteResults is true, existing files will be overwritten. Otherwise, the function appends a number to the directory name to prevent overwriting.","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"Users can specify a custom base path for the output directory:","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"output_path = create_output_path(system, \"path/to/output\")\nwrite_capacity(joinpath(output_path, \"capacity.csv\"), system) # Creates /path/to/output/results/capacity.csv","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"In this case, the function creates a directory named according to the OutputDir setting (e.g., results) within your specified path (e.g., path/to/output/results).","category":"page"},{"location":"Guides/User Guide/user_write_results/","page":"Writing Results","title":"Writing Results","text":"","category":"page"},{"location":"Manual/assets/battery/#Battery","page":"Battery","title":"Battery","text":"","category":"section"},{"location":"Manual/assets/battery/#Graph-structure","page":"Battery","title":"Graph structure","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"A battery is a storage technology that is represented in Macro by the following graph structure:","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph Battery\n  direction BT\n  A((Electricity)):::node1\n    A--Charge--> B[Storage] --Discharge--> A\n end\n       legend@{img: \"../../images/battery.png\", w: 120, h: 100, constraint: \"off\"}\n       Battery ~~~ legend\n    style A  r:40,fill:orange,stroke:black,color:black,stroke-dasharray: 3,5;\n    style B fill:orange,stroke:black,color:black;\n\n    linkStyle 0,1 stroke:orange, stroke-width: 3px;\n\n    style legend fill:white","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"<img width=\"270\" src=\"../../images/battery.png\" />","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Therefore, a battery asset is made of:","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"1 Storage component, representing the battery storage.\n2 Electricity Edge components:\none incoming representing the charge edge from the electricity network to the storage.\none outgoing representing the discharge edge from the storage to the electricity network.","category":"page"},{"location":"Manual/assets/battery/#Attributes","page":"Battery","title":"Attributes","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"As for all the other assets, the structure of the input file for a battery asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"{\n    \"storage\":{\n        // ... storage-specific attributes ...\n    },\n    \"edges\":{\n        \"charge_edge\": {\n            // ... charge_edge-specific attributes ...\n        },\n        \"discharge_edge\": {\n            // ... discharge_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"where the possible attributes that the user can set are reported in the following tables. ","category":"page"},{"location":"Manual/assets/battery/#Storage-component","page":"Battery","title":"Storage component","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"The definition of the Storage object can be found here MacroEnergy.Storage.","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Attribute Type Values Default Description\ncommodity String Electricity Required Commodity being stored.\nconstraints Dict{String,Bool} Any Macro constraint type for storage BalanceConstraint, StorageCapacityConstraint, StorageSymmetricCapacityConstraint List of constraints applied to the storage. E.g. {\"BalanceConstraint\": true}.\ncan_expand Bool Bool false Whether the storage is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the storage is eligible for capacity retirement.\ncharge_discharge_ratio Float64 Float64 1.0 Ratio between charging and discharging rates.\nexisting_capacity Float64 Float64 0.0 Initial installed storage capacity (MWh).\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MWh-year).\ninvestment_cost Float64 Float64 0.0 Annualized investment cost of the energy capacity for a storage technology (USD/MWh-year).\nlong_duration Bool Bool false Whether the storage is a long-duration storage. (Note: if true, the model will add the long-duration storage constraints to the storage).\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of stored commodity lost per timestep.\nmax_capacity Float64 Float64 Inf Maximum allowed storage capacity (MWh).\nmax_duration Float64 Float64 0.0 Maximum ratio of installed energy to discharged capacity that can be installed (hours).\nmax_storage_level Float64 Float64 1.0 Maximum storage level as a fraction of capacity.\nmin_capacity Float64 Float64 0.0 Minimum allowed storage capacity (MWh).\nmin_duration Float64 Float64 0.0 Minimum ratio of installed energy to discharged capacity that can be installed (hours).\nmin_outflow_fraction Float64 Float64 0.0 Minimum outflow as a fraction of capacity.\nmin_storage_level Float64 Float64 0.0 Minimum storage level as a fraction of capacity.","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"tip: Default constraints\nAs noted in the above table, the default constraints for the storage component of the battery are the following:Balance constraint\nStorage capacity constraint\nStorage symmetric capacity constraintIf the storage is a long-duration storage, the following additional constraints are applied:Long-duration storage constraints","category":"page"},{"location":"Manual/assets/battery/#Charge-and-discharge-edges","page":"Battery","title":"Charge and discharge edges","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Both the charge and discharge edges are represented by the same set of attributes. The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"Attribute Type Values Default Description\ntype String Electricity Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any electricity node id present in the system Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any electricity node id present in the system Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges Empty for charge edge, check box below for discharge edge List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\nefficiency Float64 Number in [0,1] 1.0 Efficiency of the charging/discharging process.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool false Whether the edge is unidirectional.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"tip: Efficiency\nThe efficiency of the charging/discharging process can be set in the charge_edge and discharge_edge parts of the input file. These parameters are used, for example, in the Balance constraint to balance the charge and discharge flows. ","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"tip: Default constraints - discharge edge\nThe default constraints for the discharge edge are the following:Capacity constraint\nStorage discharge limit constraint\nRamping limits constraint","category":"page"},{"location":"Manual/assets/battery/#Example","page":"Battery","title":"Example","text":"","category":"section"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"The following is an example of the input file for a battery asset that creates three batteries, one in each of the SE, MIDAT and NE regions.","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"{\n    \"elec_stor\": [\n        {\n            \"type\": \"Battery\",\n            \"global_data\": {\n                \"storage\": {\n                    \"commodity\": \"Electricity\",\n                    \"can_expand\": true,\n                    \"can_retire\": false,\n                    \"constraints\": {\n                        \"BalanceConstraint\": true,\n                        \"StorageCapacityConstraint\": true,\n                        \"StorageSymmetricCapacityConstraint\": true,\n                        \"StorageMinDurationConstraint\": true,\n                        \"StorageMaxDurationConstraint\": true,\n                    }\n                },\n                \"edges\": {\n                    \"discharge_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"StorageDischargeLimitConstraint\": true\n                        }\n                    },\n                    \"charge_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"battery_SE\",\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"capacity_size\": 1.0,\n                            \"existing_capacity\": 0.0,\n                            \"fixed_om_cost\": 4536.98,\n                            \"investment_cost\": 17239.56121,\n                            \"variable_om_cost\": 0.15,\n                            \"efficiency\": 0.92\n                        },\n                        \"charge_edge\": {\n                            \"start_vertex\": \"elec_SE\",\n                            \"efficiency\": 0.92,\n                            \"variable_om_cost\": 0.15\n                        }\n                    },\n                    \"storage\": {\n                        \"existing_capacity_storage\": 0.0,\n                        \"fixed_om_cost_storage\": 2541.19,\n                        \"investment_cost_storage\": 9656.002735,\n                        \"max_duration\": 10,\n                        \"min_duration\": 1\n                    }\n                },\n                {\n                    \"id\": \"battery_MIDAT\",\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"capacity_size\": 1.0,\n                            \"existing_capacity\": 0.0,\n                            \"fixed_om_cost\": 4536.98,\n                            \"investment_cost\": 17239.56121,\n                            \"variable_om_cost\": 0.15,\n                            \"efficiency\": 0.92\n                        },\n                        \"charge_edge\": {\n                            \"start_vertex\": \"elec_SE\",\n                            \"efficiency\": 0.92,\n                            \"variable_om_cost\": 0.15\n                        }\n                    },\n                    \"storage\": {\n                        \"existing_capacity_storage\": 0.0,\n                        \"fixed_om_cost_storage\": 2541.19,\n                        \"investment_cost_storage\": 9656.002735,\n                        \"max_duration\": 10,\n                        \"min_duration\": 1\n                    }\n                },\n                {\n                    \"id\": \"battery_NE\",\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"capacity_size\": 1.0,\n                            \"existing_capacity\": 0.0,\n                            \"fixed_om_cost\": 4536.98,\n                            \"investment_cost\": 17239.56121,\n                            \"variable_om_cost\": 0.15,\n                            \"efficiency\": 0.92\n                        },\n                        \"charge_edge\": {\n                            \"start_vertex\": \"elec_SE\",\n                            \"efficiency\": 0.92,\n                            \"variable_om_cost\": 0.15\n                        }\n                    },\n                    \"storage\": {\n                        \"existing_capacity_storage\": 0.0,\n                        \"fixed_om_cost_storage\": 2541.19,\n                        \"investment_cost_storage\": 9656.002735,\n                        \"max_duration\": 10,\n                        \"min_duration\": 1\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/battery/","page":"Battery","title":"Battery","text":"","category":"page"},{"location":"Manual/assets/hydropower/#Hydro-Reservoir","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"","category":"section"},{"location":"Manual/assets/hydropower/#Graph-structure","page":"Hydro Reservoir","title":"Graph structure","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"A hydroelectric reservoir is represented in Macro using the following graph structure:","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"<img width=\"400\" src=\"../../images/hydrores.png\" />","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"A hydroelectric reservoir asset is made of:","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"1 Electricity Storage component, representing the hydroelectric reservoir.\n3 Edge components:\n1 incoming Electricity Edge, representing the electricity supply.\n1 outgoing Electricity Edge, representing the electricity production.\n1 outgoing Electricity Edge, representing the spillage.","category":"page"},{"location":"Manual/assets/hydropower/#Flow-equation","page":"Hydro Reservoir","title":"Flow equation","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"In the following equation, phi is the flow of the commodity.","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"note: HydroRes\nbeginaligned\nphi_in = phi_out + phi_spill \nendaligned","category":"page"},{"location":"Manual/assets/hydropower/#Attributes","page":"Hydro Reservoir","title":"Attributes","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"The structure of the input file for a hydroelectric reservoir asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"inflow_edge\": {\n            // ... inflow_edge-specific attributes ...\n        },\n        \"discharge_edge\": {\n            // ... discharge_edge-specific attributes ...\n        },\n        \"spillage_edge\": {\n            // ... spillage_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/hydropower/#Storage-component","page":"Hydro Reservoir","title":"Storage component","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"The definition of the Storage object can be found here MacroEnergy.Storage.","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Attribute Type Values Default Description\ncommodity String Electricity Required Commodity being stored.\nconstraints Dict{String,Bool} Any Macro constraint type for storage BalanceConstraint, StorageCapacityConstraint List of constraints applied to the storage. E.g. {\"BalanceConstraint\": true}.\ncan_expand Bool Bool false Whether the storage is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the storage is eligible for capacity retirement.\ncharge_discharge_ratio Float64 Float64 1.0 Ratio between charging and discharging rates.\nexisting_capacity_storage Float64 Float64 0.0 Initial installed storage capacity (MWh).\nfixed_om_cost_storage Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MWh-year).\ninvestment_cost_storage Float64 Float64 0.0 Annualized investment cost of the energy capacity for a storage technology (USD/MWh-year).\nlong_duration Bool Bool false Whether the storage is a long-duration storage. Note: if true, the long-duration storage constraint will be applied.\nmax_capacity_storage Float64 Float64 Inf Maximum allowed storage capacity (MWh).\nmax_duration Float64 Float64 0.0 Maximum ratio of installed energy to discharged capacity that can be installed (hours).\nmin_capacity_storage Float64 Float64 0.0 Minimum allowed storage capacity (MWh).\nmin_duration Float64 Float64 0.0 Minimum ratio of installed energy to discharged capacity that can be installed (hours).\nmin_outflow_fraction Float64 Float64 0.0 Minimum outflow as a fraction of capacity.\nmin_storage_level Float64 Float64 0.0 Minimum storage level as a fraction of capacity.\nmax_storage_level Float64 Float64 1.0 Maximum storage level as a fraction of capacity.\nstorage_loss_fraction Float64 Number in [0,1] 0.0 Fraction of stored commodity lost per timestep.","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"tip: Default constraints\nThe default constraints for the storage component of the hydroelectric reservoir are the following:Balance constraintIf the storage is a long-duration storage, the following additional constraints are applied:Long-duration storage constraints","category":"page"},{"location":"Manual/assets/hydropower/#Edges-(discharge_edge,-inflow_edge,-spillage_edge)","page":"Hydro Reservoir","title":"Edges (discharge_edge, inflow_edge, spillage_edge)","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"warning: Asset expansion\nAs a modeling decision, the following conditions are implemented:Only charge and discharge edges are allowed to expand (i.e., they have the has_capacity attribute set to true). In contrast, this attribute is pre-set to false for the spillage_edge.\nThe can_retire and can_expand attributes of the inflow_edge are set to match those of the discharge_edge.","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"warning: Directionality\nAll the three edges are unidirectional by construction.","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"warning: Capacity parameters\nThe user only needs to specify capacity_size and existing_capacity for the discharge_edge, as the model will automatically apply the same values to the inflow_edge.","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"All the edges have the same set of attributes. The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Attribute Type Values Default Description\ntype String Electricity Required Commodity of the edge.\nstart_vertex String Any electricity node id present in the system Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any electricity node id present in the system Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges Empty List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion. Note: only available for charge and discharge edges.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement. Note: only available for charge and discharge edges.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity. Note: discharge edge only. The model will automatically apply the same values to the inflow edge.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW. Note: discharge edge only. The model will automatically apply the same values to the inflow edge.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"tip: Default constraints\nDefault constraints for the edges of the hydroelectric reservoir are only applied to the inflow edge. These constraints are:Must run constraint\nStorage charge discharge ratio constraint","category":"page"},{"location":"Manual/assets/hydropower/#Example","page":"Hydro Reservoir","title":"Example","text":"","category":"section"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"The following input file example shows how to create a hydroelectric reservoir asset in each of the three zones SE, MIDAT and NE.","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"{\n    \"hydrores\": [\n        {\n            \"type\": \"HydroRes\",\n            \"global_data\": {\n                \"edges\": {\n                    \"discharge_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": false,\n                        \"can_retire\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true\n                        }\n                    },\n                    \"inflow_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"start_vertex\": \"hydro_source\",\n                        \"has_capacity\": true,\n                        \"constraints\": {\n                            \"MustRunConstraint\": true\n                        }\n                    },\n                    \"spill_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"end_vertex\": \"hydro_source\",\n                        \"can_expand\": false,\n                        \"can_retire\": false,\n                        \"has_capacity\": false\n                    }\n                },\n                \"storage\": {\n                    \"commodity\": \"Electricity\",\n                    \"can_expand\": false,\n                    \"can_retire\": false,\n                    \"constraints\": {\n                        \"MinStorageOutflowConstraint\": true,\n                        \"StorageChargeDischargeRatioConstraint\": true,\n                        \"BalanceConstraint\": true\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"MIDAT_conventional_hydroelectric_1\",\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"elec_MIDAT\",\n                            \"capacity_size\": 29.853,\n                            \"existing_capacity\": 2806.182,\n                            \"fixed_om_cost\": 45648,\n                            \"ramp_down_fraction\": 0.83,\n                            \"ramp_up_fraction\": 0.83,\n                            \"efficiency\": 1.0\n                        },\n                        \"inflow_edge\": {\n                            \"efficiency\": 1.0,\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_conventional_hydroelectric_1\"\n                                }\n                            }\n                        }\n                    },\n                    \"storage\": {\n                        \"min_outflow_fraction\": 0.109311313,\n                        \"charge_discharge_ratio\": 1.0\n                    }\n                },\n                {\n                    \"id\": \"NE_conventional_hydroelectric_1\",\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"elec_NE\",\n                            \"capacity_size\": 24.13,\n                            \"existing_capacity\": 4729.48,\n                            \"fixed_om_cost\": 45648,\n                            \"ramp_down_fraction\": 0.083,\n                            \"ramp_up_fraction\": 0.083,\n                            \"efficiency\": 1.0\n                        },\n                        \"inflow_edge\": {\n                            \"efficiency\": 1.0,\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_conventional_hydroelectric_1\"\n                                }\n                            }\n                        }\n                    },\n                    \"storage\": {\n                        \"min_outflow_fraction\": 0.095,\n                        \"charge_discharge_ratio\": 1.0\n                    }\n                },\n                {\n                    \"id\": \"SE_conventional_hydroelectric_1\",\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"capacity_size\": 31.333,\n                            \"existing_capacity\": 11123.215,\n                            \"fixed_om_cost\": 45648,\n                            \"ramp_down_fraction\": 0.083,\n                            \"ramp_up_fraction\": 0.083,\n                            \"efficiency\": 1.0\n                        },\n                        \"inflow_edge\": {\n                            \"efficiency\": 1.0,\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_conventional_hydroelectric_1\"\n                                }\n                            }\n                        }\n                    },\n                    \"storage\": {\n                        \"min_outflow_fraction\": 0.135129141,\n                        \"charge_discharge_ratio\": 1.0\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/hydropower/","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"","category":"page"},{"location":"References/6_assets/#Macro-Asset-Library-Reference","page":"Macro Asset Library Reference","title":"Macro Asset Library Reference","text":"","category":"section"},{"location":"References/6_assets/#VRE-(make-function)","page":"Macro Asset Library Reference","title":"VRE (make function)","text":"","category":"section"},{"location":"References/6_assets/#MacroEnergy.make-Tuple{Type{<:VRE}, AbstractDict{Symbol, Any}, MacroEnergy.System}","page":"Macro Asset Library Reference","title":"MacroEnergy.make","text":"make(::Type{<:VRE}, data::AbstractDict{Symbol, Any}, system::System) -> VRE\n\nVRE is an alias for Union{SolarPV, WindTurbine}\n\nNecessary data fields:\n - transforms: Dict{Symbol, Any}\n    - id: String\n    - timedata: String\n- edges: Dict{Symbol, Any}\n    - edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n\n\n\n\n\n","category":"method"},{"location":"References/6_assets/#Battery-(make-function)","page":"Macro Asset Library Reference","title":"Battery (make function)","text":"","category":"section"},{"location":"References/6_assets/#MacroEnergy.make-Tuple{Type{Battery}, AbstractDict{Symbol, Any}, MacroEnergy.System}","page":"Macro Asset Library Reference","title":"MacroEnergy.make","text":"make(::Type{Battery}, data::AbstractDict{Symbol, Any}, system::System) -> Battery\n\nNecessary data fields:\n - storage: Dict{Symbol, Any}\n    - id: String\n    - commodity: String\n    - can_retire: Bool\n    - can_expand: Bool\n    - existing_capacity: Float64\n    - investment_cost: Float64\n    - fixed_om_cost: Float64\n    - loss_fraction: Float64\n    - min_duration: Float64\n    - max_duration: Float64\n    - min_storage_level: Float64\n    - min_capacity: Float64\n    - max_capacity: Float64\n    - constraints: Vector{AbstractTypeConstraint}\n - edges: Dict{Symbol, Any}\n    - charge_edge: Dict{Symbol, Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - efficiency: Float64\n    - discharge_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - efficiency\n        - constraints: Vector{AbstractTypeConstraint}\n\n\n\n\n\n","category":"method"},{"location":"References/6_assets/#Electrolyzer-(make-function)","page":"Macro Asset Library Reference","title":"Electrolyzer (make function)","text":"","category":"section"},{"location":"References/6_assets/#MacroEnergy.make-Tuple{Type{Electrolyzer}, AbstractDict{Symbol, Any}, MacroEnergy.System}","page":"Macro Asset Library Reference","title":"MacroEnergy.make","text":"make(::Type{Electrolyzer}, data::AbstractDict{Symbol, Any}, system::System) -> Electrolyzer\n\nNecessary data fields:\n - transforms: Dict{Symbol, Any}\n    - id: String\n    - timedata: String\n    - efficiency_rate: Float64\n    - constraints: Vector{AbstractTypeConstraint}\n- edges: Dict{Symbol, Any}\n    - h2_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n    - e_edge: Dict{Symbol, Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n\n\n\n\n\n","category":"method"},{"location":"References/6_assets/#ThermalHydrogen-(make-function)","page":"Macro Asset Library Reference","title":"ThermalHydrogen (make function)","text":"","category":"section"},{"location":"References/6_assets/#MacroEnergy.make-Tuple{Type{ThermalHydrogen}, AbstractDict{Symbol, Any}, MacroEnergy.System}","page":"Macro Asset Library Reference","title":"MacroEnergy.make","text":"make(::Type{ThermalHydrogen}, data::AbstractDict{Symbol, Any}, system::System) -> ThermalHydrogen\n\nNecessary data fields:\n - transforms: Dict{Symbol, Any}\n    - id: String\n    - timedata: String\n    - efficiency_rate: Float64\n    - emission_rate: Float64\n    - constraints: Vector{AbstractTypeConstraint}\n- edges: Dict{Symbol, Any}\n    - elec_edge: Dict{Symbol,Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n    - h2_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - min_up_time: Int\n        - min_down_time: Int\n        - startup_cost: Float64\n        - startup_fuel_consumption: Float64\n        - startup_fuel_balance_id: Symbol\n        - constraints: Vector{AbstractTypeConstraint}\n    - fuel_edge: Dict{Symbol, Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n    - co2_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n\n\n\n\n\n","category":"method"},{"location":"References/6_assets/#ThermalHydrogenCCS-(make-function)","page":"Macro Asset Library Reference","title":"ThermalHydrogenCCS (make function)","text":"","category":"section"},{"location":"References/6_assets/#MacroEnergy.make-Tuple{Type{ThermalHydrogenCCS}, AbstractDict{Symbol, Any}, MacroEnergy.System}","page":"Macro Asset Library Reference","title":"MacroEnergy.make","text":"make(::Type{ThermalHydrogenCCS}, data::AbstractDict{Symbol, Any}, system::System) -> ThermalHydrogenCCS\n\nNecessary data fields:\n - transforms: Dict{Symbol, Any}\n    - id: String\n    - timedata: String\n    - efficiency_rate: Float64\n    - emission_rate: Float64\n    - constraints: Vector{AbstractTypeConstraint}\n- edges: Dict{Symbol, Any}\n    - elec_edge: Dict{Symbol,Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n    - h2_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - min_up_time: Int\n        - min_down_time: Int\n        - startup_cost: Float64\n        - startup_fuel_consumption: Float64\n        - startup_fuel_balance_id: Symbol\n        - constraints: Vector{AbstractTypeConstraint}\n    - fuel_edge: Dict{Symbol, Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n    - co2_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n    - co2_captured_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n\n\n\n\n\n","category":"method"},{"location":"References/6_assets/#FuelCell-(make-function)","page":"Macro Asset Library Reference","title":"FuelCell (make function)","text":"","category":"section"},{"location":"References/6_assets/#MacroEnergy.make-Tuple{Type{FuelCell}, AbstractDict{Symbol, Any}, MacroEnergy.System}","page":"Macro Asset Library Reference","title":"MacroEnergy.make","text":"make(::Type{FuelCell}, data::AbstractDict{Symbol, Any}, system::System) -> FuelCell\n\nNecessary data fields:\n - transforms: Dict{Symbol, Any}\n    - id: String\n    - timedata: String\n    - efficiency_rate: Float64\n    - constraints: Vector{AbstractTypeConstraint}\n- edges: Dict{Symbol, Any}\n    - h2_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n    - elec_edge: Dict{Symbol, Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n\n\n\n\n\n","category":"method"},{"location":"References/6_assets/","page":"Macro Asset Library Reference","title":"Macro Asset Library Reference","text":"","category":"page"},{"location":"Manual/Overview/","page":"-","title":"-","text":"","category":"page"},{"location":"#Macro","page":"Introduction","title":"Macro","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Welcome to the Macro documentation!","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"This documentation is a work-in-progress, so please forgive our appearance as we add material.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"All feedback is welcome and please report and errors or omissions through the MacroEnergy.jl issues page.","category":"page"},{"location":"#What-is-Macro?","page":"Introduction","title":"What is Macro?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Macro is a bottom-up, multi-sectoral infrastructure optimization model for macro-energy systems. It co-optimizes the design and operation of user-defined models of multi-sector energy systems and networks. Macro allows users to explore the impact of energy policies, technology costs and performance, demand patterns, and other factors on an energy system as a whole and as separate sectors.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The main features of Macro include:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Graph-based representation of the energy system, facilitating clear representation and analysis of energy and mass flows between sectors.\n\"Plug and play\" flexibility for integrating new technologies and sectors, including electricity, hydrogen, heat, and transport.\nHigh spatial and temporal resolution to accurately capture sector dynamics.\nDesigned for distributed computing to enable large-scale optimizations.\nTailored Benders decomposition framework for optimization.\nOpen-source built using Julia and JuMP.","category":"page"},{"location":"#Structure-of-the-documentation","page":"Introduction","title":"Structure of the documentation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The documentation contains five main sections:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Getting Started: How to install Macro and run your first cases\nTutorials: Long-form guides with worked examples, intended to help you learn how to use Macro\nGuides: Short guides which walk you through how to achieve specific tasks, intended to be a day-to-day reference when working with Macro\nManual: A detailed description of Macro's components and features\nReference: A function reference for Macro's API","category":"page"},{"location":"#Macro-development-strategy","page":"Introduction","title":"Macro development strategy","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Macro is a very flexible tool for modelling energy systems. However, that flexibility also means the core architecture and functions are complex and difficult to use correctly.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"To make Macro as useful and accessible to the widest audience possible we designed and developed it with three layers of abstractions in mind, each serving a different user profile:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: Macro architecture)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Due to these abstractions, users and modelers will be able to achieve their goals without needing to understand every aspect of Macro. The guides section of the documentation has guides for users, modelers, and developers.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"Manual/Model/#Model","page":"Model","title":"Model","text":"","category":"section"},{"location":"Manual/Model/","page":"Model","title":"Model","text":"","category":"page"},{"location":"Manual/Inputs/#Inputs","page":"Inputs","title":"Inputs","text":"","category":"section"},{"location":"Manual/Inputs/","page":"Inputs","title":"Inputs","text":"","category":"page"},{"location":"Manual/Outputs/#Outputs","page":"Outputs","title":"Outputs","text":"","category":"section"},{"location":"Manual/Outputs/","page":"Outputs","title":"Outputs","text":"","category":"page"},{"location":"Guides/User Guide/user_add_commodity/#Adding-a-Commodity-to-a-System","page":"Adding Commodities","title":"Adding a Commodity to a System","text":"","category":"section"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"In Macro, the production, transport, and consumption of energy and materials is described by flows of Commodities. To include Assets, Locations and/or Nodes which include one or more of these flows, you must add the relevant Commodities to your System.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/#Adding-a-Commodity","page":"Adding Commodities","title":"Adding a Commodity","text":"","category":"section"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"The file containing the list of Commodities in your System is defined in the System's system_data.json file. The default file is system/commodities.json. If you created your System using the template functions, then your Commodity list will include all of Macro's default Commodities:","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"{\n    \"commodities\": [\n        \"Electricity\",\n        \"NaturalGas\",\n        \"CO2\",\n        \"Hydrogen\",\n        \"CO2Captured\",\n        \"Biomass\",\n        \"Uranium\",\n        \"LiquidFuels\",\n    ]\n}","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"If you created your System from scratch, you will have to add the Commodities you require yourself. If preferred, you can add the list directly to your system_data.json file. In that case, it will look something like:","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"{\n    \"commodities\": [\n        \"Electricity\",\n        \"NaturalGas\",\n        \"CO2\",\n        \"Hydrogen\",\n        \"CO2Captured\",\n        \"Biomass\",\n        \"Uranium\",\n        \"LiquidFuels\",\n    ],\n    \"locations\": {\n        \"path\": \"system/locations.json\"\n    },\n    \"settings\": {\n        \"path\": \"settings/macro_settings.json\"\n    },\n    \"assets\": {\n        \"path\": \"assets\"\n    },\n    \"time_data\": {\n        \"path\": \"system/time_data.json\"\n    },\n    \"nodes\": {\n        \"path\": \"system/nodes.json\"\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_add_commodity/#Listing-Macro-Commodities","page":"Adding Commodities","title":"Listing Macro Commodities","text":"","category":"section"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"There is almost no overhead to including Commodities which are not used by your System, so we recommend adding all of the default Commodities to your Commodities list. If you want to see a list all of the Commodities available in Macro, call the following function in the REPL or a script:","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"julia> using MacroEnergy\njulia> MacroEnergy.commodity_types()","category":"page"},{"location":"Guides/User Guide/user_add_commodity/#Specifying-time-data-for-Commodities","page":"Adding Commodities","title":"Specifying time data for Commodities","text":"","category":"section"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"As well as being included in the Commodities list, each Commodity must be included in the System's time data file. This file is system/time_data.json by default.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"The time data file defines the representative periods (aka subperiods) which Macro should use to build the System, as well as the time-discretization of the operating decisions for each Commodity.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"The latter is determined by two field:","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"HoursPerSubperiod: The number of hours in each representative period / subperiod.\nHoursPerTimeStep: The number of time-steps per representative period / subperiod.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"For now, all Commodities must have the same HoursPerSubperiod. In the future we will allow this to vary.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"The HoursPerTimeStep variable can be different for different Commodities. As an example of how this might be used, let's consider a System with Electricity and Natural Gas Commodities.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"{\n    \"commodities\": [\n        \"Electricity\",\n        \"NaturalGas\"\n    ]\n}","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"The System is a one-year model, made up of ten week-long representative periods / subperiods. We want the Electricity decisions to be optimized hourly, to capture hourly variation in demand and renewable energy availability. However, we don't anticipate that the Natural Gas systems will need to vary operations as frequently. To reduce our Model size and decrease runtime, we limit Natural Gas operating decisions to every 12 hours.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"Our time data file is then:","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"{\n    \"HoursPerSubperiod\": {\n        \"Electricity\": 168,\n        \"NaturalGas\": 168\n    },\n    \"HoursPerTimeStep\": {\n        \"Electricity\": 1,\n        \"NaturalGas\": 12\n    },\n    \"TotalHoursModeled\": 8760,\n    \"NumberOfSubperiods\": 10,\n    \"SubPeriodMap\": {\n        \"path\": \"system/Period_map.csv\"\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"Further details about time data files, including how period maps work, can be found here.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/#Creating-a-new-sub-Commodity","page":"Adding Commodities","title":"Creating a new sub-Commodity","text":"","category":"section"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"There are many circumstances in which you may want to differentiate between two flows of the same Commodity. For example, you may want to differentiate between biofuels produced from wood vs. crops, or hydrogen produced by electrolysis vs. steam methane reforming. The easiest solution is usually to create sub-Commodities for each version of the Commodity you require.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"The manual contains more detail on how sub-Commodities function and examples of how you can use them.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"Sub-Commodities are additional Commodities created specifically for your System, which inherit the time data and other properties of an existing Commodity. To create a new sub-Commodity, you must therefore tell Macro which Commodity (or existing sub-Commodity) it is inheriting from.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"You can add sub-Commodities by manually editing your Commodities file. However, Macro also has template functions to do so which will also help catch errors.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"To create sub-Commodities for electrolysis-produced vs.SMR-produced hydrogen, we will create two new sub-Commodities which inherit from the Hydrogen Commodity. First, we must make sure that our System includes the Hydrogen Commodity.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"We'll create a new System using the template_system function. This guide gives more details on how to create a System.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"system = template_system(\"ExampleSystems/template_example\")","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"The template will add all Commodities to the System, but we'll only consider Hydrogen for now:","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"{\n    \"commodities\": [\n        \"Hydrogen\",\n        ...\n    ]\n}","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"We next use the template_subcommodity to add our two new sub-Commodities, with Hydrogen as the base Commodity in both cases.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"template_subcommodity(\"ExampleSystems/template_example/system/commodities.json\", \"ElectrolysisHydrogen\", \"Hydrogen\")\ntemplate_subcommodity(\"ExampleSystems/template_example/system/commodities.json\", \"SMRHydrogen\", \"Hydrogen\")","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"Your Commodity file should now look like this:","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"{\n    \"commodities\": [\n        \"Hydrogen\",\n        {\n            \"name\": \"ElectrolysisHydrogen\",\n            \"acts_like\": \"Hydrogen\"\n        },\n        {\n            \"name\": \"SMRHydrogen\",\n            \"acts_like\": \"Hydrogen\"\n        },\n        ...\n    ]\n}","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"Regular Commodities are always listed as strings in the Commodity file, while sub-Commodities are short dictionaries defining its name and super-Commmodity.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"For now, Macro adds Commodities and sub-Commodities in the order they are listed in the Commodity file. You should make sure that new sub-Commodities are always listed after the Commodity they inherit from.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"You can also have the template_subcommodity function target the System, rather than the Commodity file itself.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"template_subcommodity(system, \"ElectrolysisHydrogen\", \"Hydrogen\")\ntemplate_subcommodity(system, \"SMRHydrogen\", \"Hydrogen\")","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"You can combine these two function calls using lists of arguments.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"template_subcommodity(system, [\"ElectrolysisHydrogen\", \"SMRHydrogen\"], [\"Hydrogen\", \"Hydrogen\"])","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"If you only give one super-Commodity, Macro will assume that all new sub-Commodities should inherit from it.","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"template_subcommodity(system, [\"ElectrolysisHydrogen\", \"SMRHydrogen\"], \"Hydrogen\")","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"As mentioned, you can also have sub-Commodities inherit from other sub-Commodities:","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"template_subcommodity(system, [\"HighEmissElectrolysisHydrogen\", \"LowEmissElectrolysisHydrogen\"], \"ElectrolysisHydrogen\")","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"This will leave you with the following Commodity file:","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"{\n    \"commodities\": [\n        \"Hydrogen\",\n        {\n            \"name\": \"ElectrolysisHydrogen\",\n            \"acts_like\": \"Hydrogen\"\n        },\n        {\n            \"name\": \"SMRHydrogen\",\n            \"acts_like\": \"Hydrogen\"\n        },\n        {\n            \"name\": \"HighEmissElectrolysisHydrogen\",\n            \"acts_like\": \"ElectrolysisHydrogen\"\n        },\n        {\n            \"name\": \"LowEmissElectrolysisHydrogen\",\n            \"acts_like\": \"ElectrolysisHydrogen\"\n        },\n        ...\n    ]\n}","category":"page"},{"location":"Guides/User Guide/user_add_commodity/","page":"Adding Commodities","title":"Adding Commodities","text":"","category":"page"},{"location":"Tutorials/tutorials_introduction/#Tutorials","page":"Introduction","title":"Tutorials","text":"","category":"section"},{"location":"Tutorials/tutorials_introduction/","page":"Introduction","title":"Introduction","text":"The tutorials in this section are long-form explanations of how to use Macro. They are intended to help you learn to complete full workflows with Macro, as opposed to being convenient references for specific tasks. Each step of the tutorial is written out in full, rather than linking to the relevant guides. Most also have Jupyter notebooks to make it easier to follow the tasks.","category":"page"},{"location":"Tutorials/tutorials_introduction/","page":"Introduction","title":"Introduction","text":"We currently have the following tutorials:","category":"page"},{"location":"Tutorials/tutorials_introduction/","page":"Introduction","title":"Introduction","text":"Getting Started: Shows you how to download, install, and test Macro.\nRunning Macro: Describes how to optimize an electricity grid, write the results, and plot them. It will then show you how to add an emission limit to the system.\nMultisector Modelling: Show you how to add a hydrogen sector model to the electricity grid from the previous tutorial. You will then optimize the multisector system, write and plot the results.","category":"page"},{"location":"Tutorials/tutorials_introduction/#Contributing-a-tutorial","page":"Introduction","title":"Contributing a tutorial","text":"","category":"section"},{"location":"Tutorials/tutorials_introduction/","page":"Introduction","title":"Introduction","text":"We welcome additional tutorials. If you have written one and think it would be useful to others, please consider submitting it for inclusion here by creating a pull request (PR). See the \"How to contribute\" page for more information on how to do so.","category":"page"},{"location":"Tutorials/tutorials_introduction/","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"Manual/assets/beccselectricity/#BECCS-Electricity","page":"BECCS Electricity","title":"BECCS Electricity","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/#Graph-structure","page":"BECCS Electricity","title":"Graph structure","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Bioenergy with carbon capture and storage (BECCS) that produces electricity is represented in Macro using the following graph structure:","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"%%{init: {'theme': 'base', 'themeVariables': { 'background': '#D1EBDE' }}}%%\nflowchart LR\n  subgraph BECCSElectricity\n  direction BT\n    B((Biomass)) --> A{{..}}\n    C((CO2 Source)) --> A\n    A --> D((Emitted CO2))\n    A --> E((Captured CO2))\n    A --> F((Electricity))\n end\n legend@{img: \"../../images/battery.png\", w: 120, h: 100, constraint: \"off\"}\n       BECCSElectricity ~~~ legend\n    style A fill:black,stroke:black,color:black;\n    style B r:40,fill:palegreen,stroke:black,color:black,stroke-dasharray: 3,5;\n    style C r:40,fill:lightgray,stroke:black,color:black,font-size: 12, stroke-dasharray: 3,5;\n    style D r:40,fill:lightgray,stroke:black,color:black, font-size: 12,stroke-dasharray: 3,5;\n    style E r:40,fill:lightgray,stroke:black,color:black, font-size: 12,stroke-dasharray: 3,5;\n    style F r:40,fill:orange,stroke:black,color:black, font-size: 12, stroke-dasharray: 3,5;\n\n    linkStyle 0 stroke:palegreen, stroke-width: 3px;\n    linkStyle 1,2,3 stroke:lightgray, stroke-width: 3px;\n    linkStyle 4 stroke:orange, stroke-width: 3px;\n\n    style legend fill:white","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"<img width=\"400\" src=\"../../images/beccselec.png\" />","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"A BECCS electricity asset is made of:","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"1 Transformation component, representing the BECCS process.\n5 Edge components:\n1 incoming Biomass Edge, representing the biomass supply.\n1 incoming CO2 Edge, representing the CO2 that is absorbed by the biomass.\n1 outgoing Electricity Edge, representing the electricity production.\n1 outgoing CO2Captured Edge, representing the CO2 that is captured.\n1 outgoing CO2 Edge, representing the CO2 that is emitted.","category":"page"},{"location":"Manual/assets/beccselectricity/#Attributes","page":"BECCS Electricity","title":"Attributes","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"The structure of the input file for a BECCS electricity asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"biomass_edge\": {\n            // ... biomass_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        },\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"co2_emission_edge\": {\n            // ... co2_emission_edge-specific attributes ...\n        },\n        \"co2_captured_edge\": {\n            // ... co2_captured_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"where the possible attributes that the user can set are reported in the following tables. ","category":"page"},{"location":"Manual/assets/beccselectricity/#Transformation","page":"BECCS Electricity","title":"Transformation","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"The definition of the transformation object can be found here MacroEnergy.Transformation.","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Attribute Type Values Default Description/Units\ntimedata String Any Macro commodity type Required Time resolution for the time series data linked to the transformation. E.g. \"Biomass\".\nconstraints Dict{String,Bool} Any Macro constraint type for vertices BalanceConstraint List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\ncapture_rate epsilon_co2_capture_rate Float64 Float64 1.0 t_CO2t_Biomass\nco2_content epsilon_co2 Float64 Float64 0.0 t_CO2t_Biomass\nelectricity_production epsilon_elec_prod Float64 Float64 1.0 MWh_elect_Biomass\nemission_rate epsilon_emission_rate Float64 Float64 1.0 t_CO2t_Biomass","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"tip: Default constraints\nThe default constraint for the transformation part of the BECCS electricity asset is the following:Balance constraint","category":"page"},{"location":"Manual/assets/beccselectricity/#Flow-equations","page":"BECCS Electricity","title":"Flow equations","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"note: BECCSElectricity\nbeginaligned\nphi_elec = phi_biomass cdot epsilon_elec_prod \nphi_co2 = -phi_biomass cdot epsilon_co2 \nphi_co2 = phi_biomass cdot epsilon_emission_rate \nphi_co2_captured = phi_biomass cdot epsilon_co2_capture_rate \nendaligned","category":"page"},{"location":"Manual/assets/beccselectricity/#Edges","page":"BECCS Electricity","title":"Edges","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"warning: Asset expansion\nAs a modeling decision, only the Biomass edge is allowed to expand. Consequently, the has_capacity and constraints attributes can only be set for the Biomass edge. For all other edges, these attributes are pre-set to false and an empty list, respectively, to ensure proper modeling of the asset.","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"warning: Directionality\nThe unidirectional attribute is only available for the Biomass edge. For the other edges, this attribute is pre-set to true to ensure the correct modeling of the asset. ","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"All the edges are represented by the same set of attributes. The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"Attribute Type Values Default Description\ntype String Any Macro commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges Check box below List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"assets/availability.csv\", \"header\": \"SE_BECCS_Electricity_Herb\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge (only available for the Biomass edge).\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool false Whether the edge is unidirectional (only available for the Biomass edge).\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"tip: Default constraints\nThe only default constraint for the edges of the BECCS electricity asset is the Capacity constraint applied to the Biomass edge. ","category":"page"},{"location":"Manual/assets/beccselectricity/#Example","page":"BECCS Electricity","title":"Example","text":"","category":"section"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"The following is an example of the input file for a BECCS electricity asset that creates six BECCS electricity assets, two in each of the SE, MIDAT and NE regions.","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"{\n    \"BECCS_Electricity\": [\n        {\n            \"type\": \"BECCSElectricity\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"Biomass\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"biomass_edge\": {\n                        \"type\": \"Biomass\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": true,\n                        \"integer_decisions\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"MinFlowConstraint\": true\n                        }\n                    },\n                    \"co2_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"start_vertex\": \"co2_sink\"\n                    },\n                    \"co2_emission_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_sink\"\n                    },\n                    \"co2_captured_edge\": {\n                        \"type\": \"CO2Captured\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_captured_sink\"\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_BECCS_Electricity_Herb\",\n                    \"transforms\": {\n                        \"electricity_production\": 1.656626506,\n                        \"capture_rate\": 1.5313914,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.2288286\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"bioherb_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_BECCS_Electricity_Herb\"\n                                }\n                            },\n                            \"investment_cost\": 696050.2868,\n                            \"fixed_om_cost\": 193228.9157,\n                            \"variable_om_cost\": 42.93975904,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.4\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_BECCS_Electricity_Herb\",\n                    \"transforms\": {\n                        \"electricity_production\": 1.656626506,\n                        \"capture_rate\": 1.5313914,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.2288286\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"bioherb_MIDAT\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_BECCS_Electricity_Herb\"\n                                }\n                            },\n                            \"investment_cost\": 696050.2868,\n                            \"fixed_om_cost\": 193228.9157,\n                            \"variable_om_cost\": 42.93975904,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.4\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_BECCS_Electricity_Herb\",\n                    \"transforms\": {\n                        \"electricity_production\": 1.656626506,\n                        \"capture_rate\": 1.5313914,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.2288286\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"bioherb_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_BECCS_Electricity_Herb\"\n                                }\n                            },\n                            \"investment_cost\": 696050.2868,\n                            \"fixed_om_cost\": 193228.9157,\n                            \"variable_om_cost\": 42.93975904,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.4\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_NE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"SE_BECCS_Electricity_Wood\",\n                    \"transforms\": {\n                        \"electricity_production\": 1.656626506,\n                        \"capture_rate\": 1.5313914,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.2288286\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"biowood_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_BECCS_Electricity_Wood\"\n                                }\n                            },\n                            \"investment_cost\": 696050.2868,\n                            \"fixed_om_cost\": 193228.9157,\n                            \"variable_om_cost\": 42.93975904,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.4\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_BECCS_Electricity_Wood\",\n                    \"transforms\": {\n                        \"electricity_production\": 1.656626506,\n                        \"capture_rate\": 1.5313914,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.2288286\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"biowood_MIDAT\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_BECCS_Electricity_Wood\"\n                                }\n                            },\n                            \"investment_cost\": 696050.2868,\n                            \"fixed_om_cost\": 193228.9157,\n                            \"variable_om_cost\": 42.93975904,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.4\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_BECCS_Electricity_Wood\",\n                    \"transforms\": {\n                        \"electricity_production\": 1.656626506,\n                        \"capture_rate\": 1.5313914,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.2288286\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"biowood_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_BECCS_Electricity_Wood\"\n                                }\n                            },\n                            \"investment_cost\": 696050.2868,\n                            \"fixed_om_cost\": 193228.9157,\n                            \"variable_om_cost\": 42.93975904,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.4\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_NE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/beccselectricity/","page":"BECCS Electricity","title":"BECCS Electricity","text":"","category":"page"},{"location":"Guides/Developer Guide/dev_create_constraint/","page":"Creating a Constraint","title":"Creating a Constraint","text":"","category":"page"},{"location":"Manual/assets/vre/#Variable-Renewable-Energy-resources-(VRE)","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"","category":"section"},{"location":"Manual/assets/vre/#Graph-structure","page":"Variable Renewable Energy resources (VRE)","title":"Graph structure","text":"","category":"section"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"A Variable Renewable Energy asset is represented in Macro using the following graph structure:","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"<img width=\"400\" src=\"../../images/vre.png\" />","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"A Variable Renewable Energy asset is made of:","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"1 Transformation component, representing the VRE transformation.\n1 Edge component:\n1 outgoing Electricity Edge, representing the electricity production.","category":"page"},{"location":"Manual/assets/vre/#Attributes","page":"Variable Renewable Energy resources (VRE)","title":"Attributes","text":"","category":"section"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"The structure of the input file for a VRE asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"edge\": {\n            // ... electricity edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/vre/#Transformation","page":"Variable Renewable Energy resources (VRE)","title":"Transformation","text":"","category":"section"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"The definition of the transformation object can be found here MacroEnergy.Transformation.","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"Attribute Type Values Default Description\ntimedata String String Required Time resolution for the time series data linked to the transformation. E.g. \"Electricity\".\nconstraints Dict{String,Bool} Any Macro constraint type for vertices Empty List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.","category":"page"},{"location":"Manual/assets/vre/#Edges","page":"Variable Renewable Energy resources (VRE)","title":"Edges","text":"","category":"section"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"Attribute Type Values Default Description\ntype String Electricity Required Commodity of the edge.\nend_vertex String Any electricity node id present in the system Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges CapacityConstraint List of constraints applied to the edge. E.g. {\"MustRunConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"assets/availability.csv\", \"header\": \"SE_solar_photovoltaic_1\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool true Whether the edge is unidirectional.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"tip: Default constraint\nDefault constraint for the electricity edge of the VRE is the Capacity constraint.","category":"page"},{"location":"Manual/assets/vre/#Example","page":"Variable Renewable Energy resources (VRE)","title":"Example","text":"","category":"section"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"The following input file example shows how to create four existing VRE assets (two utility-scale solar and two onshore wind facilities) and four new VRE assets (one offshore wind, one onshore wind, and two utility-scale solar facilities).","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"{\n    \"existing_vre\": [\n        {\n            \"type\": \"VRE\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"Electricity\"\n                },\n                \"edges\": {\n                    \"edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"can_expand\": false,\n                        \"can_retire\": true,\n                        \"has_capacity\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true\n                        }\n                    }\n                },\n                \"storage\": {}\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"existing_solar_SE\",\n                    \"edges\": {\n                        \"edge\": {\n                            \"fixed_om_cost\": 22887,\n                            \"capacity_size\": 17.142,\n                            \"existing_capacity\": 8502.2,\n                            \"end_vertex\": \"elec_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_solar_photovoltaic_1\"\n                                }\n                            }\n                        }\n                    },\n                },\n                {\n                    \"id\": \"existing_solar_NE\",\n                    \"edges\": {\n                        \"edge\": {\n                            \"fixed_om_cost\": 22887,\n                            \"capacity_size\": 3.63,\n                            \"existing_capacity\": 1629.6,\n                            \"end_vertex\": \"elec_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_solar_photovoltaic_1\"\n                                }\n                            }\n                        }\n                    },\n                },\n                {\n\n                    \"id\": \"existing_wind_NE\",\n                    \"edges\": {\n                        \"edge\": {\n                            \"fixed_om_cost\": 43000,\n                            \"capacity_size\": 86.17,\n                            \"existing_capacity\": 3654.5,\n                            \"end_vertex\": \"elec_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_onshore_wind_turbine_1\"\n                                }\n                            }\n                        }\n                    },\n                },\n                {\n                    \"id\": \"existing_wind_MIDAT\",\n                    \"edges\": {\n                        \"edge\": {\n                            \"fixed_om_cost\": 43000,\n                            \"capacity_size\": 161.2,\n                            \"existing_capacity\": 3231.6,\n                            \"end_vertex\": \"elec_MIDAT\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_onshore_wind_turbine_1\"\n                                }\n                            }\n                        }\n                    },\n                }\n            ]\n        }\n    ],\n    \"new_vre\": [\n        {\n            \"type\": \"VRE\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"Electricity\"\n                },\n                \"edges\": {\n                    \"edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"has_capacity\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"MaxCapacityConstraint\": true\n                        }\n                    }\n                },\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"NE_offshorewind_class10_moderate_floating_1_1\",\n                    \"edges\": {\n                        \"edge\": {\n                            \"fixed_om_cost\": 56095.98976,\n                            \"investment_cost\": 225783.4407,\n                            \"max_capacity\": 32928.493,\n                            \"end_vertex\": \"elec_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_offshorewind_class10_moderate_floating_1_1\"\n                                }\n                            }\n                        }\n                    },\n                },\n                {\n                    \"id\": \"SE_utilitypv_class1_moderate_70_0_2_1\",\n                    \"edges\": {\n                        \"edge\": {\n                            \"fixed_om_cost\": 15390.48615,\n                            \"investment_cost\": 49950.17548,\n                            \"max_capacity\": 1041244,\n                            \"end_vertex\": \"elec_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_utilitypv_class1_moderate_70_0_2_1\"\n                                }\n                            }\n                        }\n                    },\n                },\n                {\n                    \"id\": \"MIDAT_utilitypv_class1_moderate_70_0_2_1\",\n                    \"edges\": {\n                        \"edge\": {\n                            \"fixed_om_cost\": 15390.48615,\n                            \"investment_cost\": 51590.03227,\n                            \"max_capacity\": 26783,\n                            \"end_vertex\": \"elec_MIDAT\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_utilitypv_class1_moderate_70_0_2_1\"\n                                }\n                            }\n                        }\n                    },\n                },\n                {\n                    \"id\": \"NE_landbasedwind_class4_moderate_70_3\",\n                    \"edges\": {\n                        \"edge\": {\n                            \"fixed_om_cost\": 34568.125,\n                            \"investment_cost\": 86536.01624,\n                            \"max_capacity\": 65324,\n                            \"end_vertex\": \"elec_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_landbasedwind_class4_moderate_70_3\"\n                                }\n                            }\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/vre/","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"","category":"page"},{"location":"Manual/System/#System","page":"System","title":"System","text":"","category":"section"},{"location":"Manual/System/","page":"System","title":"System","text":"","category":"page"},{"location":"Manual/Sectors/","page":"Sectors","title":"Sectors","text":"","category":"page"},{"location":"Manual/TimeData/#Time-Data","page":"Time Data","title":"Time Data","text":"","category":"section"},{"location":"Manual/TimeData/","page":"Time Data","title":"Time Data","text":"","category":"page"},{"location":"Getting Started/2_installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"Getting Started/2_installation/#Requirements","page":"Installation","title":"Requirements","text":"","category":"section"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"Julia 1.9 or later\nGit (to clone the repository)","category":"page"},{"location":"Getting Started/2_installation/#Installation-steps","page":"Installation","title":"Installation steps","text":"","category":"section"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"To install Macro, we recommend following these steps:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"Clone the Macro repository:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"git clone https://github.com/macroenergy/MacroEnergy.jl.git","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"note: Cloning a specific branch\nIf you want to clone a specific branch, you can use the -b flag:git clone -b <branch_name> https://github.com/macroenergy/MacroEnergy.jl.git","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"Navigate to the cloned repository:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"cd MacroEnergy.jl","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"Install Macro and all its dependencies:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"julia --project -e 'using Pkg; Pkg.instantiate(); Pkg.precompile()'","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"Test the installation:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"Start Julia with the project environment in a terminal:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"$ julia --project","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"Load Macro in the Julia REPL:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"using MacroEnergy","category":"page"},{"location":"Getting Started/2_installation/#Editing-the-installation","page":"Installation","title":"Editing the installation","text":"","category":"section"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"If the user wants to edit the installation, for example, to install a specific version of a dependency, they can do so by following the steps below:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"Run a Julia session with the Macro project environment activated:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"$ cd MacroEnergy.jl\n$ julia --project","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"Alternatively, you can first run Julia:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"$ cd MacroEnergy.jl\n$ julia","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"Then, enter the Pkg mode by pressing ], and activate the project environment:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"] activate .","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"Use the Pkg mode to install or update a dependency:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"] rm <dependency_name>\n] add <dependency_name>@<version>","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"For instance, to install the JuMP package version v1.22.2, you can use the following commands:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"] rm JuMP\n] add JuMP@v1.22.2","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"note: Activating the project environment\nWhen working with the Macro package, always remember to activate the project environment before running any commands. This ensures that the correct dependencies are used and that the project is in the correct state.","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"To activate the project environment, you can use the following commands:","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"cd MacroEnergy.jl\njulia --project","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"or","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"cd MacroEnergy.jl\njulia\n] activate .","category":"page"},{"location":"Getting Started/2_installation/","page":"Installation","title":"Installation","text":"","category":"page"},{"location":"References/5_utilities/#Utility-functions","page":"Utilities","title":"Utility functions","text":"","category":"section"},{"location":"References/5_utilities/","page":"Utilities","title":"Utilities","text":"Pages = [\"4_utilities.md\"]","category":"page"},{"location":"References/5_utilities/#all_constraints","page":"Utilities","title":"all_constraints","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.all_constraints","page":"Utilities","title":"MacroEnergy.all_constraints","text":"all_constraints(v::AbstractVertex)\n\nGet all constraints on a vertex.\n\nArguments\n\nv: A vertex object that is a subtype of AbstractVertex\n\nReturns\n\nA vector of all constraint objects on the vertex\n\nExamples\n\nconstraints = all_constraints(elec_node)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#all_constraints_types","page":"Utilities","title":"all_constraints_types","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.all_constraints_types","page":"Utilities","title":"MacroEnergy.all_constraints_types","text":"all_constraints_types(v::AbstractVertex)\n\nGet the types of all constraints on a vertex.\n\nArguments\n\nv: A vertex object that is a subtype of AbstractVertex\n\nReturns\n\nA vector of types of all constraints on the vertex\n\nExamples\n\nconstraint_types = all_constraints_types(elec_node)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#asset_ids","page":"Utilities","title":"asset_ids","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.asset_ids","page":"Utilities","title":"MacroEnergy.asset_ids","text":"asset_ids(system::System; source::String=\"assets\")\n\nGet the set of asset IDs from a system, either from loaded assets or input files.\n\nArguments\n\nsystem::System: The system to get asset IDs from\nsource::String: The source to get asset IDs from. Can be either:\n\"assets\" (default): Get IDs from already loaded assets in the system\n\"inputs\": Get IDs from input files\n\nReturns\n\nSet{AssetId}: A set of asset IDs\n\nExamples\n\n# Get IDs from loaded assets\nids = asset_ids(system)\n\nNotes\n\nIf source=\"assets\" and no assets are loaded, a warning is issued\nIf an invalid source is provided, an error is thrown\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#balance_ids","page":"Utilities","title":"balance_ids","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.balance_ids","page":"Utilities","title":"MacroEnergy.balance_ids","text":"balance_ids(v::AbstractVertex)\n\nGet the IDs of all balance equations in a vertex.\n\nArguments\n\nv: A vertex object that is a subtype of AbstractVertex\n\nReturns\n\nA vector of Symbols representing the IDs of all balance equations\n\nExamples\n\nbalance_ids = balance_ids(elec_node)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#balance_data","page":"Utilities","title":"balance_data","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.balance_data","page":"Utilities","title":"MacroEnergy.balance_data","text":"balance_data(v::AbstractVertex, i::Symbol)\n\nGet the input data for a specific balance equation in a vertex.\n\nArguments\n\nv: A vertex object that is a subtype of AbstractVertex\ni: Symbol representing the ID of the balance equation\n\nReturns\n\nThe input data (usually stoichiometric coefficients) for the specified balance equation\n\nExamples\n\ndemand_data = balance_data(elec_node, :demand)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#create_output_path","page":"Utilities","title":"create_output_path","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.create_output_path","page":"Utilities","title":"MacroEnergy.create_output_path","text":"create_output_path(system::System, path::String=system.data_dirpath)\n\nCreate and return the path to the output directory for storing results based on system settings.\n\nArguments\n\nsystem::System: The system object containing settings and configuration\npath::String: Base path for the output directory (defaults to system.data_dirpath)\n\nReturns\n\nString: Path to the created output directory\n\nThe function creates an output directory based on system settings. If OverwriteResults  is false, it will avoid overwriting existing directories by appending incremental numbers  (e.g., \"001\", \"002\") to the directory name. The directory is created if it doesn't exist.\n\nExample\n\njulia> system.settings\n(..., OverwriteResults = true, OutputDir = \"result_dir\")\njulia> output_path = create_output_path(system)\n# Returns \"path/to/system.data_dirpath/result_dir\" or \"path/to/system.data_dirpath/result_dir_001\" if original exists\njulia> output_path = create_output_path(system, \"path/to/output\")\n# Returns \"path/to/output/result_dir\" or \"path/to/output/result_dir_001\" if original exists\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#get_asset_by_id","page":"Utilities","title":"get_asset_by_id","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.get_asset_by_id","page":"Utilities","title":"MacroEnergy.get_asset_by_id","text":"get_asset_by_id(system::System, id::Symbol)\n\nFind an asset in the system by its ID.\n\nArguments\n\nsystem: A System object containing various assets\nid: Symbol representing the ID of the asset to find\n\nReturns\n\nThe asset object if found\nnothing if no asset with the given ID exists\n\nExamples\n\n# Find a battery asset\nbattery = get_asset_by_id(system, :battery_SE)\n\n# Find a thermal power plant\nthermal_plant = get_asset_by_id(system, :natural_gas_SE)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#get_assets_sametype","page":"Utilities","title":"get_assets_sametype","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.get_assets_sametype","page":"Utilities","title":"MacroEnergy.get_assets_sametype","text":"get_assets_sametype(system::System, asset_type::T) where T<:Type{<:AbstractAsset}\n\nGet all assets of a specific type from the system.\n\nArguments\n\nsystem: A System object containing various assets\nasset_type: The type of assets to retrieve (must be a subtype of AbstractAsset)\n\nReturns\n\nA vector of assets of the specified type\n\nExamples\n\n# Get all battery assets\nbatteries = get_assets_sametype(system, Battery)\nbattery = batteries[1]  # first battery in the list\n\n# Get all natural gas thermal power plants\nthermal_plants = get_assets_sametype(system, ThermalPower{NaturalGas})\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#get_asset_types","page":"Utilities","title":"get_asset_types","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.get_asset_types","page":"Utilities","title":"MacroEnergy.get_asset_types","text":"get_asset_types(system::System)\n\nGet a vector of the types of all assets in the system.\n\nArguments\n\nsystem: A System object containing various assets\n\nReturns\n\nA vector of DataTypes representing the type of each asset in the system\n\nExamples\n\nasset_types = get_asset_types(system)\nunique(asset_types)  # Get unique asset types in the system\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#get_balance","page":"Utilities","title":"get_balance","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.get_balance","page":"Utilities","title":"MacroEnergy.get_balance","text":"get_balance(v::AbstractVertex, i::Symbol)\n\nGet the mathematical expression of a balance equation in a vertex.\n\nArguments\n\nv: A vertex object that is a subtype of AbstractVertex\ni: Symbol representing the ID of the balance equation\n\nReturns\n\nThe mathematical expression of the balance equation\n\nExamples\n\n# Get the demand balance expression\ndemand_expr = get_balance(elec_node, :demand)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#get_constraint_by_type","page":"Utilities","title":"get_constraint_by_type","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.get_constraint_by_type","page":"Utilities","title":"MacroEnergy.get_constraint_by_type","text":"get_constraint_by_type(v::AbstractVertex, constraint_type::Type{<:AbstractTypeConstraint})\n\nGet a constraint on a vertex by its type.\n\nArguments\n\nv: A vertex object that is a subtype of AbstractVertex\nconstraint_type: The type of constraint to find\n\nReturns\n\nIf exactly one constraint of the specified type exists: returns that constraint\nIf multiple constraints of the specified type exist: returns a vector of those constraints\nIf no constraints of the specified type exist: returns nothing\n\nExamples\n\nbalance_constraint = get_constraint_by_type(elec_node, BalanceConstraint)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#get_component_by_fieldname","page":"Utilities","title":"get_component_by_fieldname","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.get_component_by_fieldname","page":"Utilities","title":"MacroEnergy.get_component_by_fieldname","text":"get_component_by_fieldname(asset::AbstractAsset, fieldname::Symbol)\n\nGet a component of an asset by its field name (i.e., fieldname of the asset struct).\n\nArguments\n\nasset: An asset object that is a subtype of AbstractAsset\nfieldname: Symbol representing the field name of the component to get (i.e., fieldname of the asset struct)\n\nReturns\n\nThe component object stored in the specified field\n\nExamples\n\nelec_edge = get_component_by_fieldname(thermal_plant, :elec_edge)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#get_component_ids","page":"Utilities","title":"get_component_ids","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.get_component_ids","page":"Utilities","title":"MacroEnergy.get_component_ids","text":"get_component_ids(asset::AbstractAsset)\n\nGet the IDs of all components in an asset.\n\nArguments\n\nasset: An asset object that is a subtype of AbstractAsset\n\nReturns\n\nA vector of Symbols representing the IDs of all components in the asset\n\nExamples\n\ncomponent_ids = get_component_ids(thermal_plant)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#get_component_by_id","page":"Utilities","title":"get_component_by_id","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.get_component_by_id","page":"Utilities","title":"MacroEnergy.get_component_by_id","text":"get_component_by_id(asset::AbstractAsset, component_id::Symbol)\n\nFind a component (e.g., edges, storages, transformations) of an asset by its ID.\n\nArguments\n\nasset: An asset object that is a subtype of AbstractAsset\ncomponent_id: Symbol representing the ID of the component to find\n\nReturns\n\nThe component object if found\nnothing if no component with the given ID exists\n\nExamples\n\nelec_edge = get_component_by_id(thermal_plant, :SE_natural_gas_elec_edge)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#get_edges","page":"Utilities","title":"get_edges","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.get_edges","page":"Utilities","title":"MacroEnergy.get_edges","text":"get_edges(asset::AbstractAsset; return_ids_map::Bool=false)\nget_edges(assets::Vector{<:AbstractAsset}; return_ids_map::Bool=false)\n\nGet all edges from an asset or a vector of assets. If return_ids_map=true, a Dict is also returned mapping edge ids to the corresponding asset objects.\n\nArguments\n\nasset or assets: An asset object or vector of assets that are subtypes of AbstractAsset\nreturn_ids_map: If true, also return a Dict mapping edge IDs to their corresponding assets (default: false)\n\nReturns\n\nIf return_ids_map=false: A vector of edges\nIf return_ids_map=true: A tuple of (vector of edges, Dict mapping edge IDs to assets)\n\nExamples\n\n# Get all edges from a single asset\nedges = get_edges(thermal_plant)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#get_output_layout","page":"Utilities","title":"get_output_layout","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.get_output_layout","page":"Utilities","title":"MacroEnergy.get_output_layout","text":"get_output_layout(system::System, variable::Union{Nothing,Symbol}=nothing)::String\n\nGet the output layout (\"wide\" or \"long\") for a specific variable from system settings.\n\nArguments\n\nsystem::System: System containing output layout settings\nvariable::Union{Nothing,Symbol}=nothing: Variable to get layout for (e.g., :Cost, :Flow)\n\nReturns\n\nString indicating layout format: \"wide\" or \"long\"\n\nSettings Format\n\nThe OutputLayout setting can be specified in three ways:\n\nGlobal string setting:\nsettings = (OutputLayout=\"wide\",)  # Same layout for all variables\nPer-variable settings using NamedTuple:\nsettings = (OutputLayout=(Cost=\"wide\", Flow=\"long\"),)\nDefault behavior:\nReturns \"long\" if setting is missing or invalid\nLogs warning for unsupported types or missing variables\n\nExamples\n\n# Global layout\nsystem = System(settings=(OutputLayout=\"wide\",))\nget_output_layout(system, :Cost)  # Returns \"wide\"\n\n# Per-variable layout\nsystem = System(settings=(OutputLayout=(Cost=\"wide\", Flow=\"long\"),))\nget_output_layout(system, :Cost)  # Returns \"wide\"\nget_output_layout(system, :Flow)  # Returns \"long\"\nget_output_layout(system, :Other) # Returns \"long\" with warning\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#get_value","page":"Utilities","title":"get_value","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.get_value","page":"Utilities","title":"MacroEnergy.get_value","text":"get_value(dict::AbstractDict, keys::Vector{Symbol})\n\nGet the value from a dictionary based on a sequence of keys.\n\nArguments\n\ndict::AbstractDict: The dictionary from which to retrieve the value.\nkeys::Vector{Symbol}: The sequence of keys to traverse the dictionary.\n\nReturns\n\nThe value retrieved from the dictionary based on the given keys.\n\nExamples\n\ndict = Dict(:a => Dict(:b => 1, :c => Dict(:b => 2)))\nget_value(dict, [:a, :b]) # returns 1\nget_value(dict, [:a, :c, :b]) # returns 2\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#get_value_and_keys","page":"Utilities","title":"get_value_and_keys","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.get_value_and_keys","page":"Utilities","title":"MacroEnergy.get_value_and_keys","text":"get_value_and_keys(dict::AbstractDict, target_key::Symbol, keys=Symbol[])\n\nRecursively searches for a target key in a dictionary and returns a list of  tuples containing the value associated with the target key and the keys leading  to it. This function is used to replace the path to a timeseries file with the actual vector of data.\n\nArguments\n\ndict::AbstractDict: The (nested) dictionary to search in.\ntarget_key::Symbol: The key to search for.\nkeys=Symbol[]: (optional) The keys leading to the current dictionary.\n\nReturns\n\nvalue_keys: A list of tuples, where each tuple contains                - the value associated with the target key               - the keys leading to it in the nested dictionary.\n\nExamples\n\ndict = Dict(:a => Dict(:b => 1, :c => Dict(:b => 2)))\nget_value_and_keys(dict, :b) # returns [(1, [:a, :b]), (2, [:a, :c, :b])]\n\nWhere the first element of the tuple is the value of the key :b and the second  element is the list of keys to reach that value.\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#filter_edges_by_asset_type!","page":"Utilities","title":"filter_edges_by_asset_type!","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.filter_edges_by_asset_type!","page":"Utilities","title":"MacroEnergy.filter_edges_by_asset_type!","text":"filter_edges_by_asset_type!(edges::Vector{AbstractEdge}, asset_type::Union{Symbol,Vector{Symbol}}, edge_asset_map::Dict{Symbol,Base.RefValue{<:AbstractAsset}})\n\nFilter edges and their associated assets by asset type.\n\nArguments\n\nedges::Vector{AbstractEdge}: Edges to filter\nasset_type::Union{Symbol,Vector{Symbol}}: Target asset type(s)\nedge_asset_map::Dict{Symbol,Base.RefValue{<:AbstractAsset}}: Mapping of edges to assets\n\nEffects\n\nModifies edges in-place to keep only edges matching the asset type\nModifies edge_asset_map to keep only matching assets\n\nThrows\n\nArgumentError: If none of the requested asset types are found in the system\n\nExample\n\nfilter_edges_by_asset_type!(edges, :Battery, edge_asset_map)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#filter_edges_by_commodity!","page":"Utilities","title":"filter_edges_by_commodity!","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.filter_edges_by_commodity!","page":"Utilities","title":"MacroEnergy.filter_edges_by_commodity!","text":"filter_edges_by_commodity!(edges::Vector{AbstractEdge}, commodity::Union{Symbol,Vector{Symbol}}, edge_asset_map::Dict{Symbol,Base.RefValue{<:AbstractAsset}}=Dict{Symbol,Base.RefValue{<:AbstractAsset}}())\n\nFilter the edges by commodity and update the edgeassetmap to match the filtered edges (optional).\n\nArguments\n\nedges::Vector{AbstractEdge}: The edges to filter\ncommodity::Union{Symbol,Vector{Symbol}}: The commodity to filter by\nedge_asset_map::Dict{Symbol,Base.RefValue{<:AbstractAsset}}: The edgeassetmap to update (optional)\n\nEffects\n\nModifies edges in-place to keep only edges matching the commodity type\nIf edge_asset_map is provided, filters it to match remaining edges\n\nExample\n\nfilter_edges_by_commodity!(edges, :Electricity)\nfilter_edges_by_commodity!(edges, [:Electricity, :NaturalGas], edge_asset_map)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#find_available_path","page":"Utilities","title":"find_available_path","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.find_available_path","page":"Utilities","title":"MacroEnergy.find_available_path","text":"find_available_path(path::String, basename::String=\"results\"; max_attempts::Int=999)\n\nChoose an available output directory with the name \"basename_<number>\" by appending incremental numbers to the base path.\n\nArguments\n\npath::String: Base path for the output directory.\nbasename::String: Base name of the output directory.\nmax_attempts::Int: Maximum number of attempts to find an available directory (default is 999).\n\nReturns\n\nString: Full path to the chosen output directory.\n\nThe function first expands the given path to its full path and then attempts to find an available directory by appending incremental numbers (e.g., \"basename001\", \"basename002\") up to max_attempts times. If an available directory is found, it returns the full path to that directory. If no available directory is found after max_attempts attempts, it raises an error.\n\nExample\n\njulia> path = \"path/to/output\"\njulia> output_path = find_available_path(path)\n# Returns \"path/to/output/results_001\" or \"path/to/output/results_002\" etc.\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#find_node","page":"Utilities","title":"find_node","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.find_node","page":"Utilities","title":"MacroEnergy.find_node","text":"find_node(nodes_list::Vector{Union{Node, Location}}, id::Symbol, commodity::Union{Missing,DataType}=missing)\n\nSearch for a node with the specified id and optional commodity type in a list of nodes and locations.\n\nArguments\n\nnodes_list: Vector of nodes and locations to search through\nid: Symbol representing the ID of the node to find\ncommodity: Optional DataType specifying the commodity type of the node (default: missing)\n\nReturns\n\nThe found node if it exists\nThrows an error if no matching node is found\n\nExamples\n\n# Find a node by ID only\nnode = find_node(system.locations, :co2_sink)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#id","page":"Utilities","title":"id","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.id","page":"Utilities","title":"MacroEnergy.id","text":"id(v::AbstractVertex)\n\nGet the unique identifier (ID) of a vertex.\n\nArguments\n\nv: A vertex object that is a subtype of AbstractVertex (i.e., Node, Storage, Transformation)\n\nReturns\n\nA Symbol representing the vertex's unique identifier\n\nExamples\n\nvertex_id = id(elec_node)\n\n\n\n\n\nid(asset::AbstractAsset)\n\nGet the unique identifier (ID) of an asset.\n\nArguments\n\nasset: An asset object that is a subtype of AbstractAsset\n\nReturns\n\nA Symbol representing the asset's unique identifier\n\nExamples\n\nthermal_plant = get_asset_by_id(system, :SE_natural_gas)\nasset_id = id(thermal_plant)  # Returns the ID of the thermal plant\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#json_to_csv","page":"Utilities","title":"json_to_csv","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.json_to_csv","page":"Utilities","title":"MacroEnergy.json_to_csv","text":"json_to_csv(json_data::AbstractDict{Symbol, Any}, vec_data::VectorData=VectorData(), nesting_str::AbstractString=\"--\")\n\nConvert a JSON object to a CSV file. The Dict should contain a single \nasset described by :type, :instance_data, and possibly :global_data fields.\n\n# Arguments\n- `json_data`: The JSON object to convert.\n- `vec_data`: The VectorData object to store the timeseries or other vector data in.\n- `nesting_str`: The string used to denote nested properties.\n\n# Returns\n- A vector of OrderedDicts containing the data for each instance\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#location_ids","page":"Utilities","title":"location_ids","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.location_ids","page":"Utilities","title":"MacroEnergy.location_ids","text":"location_ids(system::System)\n\nGet a vector of the IDs of all locations in the system.\n\nArguments\n\nsystem: A System object containing various locations\n\nReturns\n\nA vector of Symbols representing the IDs of all locations in the system\n\nExamples\n\nids = location_ids(system)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#print_struct_info","page":"Utilities","title":"print_struct_info","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.print_struct_info","page":"Utilities","title":"MacroEnergy.print_struct_info","text":"print_struct_info(asset::AbstractAsset)\n\nPrint fields and types of a given asset.\n\nArguments\n\nasset: An asset object that is a subtype of AbstractAsset\n\nExamples\n\nthermal_plant = get_asset_by_id(system, :SE_natural_gas_fired_combined_cycle_1)\nprint_struct_info(thermal_plant)  # Prints the fields and types of the asset\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#reshape_wide","page":"Utilities","title":"reshape_wide","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.reshape_wide","page":"Utilities","title":"MacroEnergy.reshape_wide","text":"reshape_wide(df::DataFrame; variable_col::Symbol=:variable, value_col::Symbol=:value)\n\nReshape a DataFrame from long to wide format.\n\nArguments\n\ndf::DataFrame: Input DataFrame\nvariable_col::Symbol: Column name containing variable names\nvalue_col::Symbol: Column name containing values\n\nExamples\n\ndf_long = DataFrame(id=[1,1,2,2], variable=[:a,:b,:a,:b], value=[10,30,20,40])\ndf_wide = reshape_wide(df_long)\n\n\n\n\n\nreshape_wide(df::DataFrame, id_cols::Union{Vector{Symbol},Symbol}, variable_col::Symbol, value_col::Symbol)\n\nReshape a DataFrame from long to wide format.\n\nArguments\n\ndf::DataFrame: DataFrame in long format to be reshaped\nid_cols::Union{Vector{Symbol},Symbol}: Column(s) to use as identifiers\nvariable_col::Symbol: Column containing variable names that will become new columns\nvalue_col::Symbol: Column containing values that will fill the new columns\n\nReturns\n\nDataFrame: Reshaped DataFrame in wide format\n\nThrows\n\nArgumentError: If required columns are not present in the DataFrame\n\nExamples\n\ndf_wide = reshape_wide(df, :year, :variable, :value)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#reshape_long","page":"Utilities","title":"reshape_long","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.reshape_long","page":"Utilities","title":"MacroEnergy.reshape_long","text":"reshape_long(df::DataFrame; id_cols::Vector{Symbol}=Symbol[], view::Bool=true)\n\nReshape a DataFrame from wide to long format.\n\nArguments\n\ndf::DataFrame: Input DataFrame\nid_cols::Vector{Symbol}: Columns to use as identifiers when stacking\nview::Bool: Whether to return a view of the DataFrame instead of a copy\n\nExamples\n\ndf_wide = DataFrame(id=[1,2], a=[10,20], b=[30,40])\ndf_long = reshape_long(df_wide, :time, :component_id, :value)\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#search_assets","page":"Utilities","title":"search_assets","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.search_assets","page":"Utilities","title":"MacroEnergy.search_assets","text":"search_assets(asset_type, available_types)\n\nSearch for asset types in a list of available assets, supporting wildcards and parametric types.\n\nArguments\n\nasset_type::Union{AbstractString,Vector{<:AbstractString}}: Type(s) to search for\navailable_types::Vector{<:AbstractString}: Available asset types to search from\n\nReturns\n\nTuple of two vectors:\n\nVector{Symbol}: Found asset types\nVector{Symbol}: Missing asset types (only if no matches found)\n\nPattern Matching\n\nSupports three types of matches:\n\nExact match: \"Battery\" matches \"Battery\"\nParametric match: \"ThermalPower\" matches \"ThermalPower{Fuel}\"\nWildcard match: \"ThermalPower*\" matches both \"ThermalPower{Fuel}\" and \"ThermalPowerCCS{Fuel}\"\n\nExamples\n\n# Available assets\nassets = [\"Battery\", \"ThermalPower{Coal}\", \"ThermalPower{Gas}\"]\n\n# Exact match\nfound, missing = search_assets(\"Battery\", assets)\n# found = [:Battery], missing = []\n\n# Parametric match\nfound, missing = search_assets(\"ThermalPower\", assets)\n# found = [:ThermalPower{Coal}, :ThermalPower{Gas}], missing = []\n\n# Wildcard match\nfound, missing = search_assets(\"ThermalPower*\", assets)\n# found = [:ThermalPower{Coal}, :ThermalPower{Gas}], missing = []\n\n# Multiple types\nfound, missing = search_assets([\"Battery\", \"Solar\"], assets)\n# found = [:Battery], missing = [:Solar]\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#search_commodities","page":"Utilities","title":"search_commodities","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.search_commodities","page":"Utilities","title":"MacroEnergy.search_commodities","text":"search_commodities(commodities, available_commodities)\n\nSearch for commodity types in a list of available commodities, supporting wildcards and subtypes.\n\nArguments\n\ncommodities::Union{AbstractString,Vector{<:AbstractString}}: Commodity type(s) to search for\navailable_commodities::Vector{<:AbstractString}: Available commodity types to search from\n\nReturns\n\nTuple of two vectors:\n\nVector{Symbol}: Found commodity types\nVector{Symbol}: Missing commodity types (only if no matches found)\n\nPattern Matching\n\nSupports two types of matches:\n\nExact match: \"Electricity\" matches only \"Electricity\"\nWildcard match: \"CO2*\" matches both CO2 and its subtypes (e.g., CO2Captured)\n\nExamples\n\n# Available commodities\ncommodities = [\"Electricity\", \"CO2\", \"CO2Captured\"]\n\n# Exact match\nfound, missing = search_commodities(\"Electricity\", commodities)\n# found = [:Electricity], missing = []\n\n# Wildcard match\nfound, missing = search_commodities(\"CO2*\", commodities)\n# found = [:CO2, :CO2Captured], missing = []\n\n# Multiple types\nfound, missing = search_commodities([\"Electricity\", \"Heat\"], commodities)\n# found = [:Electricity], missing = [:Heat]\n\nnote: Note\nWildcard searches check against registered commodity types in MacroEnergy.jl.\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#set_value","page":"Utilities","title":"set_value","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.set_value","page":"Utilities","title":"MacroEnergy.set_value","text":"set_value(dict::AbstractDict, keys::Vector{Symbol}, new_value)\n\nSet the value of a nested dictionary given a list of keys.\n\nArguments\n\ndict::AbstractDict: The dictionary to modify.\nkeys::Vector{Symbol}: A list of keys representing the path to the value to \n\nbe modified.\n\nnew_value: The new value to set.\n\nExamples\n\ndict = Dict(:a => Dict(:b => 1, :c => Dict(:b => 2)))\nset_value(dict, [:a, :b], 3)\nget_value(dict, [:a, :b]) # returns 3\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#struct_info","page":"Utilities","title":"struct_info","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.struct_info","page":"Utilities","title":"MacroEnergy.struct_info","text":"struct_info(t::Type{T}) where T\n\nReturn a vector of tuples with the field names and types of a struct.\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#timestepbefore","page":"Utilities","title":"timestepbefore","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.timestepbefore","page":"Utilities","title":"MacroEnergy.timestepbefore","text":"timestepbefore(t::Int, h::Int,subperiods::Vector{StepRange{Int64,Int64})\n\nDetermines the time step that is h steps before index t in subperiod p with circular indexing.\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#collect_flow_results","page":"Utilities","title":"collect_flow_results","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.collect_flow_results","page":"Utilities","title":"MacroEnergy.collect_flow_results","text":"Collect flow results from all subproblems, handling distributed case.\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#collect_local_flows","page":"Utilities","title":"collect_local_flows","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.collect_local_flows","page":"Utilities","title":"MacroEnergy.collect_local_flows","text":"Collect flow results from local subproblems.\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#collect_distributed_flows","page":"Utilities","title":"collect_distributed_flows","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.collect_distributed_flows","page":"Utilities","title":"MacroEnergy.collect_distributed_flows","text":"Collect flow results from subproblems on distributed workers.\n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/#evaluate_vtheta_in_expression","page":"Utilities","title":"evaluate_vtheta_in_expression","text":"","category":"section"},{"location":"References/5_utilities/#MacroEnergy.evaluate_vtheta_in_expression","page":"Utilities","title":"MacroEnergy.evaluate_vtheta_in_expression","text":"Evaluate the expression expr for a specific period using operational subproblem solutions.\n\nArguments\n\nm::Model: JuMP model containing vTHETA variables and the expression expr to evaluate\nexpr::Symbol: The expression to evaluate\nsubop_sol::Dict: Dictionary mapping subproblem indices to their operational costs\nsubop_indices::Vector{Int64}: The subproblem indices to evaluate\n\nReturns\n\nThe evaluated expression for the specified period \n\n\n\n\n\n","category":"function"},{"location":"References/5_utilities/","page":"Utilities","title":"Utilities","text":"","category":"page"},{"location":"Manual/manual_introduction/#Manual","page":"Introduction","title":"Manual","text":"","category":"section"},{"location":"Manual/manual_introduction/","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"Manual/assets/mustrun/#Must-Run","page":"Must Run","title":"Must Run","text":"","category":"section"},{"location":"Manual/assets/mustrun/#Graph-structure","page":"Must Run","title":"Graph structure","text":"","category":"section"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"A MustRun asset is represented in Macro using the following graph structure:","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"<img width=\"400\" src=\"../../images/vre.png\" />","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"A MustRun asset is very similar to a VRE asset, and is made of:","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"1 Transformation component, representing the MustRun transformation.\n1 Edge component:\n1 outgoing Electricity Edge, representing the electricity production.","category":"page"},{"location":"Manual/assets/mustrun/#Attributes","page":"Must Run","title":"Attributes","text":"","category":"section"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"The structure of the input file for a MustRun asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/mustrun/#Transformation","page":"Must Run","title":"Transformation","text":"","category":"section"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"The definition of the transformation object can be found here MacroEnergy.Transformation.","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"Attribute Asset Type Values Default Description\ntimedata All String String Required Time resolution for the time series data linked to the transformation. E.g. \"Electricity\".\nconstraints All Dict{String,Bool} Any Macro constraint type for vertices Empty List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.","category":"page"},{"location":"Manual/assets/mustrun/#Edges","page":"Must Run","title":"Edges","text":"","category":"section"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"Attribute Type Values Default Description\nend_vertex String Any electricity node id present in the system Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges MustRunConstraint List of constraints applied to the edge. E.g. {\"MustRunConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"assets/availability.csv\", \"header\": \"SE_small_hydroelectric_1\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool true Whether the edge is unidirectional.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"tip: Default constraint\nDefault constraint for the electricity edge of the MustRun asset is the Must run constraint.","category":"page"},{"location":"Manual/assets/mustrun/#Example","page":"Must Run","title":"Example","text":"","category":"section"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"The following input file example shows how to create a MustRun asset in each of the three zones SE, MIDAT and NE.","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"{\n    \"mustrun\": [\n        {\n            \"type\": \"MustRun\",\n            \"global_data\": {\n                \"nodes\": {},\n                \"transforms\": {\n                    \"timedata\": \"Electricity\"\n                },\n                \"edges\": {\n                    \"elec_edge\": {\n                        \"unidirectional\": true,\n                        \"can_expand\": false,\n                        \"can_retire\": false,\n                        \"has_capacity\": true,\n                        \"constraints\": {\n                            \"MustRunConstraint\": true\n                        }\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_small_hydroelectric_1\",\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"existing_capacity\": 249.895,\n                            \"capacity_size\": 1.219,\n                            \"fixed_om_cost\": 45648,\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_small_hydroelectric_1\"\n                                }\n                            }\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_small_hydroelectric_1\",\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_MIDAT\",\n                            \"existing_capacity\": 263.268,\n                            \"capacity_size\": 1.236,\n                            \"fixed_om_cost\": 45648,\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_small_hydroelectric_1\"\n                                }\n                            }\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_small_hydroelectric_1\",\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_NE\",\n                            \"existing_capacity\": 834.494,\n                            \"capacity_size\": 1.051,\n                            \"fixed_om_cost\": 45648,\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_small_hydroelectric_1\"\n                                }\n                            }\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/mustrun/","page":"Must Run","title":"Must Run","text":"","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/#Energy-System-Graph-Based-Representation","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"This section of the documentation provides an overview of how Locations and Assets are internally represented in Macro, to help modelers create new sectors and assets effectively.","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/#Sector-Networks","page":"Energy System Graph-Based Representation","title":"Sector Networks","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"As mentioned in the Getting Started section, Macro is structured around two main components:","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"Locations: Represent geographical areas with some demand or supply for several commodities.\nAssets: Represent means of producing, storing, transporting, and consuming one or more commodities. Each asset can be sited at a specific location.","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"(Image: high_level_macro)","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"While this high-level view is useful, modeling new sectors and assets often requires a deeper understanding of how Locations and Assets are internally structured. In Macro, the energy system is modeled as a collection of interconnected sector networks. Each sector network includes nodes and edges:","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"Nodes: represent the demand or supply for a specific commodity or sector.\nEdges: represent the flow of commodities between nodes.","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"More importantly, sector networks are connected through elements called transformations. A transformation is a special type of vertex in the full network that connects two or more commodity networks. It represents a physical conversion process, such as an electrolyzer, natural gas power plant, or biorefinery.","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"So, in the full network, the definitions of Locations and Assets are expanded as follows:","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"Locations: Collection of nodes, each indicating demand or supply for one or more commodities.\nAssets: Collection of transformation vertices representing conversion processes, storage, and edges connecting nodes across different commodity networks.","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"Therefore, the high-level figure above can be expanded into the following detailed representation:","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"(Image: multi-commodity flow network)","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"This figure illustrates the internal structure of the energy system. Each location is expanded to show sector-specific nodes and edges. Yellow nodes represent demand in the electricity sector, light blue nodes represent natural gas nodes (modeled exogenously in this example), and the grey node represents a CO₂ sink.","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"The next section outlines the core components of Macro and how they work together to model an energy system.","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/#Macro-Internal-Components","page":"Energy System Graph-Based Representation","title":"Macro Internal Components","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"As seen in the previous section, an energy system in Macro is composed of the following components:","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"Vertices: Represent balance equations.\nThere are three types of vertices in Macro:\nNodes: Represent demand (outflow) or supply (inflow) of a commodity.\nTransformations: Represent conversion processes. These are special vertices that convert one or more commodity types into one or more other types. Each transformation is defined by a set of stoichiometric equations specifying conversion ratios.\nStorage: Represent storage systems that hold commodities for future use. The flow of commodities into and out of storage is governed by storage balance equations.\nEdges: Represent the flow of commodities into or out of a vertex.\nCapacity sizing decisions, CAPEX/OPEX, and both planning and operational constraints are associated with edges.","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"By combining these components, Macro enables the fast and flexible assembly of new technologies and sectors.","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"In the following sections, we’ll describe how to create new sectors and assets, as well as how to debug and test the resulting system.","category":"page"},{"location":"Guides/Modeler Guide/modeler_es_graph/","page":"Energy System Graph-Based Representation","title":"Energy System Graph-Based Representation","text":"","category":"page"},{"location":"Manual/Locations/#Locations","page":"Locations","title":"Locations","text":"","category":"section"},{"location":"Manual/Locations/","page":"Locations","title":"Locations","text":"","category":"page"},{"location":"Guides/Modeler Guide/modeler_workflow/#Suggested-Development-Workflow","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_workflow/","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"When developing a new model, and in general when working with Macro and Julia, we recommend that you run your models and Julia commands in a Julia REPL:","category":"page"},{"location":"Guides/Modeler Guide/modeler_workflow/","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"julia> using Macro\njulia> # Load a system\njulia> system = load_system(\"path/to/system_data.json\")\njulia> # Generate a model\njulia> model = generate_model(system)\njulia> # Set the optimizer\njulia> set_optimizer(model, optimizer)\njulia> # Run optimization\njulia> optimize!(model)\n# [... other commands ...]","category":"page"},{"location":"Guides/Modeler Guide/modeler_workflow/","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"This interactive approach is recommended instead of creating a script and running it directly from the terminal:","category":"page"},{"location":"Guides/Modeler Guide/modeler_workflow/","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"julia my_new_model.jl","category":"page"},{"location":"Guides/Modeler Guide/modeler_workflow/#Using-VS-Code","page":"Suggested Development Workflow","title":"Using VS Code","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_workflow/","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"If using VS Code, this workflow is particularly easy to implement with the Julia extension enabled. You can:","category":"page"},{"location":"Guides/Modeler Guide/modeler_workflow/","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"Open your script\nMove the cursor to any line\nPress cmd/ctrl + return/enter to execute that line in an interactive REPL\nSelect multiple lines and use the same shortcut to execute them as a group","category":"page"},{"location":"Guides/Modeler Guide/modeler_workflow/#Benefits-of-the-Interactive-Workflow","page":"Suggested Development Workflow","title":"Benefits of the Interactive Workflow","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_workflow/","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"Performance: Julia's JIT (Just-In-Time) compilation means each method is compiled the first time it's called. Subsequent calls with the same argument types will be much faster, as the compiled code is cached.\nDebugging: The REPL maintains all variables in memory, making it easier to:\nInspect variable values using @show or println\nModify and re-run code without restarting the entire program\nUse the debugger with @enter or @run\nTest small code snippets in isolation\nInteractivity: \nPlots and graphs automatically open in separate windows\nResults are immediately visible\nYou can modify parameters and re-run simulations on the fly","category":"page"},{"location":"Guides/Modeler Guide/modeler_workflow/#When-to-Use-Scripts","page":"Suggested Development Workflow","title":"When to Use Scripts","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_workflow/","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"Once your model has been thoroughly debugged and tested in the REPL, you can switch to using scripts for:","category":"page"},{"location":"Guides/Modeler Guide/modeler_workflow/","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"Production runs\nLarge-scale optimizations\nSharing data and models with others","category":"page"},{"location":"Guides/Modeler Guide/modeler_workflow/","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"Both workflows can be used interchangeably at this stage, depending on your needs.","category":"page"},{"location":"Guides/Modeler Guide/modeler_workflow/","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"In the next section, you'll find several useful methods and utilities for working with new models in Macro.","category":"page"},{"location":"Guides/Modeler Guide/modeler_workflow/","page":"Suggested Development Workflow","title":"Suggested Development Workflow","text":"","category":"page"},{"location":"Guides/User Guide/4_constraints/#Macro-Constraint-Library","page":"Macro Constraint Library","title":"Macro Constraint Library","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/","page":"Macro Constraint Library","title":"Macro Constraint Library","text":"Currently, Macro includes the following constraints:","category":"page"},{"location":"Guides/User Guide/4_constraints/#Balance-constraint","page":"Macro Constraint Library","title":"Balance constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{BalanceConstraint, MacroEnergy.AbstractVertex, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::BalanceConstraint, v::AbstractVertex, model::Model)\n\nAdd a balance constraint to the vertex v. \n\nIf v is a Node, a demand balance constraint is added. \nIf v is a Transformation, this constraint ensures that the stoichiometric equations linking the input and output flows are correctly balanced.\n\nbeginaligned\n    sum_substacki  in  textbalance_eqs_ids(v)  t  in  texttime_interval(v)  textbalance_eq(v i t) = 00\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#Capacity-constraint","page":"Macro Constraint Library","title":"Capacity constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{CapacityConstraint, Edge, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::CapacityConstraint, e::Edge, model::Model)\n\nAdd a capacity constraint to the edge e. If the edge is unidirectional, the functional form of the constraint is:\n\nbeginaligned\n    textflow(e t) leq textavailability(e t) times textcapacity(e)\nendaligned\n\nIf the edge is bidirectional, the constraint is:\n\nbeginaligned\n    i times textflow(e t) leq textavailability(e t) times textcapacity(e)\nendaligned\n\nfor each time t in time_interval(e) for the edge e and each i in {0, 1}. The function availability returns the time series of the capacity factor of the edge at time t.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{CapacityConstraint, EdgeWithUC, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::CapacityConstraint, e::EdgeWithUC, model::Model)\n\nAdd a capacity constraint to the edge e with unit commitment. If the edge is unidirectional, the functional form of the constraint is:\n\nbeginaligned\n    sum_t in texttime_interval(e) textflow(e t) leq textavailability(e t) times textcapacity(e) times textucommit(e t)\nendaligned\n\nIf the edge is bidirectional, the constraint is:\n\nbeginaligned\n    i times textflow(e t) leq textavailability(e t) times textcapacity(e) times textucommit(e t)\nendaligned\n\nfor each time t in time_interval(e) for the edge e and each i in [-1, 1]. The function availability returns the time series of the availability of the edge at time t.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#CO2-capacity-constraint","page":"Macro Constraint Library","title":"CO2 capacity constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/","page":"Macro Constraint Library","title":"Macro Constraint Library","text":"The CO2 capacity constraint is used to limit the amount of CO2 that can be emitted by a single CO2 node.","category":"page"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{CO2CapConstraint, Node{CO2}, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::CO2CapConstraint, n::Node{CO2}, model::Model)\n\nConstraint the CO2 emissions of CO2 on a CO2 node n to be less than or equal to the value of the rhs_policy for the CO2CapConstraint constraint type. If the price_unmet_policy is also specified, then a slack variable is added to the constraint to allow for the CO2 emissions to exceed the value of the rhs_policy by the amount specified in the price_unmet_policy for the CO2CapConstraint constraint type. Please check the example case in the ExampleSystems folder of Macro, or the Macro Input Data section of the documentation for more information on how to specify the rhs_policy and price_unmet_policy for the CO2CapConstraint constraint type.\n\nTherefore, the functional form of the constraint is:\n\nbeginaligned\n    sum_t in texttime_interval(n) textemissions(n t) - textprice_unmet_policy(n) times textslack(n) leq textrhs_policy(n)\nendaligned\n\n\"Emissions\" in the above equation is the net balance of CO2 flows into and out of the CO2 node n.\n\nnote: Enabling CO2 emissions for an asset\nFor modelers: To allow for an asset to contribute to the CO2 emissions of a CO2 node, the asset must have an \"emissions\" key in its balance_data dictionary. The value of this key should be the emission_rate of the asset.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#Long-duration-storage-constraints","page":"Macro Constraint Library","title":"Long-duration storage constraints","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/","page":"Macro Constraint Library","title":"Macro Constraint Library","text":"These additional constraints (and variables) can be used to ensure that storage levels of long-duration storage systems do not exceed installed capacity over non-representative subperiods. ","category":"page"},{"location":"Guides/User Guide/4_constraints/","page":"Macro Constraint Library","title":"Macro Constraint Library","text":"For a complete description of the constraints, see the paper: \"Improved formulation for long-duration storage in capacity expansion models using representative periods\", Federico Parolin, Paolo Colbertaldo, Ruaridh Macdonald, 2024, https://doi.org/10.48550/arXiv.2409.19079.","category":"page"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{LongDurationStorageImplicitMinMaxConstraint, LongDurationStorage, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::LongDurationStorageImplicitMinMaxConstraint, g::LongDurationStorage, model::Model)\n\nAdds constraints to ensure that the storage levels of long-duration storage systems do not exceed installed capacity over non-representative subperiods.\n\nThe functional form of the two constraints are:\n\nbeginaligned\n    textstorage_balance(p) + textmax_storage_level(r) - textstorage_level(tstart(p)) leq textcapacity(g) \n    textstorage_balance(p) +  textmin_storage_level(r) - textstorage_level(tstart(p)) geq 0\nendaligned\n\nwhere:\n\np is a non-representative subperiod.\nr is the representative subperiod used to model p.\ntstart(p) is the first timestep of the representative subperiod r used to model the non-representative subperiod p.\nstorage_balance(p) is the balance of the storage resource at the non-representative subperiod p and is defined as \n\nbeginaligned\n    textstorage_balance(p) = (1 - textloss_fraction) times textstorage_initial(p) + fractextflow(discharge_edge tstart(p))textefficiency(discharge_edge) - textefficiency(charge_edge) times textflow(charge_edge tstart(p))\nendaligned\n\nmax_storage_level(r) and min_storage_level(r) are the maximum and minimum storage levels for the representative subperiod r, respectively. These are used to constrain the storage levels as follows:\n\nbeginaligned\n    textmin_storage_level(t) leq textstorage_level(t) leq textmax_storage_level(t)\nendaligned\n\nfor each time t in the time interval of the storage resource g. t' is the corresponding time in the representative subperiod r used to model the time interval of the storage resource g.\n\nwarning: Only applies to long duration energy storage\nThis constraint only applies to long duration energy storage resources. To model a storage technology as long duration energy storage, the user must set long_duration = true in the Storage component of the asset in the .json file. Check the the file hydropower.json in the ExampleSystems/eastern_us_three_zones folder for an example of how to model a long duration energy storage resource.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#Maximum-capacity-constraint","page":"Macro Constraint Library","title":"Maximum capacity constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{MaxCapacityConstraint, Union{AbstractEdge, AbstractStorage}, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MaxCapacityConstraint, y::Union{AbstractEdge,AbstractStorage}, model::Model)\n\nAdd a max capacity constraint to the edge or storage y. The functional form of the constraint is:\n\nbeginaligned\n    textcapacity(y) leq textmax_capacity(y)\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#Maximum-non-served-demand-constraint","page":"Macro Constraint Library","title":"Maximum non-served demand constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{MaxNonServedDemandConstraint, Node, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MaxNonServedDemandConstraint, n::Node, model::Model)\n\nAdd a max non-served demand constraint to the node n. The functional form of the constraint is:\n\nbeginaligned\n    sum_s in textsegments_nsd(n) textnon_served_demand(n s t) leq textdemand(n t)\nendaligned\n\nfor each time t in time_interval(n) for the node n.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#Maximum-non-served-demand-per-segment-constraint","page":"Macro Constraint Library","title":"Maximum non-served demand per segment constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{MaxNonServedDemandPerSegmentConstraint, Node, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(\n    ct::MaxNonServedDemandPerSegmentConstraint,\n    n::Node,\n    model::Model,\n)\n\nAdd a max non-served demand per segment constraint to the node n. The functional form of the constraint is:\n\nbeginaligned\n    textnon_served_demand(n s t) leq textmax_non_served_demand(n s) times textdemand(n t)\nendaligned\n\nfor each segment s in segments_non_served_demand(n) and each time t in time_interval(n) for the node n. The function segments_non_served_demand returns the segments of the non-served demand of the node n as defined in the input data nodes.json.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#Maximum-storage-level-constraint","page":"Macro Constraint Library","title":"Maximum storage level constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{MaxStorageLevelConstraint, AbstractStorage, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MaxStorageLevelConstraint, g::AbstractStorage, model::Model)\n\nAdd a max storage level constraint to the storage g. The functional form of the constraint is:\n\nbeginaligned\n    textstorage_level(g t) leq textmax_storage_level(g) times textcapacity(g)\nendaligned\n\nfor each time t in time_interval(g) for the storage g.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#Minimum-capacity-constraint","page":"Macro Constraint Library","title":"Minimum capacity constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{MinCapacityConstraint, Union{AbstractEdge, AbstractStorage}, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MinCapacityConstraint, y::Union{AbstractEdge,AbstractStorage}, model::Model)\n\nAdd a min capacity constraint to the edge or storage y. The functional form of the constraint is:\n\nbeginaligned\n    textcapacity(y) geq textmin_capacity(y)\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#Minimum-flow-constraint","page":"Macro Constraint Library","title":"Minimum flow constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{MinFlowConstraint, Edge, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MinFlowConstraint, e::Edge, model::Model)\n\nAdd a min flow constraint to the edge e. The functional form of the constraint is:\n\nbeginaligned\n    textflow(e t) geq textmin_flow_fraction(e) times textcapacity(e)\nendaligned\n\nfor each time t in time_interval(e) for the edge e. \n\nnote: Note\nThis constraint is available only for unidirectional edges.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{MinFlowConstraint, EdgeWithUC, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MinFlowConstraint, e::EdgeWithUC, model::Model)\n\nAdd a min flow constraint to the edge e with unit commitment. The functional form of the constraint is:\n\nbeginaligned\n    textflow(e t) geq textmin_flow_fraction(e) times textcapacity_size(e) times textucommit(e t)\nendaligned\n\nfor each time t in time_interval(e) for the edge e.\n\nnote: Note\nThis constraint is available only for unidirectional edges.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#Minimum-storage-level-constraint","page":"Macro Constraint Library","title":"Minimum storage level constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{MinStorageLevelConstraint, AbstractStorage, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MinStorageLevelConstraint, g::AbstractStorage, model::Model)\n\nAdd a min storage level constraint to the storage g. The functional form of the constraint is:\n\nbeginaligned\n    textstorage_level(g t) geq textmin_storage_level(g) times textcapacity(g)\nendaligned\n\nfor each time t in time_interval(g) for the storage g.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#Minimum-storage-outflow-constraint","page":"Macro Constraint Library","title":"Minimum storage outflow constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{MinStorageOutflowConstraint, AbstractStorage, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MinStorageOutflowConstraint, g::AbstractStorage, model::Model)\n\nAdd a min storage outflow constraint to the storage g part of a HydroRes asset. The functional form of the constraint is:\n\nbeginaligned\n    textflow(spillage_edge t) + textflow(discharge_edge t) geq textmin_outflow_fraction(g) times textcapacity(discharge_edge)\nendaligned\n\nfor each time t in time_interval(g) for the storage g.\n\nwarning: Only applies to HydroRes assets\nThis constraint only applies to HydroRes assets. It returns a warning if the storage g does not have a spillage edge.  If the discharge edge is the only outflow, you should apply MinFlowConstraint to the discharge edge.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#Minimum-up-and-down-time-constraint","page":"Macro Constraint Library","title":"Minimum up and down time constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{MinUpTimeConstraint, EdgeWithUC, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MinUpTimeConstraint, e::EdgeWithUC, model::Model)\n\nAdd a min up time constraint to the edge e with unit commitment. The functional form of the constraint is:\n\nbeginaligned\n    textucommit(e t) geq sum_h=0^textmin_up_time(e)-1 textustart(e t-h)\nendaligned\n\nfor each time t in time_interval(e) for the edge e. The function timestepbefore is used to perform the time wrapping within the subperiods and get the correct time step before t.\n\nnote: Min up time duration\nThis constraint will throw an error if the minimum up time is longer than the length of one subperiod.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{MinDownTimeConstraint, EdgeWithUC, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MinDownTimeConstraint, e::EdgeWithUC, model::Model)\n\nAdd a min down time constraint to the edge e with unit commitment. The functional form of the constraint is:\n\nbeginaligned\n    fractextcapacity(e)textcapacity_size(e) - textucommit(e t) geq sum_h=0^textmin_down_time(e)-1 textushut(e t-h)\nendaligned\n\nfor each time t in time_interval(e) for the edge e. The function timestepbefore is used to perform the time wrapping within the subperiods and get the correct time step before t.\n\nnote: Min down time duration\nThis constraint will throw an error if the minimum down time is longer than the length of one subperiod.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#Must-run-constraint","page":"Macro Constraint Library","title":"Must-run constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{MustRunConstraint, Edge, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MustRunConstraint, e::Edge, model::Model)\n\nAdd a must run constraint to the edge e. The functional form of the constraint is:\n\nbeginaligned\n    textflow(e t) = textavailability(e t) times textcapacity(e)\nendaligned\n\nfor each time t in time_interval(e) for the edge e.\n\nnote: Must run constraint\nThis constraint is available only for unidirectional edges.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#Ramping-limits-constraint","page":"Macro Constraint Library","title":"Ramping limits constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{RampingLimitConstraint, Edge, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::RampingLimitConstraint, e::Edge, model::Model)\n\nAdd a ramping limit constraint to the edge e. The functional form of the ramping up limit constraint is:\n\nbeginaligned\n    textflow(e t) - textflow(e t-1) + textregulation_term(e t) + textreserves_term(e t) - textramp_up_fraction(e) times textcapacity(e) leq 0\nendaligned\n\nOn the other hand, the ramping down limit constraint is:\n\nbeginaligned\n    textflow(e t-1) - textflow(e t) + textregulation_term(e t) + textreserves_term(e t) - textramp_down_fraction(e) times textcapacity(e) leq 0\nendaligned\n\nfor each time t in time_interval(e) for the edge e. The function timestepbefore is used to perform the time wrapping within the subperiods and get the correct time step before t.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{RampingLimitConstraint, EdgeWithUC, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::RampingLimitConstraint, e::EdgeWithUC, model::Model)\n\nAdd a ramping limit constraint to the edge e with unit commitment. The functional form of the ramping up limit constraint is:\n\nbeginaligned\n    textflow(e t) - textflow(e t-1) + textregulation_term(e t) + textreserves_term(e t) - textramp_up_fraction(e) times textcapacity_size(e) times (textucommit(e t) - textustart(e t)) + textmin(availability(e t) max(min_flow_fraction(e) ramp_up_fraction(e))) times textcapacity_size(e) times textustart(e t) - textmin_flow_fraction(e) times textcapacity_size(e) times textushut(e t) leq 0\nendaligned\n\nOn the other hand, the ramping down limit constraint is:\n\nbeginaligned\n    textflow(e t-1) - textflow(e t) + textregulation_term(e t) + textreserves_term(e t) - textramp_down_fraction(e) times textcapacity_size(e) times (textucommit(e t) - textustart(e t)) - textmin_flow_fraction(e) times textcapacity_size(e) times textustart(e t) + textmin(availability(e t) max(min_flow_fraction(e) ramp_down_fraction(e))) times textcapacity_size(e) times textushut(e t) leq 0\nendaligned\n\nfor each time t in time_interval(e) for the edge e. The function timestepbefore is used to perform the time wrapping within the subperiods and get the correct time step before t.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#Storage-capacity-constraint","page":"Macro Constraint Library","title":"Storage capacity constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{StorageCapacityConstraint, AbstractStorage, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::StorageCapacityConstraint, g::AbstractStorage, model::Model)\n\nAdd a storage capacity constraint to the storage g. The functional form of the constraint is:\n\nbeginaligned\n    textstorage_level(g t) leq textcapacity(g)\nendaligned\n\nfor each time t in time_interval(g) for the storage g.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#Storage-discharge-limit-constraint","page":"Macro Constraint Library","title":"Storage discharge limit constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{StorageDischargeLimitConstraint, Edge, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::StorageDischargeLimitConstraint, e::Edge, model::Model)\n\nAdd a storage discharge limit constraint to the edge e if the start vertex of the edge is a storage. The functional form of the constraint is:\n\nbeginaligned\n   fractextflow(e t)textefficiency(e) leq textstorage_level(start_vertex(e) timestepbefore(t 1 subperiods(e)))\nendaligned\n\nfor each time t in time_interval(e) for the edge e. The function timestepbefore is used to perform the time wrapping within the subperiods and get the correct time step before t.\n\nnote: Storage discharge limit constraint\nThis constraint is only applied to edges with a start vertex that is a storage.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#Storage-symmetric-capacity-constraint","page":"Macro Constraint Library","title":"Storage symmetric capacity constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{StorageSymmetricCapacityConstraint, AbstractStorage, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(\n    ct::StorageSymmetricCapacityConstraint,\n    g::AbstractStorage,\n    model::Model,\n)\n\nAdd a storage symmetric capacity constraint to the storage g. The functional form of the constraint is:\n\nbeginaligned\n    textflow(e_discharge t) + textflow(e_charge t) leq textcapacity(e_discharge)\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#Storage-charge-discharge-ratio-constraint","page":"Macro Constraint Library","title":"Storage charge discharge ratio constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{StorageChargeDischargeRatioConstraint, AbstractStorage, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(\n    ct::StorageChargeDischargeRatioConstraint,\n    g::AbstractStorage,\n    model::Model,\n)\n\nAdd a storage charge discharge ratio constraint to the storage g. The functional form of the constraint is:\n\nbeginaligned\n    textcharge_discharge_ratio(g) times textcapacity(gdischarge_edge) = textcapacity(gcharge_edge)\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#Storage-max-duration-constraint","page":"Macro Constraint Library","title":"Storage max duration constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{StorageMaxDurationConstraint, AbstractStorage, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::StorageMaxDurationConstraint, g::AbstractStorage, model::Model)\n\nAdd a storage max duration constraint to the storage g. The functional form of the constraint is:\n\nbeginaligned\n    textcapacity(g) leq textmax_duration(g) times textcapacity(discharge_edge(g))\nendaligned\n\nnote: Storage max duration constraint\nThis constraint is only applied if the maximum duration is greater than 0.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/#Storage-min-duration-constraint","page":"Macro Constraint Library","title":"Storage min duration constraint","text":"","category":"section"},{"location":"Guides/User Guide/4_constraints/#MacroEnergy.add_model_constraint!-Tuple{StorageMinDurationConstraint, AbstractStorage, Model}","page":"Macro Constraint Library","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::StorageMinDurationConstraint, g::AbstractStorage, model::Model)\n\nAdd a storage min duration constraint to the storage g. The functional form of the constraint is:\n\nbeginaligned\n    textcapacity(g) geq textmin_duration(g) times textcapacity(discharge_edge(g))\nendaligned\n\nnote: Storage min duration constraint\nThis constraint is only applied if the minimum duration is greater than 0.\n\n\n\n\n\n","category":"method"},{"location":"Guides/User Guide/4_constraints/","page":"Macro Constraint Library","title":"Macro Constraint Library","text":"","category":"page"},{"location":"References/4_writing_output/#Output-functions","page":"Writing output data","title":"Output functions","text":"","category":"section"},{"location":"References/4_writing_output/","page":"Writing output data","title":"Writing output data","text":"Pages = [\"3_writing_output.md\"]","category":"page"},{"location":"References/4_writing_output/#collect_results","page":"Writing output data","title":"collect_results","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.collect_results","page":"Writing output data","title":"MacroEnergy.collect_results","text":"collect_results(system::System, model::Model, settings::NamedTuple, period_index::Int64=1, scaling::Float64=1.0)\n\nReturns a DataFrame with all the results after the optimization is performed. \n\nArguments\n\nsystem::System: The system object containing the case inputs.\nmodel::Model: The model being optimized.\nsettings::NamedTuple: The settings for the system, including output configurations.\nperiod_index::Int64: The index of the period to collect results for (default is 1).\nscaling::Float64: The scaling factor for the results.\n\nReturns\n\nDataFrame: A `DataFrame containing all the outputs from a system.\n\nExample\n\ncollect_results(system, model)\n198534×12 DataFrame\n    Row │ case_name  commodity    commodity_subtype  zone        resource_id                component_id                       type              variable  segment  time   value\n        │ Missing    Symbol       Symbol             Symbol      Symbol                     Symbol                             Symbol            Symbol    Int64    Int64  Float64\n────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n      1 │   missing  Biomass      flow               bioherb_SE  SE_BECCS_Electricity_Herb  SE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  flow            1      1  0.0\n      2 │   missing  Biomass      flow               bioherb_SE  SE_BECCS_Electricity_Herb  SE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  flow            1      2  0.0\n      3 │   missing  Biomass      flow               bioherb_SE  SE_BECCS_Electricity_Herb  SE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  flow            1      3  0.0\n      ...\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/#get_optimal_capacity","page":"Writing output data","title":"get_optimal_capacity","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.get_optimal_capacity","page":"Writing output data","title":"MacroEnergy.get_optimal_capacity","text":"get_optimal_capacity(system::System; scaling::Float64=1.0)\n\nGet the optimal capacity values for all assets/edges in a system.\n\nArguments\n\nsystem::System: The system containing the assets/edges to analyze\nscaling::Float64: The scaling factor for the results.\n\nReturns\n\nDataFrame: A dataframe containing the optimal capacity values for all assets/edges, with missing columns removed\n\nExample\n\nget_optimal_capacity(system)\n153×8 DataFrame\n Row │ commodity    commodity_subtype  zone           resource_id                        component_id                       type              variable  value    \n     │ Symbol       Symbol             Symbol         Symbol                             Symbol                             Symbol            Symbol    Float64 \n─────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ Electricity  capacity           elec_SE        existing_solar_SE                  existing_solar_SE_edge             VRE               capacity   8.5022\n   2 │ Electricity  capacity           elec_NE        existing_solar_NE                  existing_solar_NE_edge             VRE               capacity   0.0   \n   3 │ Electricity  capacity           elec_NE        existing_wind_NE                   existing_wind_NE_edge              VRE               capacity   3.6545\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/#get_optimal_discounted_costs","page":"Writing output data","title":"get_optimal_discounted_costs","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.get_optimal_discounted_costs","page":"Writing output data","title":"MacroEnergy.get_optimal_discounted_costs","text":"Helper function to extract discounted costs from the optimization results and return them as a DataFrame.\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/#get_optimal_flow","page":"Writing output data","title":"get_optimal_flow","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.get_optimal_flow","page":"Writing output data","title":"MacroEnergy.get_optimal_flow","text":"get_optimal_flow(\n    system::System; \n    scaling::Float64=1.0, \n    commodity::Union{AbstractString,Vector{<:AbstractString},Nothing}=nothing, \n    asset_type::Union{AbstractString,Vector{<:AbstractString},Nothing}=nothing\n)\n\nGet the optimal flow values for all edges in a system.\n\nFiltering\n\nResults can be filtered by:\n\ncommodity: Specific commodity type(s)\nasset_type: Specific asset type(s)\n\nPattern Matching\n\nTwo types of pattern matching are supported:\n\nParameter-free matching:\n\"ThermalPower\" matches any ThermalPower{...} type (i.e. no need to specify parameters inside {})\nWildcards using \"*\":\n\"ThermalPower*\" matches ThermalPower{Fuel}, ThermalPowerCCS{Fuel}, etc.\n\"CO2*\" matches CO2, CO2Captured, etc.\n\nArguments\n\nsystem::System: The system containing the all edges to output   \nscaling::Float64: The scaling factor for the results.\ncommodity::Union{AbstractString,Vector{<:AbstractString},Nothing}: The commodity to filter by\nasset_type::Union{AbstractString,Vector{<:AbstractString},Nothing}: The asset type to filter by\n\nReturns\n\nDataFrame: A dataframe containing the optimal flow values for all edges, with missing columns removed\n\nExample\n\nget_optimal_flow(system)\n186984×11 DataFrame\n    Row │ commodity    commodity_subtype  zone        resource_id                component_id                       type              variable  segment  time   value     \n        │ Symbol       Symbol             Symbol      Symbol                     Symbol                             Symbol            Symbol    Int64    Int64  Float64\n────────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n      1 │ Biomass      flow               bioherb_SE  SE_BECCS_Electricity_Herb  SE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  flow            1      1  0.0    \n      2 │ Biomass      flow               bioherb_SE  SE_BECCS_Electricity_Herb  SE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  flow            1      2  0.0    \n      3 │ Biomass      flow               bioherb_SE  SE_BECCS_Electricity_Herb  SE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  flow            1      3  0.0    \n      ...\n# Filter by commodity\nget_optimal_flow(system, commodity=\"Electricity\")\n# Filter by commodity and asset type using parameter-free matching\nget_optimal_flow(system, commodity=\"Electricity\", asset_type=\"ThermalPower\") # only ThermalPower{Fuel} will be returned\n# Filter by commodity and asset type using wildcard matching\nget_optimal_flow(system, commodity=\"Electricity\", asset_type=\"ThermalPower*\") # all types starting with ThermalPower (e.g., ThermalPower{Fuel}, ThermalPowerCCS{Fuel}) will be returned)\n\n\n\n\n\nget_optimal_flow(asset::AbstractAsset, scaling::Float64=1.0)\n\nGet the optimal flow values for all edges in an asset.\n\nArguments\n\nasset::AbstractAsset: The asset containing the edges to analyze\nscaling::Float64: The scaling factor for the results.\n\nReturns\n\nDataFrame: A dataframe containing the optimal flow values for all edges, with missing columns removed\n\nExample\n\nasset = get_asset_by_id(system, :elec_SE)\nget_optimal_flow(asset)\n\n\n\n\n\nget_optimal_flow(edge::AbstractEdge, scaling::Float64=1.0)\n\nGet the optimal flow values for an edge.\n\nArguments\n\nedge::AbstractEdge: The edge to analyze\nscaling::Float64: The scaling factor for the results.\n\nReturns\n\nDataFrame: A dataframe containing the optimal flow values for the edge, with missing columns removed\n\nExample\n\nasset = get_asset_by_id(system, :elec_SE)\nelec_edge = asset.elec_edge\nget_optimal_flow(elec_edge)\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/#get_optimal_new_capacity","page":"Writing output data","title":"get_optimal_new_capacity","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.get_optimal_new_capacity","page":"Writing output data","title":"MacroEnergy.get_optimal_new_capacity","text":"get_optimal_new_capacity(system::System; scaling::Float64=1.0)\n\nGet the optimal new capacity values for all assets/edges in a system.\n\nArguments\n\nsystem::System: The system containing the assets/edges to analyze\nscaling::Float64: The scaling factor for the results.\n\nReturns\n\nDataFrame: A dataframe containing the optimal new capacity values for all assets/edges, with missing columns removed\n\nExample\n\nget_optimal_new_capacity(system)\n153×8 DataFrame\n Row │ commodity    commodity_subtype  zone           resource_id                        component_id                       type              variable      value  \n     │ Symbol       Symbol             Symbol         Symbol                             Symbol                             Symbol            Symbol        Float64\n─────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ Biomass      capacity           bioherb_SE     SE_BECCS_Electricity_Herb          SE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  new_capacity      0.0\n   2 │ Biomass      capacity           bioherb_MIDAT  MIDAT_BECCS_Electricity_Herb       MIDAT_BECCS_Electricity_Herb_bio…  BECCSElectricity  new_capacity      0.0\n   3 │ Biomass      capacity           bioherb_NE     NE_BECCS_Electricity_Herb          NE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  new_capacity      0.0\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/#get_optimal_retired_capacity","page":"Writing output data","title":"get_optimal_retired_capacity","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.get_optimal_retired_capacity","page":"Writing output data","title":"MacroEnergy.get_optimal_retired_capacity","text":"get_optimal_retired_capacity(system::System; scaling::Float64=1.0)\n\nGet the optimal retired capacity values for all assets/edges in a system.\n\nArguments\n\nsystem::System: The system containing the assets/edges to analyze\nscaling::Float64: The scaling factor for the results.\n\nReturns\n\nDataFrame: A dataframe containing the optimal retired capacity values for all assets/edges, with missing columns removed\n\nExample\n\nget_optimal_retired_capacity(system)\n153×8 DataFrame\n Row │ commodity    commodity_subtype  zone           resource_id                        component_id                       type              variable      value    \n     │ Symbol       Symbol             Symbol         Symbol                             Symbol                             Symbol            Symbol        Float64  \n─────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ Biomass      capacity           bioherb_SE     SE_BECCS_Electricity_Herb          SE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  retired_capacity  0.0\n   2 │ Biomass      capacity           bioherb_MIDAT  MIDAT_BECCS_Electricity_Herb       MIDAT_BECCS_Electricity_Herb_bio…  BECCSElectricity  retired_capacity  0.0\n   3 │ Biomass      capacity           bioherb_NE     NE_BECCS_Electricity_Herb          NE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  retired_capacity  0.0\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/#write_capacity","page":"Writing output data","title":"write_capacity","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.write_capacity","page":"Writing output data","title":"MacroEnergy.write_capacity","text":"write_capacity(\n    file_path::AbstractString, \n    system::System; \n    scaling::Float64=1.0, \n    drop_cols::Vector{AbstractString}=String[], \n    commodity::Union{AbstractString,Vector{AbstractString},Nothing}=nothing, \n    asset_type::Union{AbstractString,Vector{AbstractString},Nothing}=nothing\n)\n\nWrite the optimal capacity results for all assets/edges in a system to a file.  The extension of the file determines the format of the file. Capacity, NewCapacity, and RetiredCapacity are first concatenated and then written to the file.\n\nFiltering\n\nResults can be filtered by:\n\ncommodity: Specific commodity type(s)\nasset_type: Specific asset type(s)\n\nPattern Matching\n\nTwo types of pattern matching are supported:\n\nParameter-free matching:\n\"ThermalPower\" matches any ThermalPower{...} type (i.e. no need to specify parameters inside {})\nWildcards using \"*\":\n\"ThermalPower*\" matches ThermalPower{Fuel}, ThermalPowerCCS{Fuel}, etc.\n\"CO2*\" matches CO2, CO2Captured, etc.\n\nArguments\n\nfile_path::AbstractString: The path to the file where the results will be written\nsystem::System: The system containing the assets/edges to analyze as well as the settings for the output\nscaling::Float64: The scaling factor for the results\ndrop_cols::Vector{AbstractString}: Columns to drop from the DataFrame\ncommodity::Union{AbstractString,Vector{AbstractString},Nothing}: The commodity to filter by\nasset_type::Union{AbstractString,Vector{AbstractString},Nothing}: The asset type to filter by\n\nReturns\n\nnothing: The function returns nothing, but writes the results to the file\n\nExample\n\nwrite_capacity(\"capacity.csv\", system)\n# Filter by commodity\nwrite_capacity(\"capacity.csv\", system, commodity=\"Electricity\")\n# Filter by commodity and asset type using parameter-free matching\nwrite_capacity(\"capacity.csv\", system, asset_type=\"ThermalPower\")\n# Filter by asset type using wildcard matching\nwrite_capacity(\"capacity.csv\", system, asset_type=\"ThermalPower*\")\n# Filter by commodity and asset type\nwrite_capacity(\"capacity.csv\", system, commodity=\"Electricity\", asset_type=[\"ThermalPower\", \"Battery\"])\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/#write_costs","page":"Writing output data","title":"write_costs","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.write_costs","page":"Writing output data","title":"MacroEnergy.write_costs","text":"write_costs(\n    file_path::AbstractString, \n    system::System, \n    model::Union{Model,NamedTuple}; \n    scaling::Float64=1.0, \n    drop_cols::Vector{<:AbstractString}=String[]\n)\n\nWrite the optimal costs for the system to a file. The extension of the file determines the format of the file.\n\nArguments\n\nfile_path::AbstractString: The path to the file where the results will be written\nsystem::System: The system containing the assets/edges to analyze as well as the settings for the output\nmodel::Union{Model,NamedTuple}: The optimal model after the optimization\nscaling::Float64: The scaling factor for the results\ndrop_cols::Vector{<:AbstractString}: Columns to drop from the DataFrame\n\nReturns\n\nnothing: The function returns nothing, but writes the results to the file\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/#write_flow","page":"Writing output data","title":"write_flow","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.write_flow","page":"Writing output data","title":"MacroEnergy.write_flow","text":"write_flow(\n    file_path::AbstractString, \n    system::System; \n    scaling::Float64=1.0, \n    drop_cols::Vector{<:AbstractString}=String[],\n    commodity::Union{AbstractString,Vector{<:AbstractString},Nothing}=nothing,\n    asset_type::Union{AbstractString,Vector{<:AbstractString},Nothing}=nothing\n)\n\nWrite the optimal flow results for the system to a file. The extension of the file determines the format of the file.\n\nFiltering\n\nResults can be filtered by:\n\ncommodity: Specific commodity type(s)\nasset_type: Specific asset type(s)\n\nPattern Matching\n\nTwo types of pattern matching are supported:\n\nParameter-free matching:\n\"ThermalPower\" matches any ThermalPower{...} type (i.e. no need to specify parameters inside {})\nWildcards using \"*\":\n\"ThermalPower*\" matches ThermalPower{Fuel}, ThermalPowerCCS{Fuel}, etc.\n\"CO2*\" matches CO2, CO2Captured, etc.\n\nArguments\n\nfile_path::AbstractString: The path to the file where the results will be written\nsystem::System: The system containing the edges to analyze as well as the settings for the output\nscaling::Float64: The scaling factor for the results\ndrop_cols::Vector{<:AbstractString}: Columns to drop from the DataFrame\ncommodity::Union{AbstractString,Vector{<:AbstractString},Nothing}: The commodity to filter by\nasset_type::Union{AbstractString,Vector{<:AbstractString},Nothing}: The asset type to filter by\n\nReturns\n\nnothing: The function returns nothing, but writes the results to the file\n\nExample\n\nwrite_flow(\"flow.csv\", system)\n# Filter by commodity\nwrite_flow(\"flow.csv\", system, commodity=\"Electricity\")\n# Filter by commodity and asset type using parameter-free matching\nwrite_flow(\"flow.csv\", system, commodity=\"Electricity\", asset_type=\"ThermalPower\")\n# Filter by commodity and asset type using wildcard matching\nwrite_flow(\"flow.csv\", system, commodity=\"Electricity\", asset_type=\"ThermalPower*\")\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/#write_dataframe","page":"Writing output data","title":"write_dataframe","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.write_dataframe","page":"Writing output data","title":"MacroEnergy.write_dataframe","text":"write_dataframe(\n    file_path::AbstractString, \n    df::AbstractDataFrame, \n    drop_cols::Vector{<:AbstractString}=String[]\n)\n\nWrite a DataFrame to a file in the appropriate format based on file extension. Supported formats: .csv, .csv.gz, .parquet\n\nArguments\n\nfile_path::AbstractString: Path where to save the file\ndf::AbstractDataFrame: DataFrame to write\ndrop_cols::Vector{<:AbstractString}: Columns to drop from the DataFrame\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/#write_results","page":"Writing output data","title":"write_results","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.write_results","page":"Writing output data","title":"MacroEnergy.write_results","text":"write_results(file_path::AbstractString, system::System, model::Model, settings::NamedTuple, period_index::Int64=1)\n\nCollects all the results as a DataFrame and then writes them to disk after the optimization is performed. \n\nArguments\n\nfile_path::AbstractString: full path of the file to export. \nsystem::System: The system object containing the case inputs.\nmodel::Model: The model being optimized.\nperiod_index::Int64: The index of the period to collect results for (default is 1).\nsettings::NamedTuple: The settings for the system, including output configurations.\n\nReturns\n\nExample\n\nwrite_results(case_path * \"results.csv\", system, model) # CSV\nwrite_results(case_path * \"results.csv.gz\", system, model)  # GZIP\nwrite_results(case_path * \"results.parquet\", system, model) # PARQUET\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/#MacroEnergy.write_outputs","page":"Writing output data","title":"MacroEnergy.write_outputs","text":"","category":"section"},{"location":"References/4_writing_output/#MacroEnergy.write_outputs","page":"Writing output data","title":"MacroEnergy.write_outputs","text":"Write results when using Monolithic as solution algorithm.\n\n\n\n\n\nWrite results when using Myopic as solution algorithm. \n\n\n\n\n\nWrite results when using Benders as solution algorithm.\n\n\n\n\n\n","category":"function"},{"location":"References/4_writing_output/","page":"Writing output data","title":"Writing output data","text":"","category":"page"},{"location":"Manual/assets/natgasdaq/#Natural-Gas-DAC","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/#Graph-structure","page":"Natural Gas DAC","title":"Graph structure","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"A natural gas DAC is represented in Macro using the following graph structure:","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"<img width=\"400\" src=\"../../images/natgasdac.png\" />","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"A natural gas DAC asset is made of:","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"1 Transformation component, representing the natural gas DAC process.\n5 Edge components:\n1 incoming NaturalGas Edge, representing the natural gas supply.\n1 incoming CO2 Edge, representing the CO2 that is absorbed by the natural gas DAC process.\n1 outgoing Electricity Edge, representing the electricity production.\n1 outgoing CO2Captured Edge, representing the CO2 that is captured.\n1 outgoing CO2 Edge, representing the CO2 that is emitted.","category":"page"},{"location":"Manual/assets/natgasdaq/#Attributes","page":"Natural Gas DAC","title":"Attributes","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"The structure of the input file for a natural gas DAC asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"ng_edge\": {\n            // ... ng_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        },\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"co2_emission_edge\": {\n            // ... co2_emission_edge-specific attributes ...\n        },\n        \"co2_captured_edge\": {\n            // ... co2_captured_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/natgasdaq/#Transformation","page":"Natural Gas DAC","title":"Transformation","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"The definition of the transformation object can be found here MacroEnergy.Transformation.","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Attribute Type Values Default Description/Units\ntimedata String String Required Time resolution for the time series data linked to the transformation. E.g. \"NaturalGas\".\nconstraints Dict{String,Bool} Any Macro constraint type for vertices BalanceConstraint List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\ncapture_rate epsilon_co2_capture_rate Float64 Float64 1.0 t_CO2MWh_ng\nelectricity_production epsilon_elec_prod Float64 Float64 0.0 MWh_elecMWh_ng\nemission_rate epsilon_emission_rate Float64 Float64 1.0 t_CO2MWh_ng\nfuel_consumption epsilon_fuel_consumption Float64 Float64 0.0 MWh_ngt_CO2","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"tip: Default constraints\nThe default constraint for the transformation part of the natural gas DAC asset is the following:Balance constraint","category":"page"},{"location":"Manual/assets/natgasdaq/#Flow-equations","page":"Natural Gas DAC","title":"Flow equations","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"note: NaturalGasDAC\nbeginaligned\nphi_elec = phi_co2 cdot epsilon_elec_prod \nphi_ng = -phi_co2 cdot epsilon_fuel_consumption \nphi_co2 = phi_ng cdot epsilon_emission_rate \nphi_co2_captured + phi_co2 = phi_ng cdot epsilon_co2_capture_rate \nendaligned","category":"page"},{"location":"Manual/assets/natgasdaq/#Edges","page":"Natural Gas DAC","title":"Edges","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"warning: Asset expansion\nAs a modeling decision, only the incoming CO2 edge is allowed to expand. Therefore, the has_capacity attribute can only be set for this edge. For all the other edges, this attribute is pre-set to false to ensure the correct modeling of the asset. ","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"warning: Directionality\nThe unidirectional attribute is only available for the incoming CO2 edge. For the other edges, this attribute is pre-set to true to ensure the correct modeling of the asset. ","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Attribute Type Values Default Description\ntype String Any Macro commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"natgas_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges Empty List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"assets/availability.csv\", \"header\": \"Availability_MW_z1\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool false Whether the edge is unidirectional.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"tip: Default constraints\nThe only default constraint for the edges of the natural gas DAC asset is the Capacity constraint applied to the incoming CO2 edge. ","category":"page"},{"location":"Manual/assets/natgasdaq/#Example","page":"Natural Gas DAC","title":"Example","text":"","category":"section"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"The following input file example shows how to create a natural gas DAC asset in each of the three zones NE, SE and MIDAT.","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"{\n    \"NaturalGasDAC\": [\n        {\n            \"type\": \"NaturalGasDAC\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"NaturalGas\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"co2_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"start_vertex\": \"co2_sink\",\n                        \"can_retire\": true,\n                        \"can_expand\": true,\n                        \"integer_decisions\": false,\n                        \"uc\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true\n                        }\n                    },\n                    \"co2_emission_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_sink\"\n                    },\n                    \"ng_edge\": {\n                        \"type\": \"NaturalGas\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"co2_captured_edge\": {\n                        \"type\": \"CO2Captured\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_captured_sink\"\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Sorbent_DAC\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.005516648,\n                        \"capture_rate\": 0.546148172,\n                        \"electricity_production\": 0.125,\n                        \"fuel_consumption\": 3.047059915\n                    },\n                    \"edges\": {\n                        \"co2_edge\": {\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_Sorbent_DAC\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 869000.00,\n                            \"fixed_om_cost\": 384000.00,\n                            \"variable_om_cost\": 58.41,\n                            \"ramp_up_fraction\": 1.0,\n                            \"ramp_down_fraction\": 1.0\n                        },\n                        \"ng_edge\": {\n                            \"start_vertex\": \"natgas_SE\"\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_Sorbent_DAC\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.005516648,\n                        \"capture_rate\": 0.546148172,\n                        \"electricity_production\": 0.125,\n                        \"fuel_consumption\": 3.047059915\n                    },\n                    \"edges\": {\n                        \"co2_edge\": {\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_Sorbent_DAC\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 869000.00,\n                            \"fixed_om_cost\": 384000.00,\n                            \"variable_om_cost\": 58.41,\n                            \"ramp_up_fraction\": 1.0,\n                            \"ramp_down_fraction\": 1.0\n                        },\n                        \"ng_edge\": {\n                            \"start_vertex\": \"natgas_MIDAT\"\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_Sorbent_DAC\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.005516648,\n                        \"capture_rate\": 0.546148172,\n                        \"electricity_production\": 0.125,\n                        \"fuel_consumption\": 3.047059915\n                    },\n                    \"edges\": {\n                        \"co2_edge\": {\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_Sorbent_DAC\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 869000.00,\n                            \"fixed_om_cost\": 384000.00,\n                            \"variable_om_cost\": 58.41,\n                            \"ramp_up_fraction\": 1.0,\n                            \"ramp_down_fraction\": 1.0\n                        },\n                        \"ng_edge\": {\n                            \"start_vertex\": \"natgas_NE\"\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_NE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/natgasdaq/","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"","category":"page"},{"location":"Guides/Modeler Guide/modeler_introduction/#Modeler-Guides","page":"Introduction","title":"Modeler Guides","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_introduction/","page":"Introduction","title":"Introduction","text":"This guide is designed to help modelers create, debug, and test new sectors, assets, and public policies.","category":"page"},{"location":"Guides/Modeler Guide/modeler_introduction/","page":"Introduction","title":"Introduction","text":"It is organized into the following sections:","category":"page"},{"location":"Guides/Modeler Guide/modeler_introduction/","page":"Introduction","title":"Introduction","text":"Energy System Graph-Based Representation: An overview of how Macro represents an energy system as a multi-commodity flow network.\nCreating a New Sector: Step-by-step instructions for developing a new sector.\nCreating a New Asset: Instructions for creating a new asset.\nCreating a New Example Case: A guide to developing a new example case.\nSuggested Development Workflow: A recommended workflow for developing new sectors and assets.\nDebugging and Testing a Macro Model: Guidance on how to debug and test new sectors and assets.","category":"page"},{"location":"Guides/Modeler Guide/modeler_introduction/","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"Getting Started/4_macro_repo_contents/#What-is-in-the-Macro-repo?","page":"What's Included With Macro","title":"What is in the Macro repo?","text":"","category":"section"},{"location":"Getting Started/4_macro_repo_contents/","page":"What's Included With Macro","title":"What's Included With Macro","text":"If you have downloaded or cloned the Macro code, rather than simply import it as a Julia package (which is not currently possible if your are a beta-user), then you will find the following files in your Macro folder:","category":"page"},{"location":"Getting Started/4_macro_repo_contents/","page":"What's Included With Macro","title":"What's Included With Macro","text":"MacroEnergy.jl\n├── ExampleSystems\n├── docs\n├── src\n├── test\n├── tutorials\n├── LICENSE\n└── Project.toml","category":"page"},{"location":"Getting Started/4_macro_repo_contents/","page":"What's Included With Macro","title":"What's Included With Macro","text":"You will probably see several other files and folders but you can ignore these. They are mostly responsible for configuring and managing the GitHub repository.","category":"page"},{"location":"Getting Started/4_macro_repo_contents/","page":"What's Included With Macro","title":"What's Included With Macro","text":"The list below gives brief descriptions of the files and folders in the Macro repo.","category":"page"},{"location":"Getting Started/4_macro_repo_contents/","page":"What's Included With Macro","title":"What's Included With Macro","text":"ExampleSystems: This is a set of example systems which you can use to check that Macro runs on your system and see examples of different ways of describing a System.\ndocs: This contains Macro's documentation. You will have to add content here if you create a new Asset or feature.\nsrc: This is the Macro source code. Please follow this guide if you would like more information about the structure of the code.\ntest: These are automatic tests, run every time an update is made to the Macro GitHub repository. They help us check that updates have not introduced bugs and that existing features still work as expected.\ntutorials: These are long-form examples of how to work with Macro, including worked examples in Jupyter notebooks.\nLICENSE: Macro is released under an MIT license. These file gives the terms of the license.\nProject.toml: Macro works using a Julia project environment. This is defined in the Project.toml file. It describes all the required Julia packages, their versions, and gives some information on the current version of Macro and its authors.","category":"page"},{"location":"Getting Started/4_macro_repo_contents/","page":"What's Included With Macro","title":"What's Included With Macro","text":"","category":"page"},{"location":"Guides/Developer Guide/2_type_hierarchy/#Macro-type-hierarchy","page":"Type Hierarchy","title":"Macro type hierarchy","text":"","category":"section"},{"location":"Guides/Developer Guide/2_type_hierarchy/#Commodities","page":"Type Hierarchy","title":"Commodities","text":"","category":"section"},{"location":"Guides/Developer Guide/2_type_hierarchy/","page":"Type Hierarchy","title":"Type Hierarchy","text":"using MacroEnergy # hide\nusing AbstractTrees # hide\nusing InteractiveUtils # hide\nAbstractTrees.children(d::DataType) = subtypes(d) # hide\nprint_tree(Commodity)","category":"page"},{"location":"Guides/Developer Guide/2_type_hierarchy/#Assets","page":"Type Hierarchy","title":"Assets","text":"","category":"section"},{"location":"Guides/Developer Guide/2_type_hierarchy/","page":"Type Hierarchy","title":"Type Hierarchy","text":"print_tree(AbstractAsset)","category":"page"},{"location":"Guides/Developer Guide/2_type_hierarchy/#Constraints","page":"Type Hierarchy","title":"Constraints","text":"","category":"section"},{"location":"Guides/Developer Guide/2_type_hierarchy/","page":"Type Hierarchy","title":"Type Hierarchy","text":"print_tree(MacroEnergy.AbstractTypeConstraint)","category":"page"},{"location":"Guides/Developer Guide/2_type_hierarchy/","page":"Type Hierarchy","title":"Type Hierarchy","text":"","category":"page"},{"location":"Guides/User Guide/user_run_model/#Run-a-Macro-Model","page":"Running Models","title":"Run a Macro Model","text":"","category":"section"},{"location":"Guides/User Guide/user_run_model/","page":"Running Models","title":"Running Models","text":"How to use the existing runtools\nHow to write their own run-script\ne.g. How to run several cases from one script\ne.g. How to run several cases, changing an assets cost each time","category":"page"},{"location":"Guides/User Guide/user_run_model/","page":"Running Models","title":"Running Models","text":"","category":"page"},{"location":"References/1_introduction/#References","page":"Introduction","title":"References","text":"","category":"section"},{"location":"References/1_introduction/","page":"Introduction","title":"Introduction","text":"This section contains the reference documentation for all the functionalities of the MacroEnergy package.","category":"page"},{"location":"References/1_introduction/","page":"Introduction","title":"Introduction","text":"Click on the links below to navigate to the corresponding section:","category":"page"},{"location":"References/1_introduction/","page":"Introduction","title":"Introduction","text":"Reading input functions\nMacro Objects\nOutput functions\nUtility functions","category":"page"},{"location":"References/1_introduction/","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#Debugging-and-Testing-a-Macro-Model","page":"Debugging and Testing","title":"Debugging and Testing a Macro Model","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Macro offers a range of utility functions designed to make debugging and testing new models and sectors more efficient and straightforward.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"The following functions are organized with the following sections:","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Working with a System\nGenerating a Model\nWorking with Nodes\nWorking with Assets\nWorking with Edges\nWorking with Transformations\nWorking with Storages\nTime Management\nResults Collection","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#Working-with-a-System","page":"Debugging and Testing","title":"Working with a System","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Let's start by loading a system from a case folder (you can find more information about the structure of this folder in the Running Macro section).","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[load_system](@ref)","page":"Debugging and Testing","title":"load_system","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"using MacroEnergy\nusing HiGHS # hide\nusing DataFrames # hide\nsystem = MacroEnergy.load_system(\"doctest\");","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#propertynames","page":"Debugging and Testing","title":"propertynames","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"The propertynames function in Julia can be used to retrieve the names of the fields of a System object, such as the data directory path, settings, and locations.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"propertynames(system)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"data_dirpath: Path to the data directory.\nsettings: Settings of the system.\ncommodities: Sectors modeled in the system.\ntimedata: Time resolution for each sector.\nlocations: Vector of all Locations and Nodes.\nassets: Vector of all Assets.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"A System consists of six primary fields, each of which can be accessed using dot notation:","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"system.data_dirpath\nsystem.settings","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"When interacting with a System, users might need to retrieve information about specific nodes, locations, or assets. The functions listed below are helpful for these tasks:","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[find_node](@ref)","page":"Debugging and Testing","title":"find_node","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Finds a node by its ID.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"co2_node = MacroEnergy.find_node(system.locations, :co2_sink);","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_asset_types](@ref)","page":"Debugging and Testing","title":"get_asset_types","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves all the types of assets in the system.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"asset_types = MacroEnergy.get_asset_types(system);\nunique(asset_types)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[asset_ids](@ref)","page":"Debugging and Testing","title":"asset_ids","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the IDs of all the assets in the system.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"ids = MacroEnergy.asset_ids(system)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Once you have the IDs, you can retrieve an asset by its ID using the following function:","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_asset_by_id](@ref)","page":"Debugging and Testing","title":"get_asset_by_id","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves an asset by its ID.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"battery_SE = MacroEnergy.get_asset_by_id(system, :battery_SE);\nthermal_plant_SE = MacroEnergy.get_asset_by_id(system, :SE_natural_gas_fired_combined_cycle_1);","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"The following function can be useful to retrieve a vector of all the assets of a given type.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_assets_sametype](@ref)","page":"Debugging and Testing","title":"get_assets_sametype","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Returns a vector of assets of a given type.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"batteries = MacroEnergy.get_assets_sametype(system, Battery);\nbattery = batteries[1]; # first battery in the list\nthermal_plants = MacroEnergy.get_assets_sametype(system, ThermalPower{NaturalGas});\nthermal_plant = thermal_plants[1]; # first thermal power plant in the list","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#Model-Generation-and-Running","page":"Debugging and Testing","title":"Model Generation and Running","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#generate_model","page":"Debugging and Testing","title":"generate_model","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Uses JuMP to generate the optimization model for the system data. ","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"model = MacroEnergy.generate_model(system);","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#set_optimizer","page":"Debugging and Testing","title":"set_optimizer","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Sets the optimizer for the JuMP model.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.set_optimizer(model, HiGHS.Optimizer);","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#optimize!","page":"Debugging and Testing","title":"optimize!","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Solves the optimization model.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.set_silent(model) # hide\nMacroEnergy.optimize!(model)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"The following set of functions can be used to retrieve the optimal values of some variables in the model.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_optimal_capacity](@ref)","page":"Debugging and Testing","title":"get_optimal_capacity","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Fetches the final capacities for all assets.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"capacity = MacroEnergy.get_optimal_capacity(system);\ncapacity[!, [:commodity, :resource_id, :value]]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_optimal_new_capacity](@ref)","page":"Debugging and Testing","title":"get_optimal_new_capacity","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Fetches the new capacities for all assets.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"new_capacity = MacroEnergy.get_optimal_new_capacity(system);\nnew_capacity[!, [:commodity, :resource_id, :value]]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_optimal_retired_capacity](@ref)","page":"Debugging and Testing","title":"get_optimal_retired_capacity","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Fetches the retired capacities for all assets.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"retired_capacity = MacroEnergy.get_optimal_retired_capacity(system);\nretired_capacity[!, [:commodity, :resource_id, :value]]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_optimal_discounted_costs](@ref)","page":"Debugging and Testing","title":"get_optimal_discounted_costs","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Fetches all the system costs.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"costs = MacroEnergy.get_optimal_discounted_costs(model);\ncosts[!, [:variable, :value]]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#Working-with-Nodes-in-a-System","page":"Debugging and Testing","title":"Working with Nodes in a System","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Once a System object is loaded, and the model is generated, users can use the following functions to inspect the nodes in the system.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"tip: Node Interface\nFor a comprehensive list of function interfaces available for node besides id, commodity_type and the ones listed below, users can refer to the node.jl and the vertex.jl source code.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[find_node](@ref)-2","page":"Debugging and Testing","title":"find_node","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Finds a node in the System by its ID.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"elec_node = MacroEnergy.find_node(system.locations, :elec_SE);","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"note: Understanding Balance Equations\nNodes, as explained in the Macro Internal Components section, are a unique type of vertex that represent the demand or supply of a commodity, where each vertex in Macro is associated with a balance equation. To programmatically access all balance equations within the system, the following functions are available:balance_ids: Retrieve the IDs of all balance equations associated with a vertex.\nget_balance: Obtain the mathematical expression of a specific balance equation.\nbalance_data: Access the input balance data, which typically includes the stoichiometric coefficients of a specific balance equation, if applicable.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Here is an example of how to use these functions to access the balance equations for the electricity node in the system:","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[balance_ids](@ref)","page":"Debugging and Testing","title":"balance_ids","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the IDs of all balance equations in a node.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.balance_ids(elec_node)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"note: Demand Balance Equation\nMacro automatically creates a :demand balance equation for each node that has a BalanceConstraint. ","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_balance](@ref)","page":"Debugging and Testing","title":"get_balance","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the mathematical expression of the demand balance equation for the node.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"demand_expression = MacroEnergy.get_balance(elec_node, :demand);\ndemand_expression[1] # first time step","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[balance_ids](@ref)-2","page":"Debugging and Testing","title":"balance_ids","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"co2_node = MacroEnergy.find_node(system.locations, :co2_sink);\nMacroEnergy.balance_ids(co2_node)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"note: CO₂ Balance Equation\nMacro automatically creates an :emissions balance equation for each CO₂ node that has a CO2CapConstraint.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_balance](@ref)-2","page":"Debugging and Testing","title":"get_balance","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"emissions_expression = MacroEnergy.get_balance(co2_node, :emissions);\nemissions_expression[1] # first time step","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"tip: Total Emissions\nTo calculate the total emissions at a node, users should perform the following steps:emissions_expression = MacroEnergy.get_balance(co2_node, :emissions);\nMacroEnergy.value(sum(emissions_expression))","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"To check and visualize the mathematical expressions of the constraints applied to a node, the following functions are available:","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"all_constraints: Retrieve all constraints associated with a node.\nall_constraints_types: Retrieve all types of constraints associated with a node.\nget_constraint_by_type: Retrieve a specific constraint on a node by its type.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[all_constraints](@ref)","page":"Debugging and Testing","title":"all_constraints","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves all the constraints attached to a node.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"all_constraints = MacroEnergy.all_constraints(elec_node);","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[all_constraints_types](@ref)","page":"Debugging and Testing","title":"all_constraints_types","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves all the types of constraints attached to a node.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"all_constraints_types = MacroEnergy.all_constraints_types(elec_node)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_constraint_by_type](@ref),-constraint_ref","page":"Debugging and Testing","title":"get_constraint_by_type, constraint_ref","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves a constraint on a node by its type.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"balance_constraint = MacroEnergy.get_constraint_by_type(elec_node, BalanceConstraint);\nMacroEnergy.constraint_ref(balance_constraint);\n\nmax_non_served_demand_constraint = MacroEnergy.get_constraint_by_type(elec_node, MaxNonServedDemandConstraint);\nMacroEnergy.constraint_ref(max_non_served_demand_constraint)[1:5]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#Working-with-Assets","page":"Debugging and Testing","title":"Working with Assets","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Together with Locations, assets form the core components of an energy system in Macro. The functions below are essential for managing and interacting with assets.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#id","page":"Debugging and Testing","title":"id","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the ID of an asset.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"thermal_plant = MacroEnergy.get_asset_by_id(system, :SE_natural_gas_fired_combined_cycle_1);\nMacroEnergy.id(thermal_plant)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[print_struct_info](@ref)","page":"Debugging and Testing","title":"print_struct_info","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Prints the structure of an asset in terms of its components (edges, transformations, storages, etc.)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.print_struct_info(thermal_plant)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Once you have collected the names of the components of an asset, you can use the following function to get a specific component by its name.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_component_by_fieldname](@ref)","page":"Debugging and Testing","title":"get_component_by_fieldname","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves a component of an asset by its field name.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"elec_edge = MacroEnergy.get_component_by_fieldname(thermal_plant, :elec_edge);\nMacroEnergy.id(elec_edge)\nMacroEnergy.typeof(elec_edge)\nMacroEnergy.commodity_type(elec_edge)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Alternatively, users can retrieve a specific component using its ID.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_component_ids](@ref)","page":"Debugging and Testing","title":"get_component_ids","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the IDs of all the components of an asset.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.get_component_ids(thermal_plant)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_component_by_id](@ref)","page":"Debugging and Testing","title":"get_component_by_id","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves a component of an asset by its ID.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"elec_edge = MacroEnergy.get_component_by_id(thermal_plant, :SE_natural_gas_fired_combined_cycle_1_elec_edge);\nMacroEnergy.id(elec_edge)\nMacroEnergy.typeof(elec_edge)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#Working-with-Edges","page":"Debugging and Testing","title":"Working with Edges","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#id-2","page":"Debugging and Testing","title":"id","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the ID of an edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.id(elec_edge)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#commodity_type","page":"Debugging and Testing","title":"commodity_type","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the commodity type of an edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.commodity_type(elec_edge)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"tip: Edge Interface\nFor a comprehensive list of function interfaces available for edge besides id, commodity_type and the ones listed below, users can refer to the edge.jl source code.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_edges](@ref)","page":"Debugging and Testing","title":"get_edges","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves all the edges in the system.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"edges = MacroEnergy.get_edges(system);","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#capacity","page":"Debugging and Testing","title":"capacity","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the capacity expression of an edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"capacity_expression = MacroEnergy.capacity(elec_edge)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#final_capacity","page":"Debugging and Testing","title":"final_capacity","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the final capacity of an edge (i.e. the optimal value of the capacity expression).","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"capacity_expression = MacroEnergy.capacity(elec_edge)\nMacroEnergy.value(capacity_expression)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#flow","page":"Debugging and Testing","title":"flow","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the flow variables of an edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"flow_variables = MacroEnergy.flow(elec_edge);\nflow_variables[1:5]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#value","page":"Debugging and Testing","title":"value","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the values of the flow variables of an edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"flow_values = MacroEnergy.value.(flow_variables);\nflow_values[1:5]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"note: Broadcasted `value`\nNote that the value function is called with the dot notation to apply it to each element of the flow_variables array (see Julia's documentation for more information).","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"In this example, we first get the flow of the CO₂ edge and then we call the value function to get the values of these variables.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"co2_edge = MacroEnergy.get_component_by_fieldname(thermal_plant, :co2_edge);\nemission = MacroEnergy.flow(co2_edge)[1:5]\nemission_values = MacroEnergy.value.(emission);\nemission_values[1:5]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"The functions available for nodes when dealing with constraints can also be used for edges.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[all_constraints_types](@ref)-2","page":"Debugging and Testing","title":"all_constraints_types","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.all_constraints_types(elec_edge)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_constraint_by_type](@ref)","page":"Debugging and Testing","title":"get_constraint_by_type","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"constraint = MacroEnergy.get_constraint_by_type(elec_edge, CapacityConstraint);\nMacroEnergy.constraint_ref(constraint)[1:5]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#start_vertex","page":"Debugging and Testing","title":"start_vertex","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the starting node of an edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"start_node = MacroEnergy.start_vertex(elec_edge);\nMacroEnergy.id(start_node)\nMacroEnergy.typeof(start_node)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#end_vertex","page":"Debugging and Testing","title":"end_vertex","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the ending node of an edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"end_node = MacroEnergy.end_vertex(elec_edge);\nMacroEnergy.id(end_node)\nMacroEnergy.typeof(end_node)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#Working-with-Transformations","page":"Debugging and Testing","title":"Working with Transformations","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"tip: Transformation Interface\nFor a comprehensive list of function interfaces available for transformation besides id, commodity_type and the ones listed below, users can refer to the transformation.jl and the vertex.jl source code.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"To access the transformation component of an asset, utilize the following functions:","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.print_struct_info(thermal_plant)\nthermal_transform = MacroEnergy.get_component_by_fieldname(thermal_plant, :thermal_transform);\nMacroEnergy.id(thermal_transform)\nMacroEnergy.typeof(thermal_transform)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[balance_ids](@ref)-3","page":"Debugging and Testing","title":"balance_ids","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the IDs of all the balance equations in a transformation.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.balance_ids(thermal_transform)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[balance_data](@ref)","page":"Debugging and Testing","title":"balance_data","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the balance data of a transformation. This is very useful to check the stoichiometric coefficients of a transformation.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.balance_data(thermal_transform, :energy)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_balance](@ref)-3","page":"Debugging and Testing","title":"get_balance","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the mathematical expression of the balance of a transformation.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.get_balance(thermal_transform, :energy)[1:5]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"We can do the same for the emissions balance equation.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[balance_data](@ref)-2","page":"Debugging and Testing","title":"balance_data","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.balance_data(thermal_transform, :emissions)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_balance](@ref)-4","page":"Debugging and Testing","title":"get_balance","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.get_balance(thermal_transform, :emissions)[1:5]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"The functions available for nodes and edges can also be applied to transformations.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[all_constraints](@ref)-2","page":"Debugging and Testing","title":"all_constraints","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.all_constraints(thermal_transform)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[all_constraints_types](@ref)-3","page":"Debugging and Testing","title":"all_constraints_types","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.all_constraints_types(thermal_transform)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_constraint_by_type](@ref)-2","page":"Debugging and Testing","title":"get_constraint_by_type","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.get_constraint_by_type(thermal_transform, BalanceConstraint)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#Working-with-Storages","page":"Debugging and Testing","title":"Working with Storages","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"tip: Storage Interface\nFor a comprehensive list of function interfaces available for storage besides id, commodity_type and the ones listed below, users can refer to the storage.jl and the vertex.jl source code.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"To access the storage component of an asset, utilize the following functions:","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"battery = MacroEnergy.get_asset_by_id(system, :battery_SE);\nMacroEnergy.print_struct_info(battery)\nstorage = MacroEnergy.get_component_by_fieldname(battery, :battery_storage);\nMacroEnergy.id(storage)\nMacroEnergy.typeof(storage)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[balance_ids](@ref)-4","page":"Debugging and Testing","title":"balance_ids","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the IDs of all the balance equations in a storage.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.balance_ids(storage)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[balance_data](@ref)-3","page":"Debugging and Testing","title":"balance_data","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the balance data of a storage. This is very useful to check the stoichiometric coefficients of a storage.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.balance_data(storage, :storage)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_balance](@ref)-5","page":"Debugging and Testing","title":"get_balance","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the mathematical expression of the balance of a storage.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.get_balance(storage, :storage)[1:5]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"The same set of functions that we have seen for nodes, edges, and transformations are also available for storages.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[all_constraints_types](@ref)-4","page":"Debugging and Testing","title":"all_constraints_types","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.all_constraints_types(storage)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[get_constraint_by_type](@ref)-3","page":"Debugging and Testing","title":"get_constraint_by_type","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.get_constraint_by_type(storage, BalanceConstraint)\nconstraint = MacroEnergy.get_constraint_by_type(storage, StorageCapacityConstraint);\nMacroEnergy.constraint_ref(constraint)[1:5]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#storage_level","page":"Debugging and Testing","title":"storage_level","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the storage level variables of a storage component.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"storage_level = MacroEnergy.storage_level(storage);\nMacroEnergy.value.(storage_level)[1:5]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#charge_edge","page":"Debugging and Testing","title":"charge_edge","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the charge edge connected to a storage component.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"charge_edge = MacroEnergy.charge_edge(storage);\nMacroEnergy.id(charge_edge)\nMacroEnergy.typeof(charge_edge)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#discharge_edge","page":"Debugging and Testing","title":"discharge_edge","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the discharge edge connected to a storage component.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"discharge_edge = MacroEnergy.discharge_edge(storage);\nMacroEnergy.id(discharge_edge)\nMacroEnergy.typeof(discharge_edge)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#spillage_edge","page":"Debugging and Testing","title":"spillage_edge","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the spillage edge connected to a storage component (applicable to hydro reservoirs).","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"julia> MacroEnergy.spillage_edge(storage)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#Time-Management","page":"Debugging and Testing","title":"Time Management","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"vertex = MacroEnergy.find_node(system.locations, :elec_SE);\nedge = MacroEnergy.get_component_by_fieldname(thermal_plant, :elec_edge);","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#time_interval","page":"Debugging and Testing","title":"time_interval","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the time interval of a vertex/edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.time_interval(vertex)\nMacroEnergy.time_interval(edge)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#period_map","page":"Debugging and Testing","title":"period_map","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the period map of a vertex/edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.period_map(vertex)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#modeled_subperiods","page":"Debugging and Testing","title":"modeled_subperiods","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the modeled subperiods of a vertex/edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.modeled_subperiods(vertex)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#current_subperiod","page":"Debugging and Testing","title":"current_subperiod","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the subperiod a given time step belongs to for the time series attached to a given vertex/edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.current_subperiod(vertex, 7)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#subperiods","page":"Debugging and Testing","title":"subperiods","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the subperiods of the time series attached to a vertex/edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.subperiods(vertex)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#subperiod_indices","page":"Debugging and Testing","title":"subperiod_indices","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the indices of the subperiods of the time series attached to a vertex/edge.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.subperiod_indices(vertex)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#get_subperiod","page":"Debugging and Testing","title":"get_subperiod","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the subperiod of a vertex/edge for a given index.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.get_subperiod(vertex, 6)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#subperiod_weight","page":"Debugging and Testing","title":"subperiod_weight","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Retrieves the weight of a subperiod of a vertex/edge for a given index.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"MacroEnergy.subperiod_weight(vertex, 17)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#Results-Collection","page":"Debugging and Testing","title":"Results Collection","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[collect_results](@ref)","page":"Debugging and Testing","title":"collect_results","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Collects all the results from the model as a DataFrame:","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"All the capacity variables/expressions (capacity, new_capacity, retired_capacity)\nAll the flow variables (flow)\nNon-served demand variables (non_served_demand)\nStorage level variables (storage_level)\nCosts (costs)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"results = MacroEnergy.collect_results(system, model);\nfirst(results, 5)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[reshape_wide](@ref)","page":"Debugging and Testing","title":"reshape_wide","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Reshapes the results to wide format.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"capacity_results = MacroEnergy.get_optimal_capacity(system; scaling=1e3);\nnew_capacity_results = MacroEnergy.get_optimal_new_capacity(system; scaling=1e3);\nretired_capacity_results = MacroEnergy.get_optimal_retired_capacity(system; scaling=1e3);\nall_capacity_results = vcat(capacity_results, new_capacity_results, retired_capacity_results);\ndf_wide = MacroEnergy.reshape_wide(all_capacity_results);\ndf_wide[1:5, [:commodity, :resource_id, :capacity, :new_capacity, :retired_capacity]]","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[write_flow](@ref)","page":"Debugging and Testing","title":"write_flow","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Writes the flow results to a (CSV, CSV.GZ, or Parquet) file. An optional commodity and asset type filter can be applied.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"julia> write_flow(\"flow.csv\", system)\n# Filter by commodity: write only the flow of edges of commodity \"Electricity\"\njulia> write_flow(\"flow.csv\", system, commodity=\"Electricity\")\n# Filter by commodity and asset type using parameter-free matching\njulia> write_flow(\"flow.csv\", system, commodity=\"Electricity\", asset_type=\"ThermalPower\")\n# Filter by commodity and asset type using wildcard matching\njulia> write_flow(\"flow.csv\", system, commodity=\"Electricity\", asset_type=\"ThermalPower*\")","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[write_capacity](@ref)","page":"Debugging and Testing","title":"write_capacity","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Writes the capacity results to a (CSV, CSV.GZ, or Parquet) file. An optional commodity and asset type filter can be applied.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"julia> write_capacity(\"capacity.csv\", system)\n# Filter by commodity: write only the capacity of edges of commodity \"Electricity\"\njulia> write_capacity(\"capacity.csv\", system, commodity=\"Electricity\")\n# Filter by commodity and asset type using parameter-free matching\njulia> write_capacity(\"capacity.csv\", system, asset_type=\"ThermalPower\")\n# Filter by asset type using wildcard matching\njulia> write_capacity(\"capacity.csv\", system, asset_type=\"ThermalPower*\")\n# Filter by commodity and asset type\njulia> write_capacity(\"capacity.csv\", system, commodity=\"Electricity\", asset_type=[\"ThermalPower\", \"Battery\"])","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/#[write_costs](@ref)","page":"Debugging and Testing","title":"write_costs","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"Writes the costs results to a (CSV, CSV.GZ, or Parquet) file. An optional type filter can be applied.","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"julia> write_costs(\"costs.csv\", system)","category":"page"},{"location":"Guides/Modeler Guide/modeler_debugging_testing/","page":"Debugging and Testing","title":"Debugging and Testing","text":"","category":"page"},{"location":"Guides/Modeler Guide/modeler_create_example_case/#Creating-a-New-Example-Case","page":"Creating a New Example Case","title":"Creating a New Example Case","text":"","category":"section"},{"location":"Guides/Modeler Guide/modeler_create_example_case/","page":"Creating a New Example Case","title":"Creating a New Example Case","text":"The best way to get started is by reviewing the existing example cases in the Macro repository, located in the ExampleSystems folder.","category":"page"},{"location":"Guides/Modeler Guide/modeler_create_example_case/","page":"Creating a New Example Case","title":"Creating a New Example Case","text":"As described in Running Macro, an example case is a directory containing all the necessary data files to run the model. The folder should follow the structure outlined below:","category":"page"},{"location":"Guides/Modeler Guide/modeler_create_example_case/","page":"Creating a New Example Case","title":"Creating a New Example Case","text":"MyCase\n│ \n├── 📁 settings\n│   └── macro_settings.yml\n│ \n├── 📁 system\n│   ├── commodities.json \n│   ├── time_data.json\n│   ├── nodes.json\n│   ├── fuel_prices.csv\n│   └── demand.csv\n│ \n├── 📁 assets\n│   ├── MyNewAsset1.json\n│   ├── MyNewAsset2.json\n| [...other asset types...]\n│   └── availability.csv\n│ \n└── system_data.json","category":"page"},{"location":"Guides/Modeler Guide/modeler_create_example_case/","page":"Creating a New Example Case","title":"Creating a New Example Case","text":"To test the new sector and assets, make sure the following items are correctly set up:","category":"page"},{"location":"Guides/Modeler Guide/modeler_create_example_case/","page":"Creating a New Example Case","title":"Creating a New Example Case","text":"<div style=\"margin-left: 2em;\">\n<input type=\"checkbox\" style=\"margin-right: 4px;\"> The new sector is included in the <strong>commodities.json</strong> file.<br>\n<input type=\"checkbox\" style=\"margin-right: 4px;\"> The new sector is defined in the <strong>time_data.json</strong> file, with appropriate values for HoursPerTimeStep and HoursPerSubperiod.<br>\n<input type=\"checkbox\" style=\"margin-right: 4px;\"> Nodes for the new sector are included in the <strong>nodes.json</strong> file.<br>\n<input type=\"checkbox\" style=\"margin-right: 4px;\"> If applicable, add demand for the new sector at each relevant node in the <strong>demand.csv</strong> file.<br>\n<input type=\"checkbox\" style=\"margin-right: 4px;\"> New assets are defined in their respective JSON files within the <strong>assets</strong> folder.<br>\n<input type=\"checkbox\" style=\"margin-right: 4px;\"> If necessary, update the <strong>fuel_prices.csv</strong> file with the fuel prices for the new sector.<br>\n<input type=\"checkbox\" style=\"margin-right: 4px;\"> If necessary, update the <strong>availability.csv</strong> file with the availability information for the new assets.<br>\n</div>\n<br>","category":"page"},{"location":"Guides/Modeler Guide/modeler_create_example_case/","page":"Creating a New Example Case","title":"Creating a New Example Case","text":"warning: Important Checks\nDouble-check that the keys in commodities.json and time_data.json exactly match the name of the new sector (i.e., the Julia abstract type name it was added to the model).\nEnsure that the values of the type keys in the node JSON entries match the name of the sector.\nFor each asset JSON file, verify that the type key matches the Julia struct name created, and that the commodity keys in the edges and storage sections are correct.","category":"page"},{"location":"Guides/Modeler Guide/modeler_create_example_case/","page":"Creating a New Example Case","title":"Creating a New Example Case","text":"","category":"page"},{"location":"References/2_reading_input/#Reading-input-functions","page":"Reading input data","title":"Reading input functions","text":"","category":"section"},{"location":"References/2_reading_input/","page":"Reading input data","title":"Reading input data","text":"Pages = [\"1_reading_input.md\"]","category":"page"},{"location":"References/2_reading_input/#add_default_system_data!","page":"Reading input data","title":"add_default_system_data!","text":"","category":"section"},{"location":"References/2_reading_input/#MacroEnergy.add_default_system_data!","page":"Reading input data","title":"MacroEnergy.add_default_system_data!","text":"add_default_system_data!(system_data::AbstractDict{Symbol,Any})::Nothing\n\nAdd the default system data to the system data dictionary. This adds any required fields that are missing.\n\n\n\n\n\n","category":"function"},{"location":"References/2_reading_input/#clean_up_keys","page":"Reading input data","title":"clean_up_keys","text":"","category":"section"},{"location":"References/2_reading_input/#MacroEnergy.clean_up_keys","page":"Reading input data","title":"MacroEnergy.clean_up_keys","text":"clean_up_keys(dict::AbstractDict{Symbol,Any})::AbstractDict{Symbol,Any}\n\nClean up a Dict{Symbol,Any} object by copying values from keys that match the key name.\n\n\n\n\n\n","category":"function"},{"location":"References/2_reading_input/#eager_load_json_inputs","page":"Reading input data","title":"eager_load_json_inputs","text":"","category":"section"},{"location":"References/2_reading_input/#MacroEnergy.eager_load_json_inputs","page":"Reading input data","title":"MacroEnergy.eager_load_json_inputs","text":"eager_load_json_inputs(json_data::AbstractDict{Symbol, Any}, rel_path::AbstractString)::AbstractDict{Symbol, Any}\n\nRecursively loads data from sources specified in an input Dict{Symbol,Any} and returns a new \nDict{Symbol,Any} object with the data inserted.\n\n\n\n\n\neager_load_json_inputs(json_data::AbstractVector{<:AbstractDict{Symbol,Any}}, rel_path::AbstractString)::AbstractVector{<:AbstractDict{Symbol,Any}}\n\nRecursively loads data from sources specified in several input Dict{Symbol,Any}, stored as a Vector, \nand returns a new Vector{Dict{Symbol,Any}} object with the data inserted.\n\n\n\n\n\n","category":"function"},{"location":"References/2_reading_input/#fetch_data","page":"Reading input data","title":"fetch_data","text":"","category":"section"},{"location":"References/2_reading_input/#MacroEnergy.fetch_data","page":"Reading input data","title":"MacroEnergy.fetch_data","text":"fetch_data(path::AbstractString, dict::AbstractDict{Symbol, Any}, root_path::AbstractString, lazy_load::Bool = true)::Any\n\nFetch data from a JSON file or directory and return it as a Dict{Symbol,Any} object.\n\n\n\n\n\n","category":"function"},{"location":"References/2_reading_input/#load_csv","page":"Reading input data","title":"load_csv","text":"","category":"section"},{"location":"References/2_reading_input/#MacroEnergy.load_csv","page":"Reading input data","title":"MacroEnergy.load_csv","text":"load_time_series_data(file_path::AbstractString, header::AbstractVector{Symbol})::Dict{Symbol,Any}\n\nLoad time series data from one or more headers in a CSV file and return as a DataFrame.\n\n\n\n\n\n","category":"function"},{"location":"References/2_reading_input/#load_default_system_data","page":"Reading input data","title":"load_default_system_data","text":"","category":"section"},{"location":"References/2_reading_input/#MacroEnergy.load_default_system_data","page":"Reading input data","title":"MacroEnergy.load_default_system_data","text":"load_default_system_data()::Dict{Symbol,Any}\n\nLoad the default system data from a JSON file.  This describes the default locations for the system data files.\n\n\n\n\n\n","category":"function"},{"location":"References/2_reading_input/#load_json_inputs","page":"Reading input data","title":"load_json_inputs","text":"","category":"section"},{"location":"References/2_reading_input/#MacroEnergy.load_json_inputs","page":"Reading input data","title":"MacroEnergy.load_json_inputs","text":"load_json_inputs(file_path::AbstractString; rel_path::AbstractString=dirname(file_path), lazy_load::Bool = true)::Dict{Symbol,Any}\n\nLoad JSON data from a file and return a Dict{Symbol,Any} object. The data can all be included in the \nspecified JSON file or distributed across multiple files and directories, with each source specified\nusing \"path\" or \"timeseries\" keys.\\n \nThe `rel_path` argument is used to specify the path relative to which the file paths of this distributed\ndata should be resolved.\\n\nIf `lazy_load` is set to `true`, then only the top-level data in the specified JSON file will be loaded. \nIf `lazy_load` is set to `false`, then the distrinuted data will be loaded recursively into the \nappropriate data structures.\n\n\n\n\n\n","category":"function"},{"location":"References/2_reading_input/#load_system","page":"Reading input data","title":"load_system","text":"","category":"section"},{"location":"References/2_reading_input/#MacroEnergy.load_system","page":"Reading input data","title":"MacroEnergy.load_system","text":"load_system(path::AbstractString = pwd(); lazy_load::Bool=true)\n\nLoad a system from the system_data.json file or directory containing the system data.\n\nArguments\n\npath::AbstractString = pwd(): The path to the system_data.json file or directory containing the system data.\nlazy_load::Bool=true: Whether to lazy load the system data.\n\nReturns\n\nA System object containing the case data.\n\nExamples\n\nsystem = load_system(\"path/to/system_data.json\")\n\nsystem = load_system(\"path/to/system_data_directory\")\n\n\n\n\n\n","category":"function"},{"location":"References/2_reading_input/#load_system_data","page":"Reading input data","title":"load_system_data","text":"","category":"section"},{"location":"References/2_reading_input/#MacroEnergy.load_system_data","page":"Reading input data","title":"MacroEnergy.load_system_data","text":"load_system_data(file_path::AbstractString, rel_path::AbstractString; lazy_load::Bool = true)::Dict{Symbol,Any}\n\nLoad the system data (currently only from a JSON file) given a file path and directory to search for the file in. All other file names defined in the system data file are assumed to be relative to rel_path.\n\n\n\n\n\nload_system_data(system::System, file_path::AbstractString)::Dict{Symbol,Any}\n\nLoad the system data (currently only from a JSON file) given a file path and existing System. All other file names defined in the system data file are assumed to be relative to the data_dirpath field of the System.\n\n\n\n\n\n","category":"function"},{"location":"References/2_reading_input/#prep_system_data","page":"Reading input data","title":"prep_system_data","text":"","category":"section"},{"location":"References/2_reading_input/#MacroEnergy.prep_system_data","page":"Reading input data","title":"MacroEnergy.prep_system_data","text":"prep_system_data(file_path::AbstractString)::Nothing\n\nThis attempts to load the system data from the file at file_path, adds any missing fields from the default system data, and writes the updated system data back to the file. In the future, we may change this to not write to the file, but for now, it's a quick way to ensure the system data is up-to-date.\n\n\n\n\n\n","category":"function"},{"location":"References/2_reading_input/#load_benders_settings","page":"Reading input data","title":"load_benders_settings","text":"","category":"section"},{"location":"References/2_reading_input/#MacroEnergy.load_benders_settings","page":"Reading input data","title":"MacroEnergy.load_benders_settings","text":"load_benders_settings(settings::AbstractDict{Symbol,Any}, path::AbstractString)::AbstractDict{Symbol,Any}\n\nLoad Benders settings from a file. First checks if a specific path is provided in the settings, otherwise looks for benders_settings.json in the settings directory. Handles both absolute and relative paths.\n\n\n\n\n\n","category":"function"},{"location":"References/2_reading_input/#try_load_benders_settings","page":"Reading input data","title":"try_load_benders_settings","text":"","category":"section"},{"location":"References/2_reading_input/#MacroEnergy.try_load_benders_settings","page":"Reading input data","title":"MacroEnergy.try_load_benders_settings","text":"try_load_benders_settings(path::AbstractString)::Union{AbstractDict{Symbol,Any}, Nothing}\n\nAttempts to load Benders settings from the given path. Returns the settings if found, nothing otherwise.\n\n\n\n\n\n","category":"function"},{"location":"References/2_reading_input/","page":"Reading input data","title":"Reading input data","text":"","category":"page"},{"location":"table_of_contents/#Table-of-contents","page":"Table of contents","title":"Table of contents","text":"","category":"section"},{"location":"table_of_contents/#[Getting-Started](@ref)","page":"Table of contents","title":"Getting Started","text":"","category":"section"},{"location":"table_of_contents/","page":"Table of contents","title":"Table of contents","text":"Pages = [\n    \"Getting Started/1_overview.md\",\n    \"Getting Started/2_installation.md\",\n    \"Getting Started/3_first_run.md\"\n]\nDepth = 2","category":"page"},{"location":"table_of_contents/#[User-Guides](@ref)","page":"Table of contents","title":"User Guides","text":"","category":"section"},{"location":"table_of_contents/","page":"Table of contents","title":"Table of contents","text":"Pages = [\n    \"Guides/User Guide/1_sectors.md\",\n    \"Guides/User Guide/2_input_data.md\",\n    \"Guides/User Guide/assets/1_introduction.md\",\n    \"Guides/User Guide/4_constraints.md\",\n    \"Guides/User Guide/5_output.md\"\n]\nDepth = 2","category":"page"},{"location":"table_of_contents/#[Modeler-Guides](@ref)","page":"Table of contents","title":"Modeler Guides","text":"","category":"section"},{"location":"table_of_contents/","page":"Table of contents","title":"Table of contents","text":"Pages = [\n    \"Guides/Modeler Guide/1_introduction.md\",\n    \"Guides/Modeler Guide/2_build_sectors.md\",\n    \"Guides/Modeler Guide/3_create_example_case.md\"\n]\nDepth = 2","category":"page"},{"location":"table_of_contents/#[Developer-Guides](@ref)","page":"Table of contents","title":"Developer Guides","text":"","category":"section"},{"location":"table_of_contents/","page":"Table of contents","title":"Table of contents","text":"Pages = [\n    \"Guides/Developer Guide/1_introduction.md\",\n    \"Guides/Developer Guide/2_type_hierarchy.md\",\n]\nDepth = 2","category":"page"},{"location":"table_of_contents/#[References](@ref)","page":"Table of contents","title":"References","text":"","category":"section"},{"location":"table_of_contents/","page":"Table of contents","title":"Table of contents","text":"Pages = [\n    \"References/2_reading_input.md\",\n    \"References/3_macro_objects.md\",\n    \"References/4_writing_output.md\",\n    \"References/5_utilities.md\"\n]\nDepth = 2","category":"page"},{"location":"table_of_contents/","page":"Table of contents","title":"Table of contents","text":"","category":"page"},{"location":"Manual/assets/electricdac/#Electric-DAC","page":"Electric DAC","title":"Electric DAC","text":"","category":"section"},{"location":"Manual/assets/electricdac/#Graph-structure","page":"Electric DAC","title":"Graph structure","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"An electric direct air capture (DAC) asset is represented in Macro using the following graph structure:","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"<img width=\"400\" src=\"../../images/elecdac.png\" />","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"An electric DAC asset is made of:","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"1 Transformation component, representing the DAC process.\n3 Edge components:\n1 incoming Electricity Edge, representing the electricity consumption.\n1 incoming CO2 Edge, representing the CO2 that is captured.\n1 outgoing CO2 Captured Edge, representing the CO2 that is captured.","category":"page"},{"location":"Manual/assets/electricdac/#Attributes","page":"Electric DAC","title":"Attributes","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"The structure of the input file for an electric DAC asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        },\n        \"co2_captured_edge\": {\n            // ... co2_captured_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/electricdac/#Transformation","page":"Electric DAC","title":"Transformation","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"The definition of the transformation object can be found here MacroEnergy.Transformation.","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Attribute Type Values Default Description/Units\ntimedata String String Required Time resolution for the time series data linked to the transformation. E.g. \"Electricity\".\nconstraints Dict{String,Bool} Any Macro constraint type for vertices BalanceConstraint List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\nelectricity_consumption epsilon_elec_consumption Float64 Float64 0.0 MWh_elect_CO2","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"tip: Default constraints\nThe default constraint for the transformation part of the ElectricDAC asset is the following:Balance constraint","category":"page"},{"location":"Manual/assets/electricdac/#Flow-equations","page":"Electric DAC","title":"Flow equations","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"note: ElectricDAC\nbeginaligned\nphi_elec = phi_co2_captured cdot epsilon_elec_consumption \nphi_co2 = phi_co2_captured \nendaligned","category":"page"},{"location":"Manual/assets/electricdac/#Edge","page":"Electric DAC","title":"Edge","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Both the incoming and outgoing edges are represented by the same set of attributes. The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"Attribute Type Values Default Description\ntype String Any Macro commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges Check box below List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"assets/availability.csv\", \"header\": \"Availability_MW_z1\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool false Whether the edge is unidirectional.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"tip: Default constraints\nThe only default constraint for the edges of the ElectricDAC asset is the Capacity constraint applied to the CO2 edge. ","category":"page"},{"location":"Manual/assets/electricdac/#Example","page":"Electric DAC","title":"Example","text":"","category":"section"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"The following is an example of the input file for an ElectricDAC asset that creates three electric DAC units, each for a different region.","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"{\n    \"ElectricDAC\": [\n        {\n            \"type\": \"ElectricDAC\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"Electricity\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"co2_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"start_vertex\": \"co2_sink\",\n                        \"can_retire\": true,\n                        \"can_expand\": true,\n                        \"uc\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true\n                        },\n                        \"integer_decisions\": false\n                    },\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"co2_captured_edge\": {\n                        \"type\": \"CO2Captured\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_captured_sink\"\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Solvent_DAC\",\n                    \"transforms\": {\n                        \"electricity_consumption\": 4.38\n                    },\n                    \"edges\": {\n                        \"co2_edge\": {\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_Solvent_DAC\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 939000.00,\n                            \"fixed_om_cost\": 747000.00,\n                            \"variable_om_cost\": 22.00,\n                            \"ramp_up_fraction\": 1.0,\n                            \"ramp_down_fraction\": 1.0\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_Solvent_DAC\",\n                    \"transforms\": {\n                        \"electricity_consumption\": 4.38\n                    },\n                    \"edges\": {\n                        \"co2_edge\": {\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_Solvent_DAC\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 939000.00,\n                            \"fixed_om_cost\": 747000.00,\n                            \"variable_om_cost\": 22.00,\n                            \"ramp_up_fraction\": 1.0,\n                            \"ramp_down_fraction\": 1.0\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_Solvent_DAC\",\n                    \"transforms\": {\n                        \"electricity_consumption\": 4.38\n                    },\n                    \"edges\": {\n                        \"co2_edge\": {\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_Solvent_DAC\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 939000.00,\n                            \"fixed_om_cost\": 747000.00,\n                            \"variable_om_cost\": 22.00,\n                            \"ramp_up_fraction\": 1.0,\n                            \"ramp_down_fraction\": 1.0\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_NE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/electricdac/","page":"Electric DAC","title":"Electric DAC","text":"","category":"page"},{"location":"Guides/User Guide/user_add_location/#Adding-a-Location-to-a-System","page":"Adding Locations","title":"Adding a Location to a System","text":"","category":"section"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"Adding a new Location to a System requires two steps:","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"Add the new Location to the list of Locations\nTag any Nodes you wish to assign to the Location","category":"page"},{"location":"Guides/User Guide/user_add_location/#Adding-the-Location-to-the-Location-list","page":"Adding Locations","title":"Adding the Location to the Location list","text":"","category":"section"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"The Location list is a JSON file containing an array of Location names. Each name should be unique.","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"The most straightforward way of adding a new Location is to use the template functions. ","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"You can add one or more Locations by providing the Location file as an argument:","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"julia> template_location(\"ExampleSystems/template_example/system/locations.json\", \"Boston\")\njulia> template_location(\"ExampleSystems/template_example/system/locations.json\", [\"Boston\", \"NYC\", \"Princeton\"])","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"Or by providing the associated System:","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"julia> template_location(system, [\"Boston\", \"NYC\", \"Princeton\"])","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"You can learn how to create or load the System here.","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"With either approach, doing so will leave you with the following Locations file:","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"{\n    \"locations\": [\n        \"Boston\",\n        \"NYC\",\n        \"Princeton\"\n    ]\n}","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"Macro will ignore duplicate Locations. If we next call:","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"julia> template_location(system, [\"Boston\", \"New London\", \"Princeton\"])","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"Our locations file will be:","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"{\n    \"locations\": [\n        \"Boston\",\n        \"NYC\",\n        \"Providence\",\n        \"New London\"\n    ]\n}","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"Alternatively, you can directly add names to the locations.json file. However, in the future, the template functions will take care of additional steps so we recommend using them whenever possible.","category":"page"},{"location":"Guides/User Guide/user_add_location/#Adding-Nodes-to-a-Location","page":"Adding Locations","title":"Adding Nodes to a Location","text":"","category":"section"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"The next step is to let Macro know which Nodes are part of your new Location.  ","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"In your Nodes file (at system/nodes.json by default), add a \"location\" field to the instance data of each Node you would like to include, and the name of the Location. You can find a guide on how to add a Node to a System here.","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"For example, if you have a three-Location system and each Location requires an Electricity Node, you could add the following:","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"{\"nodes\": [\n    {\n        \"type\": \"Electricity\",\n        \"global_data\": {\n            \"time_interval\": \"Electricity\",\n            \"max_nsd\": [\n                1\n            ],\n            \"price_nsd\": [\n                5000.0\n            ],\n            \"constraints\": {\n                \"BalanceConstraint\": true,\n                \"MaxNonServedDemandConstraint\": true,\n                \"MaxNonServedDemandPerSegmentConstraint\": true\n            }\n        },\n        \"instance_data\": [\n            {\n                \"id\": \"elec_SE\",\n                \"location\": \"SE\",\n                \"demand\": {\n                    \"timeseries\": {\n                        \"path\": \"system/demand.csv\",\n                        \"header\": \"Demand_MW_z1\"\n                    }\n                }\n            },\n            {\n                \"id\": \"elec_MIDAT\",\n                \"location\": \"MIDAT\",\n                \"demand\": {\n                    \"timeseries\": {\n                        \"path\": \"system/demand.csv\",\n                        \"header\": \"Demand_MW_z2\"\n                    }\n                }\n            },\n            {\n                \"id\": \"elec_NE\",\n                \"location\": \"NE\",\n                \"demand\": {\n                    \"timeseries\": {\n                        \"path\": \"system/demand.csv\",\n                        \"header\": \"Demand_MW_z3\"\n                    }\n                }\n            }\n        ]\n    }\n]}","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"The Location information must be added to the instance data, not the global data, as you can only have one Node of each Commodity at any given Node.","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"To include two or more Nodes of the same Commodity at a single Node, you must use sub-Commodities to define additional versions of the Commodity.","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"You can learn more about sub-Commodities here.","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"For example, if you wish to differentiate between high and low emission electricity, you could create two sub-Commodities: LowEmissElectricity, and HighEmissElectricity. Now, you can add Electricity, LowEmissElectricity, and HighEmissElectricity to a Location:","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"{\"nodes\": [\n    {\n        \"type\": \"Electricity\",\n        \"instance_data\": {\n            \"id\": \"elec_SE\",\n            \"time_interval\": \"Electricity\",\n            \"location\": \"SE\",\n            \"demand\": {\n                \"timeseries\": {\n                    \"path\": \"system/demand.csv\",\n                    \"header\": \"Demand_MW_z1\"\n                }\n            }\n        }\n    },\n    {\n        \"type\": \"LowEmissElectricity\",\n        \"instance_data\": {\n            \"id\": \"lowemisselec_SE\",\n            \"time_interval\": \"LowEmissElectricity\",\n            \"location\": \"SE\",\n            \"demand\": 0\n        }\n    },\n    {\n        \"type\": \"HighEmissElectricity\",\n        \"instance_data\": {\n            \"id\": \"highemisselec_SE\",\n            \"time_interval\": \"HighEmissElectricity\",\n            \"location\": \"SE\",\n            \"demand\": 0\n        }\n    },\n]}","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"As a reminder, sub-Commodities can flow into Nodes of the same type or one of their supertypes types. This means LowEmissElectricity can flow into LowEmissElectricity Nodes or Electricity Nodes. However, HighEmissElectricity and Electricity cannot flow into LowEmissElectricity Nodes.","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"Also, if you connect an Asset producing LowEmissElectricity to our new \"SE\" Location, it will be connected to the LowEmissElectricity Node. If you want the LowEmissElectricity to be able to meet the Electricity demand then you will have to specify that the Asset be connected to the \"elecSE\" Node, or add an edge connecting the \"lowemisselecSE\" and \"elec_SE\" Nodes.","category":"page"},{"location":"Guides/User Guide/user_add_location/#Important-Settings-for-Locations","page":"Adding Locations","title":"Important Settings for Locations","text":"","category":"section"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"There are two important settings when using Locations in your System:","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"AutoCreateLocations: default = true. When set to true, this feature will automatically create a new Location if Macro comes across a Node which is a assigned to a Location that does not exist. Macro will print an info statement to let the user know that the Location has been created and its name.\nAutoCreateNodes: default = false. When set to true, this feature will automatically create a new Node if Macro is asked to find a Node of a given Commodity at a Location and the Node does not exist. For example, if Macro is asked to find the Electricity Node in \"location 1\", but that Location only has a Hydrogen Node, then a new Electricity Node will be created with the default parameters.","category":"page"},{"location":"Guides/User Guide/user_add_location/","page":"Adding Locations","title":"Adding Locations","text":"","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Adding-an-Asset-to-a-System","page":"Adding Assets","title":"Adding an Asset to a System","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Adding a new Asset to your System requires five steps:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Create a new Asset file in your Assets folder\nDuplicate the instance data for each version of the Asset you would like\nAssign each Asset a unique ID\nAdd instance data to the Assets\nConsolidate some instance data into global data","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Create-a-new-Asset-file","page":"Adding Assets","title":"Create a new Asset file","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/#Adding-a-single-Asset","page":"Adding Assets","title":"Adding a single Asset","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"The best way to create a new Asset file is to use the template functions. If you wanted to add a ThermalPower Asset to your system, you could add it using the template_asset function, called with your System's asset folder:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"julia> template_asset(\"ExampleSystems/template_example/assets\", ThermalPower; style=\"simple\", format=\"json\")","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Alternatively, you can call template_asset with your system object that you have already created:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"julia> system = template_system(\"ExampleSystems/template_example\")\njulia> template_asset(system, ThermalPower; style=\"simple\", format=\"json\")","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Asset-file-name","page":"Adding Assets","title":"Asset file name","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Each call of the function will create a new ThermalPower Asset file. Successive calls will be numbered, i.e. ThermalPower.json, ThermalPower_001.json, ThermalPower_002.json, etc. The file name can be changed using the asset_name keyword argument. The following example will produce an Asset file called thermalpower_example.json:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"julia> template_asset(system, ThermalPower; style=\"simple\", format=\"json\", asset_name=\"thermalpower_example\")","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Asset-file-format","page":"Adding Assets","title":"Asset file format","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"The format keyword argument determines whether your new Asset file will be a CSV or JSON file. The default is a JSON file. Most of this guide will use JSON examples. This section details how to work with CSV files.","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Asset-file-style","page":"Adding Assets","title":"Asset file style","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"The style keyword argument determines how much detail Macro will include in your new Asset file. The two options arefull and simple. The simple option will return a Asset file which contains the minimum data fields necessary to define the Asset. Most simple description do not have nested dictionaries of inputs so are easy to read, particularly with CSV input files. The full option will return an Asset file with full descriptions of all the components and Constraints. This will include several nested dictionaries of all the options and inputs.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"As an example, the simple version of our new ThermalPower Asset is:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"{\n    \"ThermalPower\": {\n        \"type\": \"ThermalPower\",\n        \"instance_data\": [\n            {\n                \"id\": \"ThermalPower\",\n                \"location\": null,\n                \"can_expand\": true,\n                \"can_retire\": true,\n                \"existing_capacity\": 0,\n                \"capacity_size\": 1,\n                \"timedata\": \"NaturalGas\",\n                \"fuel_commodity\": \"NaturalGas\",\n                \"co2_sink\": null,\n                \"uc\": false,\n                \"investment_cost\": 0,\n                \"fixed_om_cost\": 0,\n                \"variable_om_cost\": 0,\n                \"fuel_consumption\": 0,\n                \"electricity_consumption\": 0,\n                \"emission_rate\": 1,\n                \"startup_cost\": 0,\n                \"startup_fuel_consumption\": 0,\n                \"min_up_time\": 0,\n                \"min_down_time\": 0,\n                \"ramp_up_fraction\": 0,\n                \"ramp_down_fraction\": 0\n            }\n        ]\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"While the full version is:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"{\n    \"ThermalPower\": {\n        \"type\": \"ThermalPower\",\n        \"instance_data\": [\n            {\n                \"id\": \"ThermalPower\",\n                \"transforms\": {\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    },\n                    \"location\": null,\n                    \"fuel_consumption\": 1,\n                    \"emission_rate\": 0,\n                    \"id\": null,\n                    \"timedata\": \"Electricity\",\n                    \"startup_fuel_consumption\": 0\n                },\n                \"edges\": {\n                    \"elec_edge\": {\n                        \"integer_decisions\": false,\n                        \"location\": null,\n                        \"can_retire\": true,\n                        \"timedata\": null,\n                        \"can_expand\": true,\n                        \"min_down_time\": 0,\n                        \"has_capacity\": true,\n                        \"max_capacity\": Infinity,\n                        \"efficiency\": 1,\n                        \"startup_fuel_balance_id\": \"none\",\n                        \"fixed_om_cost\": 0,\n                        \"startup_fuel\": 0,\n                        \"availability\": null,\n                        \"existing_capacity\": 0,\n                        \"commodity\": \"Electricity\",\n                        \"min_up_time\": 0,\n                        \"capacity_size\": 1,\n                        \"ramp_down_fraction\": 1,\n                        \"end_vertex\": null,\n                        \"variable_om_cost\": 0,\n                        \"investment_cost\": 0,\n                        \"unidirectional\": true,\n                        \"start_vertex\": null,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true\n                        },\n                        \"min_capacity\": 0,\n                        \"loss_fraction\": 0,\n                        \"id\": null,\n                        \"startup_fuel_consumption\": 0,\n                        \"ramp_up_fraction\": 1,\n                        \"min_flow_fraction\": 0,\n                        \"distance\": 0,\n                        \"uc\": false,\n                        \"startup_cost\": 0\n                    },\n                    \"fuel_edge\": {\n                        \"integer_decisions\": false,\n                        \"location\": null,\n                        \"can_retire\": false,\n                        \"timedata\": null,\n                        \"can_expand\": false,\n                        \"min_down_time\": 0,\n                        \"has_capacity\": false,\n                        \"max_capacity\": Infinity,\n                        \"efficiency\": 1,\n                        \"startup_fuel_balance_id\": \"none\",\n                        \"fixed_om_cost\": 0,\n                        \"startup_fuel\": 0,\n                        \"availability\": null,\n                        \"existing_capacity\": 0,\n                        \"commodity\": null,\n                        \"min_up_time\": 0,\n                        \"capacity_size\": 1,\n                        \"ramp_down_fraction\": 1,\n                        \"end_vertex\": null,\n                        \"variable_om_cost\": 0,\n                        \"investment_cost\": 0,\n                        \"unidirectional\": true,\n                        \"start_vertex\": null,\n                        \"constraints\": {\n                        },\n                        \"min_capacity\": 0,\n                        \"loss_fraction\": 0,\n                        \"id\": null,\n                        \"startup_fuel_consumption\": 0,\n                        \"ramp_up_fraction\": 1,\n                        \"min_flow_fraction\": 0,\n                        \"distance\": 0,\n                        \"uc\": false,\n                        \"startup_cost\": 0\n                    },\n                    \"co2_edge\": {\n                        \"integer_decisions\": false,\n                        \"location\": null,\n                        \"can_retire\": false,\n                        \"timedata\": null,\n                        \"can_expand\": false,\n                        \"min_down_time\": 0,\n                        \"has_capacity\": false,\n                        \"max_capacity\": Infinity,\n                        \"efficiency\": 1,\n                        \"startup_fuel_balance_id\": \"none\",\n                        \"fixed_om_cost\": 0,\n                        \"startup_fuel\": 0,\n                        \"availability\": null,\n                        \"existing_capacity\": 0,\n                        \"commodity\": \"CO2\",\n                        \"min_up_time\": 0,\n                        \"capacity_size\": 1,\n                        \"ramp_down_fraction\": 1,\n                        \"end_vertex\": null,\n                        \"co2_sink\": null,\n                        \"variable_om_cost\": 0,\n                        \"investment_cost\": 0,\n                        \"unidirectional\": true,\n                        \"start_vertex\": null,\n                        \"constraints\": {\n                        },\n                        \"min_capacity\": 0,\n                        \"loss_fraction\": 0,\n                        \"id\": null,\n                        \"startup_fuel_consumption\": 0,\n                        \"ramp_up_fraction\": 1,\n                        \"min_flow_fraction\": 0,\n                        \"distance\": 0,\n                        \"uc\": false,\n                        \"startup_cost\": 0\n                    }\n                }\n            }\n        ]\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Adding-a-parametric-Asset","page":"Adding Assets","title":"Adding a parametric Asset","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Certain Assets can be parameterized by a Commodity. For example, ThermalPower Assets are parameterized by their fuel, e.g. ThermalPower{NaturalGas} or ThermalPower{Hydrogen}. These can be created directly using the template_asset function:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"julia> template_asset(system, ThermalPower{NaturalGas}; style=\"simple\", format=\"json\")","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"This creates a file called ThermalPower{NaturalGas}.json, with the contents shown below. The Asset type is still ThermalPower, but the fuel_commodity is set automatically. This will ensure Macro creates a ThermalPower{NaturalGas}.json Asset at runtime.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"{\n    \"ThermalPower{NaturalGas}\": {\n        \"type\": \"ThermalPower\",\n        \"instance_data\": [\n            {\n                \"id\": \"ThermalPower{NaturalGas}\",\n                \"location\": null,\n                \"can_expand\": true,\n                \"can_retire\": true,\n                \"existing_capacity\": 0,\n                \"capacity_size\": 1,\n                \"timedata\": \"NaturalGas\",\n                \"fuel_commodity\": \"NaturalGas\",\n                \"co2_sink\": null,\n                \"uc\": false,\n                \"investment_cost\": 0,\n                \"fixed_om_cost\": 0,\n                \"variable_om_cost\": 0,\n                \"fuel_consumption\": 0,\n                \"electricity_consumption\": 0,\n                \"emission_rate\": 1,\n                \"startup_cost\": 0,\n                \"startup_fuel_consumption\": 0,\n                \"min_up_time\": 0,\n                \"min_down_time\": 0,\n                \"ramp_up_fraction\": 0,\n                \"ramp_down_fraction\": 0\n            }\n        ]\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Adding-multiple-Assets","page":"Adding Assets","title":"Adding multiple Assets","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Multiple Assets can be added at once by providing an array of Asset names. The following argument will create three new Asset files:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"julia> template_asset(system, [ThermalPower, VRE, ThermalPower{NaturalGas}]; style=\"simple\", format=\"json\")","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Keyword-arguments-when-adding-multiple-Assets","page":"Adding Assets","title":"Keyword arguments when adding multiple Assets","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"When adding multiple Assets at once, you should provide an array of asset_names if you want to specify any of them. Alternatively, allow the files to be created with the default names and then change them manually.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"julia> template_asset(system, [ThermalPower, VRE, ThermalPower{NaturalGas}]; asset_names=[\"thermalpower_example\", \"vre_example\", \"natgas_thermalpower_example\"] style=\"simple\", format=\"json\")","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Only one option can be chosen for each of the format and style keywork arguments.","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Creating-Instance-Data-for-Each-Asset","page":"Adding Assets","title":"Creating Instance Data for Each Asset","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"You have three options for how to create multiple versions of an Asset, to represent differences in cost, location, or other features:","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Create-an-Asset-file-for-each-version-by-calling","page":"Adding Assets","title":"Create an Asset file for each version by calling","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"This is done be calling template_asset for each one. This keeps each file simple but will quickly make your asset folder hard to manage, so we do not recommend this approach.","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Create-additional-instances-in-one-Asset-file","page":"Adding Assets","title":"Create additional instances in one Asset file","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"This is the recommended appraoch. Each entry in the instance_data field corresponds to a version of the Asset. The type field determines the Asset which will be created. Assets described in this manner can also share global_data, which is discussed in a subsequent section.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"To create additional versions of an Asset in this manner, copy-paste additional entries into the instance_data field of your Asset file.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"{\n    \"ThermalPower\": {\n        \"type\": \"ThermalPower\",\n        \"instance_data\": [\n            {\n                \"id\": \"ThermalPower_1\",\n                ... other fields ...\n            },\n            {\n                \"id\": \"ThermalPower_2\",\n                ... other fields ...\n            }\n        ]\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Create-multiple-Assets-in-one-Asset-file","page":"Adding Assets","title":"Create multiple Assets in one Asset file","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"You can include several Assets in one file by listing them in an array or dictionary.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"To do so with an array, turn the top-level dictionary into an array and copy-paste the Asset description:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"{\n    \"ThermalPower\": [\n        {\n            \"type\": \"ThermalPower\",\n            \"instance_data\": [\n                {\n                    \"id\": \"ThermalPower_1\",\n                    ... other fields ...\n                }\n            ]\n        },\n        {\n            \"type\": \"ThermalPower\",\n            \"instance_data\": [\n                {\n                    \"id\": \"ThermalPower_2\",\n                    ... other fields ...\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"To create a copy using a dictionary, add additional entries to the top-level dictionary:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"{\n    \"ThermalPower_1\": {\n        \"type\": \"ThermalPower\",\n        \"instance_data\": [\n            {\n                \"id\": \"ThermalPower_1\",\n                ... other fields ...\n            }\n        ]\n    },\n    \"ThermalPower_2\": {\n        \"type\": \"ThermalPower\",\n        \"instance_data\": [\n            {\n                \"id\": \"ThermalPower_2\",\n                ... other fields ...\n            }\n        ]\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"You can also use either approach to include Assets of different types. This is especially useful if you are using a computer cluster, which typically prefer to transfer a few large files rather than multiple small ones.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"{\n    \"ThermalPower\": {\n        \"type\": \"ThermalPower\",\n        \"instance_data\": [\n            {\n                \"id\": \"ThermalPower\",\n                ... other fields ...\n            }\n        ]\n    },\n    \"VRE\": {\n        \"type\": \"VRE\",\n        \"instance_data\": [\n            {\n                \"id\": \"VRE\",\n                ... other fields ...\n            }\n        ]\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"The two approaches can also be blended:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"{\n    \"existing_resource\": [\n        {\n            \"type\": \"ThermalPower\",\n            \"instance_data\": [\n                {\n                    \"id\": \"existing_natgas_1\",\n                ... other fields ...\n                }\n            ]\n        },\n        {\n            \"type\": \"VRE\",\n            \"instance_data\": [\n                {\n                    \"id\": \"existing_vre_1\",\n                ... other fields ...\n                }\n            ]\n        }\n    ],\n    \"new_resources\": [\n        {\n            \"type\": \"ThermalPower\",\n            \"instance_data\": [\n                {\n                    \"id\": \"new_natgas_1\",\n                ... other fields ...\n                }\n            ]\n        },\n        {\n            \"type\": \"VRE\",\n            \"instance_data\": [\n                {\n                    \"id\": \"new_vre_1\",\n                ... other fields ...\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Assign-Asset-IDs","page":"Adding Assets","title":"Assign Asset IDs","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Every Asset must have a unique ID as they are how Macro identifies and manages Assets.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"The template_asset function will search your asset folder (either based on the provided filepath or the system_data.json file of your system object) and create a unique, numbered ID based on the Asset type or user-provided Asset name.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"You can change the Asset IDs of your Assets by editing the id field in the instance_data of your Asset files. ","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Listing-existing-Asset-IDs","page":"Adding Assets","title":"Listing existing Asset IDs","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"You can call the asset_ids function to list the existing Asset IDs of your system. If you have attempted to build and run your model, you can use the source keyword argument to have asset_ids check the IDs of the Assets you have already built. This is the default behaviour of asset_ids.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"julia> asset_ids(system)\njulia> asset_ids(system; source=\"assets\")","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"If you have not built your system yet, you can specify the input files as the source:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"julia> asset_ids(system; source=\"inputs\")","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Alternatively, you can use the asset_ids_from_dir function to target the input files directly:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"julia> asset_ids_from_dir(\"ExampleSystems/template_example/assets\")","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Add-Instance-Data","page":"Adding Assets","title":"Add Instance Data","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"The simple and full versions of the template_asset functions will create Assets with Macro's default input data. This data does not represent realistic assumptions, so you must add your own data to the fields. You may delete any fields you do not want to change.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"If you are using the simple version of an Asset file you must define a Location for each Asset, by editing the location field of each Assets instance_data.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Certain Assets have other fields which you must change for them to be correctly included in the model. Please refer to the description of the Asset in the Asset Library.","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Creating-Global-Data","page":"Adding Assets","title":"Creating Global Data","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"In populating the instance_data for your Assets, you may find that multiple instances share the same data. To help reduce repetition, Macro allows you to create a global_data field for each Asset, which will be applied to each Asset. All fields in the instance_data will override the same fields in your global_data.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"As an example, consider a case where you wish to create three ThermalPower Assets in three Locations.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"The Assets share the same:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Initial capacity\nUnit capacity size\nco2_sink (used to track emissions)\nDo not use integer unit commitment\nHave the same investment, fixed and variable costs","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"The Assets have different:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Fuel consumption rates\nEmission rates\nTwo of the Asset are fueled with natural gas, while the third is fueled with hydrogen.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"To represent this, we have moved all the shared properties to the global_data field, leaving the fuel consumption and emission rates in the instance_data. We have moved the fuel_commodity to the global_data too, but override it in the third example by also including that field in its instance_data.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"{\n    \"ThermalPower\": {\n        \"type\": \"ThermalPower\",\n        \"global_data\": {\n            \"can_expand\": true,\n                \"can_retire\": true,\n                \"existing_capacity\": 0,\n                \"capacity_size\": 100,\n                \"timedata\": \"NaturalGas\",\n                \"fuel_commodity\": \"NaturalGas\",\n                \"co2_sink\": \"co2_node_1\",\n                \"uc\": false,\n                \"investment_cost\": 300000,\n                \"fixed_om_cost\": 10000,\n                \"variable_om_cost\": 4,\n        }\n        \"instance_data\": [\n            {\n                \"id\": \"ThermalPower_1\",\n                \"location\": \"Boston\",\n                \"fuel_consumption\": 2.25,\n                \"emission_rate\": 0.18\n            },\n            {\n                \"id\": \"ThermalPower_2\",\n                \"location\": \"Princeton\",\n                \"fuel_consumption\": 2.5,\n                \"emission_rate\": 0.2\n            },\n            {\n                \"id\": \"ThermalPower_Hydrogen_1\",\n                \"location\": \"New York\",\n                \"fuel_commodity\": \"Hydrogen\",\n                \"fuel_consumption\": 3.0,\n                \"emission_rate\": 0.0\n            }\n        ]\n    }\n}","category":"page"},{"location":"Guides/User Guide/user_add_asset/#Working-with-CSV-Asset-files","page":"Adding Assets","title":"Working with CSV Asset files","text":"","category":"section"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"All of the steps described above also work for CSV-based input files, with the exception of creating global_data. The CSV-based inputs only have type and instance_data.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"It is also more challenging to include multiple Asset types in the same file, as it will require many empty columns. Therefore, we recommend using separate Asset files for each type.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"For Assets of the same type, each field in the JSON file is replaced with a column. Nested JSON fields have nested CSV headers, with each name separated by a -- character. This makes it much more prefereable to use the simple format for your CSV input files.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"A simple CSV input file will look like:","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"Type,id,location,can_expand,can_retire,existing_capacity,capacity_size,timedata,fuel_commodity,co2_sink,uc,investment_cost,fixed_om_cost,variable_om_cost,fuel_consumption,electricity_consumption,emission_rate,startup_cost,startup_fuel_consumption,min_up_time,min_down_time,ramp_up_fraction,ramp_down_fraction\nThermalPower,ThermalPower,,true,true,0.0,1.0,NaturalGas,NaturalGas,,false,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0,0,0.0,0.0","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"To add more versions of the Assets, simply add more rows with their own instance data.","category":"page"},{"location":"Guides/User Guide/user_add_asset/","page":"Adding Assets","title":"Adding Assets","text":"","category":"page"},{"location":"Manual/assets/1_introduction/#Macro-Asset-Library","page":"Assets","title":"Macro Asset Library","text":"","category":"section"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"Macro is designed to be a flexible and modular model that can adapt to various energy system representations. The model provides a rich library of pre-defined assets, enabling a \"plug-and-play\" approach for users building their own energy system.","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"Each asset is defined by a combination of transformations, edges, and storage units that represent the physical and operational characteristics of a technology. These assets can be combined to create a detailed representation of the energy system, capturing the interactions between technologies and sectors.","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"In the following sections, we will introduce each asset type and show the attributes that can be set for each of them as well as the equations that define the conversion processes. We will also provide a graphical representation of the asset in terms of transformations, edges, and storages to help the user understand the structure of the asset.","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"Each section will have the following three parts:","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"Graph structure: a graphical representation of the asset, showing the transformations, edges, and storages present in the asset.\nAttributes: a table with the attributes that can be set for each asset type.\nExample: an example of the asset type input file (.json) that can be used to create the asset.","category":"page"},{"location":"Manual/assets/1_introduction/#Available-assets","page":"Assets","title":"Available assets","text":"","category":"section"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"The current library includes the following assets:","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"Battery","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"<a href=\"battery.html\"><img width=\"270\" src=\"../../images/battery.png\" /></a>","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"BECCS Electricity","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"<a href=\"beccselectricity.html\"><img width=\"400\" src=\"../../images/beccselec.png\" /></a>","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"BECCS Hydrogen","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"<a href=\"beccshydrogen.html\"><img width=\"400\" src=\"../../images/beccsh2.png\" /></a>","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"Electric DAC","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"<a href=\"electricdac.html\"><img width=\"360\" src=\"../../images/elecdac.png\" /></a>","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"Electrolyzer","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"<a href=\"electrolyzer.html\"><img width=\"360\" src=\"../../images/electrolyzer.png\" /></a>","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"Fuel Cell","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"<a href=\"fuelcell.html\"><img width=\"320\" src=\"../../images/fuelcell.png\" /></a>","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"Gas Storage","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"<a href=\"gasstorage.html\"><img width=\"400\" src=\"../../images/gas_storage.png\" /></a>","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"Hydrogen Line","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"<a href=\"hydrogenline.html\"><img width=\"220\" src=\"../../images/h2line.png\" /></a>","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"Hydro Reservoir","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"<a href=\"hydropower.html\"><img width=\"360\" src=\"../../images/hydrores.png\" /></a>","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"Must Run","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"<a href=\"mustrun.html\"><img width=\"250\" src=\"../../images/vre.png\" /></a>","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"Natural Gas DAC","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"<a href=\"natgasdaq.html\"><img width=\"450\" src=\"../../images/natgasdac.png\" /></a>","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"Power Line","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"<a href=\"powerline.html\"><img width=\"220\" src=\"../../images/powerline.png\" /></a>","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"Thermal Hydrogen Plant (with and without CCS)","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"<a href=\"thermalhydrogen.html\"><img width=\"360\" src=\"../../images/smr.png\" /></a>","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"Thermal Power Plant (with and without CCS)","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"<a href=\"thermalpower.html\"><img width=\"380\" src=\"../../images/thermalpower.png\" /></a>","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"Variable Renewable Energy resources (VRE)","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"<a href=\"vre.html\"><img width=\"300\" src=\"../../images/vre.png\" /></a>","category":"page"},{"location":"Manual/assets/1_introduction/","page":"Assets","title":"Assets","text":"","category":"page"},{"location":"Guides/User Guide/user_introduction/#User-Guides","page":"User Guides","title":"User Guides","text":"","category":"section"},{"location":"Guides/User Guide/user_introduction/","page":"User Guides","title":"User Guides","text":"Topics to cover:","category":"page"},{"location":"Guides/User Guide/user_introduction/","page":"User Guides","title":"User Guides","text":"Sectors","category":"page"},{"location":"Guides/User Guide/user_introduction/","page":"User Guides","title":"User Guides","text":"","category":"page"},{"location":"Manual/assets/thermalhydrogen/#Thermal-Hydrogen-Plant-(with-and-without-CCS)","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/#Graph-structure","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Graph structure","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"A thermal hydrogen plant (with and without CCS) is represented in Macro using the following graph structure:","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"<img width=\"400\" src=\"../../images/smr.png\" />","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"A thermal hydrogen plant (with and without CCS) is made of:","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"1 Transformation component, representing the thermal hydrogen plant (with and without CCS).\n5 Edge components:\n1 incoming Fuel Edge, representing the fuel supply. \n1 incoming Electricity Edge, representing the electricity consumption.\n1 outgoing Hydrogen Edge, representing the hydrogen production. This edge can have unit commitment operations.\n1 outgoing CO2 Edge, representing the CO2 that is emitted.\n1 outgoing CO2Captured Edge, representing the CO2 that is captured (only if CCS is present).","category":"page"},{"location":"Manual/assets/thermalhydrogen/#Attributes","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Attributes","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"The structure of the input file for a ThermalHydrogen asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"fuel_edge\": {\n            // ... fuel_edge-specific attributes ...\n        },\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"h2_edge\": {\n            // ... h2_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        },\n        \"co2_captured_edge\": {\n            // ... co2_captured_edge-specific attributes, only if CCS is present ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/thermalhydrogen/#Transformation","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Transformation","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"The definition of the transformation object can be found here MacroEnergy.Transformation.","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Attribute Type Values Default Description/Units\ntimedata String String Required Time resolution for the time series data linked to the transformation. E.g. \"NaturalGas\".\nconstraints Dict{String,Bool} Any Macro constraint type for vertices BalanceConstraint List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\nelectricity_consumption epsilon_elec_consumption Float64 Float64 0.0 MWh_elecMWh_h2\nfuel_consumption epsilon_fuel_consumption Float64 Float64 1.0 MWh_fuelMWh_h2\nemission_rate epsilon_emission_rate Float64 Float64 0.0 t_CO2MWh_fuel\ncapture_rate epsilon_co2_capture_rate Float64 Float64 0.0 t_CO2MWh_fuel","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"tip: Default constraints\nThe default constraint for the transformation part of the ThermalHydrogen asset is the following:Balance constraint","category":"page"},{"location":"Manual/assets/thermalhydrogen/#Flow-equations","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Flow equations","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"note: ThermalHydrogen\nNote: Fuel is the type of the fuel being converted.beginaligned\nphi_fuel = phi_h2 cdot epsilon_fuel_consumption \nphi_elec = phi_h2 cdot epsilon_elec_consumption \nphi_co2 = phi_fuel cdot epsilon_emission_rate \nphi_co2_captured = phi_fuel cdot epsilon_co2_capture_rate quad text(if CCS) \nendaligned","category":"page"},{"location":"Manual/assets/thermalhydrogen/#Edges","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Edges","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"note: Unit commitment and default constraints\nThe Hydrogen edge can have unit commitment operations. To enable it, the user needs to set the uc attribute to true. The default constraints for unit commitment case are the following:Capacity constraint\nRamping limits constraint\nMinimum up and down time constraintIn case of no unit commitment, the uc attribute is set to false and the default constraints are the following:Capacity constraint","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"warning: Asset expansion\nAs a modeling decision, only the Hydrogen and Fuel edges are allowed to expand. Therefore, both the has_capacity and constraints attributes can only be set for those edges. For all the other edges, these attributes are pre-set to false and to an empty list respectively to ensure the correct modeling of the asset. ","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"warning: Directionality\nThe unidirectional attribute is set to true for all the edges.","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"All the edges are represented by the same set of attributes. The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Attribute Type Values Default Description\ntype String Any Macro commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Hydrogen\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges See note above List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"assets/availability.csv\", \"header\": \"SE_ATR_wCCS\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge (only available for the Hydrogen and Fuel edges).\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nmin_down_time Int64 Int64 0 Minimum amount of time the edge has to remain in the shutdown state before starting up again. Note: add the MinDownTimeConstraint to the constraints dictionary to activate this constraint.\nmin_up_time Int64 Int64 0 Minimum amount of time the edge has to remain in the committed state. Note: add the MinUpTimeConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nstartup_cost Float64 Float64 0.0 Cost per MW of capacity to start a generator (USD/MW per start).\nstartup_fuel Float64 Float64 0.0 Startup fuel use per MW of capacity (MWh/MW per start).\nuc Bool Bool false Whether the edge has unit commitment operations.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"Manual/assets/thermalhydrogen/#Example","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Example","text":"","category":"section"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"The following is an example of the input file for a ThermalHydrogenCCS asset that creates three ThermalHydrogenCCS assets, one in each of the SE, MIDAT and NE regions.","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"{\n    \"NaturalGasH2ATRCCS\": [\n        {\n            \"type\": \"ThermalHydrogenCCS\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"NaturalGas\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"h2_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_retire\": true,\n                        \"can_expand\": true,\n                        \"integer_decisions\": false,\n                        \"uc\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true,\n                            \"MinFlowConstraint\": true,\n                            \"MinUpTimeConstraint\": true,\n                            \"MinDownTimeConstraint\": true\n                        }\n                    },\n                    \"fuel_edge\": {\n                        \"type\": \"NaturalGas\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"co2_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_sink\"\n                    },\n                    \"co2_captured_edge\": {\n                        \"type\": \"CO2Captured\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_captured_sink\"\n                    },\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_ATR_wCCS_94pct\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.003794329,\n                        \"fuel_consumption\": 1.300184721664035,\n                        \"electricity_consumption\": 0.101574,\n                        \"capture_rate\": 0.065193472\n                    },\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_ATR_wCCS_94pct\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 57497.91679,\n                            \"fixed_om_cost\": 23292.27286,\n                            \"variable_om_cost\": 9.262366684,\n                            \"capacity_size\": 1082.95,\n                            \"startup_cost\": 0.253936008,\n                            \"min_up_time\": 22,\n                            \"min_down_time\": 12,\n                            \"ramp_up_fraction\": 0.5,\n                            \"ramp_down_fraction\": 0.5,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"fuel_edge\": {\n                            \"start_vertex\": \"natgas_SE\"\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_ATR_wCCS_94pct\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.003794329,\n                        \"fuel_consumption\": 1.300184721664035,\n                        \"electricity_consumption\": 0.101574,\n                        \"capture_rate\": 0.065193472\n                    },\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_MIDAT\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_ATR_wCCS_94pct\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 57497.91679,\n                            \"fixed_om_cost\": 23292.27286,\n                            \"variable_om_cost\": 9.262366684,\n                            \"capacity_size\": 1082.95,\n                            \"startup_cost\": 0.253936008,\n                            \"min_up_time\": 22,\n                            \"min_down_time\": 12,\n                            \"ramp_up_fraction\": 0.5,\n                            \"ramp_down_fraction\": 0.5,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"fuel_edge\": {\n                            \"start_vertex\": \"natgas_MIDAT\"\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_ATR_wCCS_94pct\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.003794329,\n                        \"fuel_consumption\": 1.300184721664035,\n                        \"electricity_consumption\": 0.101574,\n                        \"capture_rate\": 0.065193472\n                    },\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_ATR_wCCS_94pct\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 57497.91679,\n                            \"fixed_om_cost\": 23292.27286,\n                            \"variable_om_cost\": 9.262366684,\n                            \"capacity_size\": 1082.95,\n                            \"startup_cost\": 0.253936008,\n                            \"min_up_time\": 22,\n                            \"min_down_time\": 12,\n                            \"ramp_up_fraction\": 0.5,\n                            \"ramp_down_fraction\": 0.5,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"fuel_edge\": {\n                            \"start_vertex\": \"natgas_NE\"\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_NE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"","category":"page"},{"location":"Manual/assets/thermalhydrogen/","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"","category":"page"},{"location":"Tutorials/1_running_macro/#Tutorial:-Running-Macro","page":"Running Macro","title":"Tutorial: Running Macro","text":"","category":"section"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"note: Interactive Notebook\nThe interactive version of this tutorial can be found here.","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"In this tutorial, we start from a single zone electricity system with four resource clusters: utility scale solar PV, land-based wind power generation, natural gas combined cycle power plants, and electricity storage. ","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"We consider three commodities: electricity, natural gas, and textCO_2. ","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"Initially, hydrogen is modeled exogenously, adding a constant electricity demand for hydrogen production to the electricity demand time series. In other words, we assume the existence of an electrolyzer that continuously consumes electricity to meet the hydrogen demand.","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"We model a greenfield scenario with a carbon price of 200 USD/ton, i.e., we allow textCO_2 emissions with a penalty cost.","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"Note: We use the default units in Macro: MWh for energy vectors, metric tons for other commodities (e.g., textCO_2) and dollars for costs","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"using Pkg; Pkg.add(\"VegaLite\")","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"using MacroEnergy\nusing HiGHS\nusing CSV\nusing DataFrames\nusing JSON3\nusing VegaLite","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"We first load the inputs:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"system = MacroEnergy.load_system(\"one_zone_electricity_only\");","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"We are now ready to generate the Macro capacity expansion model. Because Macro is designed to be solved by high performance decomposition algorithms, the model formulation has a specific block structure that can be exploited by these schemes. In the case of 3 operational sub-periods, the block structure looks like this:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"(Image: model_structure)","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"model = MacroEnergy.generate_model(system)","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"Next, we set the optimizer. Note that we are using the open-source LP solver HiGHS, alternatives include the commercial solvers Gurobi, CPLEX, COPT.","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"MacroEnergy.set_optimizer(model, HiGHS.Optimizer);","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"Finally, we solve the capacity expansion model:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"MacroEnergy.optimize!(model)","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"To output the results in a csv file, we can use the following functions:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"result_dir = joinpath(@__DIR__, \"results\")\nmkpath(result_dir)\n\nwrite_capacity_results(joinpath(result_dir, \"capacity.csv\"), system)\nwrite_costs(joinpath(result_dir, \"costs.csv\"), model)\nwrite_flow_results(joinpath(result_dir, \"flow.csv\"), system)","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"To only view the results, we can use the following functions:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"get_optimal_capacity(system)\nget_optimal_retired_capacity(system)\nget_optimal_flows(system)\nget_optimal_undiscounted_costs(model)\nget_optimal_flows(system)","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"The total system cost (in dollars) is:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"MacroEnergy.objective_value(model)","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"and the total emissions (in metric tonnes) are:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"co2_node = MacroEnergy.get_nodes_sametype(system.locations, CO2)[1]\nMacroEnergy.value(sum(co2_node.operation_expr[:emissions]))","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"We can also plot the electricity generation results using VegaLite.jl:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"plot_time_interval = 3600:3624\nnatgas_power = MacroEnergy.value.(MacroEnergy.flow(system.assets[2].elec_edge)).data[plot_time_interval] / 1e3;\nsolar_power = MacroEnergy.value.(MacroEnergy.flow(system.assets[3].edge)).data[plot_time_interval] / 1e3;\nwind_power = MacroEnergy.value.(MacroEnergy.flow(system.assets[4].edge)).data[plot_time_interval] / 1e3;\n\nelec_gen = DataFrame(hours=plot_time_interval,\n    solar_photovoltaic=solar_power,\n    wind_turbine=wind_power,\n    natural_gas_fired_combined_cycle=natgas_power,\n)\n\nstack_elec_gen = stack(elec_gen, [:natural_gas_fired_combined_cycle, :wind_turbine, :solar_photovoltaic], variable_name=:resource, value_name=:generation);\n\nelc_plot = stack_elec_gen |>\n           @vlplot(\n    :area,\n    x = {:hours, title = \"Hours\"},\n    y = {:generation, title = \"Electricity generation (GWh)\", stack = :zero},\n    color = {\"resource:n\", scale = {scheme = :category10}},\n    width = 400,\n    height = 300\n)","category":"page"},{"location":"Tutorials/1_running_macro/#Exercise-1","page":"Running Macro","title":"Exercise 1","text":"","category":"section"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"Set a strict net-zero textCO_2 cap by removing the slack allowing constraint violation for a penalty. This can be done by deleting the field price_unmet_policy from the textCO_2 node in file one_zone_electricity_only/system/nodes.json","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"Then, re-run the model with these new inputs and show the capacity results, total system cost, emissions, and plot the generation profiles.","category":"page"},{"location":"Tutorials/1_running_macro/#Solution","page":"Running Macro","title":"Solution","text":"","category":"section"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"Open file one_zone_electricity_only/system/nodes.json, go to the bottom of the file where the textCO_2 node is defined. Remove the lines related to the field price_unmet_policy, so that the node definition looks like this:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":" {\n    \"type\": \"CO2\",\n    \"global_data\": {\n        \"time_interval\": \"CO2\"\n    },\n    \"instance_data\": [\n        {\n            \"id\": \"co2_sink\",\n            \"constraints\": {\n                \"CO2CapConstraint\": true\n            },\n            \"rhs_policy\": {\n                \"CO2CapConstraint\": 0\n            }   \n        }\n    ]\n}","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"Then, you need to re-load the inputs:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"system = MacroEnergy.load_system(\"one_zone_electricity_only\");","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"generate the Macro model:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"model = MacroEnergy.generate_model(system);","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"and solve it:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"MacroEnergy.set_optimizer(model, HiGHS.Optimizer);\nMacroEnergy.optimize!(model)","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"We can check the results by printing the total system cost:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"MacroEnergy.objective_value(model)","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"and the new emissions (which should be zero):","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"co2_node = MacroEnergy.get_nodes_sametype(system.locations, CO2)[1]\nMacroEnergy.value(sum(co2_node.operation_expr[:emissions]))","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"Finally, we plot the generation results:","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"plot_time_interval = 3600:3624\nnatgas_power =  MacroEnergy.value.(MacroEnergy.flow(system.assets[2].elec_edge)).data[plot_time_interval]/1e3;\nsolar_power = MacroEnergy.value.(MacroEnergy.flow(system.assets[3].edge)).data[plot_time_interval]/1e3;\nwind_power = MacroEnergy.value.(MacroEnergy.flow(system.assets[4].edge)).data[plot_time_interval]/1e3;\n\nelec_gen =  DataFrame( hours = plot_time_interval, \n                solar_photovoltaic = solar_power,\n                wind_turbine = wind_power,\n                natural_gas_fired_combined_cycle = natgas_power,\n                )\n\nstack_elec_gen = stack(elec_gen, [:natural_gas_fired_combined_cycle,:wind_turbine,:solar_photovoltaic], variable_name=:resource, value_name=:generation);\n\nelc_plot = stack_elec_gen |> \n@vlplot(\n    :area,\n    x={:hours, title=\"Hours\"},\n    y={:generation, title=\"Electricity generation (GWh)\",stack=:zero},\n    color={\"resource:n\", scale={scheme=:category10}},\n    width=400,\n    height=300\n)","category":"page"},{"location":"Tutorials/1_running_macro/","page":"Running Macro","title":"Running Macro","text":"","category":"page"},{"location":"References/3_macro_objects/#Macro-Objects","page":"Macro Objects","title":"Macro Objects","text":"","category":"section"},{"location":"References/3_macro_objects/","page":"Macro Objects","title":"Macro Objects","text":"Pages = [\"2_macro_objects.md\"]","category":"page"},{"location":"References/3_macro_objects/#Edge-(with-and-without-UC)","page":"Macro Objects","title":"Edge (with and without UC)","text":"","category":"section"},{"location":"References/3_macro_objects/#MacroEnergy.Edge","page":"Macro Objects","title":"MacroEnergy.Edge","text":"Edge{T} <: AbstractEdge{T}\n\nA mutable struct representing an edge in a network model, parameterized by commodity type T.\n\n# Fields\n- id::Symbol: Unique identifier for the edge\n- timedata::TimeData: Time-related data for the edge\n- start_vertex::AbstractVertex: Starting vertex of the edge\n- end_vertex::AbstractVertex: Ending vertex of the edge\n- availability::Vector{Float64}: Time series of availability factors\n- can_expand::Bool: Whether edge capacity can be expanded\n- can_retire::Bool: Whether edge capacity can be retired\n- capacity::Union{AffExpr,Float64}: Total available capacity\n- capacity_size::Float64: Size factor for resource cluster\n- constraints::Vector{AbstractTypeConstraint}: List of constraints applied to the edge\n- distance::Float64: Physical distance of the edge\n- existing_capacity::Float64: Initial installed capacity\n- fixed_om_cost::Float64: Fixed operation and maintenance costs\n- flow::Union{JuMPVariable,Vector{Float64}}: Flow of commodity `T` through the edge at each timestep\n- has_capacity::Bool: Whether the edge has capacity variables\n- integer_decisions::Bool: Whether capacity decisions must be integer\n- investment_cost::Float64: CAPEX per unit of new capacity\n- loss_fraction::Vector{Float64}: Fraction of flow lost during transmission, it can be time-dependent.\n- max_capacity::Float64: Maximum allowed capacity\n- min_capacity::Float64: Minimum required capacity\n- min_flow_fraction::Float64: Minimum flow as fraction of capacity\n- new_capacity::Union{JuMPVariable,Float64}: JuMP variable representing new capacity built\n- ramp_down_fraction::Float64: Maximum ramp-down rate as fraction of capacity\n- ramp_up_fraction::Float64: Maximum ramp-up rate as fraction of capacity\n- ret_capacity::Union{JuMPVariable,Float64}: JuMP variable representing capacity to be retired\n- unidirectional::Bool: Whether flow is restricted to one direction\n- variable_om_cost::Float64: Variable operation and maintenance costs per unit flow\n\nEdges represent connections between vertices that allow commodities to flow between them. \nThey can model physical infrastructure like pipelines, transmission lines, or logical \nconnections with associated costs, capacities, and operational constraints.\n\n\n\n\n\n","category":"type"},{"location":"References/3_macro_objects/#EdgeWithUC","page":"Macro Objects","title":"EdgeWithUC","text":"","category":"section"},{"location":"References/3_macro_objects/#MacroEnergy.EdgeWithUC","page":"Macro Objects","title":"MacroEnergy.EdgeWithUC","text":"EdgeWithUC{T} <: AbstractEdge{T}\n\nA mutable struct representing an edge with unit commitment constraints in a network model, parameterized by commodity type T.\n\n# Inherited Attributes from Edge\n- id::Symbol: Unique identifier for the edge\n- timedata::TimeData: Time-related data for the edge\n- start_vertex::AbstractVertex: Starting vertex of the edge\n- end_vertex::AbstractVertex: Ending vertex of the edge\n- availability::Vector{Float64}: Time series of availability factors\n- can_expand::Bool: Whether edge capacity can be expanded\n- can_retire::Bool: Whether edge capacity can be retired\n- capacity::Union{AffExpr,Float64}: Total available capacity\n- capacity_size::Float64: Size factor for resource cluster\n- constraints::Vector{AbstractTypeConstraint}: List of constraints applied to the edge\n- distance::Float64: Physical distance of the edge\n- existing_capacity::Float64: Initial installed capacity\n- fixed_om_cost::Float64: Fixed operation and maintenance costs\n- flow::Union{JuMPVariable,Vector{Float64}}: Flow of commodity through the edge at each timestep\n- has_capacity::Bool: Whether the edge has capacity variables\n- integer_decisions::Bool: Whether capacity decisions must be integer\n- investment_cost::Float64: CAPEX per unit of new capacity\n- loss_fraction::Float64: Fraction of flow lost during transmission\n- max_capacity::Float64: Maximum allowed capacity\n- min_capacity::Float64: Minimum required capacity\n- min_flow_fraction::Float64: Minimum flow as fraction of capacity\n- new_capacity::Union{JuMPVariable,Float64}: JuMP variable representing new capacity built\n- ramp_down_fraction::Float64: Maximum ramp-down rate as fraction of capacity\n- ramp_up_fraction::Float64: Maximum ramp-up rate as fraction of capacity\n- ret_capacity::Union{JuMPVariable,Float64}: JuMP variable representing capacity to be retired\n- unidirectional::Bool: Whether flow is restricted to one direction\n- variable_om_cost::Float64: Variable operation and maintenance costs per unit flow\n\n# Fields specific to EdgeWithUC\n- min_down_time::Int64: Minimum time units that must elapse between shutting down and starting up\n- min_up_time::Int64: Minimum time units that must elapse between starting up and shutting down\n- startup_cost::Float64: Cost incurred when starting up the unit\n- startup_fuel::Float64: Amount of fuel consumed during startup\n- startup_fuel_balance_id::Symbol: Identifier for the balance constraint tracking startup fuel\n- ucommit::Union{JuMPVariable,Vector{Float64}}: Binary commitment state variables\n- ushut::Union{JuMPVariable,Vector{Float64}}: Binary shutdown decision variables\n- ustart::Union{JuMPVariable,Vector{Float64}}: Binary startup decision variables\n\nEdgeWithUC extends Edge to model units that have operational constraints related to their on/off status. It includes variables and parameters\nfor tracking unit commitment decisions and associated costs/constraints.\n\n\n\n\n\n","category":"type"},{"location":"References/3_macro_objects/#Node","page":"Macro Objects","title":"Node","text":"","category":"section"},{"location":"References/3_macro_objects/#MacroEnergy.Node","page":"Macro Objects","title":"MacroEnergy.Node","text":"Node{T} <: AbstractVertex\n\nA mutable struct representing a node in a network, parameterized by commodity type T.\n\n# Inherited Attributes\n- id::Symbol: Unique identifier for the node\n- timedata::TimeData: Time-related data for the node\n- balance_data::Dict{Symbol,Dict{Symbol,Float64}}: Balance equations data\n- constraints::Vector{AbstractTypeConstraint}: List of constraints applied to the node\n- operation_expr::Dict: Operational JuMP expressions for the node\n\n# Fields\n- demand::Union{Vector{Float64},Dict{Int64,Float64}}: Time series of demand values\n- max_nsd::Vector{Float64}: Maximum allowed non-served demand for each segment\n- max_supply::Vector{Float64}: Maximum supply for each segment\n- non_served_demand::Union{JuMPVariable,Matrix{Float64}}: JuMP variables or matrix representing unmet demand\n- policy_budgeting_vars::Dict: Policy budgeting variables for constraints\n- policy_slack_vars::Dict: Policy slack variables for constraints\n- price::Union{Vector{Float64},Dict{Int64,Float64}}: Time series of prices\n- price_nsd::Vector{Float64}: Penalties for non-served demand by segment\n- price_supply::Vector{Float64}: Supply costs by segment\n- price_unmet_policy::Dict{DataType,Float64}: Mapping of policy types to penalty costs\n- rhs_policy::Dict{DataType,Float64}: Mapping of policy types to right-hand side values\n- supply_flow::Union{JuMPVariable,Matrix{Float64}}: JuMP variables or matrix representing supply flows\n\nNote: Base attributes are inherited from AbstractVertex via @AbstractVertexBaseAttributes macro.\n\n\n\n\n\n","category":"type"},{"location":"References/3_macro_objects/#Storage","page":"Macro Objects","title":"Storage","text":"","category":"section"},{"location":"References/3_macro_objects/#MacroEnergy.Storage","page":"Macro Objects","title":"MacroEnergy.Storage","text":"Storage{T} <: AbstractVertex\n\nA mutable struct representing a storage vertex in a network model, parameterized by commodity type T.\n\n# Inherited Attributes\n- id::Symbol: Unique identifier for the storage\n- timedata::TimeData: Time-related data for the storage\n- balance_data::Dict{Symbol,Dict{Symbol,Float64}}: Dictionary mapping balance equation IDs to coefficients\n- constraints::Vector{AbstractTypeConstraint}: List of constraints applied to the storage\n- operation_expr::Dict: Dictionary storing operational JuMP expressions for the storage\n\n# Fields\n- can_expand::Bool: Whether storage capacity can be expanded\n- can_retire::Bool: Whether storage capacity can be retired\n- capacity::AffExpr: Total available storage capacity\n- capacity_size::Float64: Size of each storage unit\n- charge_edge::Union{Nothing,AbstractEdge}: `Edge` representing charging flow\n- charge_discharge_ratio::Float64: Ratio between charging and discharging rates\n- discharge_edge::Union{Nothing,AbstractEdge}: `Edge` representing discharging flow\n- existing_capacity::Float64: Initial installed storage capacity\n- fixed_om_cost::Float64: Fixed operation and maintenance costs\n- investment_cost::Float64: CAPEX per unit of new storage capacity\n- loss_fraction::Float64: Fraction of stored commodity lost at each timestep\n- loss_fraction::Vector{Float64}: Fraction of stored commodity lost at each timestep\n- max_capacity::Float64: Maximum allowed storage capacity\n- max_duration::Float64: Maximum storage duration in hours\n- max_storage_level::Float64: Maximum storage level as fraction of capacity\n- min_capacity::Float64: Minimum required storage capacity\n- min_duration::Float64: Minimum storage duration in hours\n- min_outflow_fraction::Float64: Minimum discharge rate as fraction of capacity\n- min_storage_level::Float64: Minimum storage level as fraction of capacity\n- new_capacity::AffExpr: New storage capacity to be built\n- new_units::Union{Missing, JuMPVariable}: New storage units to be built\n- retired_capacity::AffExpr: Storage capacity to be retired\n- retired_units::Union{Missing, JuMPVariable}: Storage units to be retired\n- spillage_edge::Union{Nothing,AbstractEdge}: Edge representing spillage/losses (e.g. hydro reservoirs)\n- storage_level::Vector{VariableRef}: Storage level at each timestep\n\nStorage vertices represent facilities that can store commodities over time, such as batteries, \npumped hydro, or gas storage. They can charge (store) and discharge (release) commodities, \nsubject to capacity and operational constraints.\n\n\n\n\n\n","category":"type"},{"location":"References/3_macro_objects/#Transformation","page":"Macro Objects","title":"Transformation","text":"","category":"section"},{"location":"References/3_macro_objects/#MacroEnergy.Transformation","page":"Macro Objects","title":"MacroEnergy.Transformation","text":"Transformation <: AbstractVertex\n\nA mutable struct representing a transformation vertex in a network model, which models a conversion process between different commodities or energy forms.\n\n# Inherited Attributes\n- id::Symbol: Unique identifier for the transformation\n- timedata::TimeData: Time-related data for the transformation\n- balance_data::Dict{Symbol,Dict{Symbol,Float64}}: Dictionary mapping stoichiometric equation IDs to coefficients\n- constraints::Vector{AbstractTypeConstraint}: List of constraints applied to the transformation\n- operation_expr::Dict: Dictionary storing operational JuMP expressions for the transformation\n\nTransformations are used to model conversion processes between different commodities, such as power plants \nconverting fuel to electricity or electrolyzers converting electricity to hydrogen. The `balance_data` field \ntypically contains conversion efficiencies and other relationships between input and output flows.\n\n\n\n\n\n","category":"type"},{"location":"References/3_macro_objects/#@AbstractVertexBaseAttributes","page":"Macro Objects","title":"@AbstractVertexBaseAttributes","text":"","category":"section"},{"location":"References/3_macro_objects/#MacroEnergy.@AbstractVertexBaseAttributes","page":"Macro Objects","title":"MacroEnergy.@AbstractVertexBaseAttributes","text":"@AbstractVertexBaseAttributes()\n\nA macro that defines the base attributes for all vertex types in the network model.\n\n# Generated Fields\n- id::Symbol: Unique identifier for the vertex\n- timedata::TimeData: Time-related data for the vertex\n- balance_data::Dict{Symbol,Dict{Symbol,Float64}}: Dictionary mapping balance equation IDs to coefficients\n- constraints::Vector{AbstractTypeConstraint}: List of constraints applied to the vertex\n- operation_expr::Dict: Dictionary storing operational JuMP expressions for the vertex\n\nThis macro is used to ensure consistent base attributes across all vertex types in the network.\n\n\n\n\n\n","category":"macro"},{"location":"References/3_macro_objects/","page":"Macro Objects","title":"Macro Objects","text":"","category":"page"},{"location":"Getting Started/1_overview/#Getting-Started","page":"Overview","title":"Getting Started","text":"","category":"section"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"This getting started guides aims to help you:","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"Understand how you can use Macro\nGet a high-level understanding of how real-world systems are modeled in Macro\nInstall Macro\nExpore the files included with Macro\nRun your first case","category":"page"},{"location":"Getting Started/1_overview/#How-can-I-use-Macro?","page":"Overview","title":"How can I use Macro?","text":"","category":"section"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"Macro can be used in a variety of ways to optimize the design and operation of energy and industrial systems, investigate the value of new technologies or polices, optimize investments in an energy system over multiple years, and many more. Some example workflows are given below:","category":"page"},{"location":"Getting Started/1_overview/#Optimizing-an-energy-system","page":"Overview","title":"Optimizing an energy system","text":"","category":"section"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"Creating and running a model with Macro can be done without knowing Julia programming. A typical workflow with Macro consists of the following:","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"Collect the data required for your model, including supply and demand of different commodities, and cost and performance data for available production and storage Assets.\nCreate a Macro System and add the Assets and Locations required to represent your real-world system. Import your data into your System.\nAdd policy constraints to your System.\nConfigure the settings for your System.\nRun your case, to optimize the design and operation of your System.\nAnalyze the results.","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"From there you might run a sensitivity study on your results by changing some of your input data, adding or removing an Asset, or changing one of System policies.","category":"page"},{"location":"Getting Started/1_overview/#Adding-a-new-sector","page":"Overview","title":"Adding a new sector","text":"","category":"section"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"While Macro includes a variety of sector models and Assets; representing real-world production, storage, and transport technologies; you may want to create new Assets or sectors for your project. Doing so will require some Julia programming, but no detailed knowledge of the packages underlying Macro.","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"To create a new sector, you will need to:","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"Create any new Commodities that your sector will require. These Comodities can be energy, material, data, or flows which are important in your new sector.\nCreate new Assets to represent production, storage, transport, and end-use technologies in your sector. At least some of these should produce, store, transport, and consume your new Commodities.\nAssign default inputs for your Assets and specifiy which inputs are optional vs. required.","category":"page"},{"location":"Getting Started/1_overview/#Helpful-packages","page":"Overview","title":"Helpful packages","text":"","category":"section"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"There are several packages we recommend to improve the speed and quality of your work with Macro.","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"MacroEnergySolvers.jl : includes several advanced algorithms for solving Macro models. This includes decompositions, multi-stage models, and sensitivity studies.","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"MacroEnergyScaling.jl : can be used to improve the numerical stability of Macro models, improving runtime and the accuracy of your results.","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"The manual includes more details on these and other useful packages.","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"Please let us know if you are working on something (Julia-based or otherwise) which could be included in this list!","category":"page"},{"location":"Getting Started/1_overview/#How-are-real-world-systems-represented-in-Macro?","page":"Overview","title":"How are real-world systems represented in Macro?","text":"","category":"section"},{"location":"Getting Started/1_overview/#Multi-commodity-flow-network","page":"Overview","title":"Multi-commodity flow network","text":"","category":"section"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"Macro Systems are multi-commodity flow networks. Commodities can be energy, material, data, or other products of interest. Macro Systems consist of Vertices, where Commodities are produced, stored, and consumed; and Edges, which Commodities can flow along. With just these few elements, you can model complex real-world systems using Macro.","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"While you could describe your real-world system in terms of Macro Vertices and Edges, such a system would be quite abstract and may not be intuitive. Therefore, Macro allows you to build your System from Locations and Assets. These are collections of Vertices and Edges which correspond more closely to elements of read-world systems.","category":"page"},{"location":"Getting Started/1_overview/#1.-Locations","page":"Overview","title":"1. Locations","text":"","category":"section"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"Locations represent geographic places or areas. They are made up of Nodes, which each carry one Commodity and can be used to define external supply and/or demand of that Commodity. Each location can only contain a single Node for each Commodity.","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"To add a Locations to a System, you must define the constituent Nodes and add the Location to list of Locations.. These two links will take you to the Guides on how to do both tasks.","category":"page"},{"location":"Getting Started/1_overview/#2.-Assets","page":"Overview","title":"2. Assets","text":"","category":"section"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"Assets in Macro represent means of producing, storing, transporting, and consuming one or more Commodities. Assets can be sited at a Location, so your Macro System will intuitively represent real-world systems. For example, an Asset can define a power plant that converts a fuel into electricity, which is then assigned to a Location, linking it to the electricity and fuel Nodes at that Location. Each Asset is characterized by a list of Commodities they take as input and output and technical and a range of economic and techical parameters.","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"Macro has a rich library of Assets already designed and implemented. You can also create your own Assets. These can be used just for your project or you can add it to Macro for others to use.","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"Some examples of of assets are:","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"Pipelines or power lines\nThermal power plants (e.g. natural gas/coal/nuclear power plants with and without carbon capture)\nBatteries and hydrogen storage\nHydroelectric reservoirs\nVariable renewable energy sources (e.g. wind turbines, solar panels)\nElectrolyzers\nSteam methane reformers\nRun-of-river, reservoir storage and pumped storage hydro-electric facilities\nBiorefineries","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"note: Note\nPipelines and power lines connecting locations are also considered assets as they can transport, store and transform/compress commodities.","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"The Macro Asset Library contains the list of all Assets available in Macro.","category":"page"},{"location":"Getting Started/1_overview/","page":"Overview","title":"Overview","text":"","category":"page"},{"location":"Manual/assets/powerline/#Power-Line","page":"Power Line","title":"Power Line","text":"","category":"section"},{"location":"Manual/assets/powerline/#Graph-structure","page":"Power Line","title":"Graph structure","text":"","category":"section"},{"location":"Manual/assets/powerline/","page":"Power Line","title":"Power Line","text":"A power line is represented in Macro using the following graph structure:","category":"page"},{"location":"Manual/assets/powerline/","page":"Power Line","title":"Power Line","text":"<img width=\"400\" src=\"../../images/powerline.png\" />","category":"page"},{"location":"Manual/assets/powerline/","page":"Power Line","title":"Power Line","text":"A power line asset is very simple and is made of:","category":"page"},{"location":"Manual/assets/powerline/","page":"Power Line","title":"Power Line","text":"1 Edge component:\n1 Electricity Edge, representing the flow of electricity between two nodes.","category":"page"},{"location":"Manual/assets/powerline/#Attributes","page":"Power Line","title":"Attributes","text":"","category":"section"},{"location":"Manual/assets/powerline/","page":"Power Line","title":"Power Line","text":"The structure of the input file for a power line asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"Manual/assets/powerline/","page":"Power Line","title":"Power Line","text":"{\n    \"edges\":{\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/powerline/#Edges","page":"Power Line","title":"Edges","text":"","category":"section"},{"location":"Manual/assets/powerline/","page":"Power Line","title":"Power Line","text":"The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"Manual/assets/powerline/","page":"Power Line","title":"Power Line","text":"Attribute Type Values Default Description\ntype String Electricity Required Commodity flowing through the edge.\nstart_vertex String Any electricity node id present in the system Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any electricity node id present in the system Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges CapacityConstraint List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ndistance Float64 Float64 0.0 Distance between the start and end vertex of the edge.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"Manual/assets/powerline/","page":"Power Line","title":"Power Line","text":"tip: Default constraints\nThe default constraint for power lines is the Capacity constraint. ","category":"page"},{"location":"Manual/assets/powerline/#Example","page":"Power Line","title":"Example","text":"","category":"section"},{"location":"Manual/assets/powerline/","page":"Power Line","title":"Power Line","text":"The following is an example of the input file for a power line asset that creates two power lines, one connecting the SE and MIDAT regions, and one connecting the MIDAT and NE regions.","category":"page"},{"location":"Manual/assets/powerline/","page":"Power Line","title":"Power Line","text":"{\n    \"line\": [\n        {\n            \"type\": \"PowerLine\",\n            \"global_data\": {\n                \"edges\": {\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"has_capacity\": true,\n                        \"unidirectional\": false,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"integer_decisions\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"MaxCapacityConstraint\": true\n                        }\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_to_MIDAT\",\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\",\n                            \"end_vertex\": \"elec_MIDAT\",\n                            \"distance\": 491.4512001,\n                            \"existing_capacity\": 5552,\n                            \"max_capacity\": 33312,\n                            \"investment_cost\": 35910,\n                            \"loss_fraction\": 0.04914512\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_to_NE\",\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\",\n                            \"end_vertex\": \"elec_NE\",\n                            \"distance\": 473.6625536,\n                            \"existing_capacity\": 1915,\n                            \"max_capacity\": 11490,\n                            \"investment_cost\": 55639,\n                            \"loss_fraction\": 0.047366255\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/powerline/","page":"Power Line","title":"Power Line","text":"","category":"page"},{"location":"Guides/User Guide/user_multiperiod/","page":"Using Multi-Period Models","title":"Using Multi-Period Models","text":"","category":"page"},{"location":"Guides/Developer Guide/dev_macro_repo_guide/#Finding-your-way-around-the-Macro-repo","page":"Finding your way around the Macro repo","title":"Finding your way around the Macro repo","text":"","category":"section"},{"location":"Guides/Developer Guide/dev_macro_repo_guide/","page":"Finding your way around the Macro repo","title":"Finding your way around the Macro repo","text":"","category":"page"},{"location":"Manual/assets/hydrogenline/#Hydrogen-Line","page":"Hydrogen Line","title":"Hydrogen Line","text":"","category":"section"},{"location":"Manual/assets/hydrogenline/#Graph-structure","page":"Hydrogen Line","title":"Graph structure","text":"","category":"section"},{"location":"Manual/assets/hydrogenline/","page":"Hydrogen Line","title":"Hydrogen Line","text":"A hydrogen line is represented in Macro using the following graph structure:","category":"page"},{"location":"Manual/assets/hydrogenline/","page":"Hydrogen Line","title":"Hydrogen Line","text":"<img width=\"400\" src=\"../../images/h2line.png\" />","category":"page"},{"location":"Manual/assets/hydrogenline/","page":"Hydrogen Line","title":"Hydrogen Line","text":"A hydrogen line asset is very simple and is made of:","category":"page"},{"location":"Manual/assets/hydrogenline/","page":"Hydrogen Line","title":"Hydrogen Line","text":"1 Edge component:\n1 Hydrogen Edge, representing the flow of hydrogen between two nodes.","category":"page"},{"location":"Manual/assets/hydrogenline/#Attributes","page":"Hydrogen Line","title":"Attributes","text":"","category":"section"},{"location":"Manual/assets/hydrogenline/","page":"Hydrogen Line","title":"Hydrogen Line","text":"The structure of the input file for a hydrogen line asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"Manual/assets/hydrogenline/","page":"Hydrogen Line","title":"Hydrogen Line","text":"{\n    \"edges\":{\n        \"h2_edge\": {\n            // ... h2_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/hydrogenline/#Edge","page":"Hydrogen Line","title":"Edge","text":"","category":"section"},{"location":"Manual/assets/hydrogenline/","page":"Hydrogen Line","title":"Hydrogen Line","text":"The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"Manual/assets/hydrogenline/","page":"Hydrogen Line","title":"Hydrogen Line","text":"Attribute Type Values Default Description\ntype String Hydrogen Required Commodity flowing through the edge.\nstart_vertex String Any hydrogen node id present in the system Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"h2_node_1\".\nend_vertex String Any hydrogen node id present in the system Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"h2_node_2\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges CapacityConstraint List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\ndistance Float64 Float64 0.0 Distance between the start and end vertex of the edge.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"Manual/assets/hydrogenline/","page":"Hydrogen Line","title":"Hydrogen Line","text":"tip: Default constraints\nThe default constraints for the hydrogen line asset are the following:Capacity constraint","category":"page"},{"location":"Manual/assets/hydrogenline/#Example","page":"Hydrogen Line","title":"Example","text":"","category":"section"},{"location":"Manual/assets/hydrogenline/","page":"Hydrogen Line","title":"Hydrogen Line","text":"The following is an example of the input file for a hydrogen line asset that creates two hydrogen lines, one connecting the SE and MIDAT regions, and one connecting the NE and SE regions.","category":"page"},{"location":"Manual/assets/hydrogenline/","page":"Hydrogen Line","title":"Hydrogen Line","text":"{\n    \"h2transport\": [\n        {\n            \"type\": \"HydrogenLine\",\n            \"global_data\": {\n                \"edges\": {\n                    \"h2_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": false,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"has_capacity\": true,\n                        \"integer_decisions\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true\n                        }\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"h2_SE_to_MIDAT\",\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"start_vertex\": \"h2_SE\",\n                            \"end_vertex\": \"h2_MIDAT\",\n                            \"loss_fraction\": 0.067724471,\n                            \"distance\": 491.4512001,\n                            \"capacity_size\": 787.6,\n                            \"investment_cost\": 82682.23402\n                        }\n                    }\n                },\n                {\n                    \"id\": \"h2_NE_to_SE\",\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"start_vertex\": \"h2_NE\",\n                            \"end_vertex\": \"h2_SE\",\n                            \"loss_fraction\": 0.06553874,\n                            \"distance\": 473.6625536,\n                            \"capacity_size\": 787.6,\n                            \"investment_cost\": 79896.9841\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/hydrogenline/","page":"Hydrogen Line","title":"Hydrogen Line","text":"","category":"page"},{"location":"Manual/assets/thermalpower/#Thermal-Power-Plant-(with-and-without-CCS)","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"","category":"section"},{"location":"Manual/assets/thermalpower/#Graph-structure","page":"Thermal Power Plant (with and without CCS)","title":"Graph structure","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"A thermal power plant (with and without CCS) is represented in Macro using the following graph structure:","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"<img width=\"400\" src=\"../../images/thermalpower.png\" />","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"A thermal power plant (with and without CCS) is made of:","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"1 Transformation component, representing the thermal power plant (with and without CCS).\n4 Edge components:\n1 incoming Fuel Edge, representing the fuel supply. \n1 outgoing Electricity Edge, representing the electricity production. This edge can have unit commitment operations.\n1 outgoing CO2 Edge, representing the CO2 that is emitted.\n1 outgoing CO2Captured Edge, representing the CO2 that is captured (only if CCS is present).","category":"page"},{"location":"Manual/assets/thermalpower/#Attributes","page":"Thermal Power Plant (with and without CCS)","title":"Attributes","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"The structure of the input file for a ThermalPower asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"fuel_edge\": {\n            // ... fuel_edge-specific attributes ...\n        },\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        },\n        \"co2_captured_edge\": {\n            // ... co2_captured_edge-specific attributes, only if CCS is present ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/thermalpower/#Transformation","page":"Thermal Power Plant (with and without CCS)","title":"Transformation","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"The definition of the transformation object can be found here MacroEnergy.Transformation.","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Attribute Type Values Default Description/Units\ntimedata String String Required Time resolution for the time series data linked to the transformation. E.g. \"NaturalGas\".\nconstraints Dict{String,Bool} Any Macro constraint type for vertices BalanceConstraint List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\nfuel_consumption epsilon_fuel_consumption Float64 Float64 1.0 MWh_fuelMWh_elec\nemission_rate epsilon_emission_rate Float64 Float64 0.0 t_CO2MWh_fuel\ncapture_rate epsilon_co2_capture_rate Float64 Float64 0.0 t_CO2MWh_fuel","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"tip: Default constraints\nThe default constraint for the transformation part of the thermal power asset is the following:Balance constraint","category":"page"},{"location":"Manual/assets/thermalpower/#Flow-equations","page":"Thermal Power Plant (with and without CCS)","title":"Flow equations","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"note: ThermalPower\nNote: Fuel is the type of the fuel being converted.beginaligned\nphi_fuel = phi_elec cdot epsilon_fuel_consumption \nphi_co2 = phi_fuel cdot epsilon_emission_rate \nphi_co2_captured = phi_fuel cdot epsilon_co2_capture_rate quad text(if CCS) \nendaligned","category":"page"},{"location":"Manual/assets/thermalpower/#Edges","page":"Thermal Power Plant (with and without CCS)","title":"Edges","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"warning: Asset expansion\nAs a modeling decision, only the Electricity and Fuel edges are allowed to expand. Therefore, both the has_capacity and constraints attributes can only be set for those edges. For all the other edges, these attributes are pre-set to false and to an empty list respectively to ensure the correct modeling of the asset. ","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"warning: Directionality\nThe unidirectional attribute is set to true for all the edges.","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"note: Unit commitment and default constraints\nThe Electricity edge can have unit commitment operations. To enable it, the user needs to set the uc attribute to true. The default constraints for unit commitment case are the following:Capacity constraint\nRamping limits constraint\nMinimum up and down time constraintIn case of no unit commitment, the uc attribute is set to false and the default constraints are the following:Capacity constraint","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"All the edges are represented by the same set of attributes. The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Attribute Type Values Default Description\ntype String Any Macro commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges See note above List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"assets/availability.csv\", \"header\": \"MIDAT_natural_gas_fired_combined_cycle_1\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge (only available for the Hydrogen and Fuel edges).\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nmin_down_time Int64 Int64 0 Minimum amount of time the edge has to remain in the shutdown state before starting up again. Note: add the MinDownTimeConstraint to the constraints dictionary to activate this constraint.\nmin_up_time Int64 Int64 0 Minimum amount of time the edge has to remain in the committed state. Note: add the MinUpTimeConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nstartup_cost Float64 Float64 0.0 Cost per MW of capacity to start a generator (USD/MW per start).\nstartup_fuel Float64 Float64 0.0 Startup fuel use per MW of capacity (MWh/MW per start).\nuc Bool Bool false Whether the edge has unit commitment operations.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"Manual/assets/thermalpower/#Example","page":"Thermal Power Plant (with and without CCS)","title":"Example","text":"","category":"section"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"The following is an example of the input file for a ThermalPowerCCS asset that creates three ThermalPowerCCS assets, one in each of the SE, MIDAT and NE regions.","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"{\n    \"NaturalGasPowerCCS\": [\n        {\n            \"type\": \"ThermalPowerCCS\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"NaturalGas\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"uc\": true,\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": true,\n                        \"integer_decisions\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true,\n                            \"MinFlowConstraint\": true,\n                            \"MinUpTimeConstraint\": true,\n                            \"MinDownTimeConstraint\": true\n                        }\n                    },\n                    \"fuel_edge\": {\n                        \"type\": \"NaturalGas\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"co2_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_sink\"\n                    },\n                    \"co2_captured_edge\": {\n                        \"type\": \"CO2Captured\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_captured_sink\"\n                    }\n                },\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_naturalgas_ccccsavgcf_conservative_0\",\n                    \"transforms\": {\n                        \"fuel_consumption\": 2.09809579,\n                        \"emission_rate\": 0.018104824,\n                        \"capture_rate\": 0.162943412\n                    },\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"investment_cost\": 150408.6558,\n                            \"existing_capacity\": 0.0,\n                            \"fixed_om_cost\": 65100,\n                            \"variable_om_cost\": 5.73,\n                            \"capacity_size\": 377,\n                            \"startup_cost\": 97,\n                            \"startup_fuel\": 0.058614214,\n                            \"min_up_time\": 4,\n                            \"min_down_time\": 4,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.5\n                        },\n                        \"fuel_edge\": {\n                            \"start_vertex\": \"natgas_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_naturalgas_ccccsavgcf_conservative_0\",\n                    \"transforms\": {\n                        \"fuel_consumption\": 2.09809579,\n                        \"emission_rate\": 0.018104824,\n                        \"capture_rate\": 0.162943412\n                    },\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_MIDAT\",\n                            \"investment_cost\": 158946.1077,\n                            \"existing_capacity\": 0.0,\n                            \"fixed_om_cost\": 65100,\n                            \"variable_om_cost\": 5.73,\n                            \"capacity_size\": 377,\n                            \"startup_cost\": 97,\n                            \"startup_fuel\": 0.058614214,\n                            \"min_up_time\": 4,\n                            \"min_down_time\": 4,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.5\n                        },\n                        \"fuel_edge\": {\n                            \"start_vertex\": \"natgas_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_naturalgas_ccccsavgcf_conservative_0\",\n                    \"transforms\": {\n                        \"fuel_consumption\": 2.09809579,\n                        \"emission_rate\": 0.018104824,\n                        \"capture_rate\": 0.162943412\n                    },\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_NE\",\n                            \"investment_cost\": 173266.9946,\n                            \"existing_capacity\": 0.0,\n                            \"fixed_om_cost\": 65100,\n                            \"variable_om_cost\": 5.73,\n                            \"capacity_size\": 377,\n                            \"startup_cost\": 97,\n                            \"startup_fuel\": 0.058614214,\n                            \"min_up_time\": 4,\n                            \"min_down_time\": 4,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.5\n                        },\n                        \"fuel_edge\": {\n                            \"start_vertex\": \"natgas_NE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/thermalpower/","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"","category":"page"},{"location":"Manual/assets/beccshydrogen/#BECCS-Hydrogen","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/#Graph-structure","page":"BECCS Hydrogen","title":"Graph structure","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Bioenergy with carbon capture and storage (BECCS) that produces hydrogen is represented in Macro using the following graph structure:","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"<img width=\"400\" src=\"../../images/beccsh2.png\" />","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"A BECCS hydrogen asset is made of:","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"1 Transformation component, representing the BECCS process.\n6 Edge components:\n1 incoming Biomass Edge, representing the biomass supply.\n1 incoming CO2 Edge, representing the CO2 that is absorbed by the biomass.\n1 incoming Electricity Edge, representing the electricity consumption.\n1 outgoing Hydrogen Edge, representing the hydrogen production.\n1 outgoing CO2Captured Edge, representing the CO2 that is captured.\n1 outgoing CO2 Edge, representing the CO2 that is emitted.","category":"page"},{"location":"Manual/assets/beccshydrogen/#Attributes","page":"BECCS Hydrogen","title":"Attributes","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"The structure of the input file for a BECCS hydrogen asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"biomass_edge\": {\n            // ... biomass_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        },\n        \"h2_edge\": {\n            // ... h2_edge-specific attributes ...\n        },\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"co2_emission_edge\": {\n            // ... co2_emission_edge-specific attributes ...\n        },\n        \"co2_captured_edge\": {\n            // ... co2_captured_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"where the possible attributes that the user can set are reported in the following tables. ","category":"page"},{"location":"Manual/assets/beccshydrogen/#Transformation","page":"BECCS Hydrogen","title":"Transformation","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"The definition of the transformation object can be found here MacroEnergy.Transformation.","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Attribute Type Values Default Description/Units\ntimedata String Any Macro commodity type Required Time resolution for the time series data linked to the transformation. E.g. \"Biomass\".\nconstraints Dict{String,Bool} Any Macro constraint type for vertices BalanceConstraint List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\ncapture_rate epsilon_co2_capture_rate Float64 Float64 1.0 t_CO2t_Biomass\nco2_content epsilon_co2 Float64 Float64 0.0 t_CO2t_Biomass\nelectricity_consumption epsilon_elec_consumption Float64 Float64 0.0 MWh_elect_Biomass\nemission_rate epsilon_emission_rate Float64 Float64 1.0 t_CO2t_Biomass\nhydrogen_production epsilon_h2_prod Float64 Float64 0.0 t_H2t_Biomass","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"tip: Default constraints\nThe default constraint for the transformation part of the BECCS hydrogen asset is the following:Balance constraint","category":"page"},{"location":"Manual/assets/beccshydrogen/#Flow-equations","page":"BECCS Hydrogen","title":"Flow equations","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"note: BECCSHydrogen\nbeginaligned\nphi_h2 = phi_biomass cdot epsilon_h2_prod \nphi_elec = -phi_biomass cdot epsilon_elec_consumption \nphi_co2 = -phi_biomass cdot epsilon_co2 \nphi_co2 = phi_biomass cdot epsilon_emission_rate \nphi_co2_captured = phi_biomass cdot epsilon_co2_capture_rate \nendaligned","category":"page"},{"location":"Manual/assets/beccshydrogen/#Edges","page":"BECCS Hydrogen","title":"Edges","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"warning: Asset expansion\nAs a modeling decision, only the Biomass edge is allowed to expand. Consequently, the has_capacity and constraints attributes can only be set for the Biomass edge. For all other edges, these attributes are pre-set to false and an empty list, respectively, to ensure proper modeling of the asset.","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"warning: Directionality\nThe unidirectional attribute is only available for the Biomass edge. For the other edges, this attribute is pre-set to true to ensure the correct modeling of the asset. ","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"All the edges are represented by the same set of attributes. The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Attribute Type Values Default Description\ntype String Any Macro commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges Check box below List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"assets/availability.csv\", \"header\": \"SE_BECCS_H2_Herb\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge. (only available for the Biomass edge)\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool false Whether the edge is unidirectional. (only available for the Biomass edge)\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"tip: Default constraints\nThe only default constraint for the edges of the BECCS hydrogen asset is the Capacity constraint applied to the Biomass edge. ","category":"page"},{"location":"Manual/assets/beccshydrogen/#Example","page":"BECCS Hydrogen","title":"Example","text":"","category":"section"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"The following is an example of the input file for a BECCS hydrogen asset that creates six BECCS hydrogen assets, two in each of the SE, MIDAT and NE regions.","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"{\n    \"BECCS_Hydrogen\": [\n        {\n            \"type\": \"BECCSHydrogen\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"Biomass\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"h2_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"biomass_edge\": {\n                        \"type\": \"Biomass\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": true,\n                        \"integer_decisions\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"MinFlowConstraint\": true\n                        }\n                    },\n                    \"co2_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"start_vertex\": \"co2_sink\"\n                    },\n                    \"co2_emission_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_sink\"\n                    },\n                    \"co2_captured_edge\": {\n                        \"type\": \"CO2Captured\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_captured_sink\"\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_BECCS_H2_Herb\",\n                    \"transforms\": {\n                        \"hydrogen_production\": 2.614520322,\n                        \"electricity_consumption\": 0.083426966,\n                        \"capture_rate\": 1.50022,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.26\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"bioherb_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_BECCS_H2_Herb\"\n                                }\n                            },\n                            \"investment_cost\": 532452.9904,\n                            \"fixed_om_cost\": 60067.41573,\n                            \"variable_om_cost\": 38.44314607,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_BECCS_H2_Herb\",\n                    \"transforms\": {\n                        \"hydrogen_production\": 2.614520322,\n                        \"electricity_consumption\": 0.083426966,\n                        \"capture_rate\": 1.50022,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.26\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"bioherb_MIDAT\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_BECCS_H2_Herb\"\n                                }\n                            },\n                            \"investment_cost\": 532452.9904,\n                            \"fixed_om_cost\": 60067.41573,\n                            \"variable_om_cost\": 38.44314607,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_BECCS_H2_Herb\",\n                    \"transforms\": {\n                        \"hydrogen_production\": 2.614520322,\n                        \"electricity_consumption\": 0.083426966,\n                        \"capture_rate\": 1.50022,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.26\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"bioherb_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_BECCS_H2_Herb\"\n                                }\n                            },\n                            \"investment_cost\": 532452.9904,\n                            \"fixed_om_cost\": 60067.41573,\n                            \"variable_om_cost\": 38.44314607,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_NE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_NE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"SE_BECCS_H2_Wood\",\n                    \"transforms\": {\n                        \"hydrogen_production\": 2.614520322,\n                        \"electricity_consumption\": 0.083426966,\n                        \"capture_rate\": 1.50022,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.26\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"biowood_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_BECCS_H2_Wood\"\n                                }\n                            },\n                            \"investment_cost\": 532452.9904,\n                            \"fixed_om_cost\": 60067.41573,\n                            \"variable_om_cost\": 38.44314607,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_BECCS_H2_Wood\",\n                    \"transforms\": {\n                        \"hydrogen_production\": 2.614520322,\n                        \"electricity_consumption\": 0.083426966,\n                        \"capture_rate\": 1.50022,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.26\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"biowood_MIDAT\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_BECCS_H2_Wood\"\n                                }\n                            },\n                            \"investment_cost\": 532452.9904,\n                            \"fixed_om_cost\": 60067.41573,\n                            \"variable_om_cost\": 38.44314607,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_BECCS_H2_Wood\",\n                    \"transforms\": {\n                        \"hydrogen_production\": 2.614520322,\n                        \"electricity_consumption\": 0.083426966,\n                        \"capture_rate\": 1.50022,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.26\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"biowood_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_BECCS_H2_Wood\"\n                                }\n                            },\n                            \"investment_cost\": 532452.9904,\n                            \"fixed_om_cost\": 60067.41573,\n                            \"variable_om_cost\": 38.44314607,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_NE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_NE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Manual/assets/beccshydrogen/","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"","category":"page"},{"location":"Guides/guides_introduction/#Guides","page":"Introduction","title":"Guides","text":"","category":"section"},{"location":"Guides/guides_introduction/","page":"Introduction","title":"Introduction","text":"The guides in this section are short instructions for how to complete specific tasks with Macro. They are intended as a reference for your day-to-day work. In them, you will find descriptions of how to use Macro's features and components but detailed descriptions of each are left to the Manual.","category":"page"},{"location":"Guides/guides_introduction/","page":"Introduction","title":"Introduction","text":"We have organized the guides into three sections, one for each of our user profiles:","category":"page"},{"location":"Guides/guides_introduction/","page":"Introduction","title":"Introduction","text":"Users: Want to create and optimize a real-world system using Macro. They will be able to do this with little or no coding, and not have knowledge of Macro's components or internal structure.\nModelers: Want to add new Assets, Commodities or public policies to Macro. They will need to be able to code in Julia and understand some of Macro's components, but not have knowledge of the internal structure or underlying packages.\nDevelopers: Want to change or add new features, model formulations or Constraints to Macro. They will require detailed knowledge of Macro's components, internal structure, and underlying packages.","category":"page"},{"location":"Guides/guides_introduction/","page":"Introduction","title":"Introduction","text":"You can use the navigation panel to the left of your screen to find the task you are looking to accomplish.","category":"page"},{"location":"Guides/guides_introduction/","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"Manual/Edges/#Edges","page":"Edges","title":"Edges","text":"","category":"section"},{"location":"Manual/Edges/","page":"Edges","title":"Edges","text":"","category":"page"},{"location":"Guides/User Guide/user_build_system/#Creating-a-new-System","page":"Create a System","title":"Creating a new System","text":"","category":"section"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"Creating a new System requires several steps:","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"Create a new System\nAdd Commodities and sub-Commodities\nAdd Locations and Nodes\nAdd Assets\nAdd policy Constraints\nAdd asset Constraints","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"This guide will walk you through the first step and then link to other guides for the subsequent steps.","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"In these guides, we will discuss building a \"System\", not a \"Model\". As a reminder, in Macro the term \"System\" refers to the real-world system being modelled and optimized while \"Model\" refers to the mathematical problem which must be solved to optimize the system. Correspondingly, the System object in Macro represents the set of real-world Assets and Locations, while a Model object is the optimization problem handed to the mathematical solver.","category":"page"},{"location":"Guides/User Guide/user_build_system/#Creating-a-System","page":"Create a System","title":"Creating a System","text":"","category":"section"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"You can create a new System using Macro's template functions. The following function call will create a new System in the ExampleSystems/template_example directory, if no such directory exists:","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"julia> system = template_system(\"ExampleSystems/template_example\")","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"This function return a System object which can be used to conveniently add more objects, such as Nodes, Assets, and Locations to your System.","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"If the path provided is already a directory, then the new System will be created at: ExampleSystems/template_example/new_system. You can specify a different name for the System folder using a second argument:","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"julia> system = template_system(\"ExampleSystems/template_example\", \"preferred_system_name\")","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"This will create a new System at ExampleSystems/template_example/preferred_system_name.","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"The template System has the following folder structure:","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"ExampleSystems/template_example\n├─ system_data.json\n├─ run.jl\n├─ assets\n├─ settings\n|  └─ macro_settings.json\n└─ system\n   ├─ commodities.json\n   ├─ locations.json\n   ├─ nodes.json\n   └─ time_data.json","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"system_data.json tells Macro where to find the data necessary to build the System and Model. The default version matches the template System folder structure. More information about the system_data.json can be found here.","category":"page"},{"location":"Guides/User Guide/user_build_system/#Next-steps-to-creating-a-System","page":"Create a System","title":"Next steps to creating a System","text":"","category":"section"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"You now need to populate you System with Locations, Assets, Policies, and other features. These guides will walk you through how to do so:","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"Adding a Commodity to a System\nAdding a Node to a System\nAdding a Location to a System\nAdding an Asset to a System\nAdding Policy Constraints to a System\nAdding Asset Constraints to a System","category":"page"},{"location":"Guides/User Guide/user_build_system/","page":"Create a System","title":"Create a System","text":"","category":"page"},{"location":"Manual/Storage/#Storage","page":"Storage","title":"Storage","text":"","category":"section"},{"location":"Manual/Storage/","page":"Storage","title":"Storage","text":"","category":"page"},{"location":"how_to_contribute/#How-to-contribute-guide","page":"How to contribute","title":"How to contribute guide","text":"","category":"section"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"MacroEnergy.jl is an open-source software project and contributions are welcome! This guide is a quickstart guide to help you contribute to the project.","category":"page"},{"location":"how_to_contribute/#Opening-an-issue","page":"How to contribute","title":"Opening an issue","text":"","category":"section"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"The most straightforward way to contribute to MacroEnergy.jl is to provide feedback directly on the issues page. By clicking on the New issue button, you will see four types of issues you can open:","category":"page"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"Bug Report - for reporting bugs and errors\nQuestion - for asking questions: \"How do I do ...?\"\nFeature Request - for requesting new features\nOther - for other types of contributions","category":"page"},{"location":"how_to_contribute/#Opening-a-PR","page":"How to contribute","title":"Opening a PR","text":"","category":"section"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"The second way to contribute to MacroEnergy.jl is to open a pull request. This allows you to implement changes and new features and propose them to the repository. Below are some guidelines for opening a PR (for reference, check the official GitHub guide).","category":"page"},{"location":"how_to_contribute/#Before-opening-a-PR","page":"How to contribute","title":"Before opening a PR","text":"","category":"section"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"We recommend opening an issue before opening a PR. This will allow us to discuss the changes you want to make and provide feedback.\nFork the repository (if you don't have already done so):\nClick the \"Fork\" button in the top-right corner of the MacroEnergy.jl repository.\nThis creates your own copy of the repository where you can make changes.\nClone your fork:\n# Replace YOUR-USERNAME with your GitHub username\ngit clone https://github.com/YOUR-USERNAME/MacroEnergy.jl.git\ncd MacroEnergy.jl\nAdd the original repository as upstream:\n# This allows you to keep your fork in sync with the main repository\ngit remote add upstream https://github.com/macroenergy/MacroEnergy.jl.git\n# Verify the remotes are set up correctly\ngit remote -v\nCreate a new branch for your changes:\n# Get the latest changes from the main repository\ngit checkout main\ngit pull upstream main\n\n# Create and switch to a new branch\n# Replace your-branch-name with a descriptive name\ngit checkout -b your-branch-name","category":"page"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"note: Branch name\nThe recommended name for the branch is <user_id>/<short_description>, where <user_id> can be a short version of your name or a nickname, and <short_description> is a short description of the changes you are making.","category":"page"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"Make your changes and commit them (this step can be done multiple times, each for a different change):\n# Stage your changes\ngit add .\n\n# Commit with a descriptive message\ngit commit -m \"Description of your changes\"\n\n# If you need to make more changes, repeat the process\nPush to your fork:\n# Push your branch to your fork\ngit push origin your-branch-name\n\n# If this is the first time pushing this branch, use:\ngit push -u origin your-branch-name","category":"page"},{"location":"how_to_contribute/#How-to-open-a-PR-(once-the-changes-are-in-a-good-state)","page":"How to contribute","title":"How to open a PR (once the changes are in a good state)","text":"","category":"section"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"Create a Pull Request:\nGo to your fork on GitHub\nClick \"New Pull Request\"\nSelect your branch\nSelect the base repository as macroenergy/MacroEnergy.jl and the base branch as main (or the correct target branch)\nFill out the PR template\nSubmit the PR\nKeep your fork up to date (every time a PR is merged into the upstream repository):\n# Fetch the latest changes from the main repository\ngit fetch upstream\n\n# Switch to main branch\ngit checkout main\n\n# Merge the changes from upstream\ngit merge upstream/main\n\n# Push the updated main branch to your fork\ngit push origin main","category":"page"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"Alternatively, use the Sync fork button in the GitHub website.","category":"page"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"note: Updating a PR\nOnce a PR is created, you can still make changes to your code. You can do this by committing new changes to your branch and pushing them to your fork. The PR will automatically update to reflect the new changes.","category":"page"},{"location":"how_to_contribute/#PR-review-process","page":"How to contribute","title":"PR review process","text":"","category":"section"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"Your PR will be reviewed by maintainers who will provide feedback on the PR.\nIf any changes are requested, you can push a new commit to your branch, which will update the PR.\nIf any conflicts arise, you can resolve them by pulling the latest changes from the upstream repository and merging them into your branch (you can use the conflict resolution tool provided by GitHub).\nOnce the PR is approved, it will be merged into the upstream repository.\nYou can delete the branch from your fork to clean up.","category":"page"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"warning: Recommendations for a good PR\nMake sure to have reviewed your code before opening a PR.\nMake sure to have added comments to your code, in particular in hard-to-understand places.\nMake sure to have updated the docs if you added new functions or changed existing ones, to help other users use your code.\nMake sure to have tested your code, and to provide an example case that the reviewer can use to test the code + how to interpret the results (set of json + csv + julia files).\nTry to write a good PR description, including the motivation for the changes you made.\nTry to make small PRs, ideally each one focusing on a single change.\nHelp review your PR, for instance by highlighting places where you would particularly like reviewer feedback.","category":"page"},{"location":"how_to_contribute/#Some-useful-links","page":"How to contribute","title":"Some useful links","text":"","category":"section"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"Creating an issue (GitHub)\nCreating a pull request (GitHub)\nCreating a pull request from a fork (GitHub)\nGit guide\nColPrac: Contributor's Guide on Collaborative Practices for Community Packages\nJulia Style Guide","category":"page"},{"location":"how_to_contribute/#Contributing-to-Macro","page":"How to contribute","title":"Contributing to Macro","text":"","category":"section"},{"location":"how_to_contribute/#Contributing-to-the-documentation","page":"How to contribute","title":"Contributing to the documentation","text":"","category":"section"},{"location":"how_to_contribute/#Adding-a-tutorial","page":"How to contribute","title":"Adding a tutorial","text":"","category":"section"},{"location":"how_to_contribute/","page":"How to contribute","title":"How to contribute","text":"","category":"page"}]
}
